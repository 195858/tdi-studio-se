<%@ jet 
	package="org.talend.designer.codegen.translators" 
	imports="
		org.talend.core.model.process.IProcess
		org.talend.core.model.process.INode 
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.CorePlugin
		
		java.util.Vector
		java.util.List
	" 
	class="Footer" 
%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    Vector v = (Vector) codeGenArgument.getArgument();
    IProcess process = (IProcess)v.get(0);
    List<INode> rootNodes = (List<INode>)v.get(1);

	boolean stats = codeGenArgument.isStatistics();
	boolean trace = codeGenArgument.isTrace();
	boolean isRunInMultiThread = codeGenArgument.getIsRunInMultiThread();
%>
    public static boolean watch = false;
    public static int portStats = 3334;
    public static int portTraces = 4334;
    public static String clientHost;
    public static String defaultClientHost = "localhost";
    public static String contextStr = "<%=codeGenArgument.getContextName() %>";
    public static String pid = "0";
    public static String rootPid = null;
    public static String fatherPid = null;
<%
	if(isRunInMultiThread){
%>
	private static SyncInt runningThreadCount =new SyncInt();
	
	private static class SyncInt
	{
		private int count = 0;
	    public synchronized void add(int i)
	    {
	        count +=i;
	    }
	    
	    public synchronized int getCount()
	    {
	        return count;
	    }
	}
<%
	}
%>
  
    private static java.util.Properties context_param = new java.util.Properties();
    
    public static String status= "";
    
    public static void main(String[] args){
        int exitCode = runJob(args);
        System.exit(exitCode);
    }
    
    public static int runJob(String[] args) {
    	for (String arg : args) {
    		evalParam(arg);
    	}
    	
    	if(clientHost == null) {
    		clientHost = defaultClientHost;
    	}
    	
    	
    	pid = TalendString.getAsciiRandomString(6);
    	if (rootPid==null) {
    		rootPid = pid;
    	}
    	if (fatherPid==null) {
    		fatherPid = pid;
    	}
    	
    	try {
    		java.io.InputStream inContext = <%=process.getName() %>.class.getClassLoader().getResourceAsStream("<%=codeGenArgument.getCurrentProjectName().toLowerCase() %>/<%=codeGenArgument.getJobName().toLowerCase() %>/contexts/Default.properties");    		
    		if (inContext!=null) {
	    		defaultProps.load(inContext);
    			inContext.close();
	    		context = new java.util.Properties(defaultProps);
	    	}
    		
    		if (contextStr.compareTo("Default")!=0) {
    			inContext = <%=process.getName() %>.class.getClassLoader().getResourceAsStream("<%=codeGenArgument.getCurrentProjectName().toLowerCase() %>/<%=codeGenArgument.getJobName().toLowerCase() %>/contexts/"+contextStr+".properties");
    			if (inContext!=null) {
					context.load(inContext);
					inContext.close();
				}
			}
			
			if(!context_param.isEmpty()) {						
			    context.putAll(context_param);		
			}
			
    	} catch (java.io.IOException ie) {
    		System.err.println("Could not load context "+contextStr);
    		ie.printStackTrace();
    	}

<%
		if (stats) {
%>
	try {
		runStat.startThreadStat(clientHost, portStats);
	} catch (java.io.IOException ioException) {
		ioException.printStackTrace();
	}
<%
		}
%>

<%
		if (trace) {
%>
		try {
		runTrace.startThreadTrace(clientHost, portTraces);
	} catch (java.io.IOException ioException) {
		ioException.printStackTrace();
	}
<%
		}
%>

	long end = 0;
	long start = java.util.Calendar.getInstance().getTimeInMillis();
<%
	if(isRunInMultiThread 
		&& process.getNodesOfType("tStatCatcher").size() + rootNodes.size()>1){
%>
	final <%=process.getName() %> <%=process.getName() %>Class = new <%=process.getName() %>(); 
<%
		for (INode statCatcherNode : process.getNodesOfType("tStatCatcher")) {
%>
		<%=process.getName() %>Class.<%=statCatcherNode.getUniqueName() %>.addMessage("begin");
		runningThreadCount.add(1);
		new Thread(){
	    	public void run()
	   		{
	        	try {
	            	<%=process.getName() %>Class.<%=statCatcherNode.getUniqueName() %>Process();
	            } catch (TalendException e) {
	            	status="failure";
	            	e.printStackTrace();
	         	}finally
	         	{
	            	runningThreadCount.add(-1);
	        	}
	    	}
		}.start();
		
<%
    	}
		for (INode rootNode : rootNodes) {
%>
		runningThreadCount.add(1);
   		new Thread(){
	    	public void run()
	   		{
	        	try {
	            	<%=process.getName() %>Class.<%=rootNode.getUniqueName() %>Process();
	            } catch (TalendException e) {
	            	status="failure";
	            	e.printStackTrace();
	         	}finally
	         	{
	            	runningThreadCount.add(-1);
	        	}
	    	}
		}.start();
		
<%
		}
%>
	while(<%=process.getName() %>Class.runningThreadCount.getCount()>0)
    {
        try {
            Thread.sleep(10);
        } catch (Exception e) {
            e.printStackTrace();
        }            
    }
<%
	}else{ //isRunInMultiThread
%>
	<%=process.getName() %> <%=process.getName() %>Class = new <%=process.getName() %>();
	try {
<%
   		for (INode statCatcherNode : process.getNodesOfType("tStatCatcher")) {
%>
		<%=process.getName() %>Class.<%=statCatcherNode.getUniqueName() %>.addMessage("begin");
		<%=process.getName() %>Class.<%=statCatcherNode.getUniqueName() %>Process();
<%
    	}
		for (INode rootNode : rootNodes) {
%>
		<%=process.getName() %>Class.<%=rootNode.getUniqueName() %>Process();
<%
		}
%>
	} catch(TalendException e) {
		status="failure";
		e.printStackTrace();
	} finally {
<%
	}//end if(isRunInMultiThread)
%>	
		end = java.util.Calendar.getInstance().getTimeInMillis();
		if (watch) {
    		System.out.println((end-start)+" milliseconds");
	    }
<%
	for (INode statCatcherNode : process.getNodesOfType("tStatCatcher")) {
%>
		<%=process.getName() %>Class.<%=statCatcherNode.getUniqueName() %>.addMessage(status==""?"end":status, (end-start));
		try {
			<%=process.getName() %>Class.<%=statCatcherNode.getUniqueName() %>Process();
		} catch (Exception e) {
			e.printStackTrace();
		}
<%
    }
    if(!(isRunInMultiThread 
    	&& process.getNodesOfType("tStatCatcher").size() + rootNodes.size()>1)){
%>
        
	}
<%
	}
	
    if (stats) {
%>
	runStat.stopThreadStat();
<%
	}
	if (trace) {
%>
	runTrace.stopThreadTrace();
<%
	}
%>
    if(errorCode == null) {
         return status != null && status.equals("failure") ? 1 : 0;	
    } else {   
         return errorCode.intValue();
    }
  }
	
	public static void evalParam(String arg) {	   
		if (arg.startsWith("--watch")) {
    		watch = true;
    	} else if (arg.startsWith("--stat_port=")) {
    		portStats = Integer.parseInt(arg.substring(12));
    	} else if (arg.startsWith("--trace_port=")) {
    		portTraces = Integer.parseInt(arg.substring(13));
    	} else if (arg.startsWith("--client_host=")) {
    		clientHost = arg.substring(14);
    	} else if (arg.startsWith("--context=")) {
    		contextStr = arg.substring(10);
    	} else if (arg.startsWith("--father_pid=")) {
    		fatherPid = arg.substring(13);
    	} else if (arg.startsWith("--root_pid=")) {
    		rootPid = arg.substring(11);
    	} else if (arg.startsWith("--context_param")) {   		 
            String keyValue = arg.substring(16);           
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
            }
    	}
    	
	}
}
