<%@ jet 
	package="org.talend.designer.codegen.translators" 
	imports="
		org.talend.core.model.process.IProcess
		org.talend.core.model.process.INode 
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.CorePlugin
        org.talend.core.model.process.EConnectionType
        org.talend.core.model.process.IConnection	
		org.talend.core.model.metadata.IMetadataTable
		org.talend.core.model.metadata.IMetadataColumn
		java.util.Vector
		java.util.List
		java.util.ArrayList
		org.talend.core.model.process.IContextParameter
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
		org.talend.core.model.utils.JavaResourcesHelper
	" 
	class="Footer" 
	skeleton="footer_java.skeleton"	
%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    Vector v = (Vector) codeGenArgument.getArgument();
    IProcess process = (IProcess)v.get(0);
    List<INode> rootNodes = (List<INode>)v.get(1);

	boolean stats = codeGenArgument.isStatistics();
	boolean trace = codeGenArgument.isTrace();
	boolean isRunInMultiThread = codeGenArgument.getIsRunInMultiThread();
	List<IContextParameter> params = new ArrayList<IContextParameter>();
    params=process.getContextManager().getDefaultContext().getContextParameterList();
    String jobFolderName = JavaResourcesHelper.getJobFolderName(process.getLabel(), process.getVersion());
    
    boolean exist_tParallelize = false;
    List<? extends INode> tParallelizeList = process.getNodesOfType("tParallelize");
    if(tParallelizeList != null && tParallelizeList.size() > 0){
    	exist_tParallelize = true;
    }
%>
    public boolean watch = false;
    public int portStats = 3334;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "<%=codeGenArgument.getContextName() %>";
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    
    private ThreadLocal threadLocal = new ThreadLocal();
	{
		java.util.Map threadRunResultMap = new java.util.HashMap();
		threadRunResultMap.put("errorCode", null);
		threadRunResultMap.put("status", "");
		threadLocal.set(threadRunResultMap);
	}    
<%
	if(isRunInMultiThread || exist_tParallelize){
%>  
	private SyncInt runningThreadCount =new SyncInt();
	
	private class SyncInt
	{
		private int count = 0;
	    public synchronized void add(int i)
	    {
	        count +=i;
	    }
	    
	    public synchronized int getCount()
	    {
	        return count;
	    }
	}
<%
	}
%>
  
    private java.util.Properties context_param = new java.util.Properties();
    
    public String status= "";
    
    public static void main(String[] args){
    	final <%=process.getName() %> <%=process.getName() %>Class = new <%=process.getName() %>();
    
        int exitCode = <%=process.getName() %>Class.runJobInTOS(args);
         
        System.exit(exitCode);
    }    
   
 
    public String[][] runJob(String[] args) {  
    
		int exitCode = runJobInTOS(args);
    <%	
        List<INode> tBufferNodes = (List<INode>)process.getNodesOfType("tBufferOutput");
        if(tBufferNodes != null && tBufferNodes.size() > 0) {
    %>  				
		String[][] bufferValue = (String[][])globalBuffer.toArray(new String[globalBuffer.size()][]);		
	<%
		} else {
	%>
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };
	<%
		}
	%>
			
		return bufferValue;
    }
    
    
    public int runJobInTOS(String[] args) {
    
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
    	
    	if(clientHost == null) {
    		clientHost = defaultClientHost;
    	}
    	
    	if(pid == null || "0".equals(pid)) {
	    	pid = TalendString.getAsciiRandomString(6);
	    }

    	if (rootPid==null) {
    		rootPid = pid;
    	}
    	if (fatherPid==null) {    	 	
    		fatherPid = pid;    		
    	}else{
    		isChildJob = true;
    	}
    	
    	try {
    		java.io.InputStream inContext = <%=process.getName()%>.class.getClassLoader().getResourceAsStream("<%=codeGenArgument.getCurrentProjectName().toLowerCase() %>/<%=jobFolderName %>/contexts/Default.properties");    		
    		if (inContext!=null) {
	    		defaultProps.load(inContext);
    			inContext.close();
	    		context = new ContextProperties(defaultProps);
	    	}
    		
    		if (contextStr.compareTo("Default")!=0) {
    			inContext = <%=process.getName() %>.class.getClassLoader().getResourceAsStream("<%=codeGenArgument.getCurrentProjectName().toLowerCase() %>/<%=jobFolderName %>/contexts/"+contextStr+".properties");
    			if (inContext!=null) {
					context.load(inContext);
					inContext.close();
				}
			}
			
			if(!context_param.isEmpty()) {						
			    context.putAll(context_param);		
			}
			<% for (IContextParameter ctxParam :params)
			{
			    String typeToGenerate ="String";
			    if( !(ctxParam.getType().equals("id_File") || ctxParam.getType().equals("id_Directory") ||ctxParam.getType().equals("id_List Of Value")))
			    {
			       typeToGenerate=JavaTypesManager.getTypeToGenerate(ctxParam.getType(),true);
			    }
			    if(typeToGenerate.equals("java.util.Date"))
			    {
			        
			%>
			try{
				String context_<%=ctxParam.getName()%>_value = context.getProperty("<%=ctxParam.getName()%>");
				int context_<%=ctxParam.getName()%>_pos = context_<%=ctxParam.getName()%>_value.indexOf(";");
				String context_<%=ctxParam.getName()%>_pattern =  "yyyy-MM-dd HH:mm:ss";
				if(context_<%=ctxParam.getName()%>_pos > -1){
					context_<%=ctxParam.getName()%>_pattern = context_<%=ctxParam.getName()%>_value.substring(0, context_<%=ctxParam.getName()%>_pos);
					context_<%=ctxParam.getName()%>_value = context_<%=ctxParam.getName()%>_value.substring(context_<%=ctxParam.getName()%>_pos + 1);
				}
				
			    context.<%=ctxParam.getName()%>=(java.util.Date)(new java.text.SimpleDateFormat(context_<%=ctxParam.getName()%>_pattern).parse(context_<%=ctxParam.getName()%>_value));
			   
			}catch(ParseException e)
			{
			    context.<%=ctxParam.getName()%>=null;
			}
			<%
			      
			    }else if(typeToGenerate.equals("Integer"))
			    {
			  %> 
			  try{
			      context.<%=ctxParam.getName()%>=Integer.parseInt(context.getProperty("<%=ctxParam.getName()%>"));
			  }catch(NumberFormatException e){
			      context.<%=ctxParam.getName()%>=null;
			  }
			  <%
			    }else if(typeToGenerate.equals("Object")||typeToGenerate.equals("String")||typeToGenerate.equals("java.lang.String") )
			    {
			    %>
			    context.<%=ctxParam.getName()%>=(<%=typeToGenerate%>) context.getProperty("<%=ctxParam.getName()%>");
			    <%
			    }else if(typeToGenerate.equals("Character")&&ctxParam.getName()!=null)
			    {
			 %>
			 context.<%=ctxParam.getName()%>=new <%=typeToGenerate%> (context.getProperty("<%=ctxParam.getName()%>").charAt(0));
			 <%
			    } else if(typeToGenerate.equals("BigDecimal"))
            {
         %>
         context.<%=ctxParam.getName()%>= new <%=typeToGenerate%>(context.getProperty("<%=ctxParam.getName()%>"));
         <%
            }
			     else
			    {
			 %> 
			 try{
			     context.<%=ctxParam.getName()%>=<%=typeToGenerate%>.parse<%=typeToGenerate%> (context.getProperty("<%=ctxParam.getName()%>"));
			 }catch(NumberFormatException e){
			     context.<%=ctxParam.getName()%>=null;
			  }
			 <%
			    }
			}
			%>
    	} catch (java.io.IOException ie) {
    		System.err.println("Could not load context "+contextStr);
    		ie.printStackTrace();
    	}

<%
		if (stats) {
%>
	try {
		runStat.openSocket(!isChildJob);
		runStat.startThreadStat(clientHost, portStats);
	} catch (java.io.IOException ioException) {
		ioException.printStackTrace();
	}
<%
		}
%>

<%
		if (trace) {
%>
		try {
		runTrace.openSocket(!isChildJob);
		runTrace.startThreadTrace(clientHost, portTraces);
	} catch (java.io.IOException ioException) {
		ioException.printStackTrace();
	}
<%
		}
%>


	long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
	long endUsedMemory = 0;
	long end = 0;
	
	startTime = System.currentTimeMillis();
<%
		//1. send the begin msg
		boolean isFirstLoop = true; 
		for (INode statCatcherNode : process.getNodesOfType("tStatCatcher")) {
%>
		<%=statCatcherNode.getUniqueName() %>.addMessage("begin");					
<%
        	if(isFirstLoop){ // if the normal process have not executed the end_Hash.put(key), have to kill current process , see issue:6523
%>
            Runtime.getRuntime().addShutdownHook(new Thread() {

                public void run() {

                    java.util.Set<String> startKeySet = new java.util.HashSet(start_Hash.keySet());
                    java.util.Set<String> endKeySet = new java.util.HashSet(end_Hash.keySet());

                    boolean removeAll = startKeySet.removeAll(endKeySet);

                    // if the normal process have not executed the end_Hash.put(key), see bug:6523
                    for (String component : startKeySet) {
                        end_Hash.put(component, System.currentTimeMillis());
						<%for (INode statCatcherNodeInner : process.getNodesOfType("tStatCatcher")) {%>                        
                        	<%=statCatcherNodeInner.getUniqueName() %>.addMessage("end", component, end_Hash.get(component) - start_Hash.get(component));
                            try {
                                <%=statCatcherNode.getDesignSubjobStartNode().getUniqueName() %>Process(globalMap);
                            } catch (Exception e) {
                                e.printStackTrace();
                            }                        	
						<%}%>
                    }

                }
            });				
<%        	
				isFirstLoop = false;
        	}
    	}
	
        List<INode> prejobNodes = new ArrayList<INode>();
        
        List<INode> postjobNodes = new ArrayList<INode>();
        
        INode implicit_Context = null;

		for (INode rootNode : rootNodes) {
			String componentName = rootNode.getComponent().getName();
			String uniqueName = rootNode.getUniqueName();
			
            if (componentName.equals("tPrejob")) {
            	prejobNodes.add(rootNode);
                continue;
            }        

            if (componentName.equals("tPostjob")) {
                postjobNodes.add(rootNode);
                continue;
            }            

            if (uniqueName.startsWith("Implicit_Context_")) {        	
                implicit_Context = rootNode;
                continue;
            }
        }
%>

<%
//2. load implicit contextload
 if(implicit_Context != null){
%>
<%=createCallProcess(implicit_Context, process.getName(), false) %>
<% 
 }
%>

<%
//3. run pre-job
 if(!prejobNodes.isEmpty()){
 	for(INode preNode:prejobNodes){
%>
<%=createCallProcess(preNode, process.getName(), false) %>
<% 
	}
 }
%>

    	
<%
		//4. flush the begin msg
		for (INode statCatcherNode : process.getNodesOfType("tStatCatcher")) {
%>
		try {
			<%=statCatcherNode.getDesignSubjobStartNode().getUniqueName() %>Process(globalMap);
		} catch (Exception e) {
			e.printStackTrace();
		}		
<%
    	}	

	//5. all others sub-job (MultiThread mode)
	if(isRunInMultiThread){
		for (INode rootNode : rootNodes) {
			String componentName = rootNode.getComponent().getName();
			String uniqueName = rootNode.getUniqueName();
			
			//filter the special subjob
			if("tPrejob".equals(componentName)) continue;
			if("tPostjob".equals(componentName)) continue;
			if(implicit_Context!=null && implicit_Context.getUniqueName().equals(uniqueName)) continue;
			
            if (!componentName.equals("tLogCatcher") && !componentName.equals("tFlowMeterCatcher") && !componentName.equals("tAssertCatcher") && !componentName.equals("tStatCatcher")) {
%>
		runningThreadCount.add(1);
   		new Thread(){
	    	public void run()
	   		{
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);
	    	    
				<%=createCallProcess(rootNode, process.getName(), true) %>
	        	
                Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                if (localErrorCode != null) {
                    if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                       errorCode = localErrorCode;
                    }
                }else if(!status.equals("failure")){
                        status = localStatus;
                }	
         	    
                runningThreadCount.add(-1);	        	
	    	}
		}.start();
		
<%
			}
		}
%>
	while(runningThreadCount.getCount()>0)
    {
        try {
            Thread.sleep(10);
        } catch (Exception e) {
            e.printStackTrace();
        }            
    }
<%
	}else{ // isRunInMultiThread  //5. all others sub-job (SingleThread  mode)
		for (INode rootNode : rootNodes) {
			String componentName = rootNode.getComponent().getName();
			String uniqueName = rootNode.getUniqueName();
			
			//filter the special subjob
			if("tPrejob".equals(componentName)) continue;
			if("tPostjob".equals(componentName)) continue;
			if(implicit_Context!=null && implicit_Context.getUniqueName().equals(uniqueName)) continue;
						
            if (!componentName.equals("tLogCatcher") && !componentName.equals("tFlowMeterCatcher") && !componentName.equals("tAssertCatcher") && !componentName.equals("tStatCatcher") && !componentName.equals("tAsyncIn")) {
%>
<%=createCallProcess(rootNode, process.getName(), false) %>
<%	  }
	}
}// end if(isRunInMultiThread)
%>

<%
//6. run the post-job
 if(!postjobNodes.isEmpty()){
 	for(INode postNode:postjobNodes){
%>
<%=createCallProcess(postNode, process.getName(), false) %>
<% 
	}
 }
%>	
		end = System.currentTimeMillis();
		
		if (watch) {
    		System.out.println((end-startTime)+" milliseconds");
	    }
	
		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
    		System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : <%=process.getName() %>");
	    }		  
<%
	//7. send & flush the end msg to statcatcher
	for (INode statCatcherNode : process.getNodesOfType("tStatCatcher")) {
%>
		<%=statCatcherNode.getUniqueName() %>.addMessage(status==""?"end":status, (end-startTime));
		try {
			<%=statCatcherNode.getDesignSubjobStartNode().getUniqueName() %>Process(globalMap);
		} catch (Exception e) {
			e.printStackTrace();
		}
<%
    }	
%>

<%
	if (stats) {
%>
	runStat.stopThreadStat();
<%	
	}

	if (trace) {
%>
		runTrace.stopThreadTrace();
<%
	}	
%>
	
    if(errorCode == null) {
         return status != null && status.equals("failure") ? 1 : 0;	
    } else {   
         return errorCode.intValue();
    }
  }
	
	private void evalParam(String arg) {	   
		if (arg.startsWith("--watch")) {
    		watch = true;
    	} else if (arg.startsWith("--stat_port=")) {
    		portStats = Integer.parseInt(arg.substring(12));
    	} else if (arg.startsWith("--trace_port=")) {
    		portTraces = Integer.parseInt(arg.substring(13));
    	} else if (arg.startsWith("--client_host=")) {
    		clientHost = arg.substring(14);
    	} else if (arg.startsWith("--context=")) {
    		contextStr = arg.substring(10);
    	} else if (arg.startsWith("--father_pid=")) {
    		fatherPid = arg.substring(13);
    	} else if (arg.startsWith("--root_pid=")) {
    		rootPid = arg.substring(11);
    	} else if (arg.startsWith("--pid=")) {
    		pid = arg.substring(6);
    	} else if (arg.startsWith("--context_param")) {   		 
            String keyValue = arg.substring(16);           
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
            }
    	}
    	
	}	
	
	public Integer getErrorCode() {
		return errorCode;
	}


	public String getStatus() {
		return status;
	}		
}