<%@ jet 
	package="org.talend.designer.codegen.translators" 
	imports="
		org.talend.core.model.process.IProcess
		org.talend.core.model.process.INode 
		org.talend.designer.codegen.config.CodeGeneratorArgument
		java.util.Vector
		java.util.List
	" 
	class="Footer" 
%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    Vector v = (Vector) codeGenArgument.getArgument();
    IProcess process = (IProcess)v.get(0);
    List<INode> rootNodes = (List<INode>)v.get(1);

	boolean stats = codeGenArgument.isStatistics();
	boolean trace = codeGenArgument.isTrace();
%>

    public static void main(String[] args) {
    	String context = null;
    	boolean watch = false;
    	int portStats = 3334;
    	int portTraces = 4334;
    	String arg2;
    	int countParam = args.length;
    	switch (countParam) {
    		case 0 :
    			//do nothing
    			break;
    		case 1 : 
    			context = args[0];
    			break;
    		case 2 : 
    			context = args[0];
    			if (args[1].startsWith("--watch")) {
    				watch = true;
    			}
    			break;
    		case 3 : 
    			context = args[0];
    			if (args[1].startsWith("--watch")) {
    				watch = true;
    			}
    			arg2 = args[2];
    			if (arg2.startsWith("--stat_port=")) {
    				portStats = Integer.parseInt(arg2.substring(12));
    			}
    			break;
    		case 4 : 
    			context = args[0];
    			if (args[1].startsWith("--watch")) {
    				watch = true;
    			}
    			arg2 = args[2];
    			if (arg2.startsWith("--stat_port=")) {
    				portStats = Integer.parseInt(arg2.substring(12));
    			}
    			String arg3 = (String)args[3];
    			if (arg3.startsWith("--trace_port=")) {
    				portTraces = Integer.parseInt(arg3.substring(13));
    			}
    			break;
    		default:
    			//do nothing
    			break;
    	}

		if (context!=null) {
			System.out.println("tsInfo>  Running process with context: "+context+" (./tUser/"+context+".java)");
		}

<%
		if (stats) {
%>
	try {
		runStat.startThreadStat(portStats);
	} catch (java.io.IOException ioException) {
		ioException.printStackTrace();
	}
<%
		}
%>

<%
		if (trace) {
%>
		try {
		runTrace.startThreadTrace(portTraces);
	} catch (java.io.IOException ioException) {
		ioException.printStackTrace();
	}
<%
		}
%>

<%
		// PTODO MHIRT Implements tStatCatcher
    	if ((1!=1)&&(process.getNodesOfType("tStatCatcher").size() > 0)) {
%>
	tStatCatcher_1_subprocess('begin');
<%
    	}
%>

	long start = java.util.Calendar.getInstance().getTimeInMillis();
	try {
	<%=process.getName() %> <%=process.getName() %>Class = new <%=process.getName() %>();
<%
	for (INode rootNode : rootNodes) {
%>
	<%=process.getName() %>Class.<%=rootNode.getUniqueName() %>Process();
<%
	}
%>  
	} catch(TalendException e) {
		e.printStackTrace();
	} 
    long end = java.util.Calendar.getInstance().getTimeInMillis();
    
    if (watch) {
    	System.out.println((end-start)+" milliseconds");
    }

<%
		// PTODO MHIRT Implements tStatsCatcher
        if (process.getNodesOfType("tStatCatcher").size() > 0) {
%>
	tStatCatcher_1_subprocess('end');
	tStatCatcher_1_subprocess(sprintf('%s seconds',$_globals{duration}));
<%
        }
%>
  
<%
        if (stats) {
%>
	runStat.stopThreadStat();
<%
        }
%>
<%
        if (trace) {
%>
	runTrace.stopThreadTrace();
<%
        }
%>
	}

<%
        if (stats) {
%>	
	private static class RunStat implements Runnable {
		private class StatBean {
			private String componentId;
			private int nbLine;
			private int state;
			
			public StatBean(String componentId) {
				this.componentId = componentId;
			} 
			
			public String getComponentId() {
				return this.componentId;
			}
			public void setComponentId(String componentId) {
				this.componentId = componentId;
			}
			public int getNbLine() {
				return this.nbLine;
			}
			public void setNbLine(int nbLine) {
				this.nbLine = nbLine;
			}
			public int getState() {
				return this.state;
			}
			public void setState(int state) {
				this.state = state;
			}
		}
		
		private static java.util.HashMap<String, StatBean> processStats = new java.util.HashMap<String, StatBean>();
		private java.net.Socket s;
        private java.io.PrintWriter pred;
        private boolean jobIsFinished = false;
        private String str = "";
        private long startTime = 0;
        private long currentTime = 0;
		
		public void startThreadStat(int portStats) throws java.io.IOException, java.net.UnknownHostException {
			 s = new java.net.Socket("localhost",portStats);
			 startTime = java.util.Calendar.getInstance().getTimeInMillis();
			 pred = new java.io.PrintWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(s.getOutputStream())), true);
			 Thread t = new Thread(this);
			 t.start();
			 
		}
		
		public void run() {
			while (!jobIsFinished) {
			 	for (StatBean sb : processStats.values()) {
			 		currentTime = java.util.Calendar.getInstance().getTimeInMillis();
			 		str = sb.getComponentId() + "|"+sb.getNbLine() +"|" + (currentTime-startTime);
			 		if (sb.getState()!=1) {
			 			str += "|" + ((sb.getState()==0)?"start":"stop");
			 		}
                	pred.println(str); // envoi d'un message
			 	}
                try {
                	Thread.sleep(1000);
                } catch(InterruptedException ie) {
                	
                }
        	}
		}
		
		public void stopThreadStat() {
			jobIsFinished = true;
			try {
				pred.close();
            	s.close();
            } catch (java.io.IOException ie) {
            }
		}
		
		public void updateStat(String componentId, int mode, int nbLine) {
			StatBean bean;
			if (processStats.containsKey(componentId)) {
				bean = processStats.get(componentId);
			} else {
				bean = new StatBean(componentId); 
			}
			bean.setState(mode);
			bean.setNbLine(bean.getNbLine()+nbLine);
			processStats.put(componentId, bean);
		}
	}
<%
		}
%>
<%
        if (trace) {
%>	
	private static class RunTrace implements Runnable {
		private class TraceBean {
			private String componentId;
			private int nbLine;
			
			public TraceBean(String componentId) {
				this.componentId = componentId;
			} 
			
			public String getComponentId() {
				return this.componentId;
			}
			public void setComponentId(String componentId) {
				this.componentId = componentId;
			}
			public int getNbLine() {
				return this.nbLine;
			}
			public void setNbLine(int nbLine) {
				this.nbLine = nbLine;
			}
		}
		
		private static java.util.HashMap<String, TraceBean> processTraces = new java.util.HashMap<String, TraceBean>();
		private java.net.Socket s;
        private java.io.PrintWriter pred;
        private boolean jobIsFinished = false;
        private String str = "";
		
		public void startThreadTrace(int portTraces) throws java.io.IOException, java.net.UnknownHostException {
			 s = new java.net.Socket("localhost",portTraces);
			 pred = new java.io.PrintWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(s.getOutputStream())), true);
			 Thread t = new Thread(this);
			 t.start();
			 
		}
		
		public void run() {
			while (!jobIsFinished) {
        	}
		}
		
		public void stopThreadTrace() {
			jobIsFinished = true;
			try {
				pred.close();
            	s.close();
            } catch (java.io.IOException ie) {
            }
		}
		
		public void sendTrace(String componentId, String datas) {
			TraceBean bean;
			if (processTraces.containsKey(componentId)) {
				bean = processTraces.get(componentId);
			} else {
				bean = new TraceBean(componentId); 
			}
			bean.setNbLine(bean.getNbLine()+1);
			processTraces.put(componentId, bean);
			
			String str = bean.getComponentId() + "|" + bean.getNbLine() + "|" + datas;
            pred.println(str); // envoi d'un message
		}
	}
<%
		}
%>
}
