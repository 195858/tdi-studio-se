<%@ jet 
	package="org.talend.designer.codegen.translators" 
	imports="
		org.talend.core.model.process.IProcess
		org.talend.core.model.process.INode 
		org.talend.designer.codegen.config.CodeGeneratorArgument
		java.util.Vector
		java.util.List
	" 
	class="Footer" 
%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    Vector v = (Vector) codeGenArgument.getArgument();
    IProcess process = (IProcess)v.get(0);
    List<INode> rootNodes = (List<INode>)v.get(1);

	boolean stats = codeGenArgument.isStatistics();
	boolean trace = codeGenArgument.isTrace();
%>
    public static boolean watch = false;
    public static int portStats = 3334;
    public static int portTraces = 4334;
    public static String contextStr = "<%=codeGenArgument.getContextName() %>";
    public static String pid = "0";
    public static String rootPid = null;
    public static String fatherPid = null;
    
    public static String status= "";
    
    public static void main(String[] args) {
    	for (String arg : args) {
    		<%=process.getName() %>.evalParam(arg);
    	}
    	
    	pid = TalendString.getAsciiRandomString(6);
    	if (rootPid==null) {
    		rootPid = pid;
    	}
    	if (fatherPid==null) {
    		fatherPid = pid;
    	}
    	
    	try {
    		java.io.InputStream inContext = <%=process.getName() %>.class.getClassLoader().getResourceAsStream("<%=codeGenArgument.getCurrentProjectName().toLowerCase() %>/<%=codeGenArgument.getJobName().toLowerCase() %>/contexts/Default.properties");    		
    		if (inContext!=null) {
	    		defaultProps.load(inContext);
    			inContext.close();
	    		context = new java.util.Properties(defaultProps);
	    	}
    		
    		if (contextStr.compareTo("Default")!=0) {
    			inContext = <%=process.getName() %>.class.getClassLoader().getResourceAsStream("<%=codeGenArgument.getCurrentProjectName().toLowerCase() %>/<%=codeGenArgument.getJobName().toLowerCase() %>/contexts/"+contextStr+".properties");
    			if (inContext!=null) {
					context.load(inContext);
					inContext.close();
				}
			}
    	} catch (java.io.IOException ie) {
    		System.err.println("Could not load context "+contextStr);
    		ie.printStackTrace();
    	}

<%
		if (stats) {
%>
	try {
		runStat.startThreadStat(portStats);
	} catch (java.io.IOException ioException) {
		ioException.printStackTrace();
	}
<%
		}
%>

<%
		if (trace) {
%>
		try {
		runTrace.startThreadTrace(portTraces);
	} catch (java.io.IOException ioException) {
		ioException.printStackTrace();
	}
<%
		}
%>

	long end = 0;
	long start = java.util.Calendar.getInstance().getTimeInMillis();
	<%=process.getName() %> <%=process.getName() %>Class = new <%=process.getName() %>(); 
	try {
<%
   	for (INode statCatcherNode : process.getNodesOfType("tStatCatcher")) {
%>
		<%=process.getName() %>Class.<%=statCatcherNode.getUniqueName() %>.addMessage("begin");
		<%=process.getName() %>Class.<%=statCatcherNode.getUniqueName() %>Process();
<%
    }

	for (INode rootNode : rootNodes) {
%>
		<%=process.getName() %>Class.<%=rootNode.getUniqueName() %>Process();
<%
	}
%>
		status="end";
	} catch(TalendException e) {
		status="failure";
		e.printStackTrace();
	} finally {
		end = java.util.Calendar.getInstance().getTimeInMillis();
		if (watch) {
    		System.out.println((end-start)+" milliseconds");
	    }
<%
	for (INode statCatcherNode : process.getNodesOfType("tStatCatcher")) {
%>
		<%=process.getName() %>Class.<%=statCatcherNode.getUniqueName() %>.addMessage(status, (end-start));
		try {
			<%=process.getName() %>Class.<%=statCatcherNode.getUniqueName() %>Process();
		} catch (Exception e) {
			e.printStackTrace();
		}
<%
    }
%>
	}

<%
    if (stats) {
%>
	runStat.stopThreadStat();
<%
	}
	if (trace) {
%>
	runTrace.stopThreadTrace();
<%
	}
%>
	}
	
	public static void evalParam(String arg) {
		if (arg.startsWith("--watch")) {
    		watch = true;
    	} else if (arg.startsWith("--stat_port=")) {
    		portStats = Integer.parseInt(arg.substring(12));
    	} else if (arg.startsWith("--trace_port=")) {
    		portTraces = Integer.parseInt(arg.substring(13));
    	} else if (arg.startsWith("--context=")) {
    		contextStr = arg.substring(10);
    	} else if (arg.startsWith("--father_pid=")) {
    		fatherPid = arg.substring(13);
    	} else if (arg.startsWith("--root_pid=")) {
    		rootPid = arg.substring(11);
    	}
	}
}
