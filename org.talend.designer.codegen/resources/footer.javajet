<%@ jet 
	package="org.talend.designer.codegen.translators" 
	imports="
		org.talend.core.model.process.IProcess
		org.talend.core.model.process.INode 
		org.talend.designer.codegen.config.CodeGeneratorArgument
		java.util.Vector
		java.util.List
	" 
	class="Footer" 
%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    Vector v = (Vector) codeGenArgument.getArgument();
    IProcess process = (IProcess)v.get(0);
    List<INode> rootNodes = (List<INode>)v.get(1);

	boolean stats = codeGenArgument.isStatistics();
	boolean trace = codeGenArgument.isTrace();
%>
    public static boolean watch = false;
    public static int portStats = 3334;
    public static int portTraces = 4334;
    public static String contextStr = "<%=codeGenArgument.getContextName() %>";
    
    public static void main(String[] args) {
    	for (String arg : args) {
    		<%=process.getName() %>.evalParam(arg);
    	}
    	
    	try {
    		java.io.InputStream inContext = <%=process.getName() %>.class.getClassLoader().getResourceAsStream("<%=codeGenArgument.getCurrentProjectName().toLowerCase() %>/<%=codeGenArgument.getJobName().toLowerCase() %>/contexts/Default.properties");    		
    		defaultProps.load(inContext);
    		inContext.close();
    		context = new java.util.Properties(defaultProps);
    		
    		if (contextStr != "Context") {
    			//inContext = new java.io.FileInputStream("contexts/"+contextStr+".properties");
    			inContext = <%=process.getName() %>.class.getClassLoader().getResourceAsStream("<%=codeGenArgument.getCurrentProjectName().toLowerCase() %>/<%=codeGenArgument.getJobName().toLowerCase() %>/contexts/"+contextStr+".properties");
				context.load(inContext);
				inContext.close();
			}
		
    		System.out.println("Running process with context: "+contextStr);
    	} catch (java.io.IOException ie) {
    		System.err.println("Could not load context "+contextStr);
    		ie.printStackTrace();
    	}

<%
		if (stats) {
%>
	try {
		runStat.startThreadStat(portStats);
	} catch (java.io.IOException ioException) {
		ioException.printStackTrace();
	}
<%
		}
%>

<%
		if (trace) {
%>
		try {
		runTrace.startThreadTrace(portTraces);
	} catch (java.io.IOException ioException) {
		ioException.printStackTrace();
	}
<%
		}
%>

<%
		// PTODO MHIRT Implements tStatCatcher
    	if ((1!=1)&&(process.getNodesOfType("tStatCatcher").size() > 0)) {
%>
	tStatCatcher_1Process('begin');
<%
    	}
%>

	long start = java.util.Calendar.getInstance().getTimeInMillis();
	try {
	<%=process.getName() %> <%=process.getName() %>Class = new <%=process.getName() %>();
<%
	for (INode rootNode : rootNodes) {
%>
	<%=process.getName() %>Class.<%=rootNode.getUniqueName() %>Process();
<%
	}
%>  
	} catch(TalendException e) {
		e.printStackTrace();
	} 
    long end = java.util.Calendar.getInstance().getTimeInMillis();
    
    if (watch) {
    	System.out.println((end-start)+" milliseconds");
    }

<%
		// PTODO MHIRT Implements tStatsCatcher
        if (process.getNodesOfType("tStatCatcher").size() > 0) {
%>
	tStatCatcher_1_process('end');
	tStatCatcher_1_process(sprintf('%s seconds',$_globals{duration}));
<%
        }
%>
  
<%
        if (stats) {
%>
	runStat.stopThreadStat();
<%
        }
%>
<%
        if (trace) {
%>
	runTrace.stopThreadTrace();
<%
        }
%>
	}
	
	public static void evalParam(String arg) {
		if (arg.startsWith("--watch")) {
    		watch = true;
    	} else if (arg.startsWith("--stat_port=")) {
    		portStats = Integer.parseInt(arg.substring(12));
    	} else if (arg.startsWith("--trace_port=")) {
    		portTraces = Integer.parseInt(arg.substring(13));
    	} else if (arg.startsWith("--context=")) {
    		contextStr = arg.substring(10);
    	}
	}
}
