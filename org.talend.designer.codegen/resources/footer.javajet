<%@ jet 
	package="org.talend.designer.codegen.translators" 
	imports="
		org.talend.core.model.process.IProcess
		org.talend.core.model.process.INode 
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.CorePlugin
        org.talend.core.model.process.EConnectionType
        org.talend.core.model.process.IConnection	
		
		java.util.Vector
		java.util.List
		java.util.ArrayList
		org.talend.core.model.process.IContextParameter
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
	" 
	class="Footer" 
	skeleton="footer_java.skeleton"	
%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    Vector v = (Vector) codeGenArgument.getArgument();
    IProcess process = (IProcess)v.get(0);
    List<INode> rootNodes = (List<INode>)v.get(1);

	boolean stats = codeGenArgument.isStatistics();
	boolean trace = codeGenArgument.isTrace();
	boolean isRunInMultiThread = codeGenArgument.getIsRunInMultiThread();
	List<IContextParameter> params = new ArrayList<IContextParameter>();
    params=process.getContextManager().getDefaultContext().getContextParameterList();
%>
    public static boolean watch = false;
    public static int portStats = 3334;
    public static int portTraces = 4334;
    public static String clientHost;
    public static String defaultClientHost = "localhost";
    public static String contextStr = "<%=codeGenArgument.getContextName() %>";
    public static String pid = "0";
    public static String rootPid = null;
    public static String fatherPid = null;
<%
	if(isRunInMultiThread){
%>
    private static ThreadLocal threadLocal = new ThreadLocal();
	private static SyncInt runningThreadCount =new SyncInt();
	
	private static class SyncInt
	{
		private int count = 0;
	    public synchronized void add(int i)
	    {
	        count +=i;
	    }
	    
	    public synchronized int getCount()
	    {
	        return count;
	    }
	}
<%
	}
%>
  
    private static java.util.Properties context_param = new java.util.Properties();
    
    public static String status= "";
    
    public static void main(String[] args){
        int exitCode = runJob(args);
        System.exit(exitCode);
    }
    
    public static synchronized int runJob(String[] args) {
    
		init();
    
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
    	
    	if(clientHost == null) {
    		clientHost = defaultClientHost;
    	}
    	
    	
    	pid = TalendString.getAsciiRandomString(6);
    	if (rootPid==null) {
    		rootPid = pid;
    	}
    	if (fatherPid==null) {
    		fatherPid = pid;
    	}
    	
    	try {
    		String charSet=System.getProperty("file.encoding");
    		java.io.Reader inContext = new java.io.InputStreamReader(<%=process.getName() %>.class.getClassLoader().getResourceAsStream("<%=codeGenArgument.getCurrentProjectName().toLowerCase() %>/<%=codeGenArgument.getJobName().toLowerCase() %>/contexts/Default.properties"),charSet);    		
    		if (inContext!=null) {
	    		defaultProps.load(inContext);
    			inContext.close();
	    		context = new ContextProperties(defaultProps);
	    	}
    		
    		if (contextStr.compareTo("Default")!=0) {
    			inContext = new java.io.InputStreamReader(<%=process.getName() %>.class.getClassLoader().getResourceAsStream("<%=codeGenArgument.getCurrentProjectName().toLowerCase() %>/<%=codeGenArgument.getJobName().toLowerCase() %>/contexts/"+contextStr+".properties"),charSet);
    			if (inContext!=null) {
					context.load(inContext);
					inContext.close();
				}
			}
			
			if(!context_param.isEmpty()) {						
			    context.putAll(context_param);		
			}
			<% for (IContextParameter ctxParam :params)
			{
			    String typeToGenerate ="String";
			    if( !(ctxParam.getType().equals("id_File") || ctxParam.getType().equals("id_Directory") ||ctxParam.getType().equals("id_List Of Value")))
			    {
			       typeToGenerate=JavaTypesManager.getTypeToGenerate(ctxParam.getType(),true);
			    }
			    if(typeToGenerate.equals("java.util.Date"))
			    {
			        
			%>
			try{
			    context.<%=ctxParam.getName()%>=(java.util.Date)(new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(context.getProperty("<%=ctxParam.getName()%>")));
			}catch(ParseException e)
			{
			    e.printStackTrace();
			    context.<%=ctxParam.getName()%>=null;
			}
			<%
			      
			    }else if(typeToGenerate.equals("Integer"))
			    {
			  %> 
			  try{
			      context.<%=ctxParam.getName()%>=Integer.parseInt(context.getProperty("<%=ctxParam.getName()%>"));
			  }catch(NumberFormatException e){
			      context.<%=ctxParam.getName()%>=null;
			  }
			  <%
			    }else if(typeToGenerate.equals("Object")||typeToGenerate.equals("String") )
			    {
			    %>
			    context.<%=ctxParam.getName()%>=(<%=typeToGenerate%>) context.getProperty("<%=ctxParam.getName()%>");
			    <%
			    }else if(typeToGenerate.equals("Character"))
			    {
			 %>
			 context.<%=ctxParam.getName()%>= context.getProperty("<%=ctxParam.getName()%>");
			 <%
			    }
			     else
			    {
			 %> 
			 try{
			     context.<%=ctxParam.getName()%>=<%=typeToGenerate%>.parse<%=typeToGenerate%> (context.getProperty("<%=ctxParam.getName()%>"));
			 }catch(NumberFormatException e){
			     context.<%=ctxParam.getName()%>=null;
			  }
			 <%
			    }
			}
			%>
    	} catch (java.io.IOException ie) {
    		System.err.println("Could not load context "+contextStr);
    		ie.printStackTrace();
    	}

<%
		if (stats) {
%>
	try {
		runStat.startThreadStat(clientHost, portStats);
	} catch (java.io.IOException ioException) {
		ioException.printStackTrace();
	}
<%
		}
%>

<%
		if (trace) {
%>
		try {
		runTrace.startThreadTrace(clientHost, portTraces);
	} catch (java.io.IOException ioException) {
		ioException.printStackTrace();
	}
<%
		}
%>

	long end = 0;
	long start = System.currentTimeMillis();
	final <%=process.getName() %> <%=process.getName() %>Class = new <%=process.getName() %>(); 
<%
		for (INode statCatcherNode : process.getNodesOfType("tStatCatcher")) {
%>
		<%=process.getName() %>Class.<%=statCatcherNode.getUniqueName() %>.addMessage("begin");
		try {
			<%=process.getName() %>Class.<%=statCatcherNode.getUniqueName() %>Process();
		} catch (Exception e) {
			e.printStackTrace();
		}			
<%
    	}

	if(isRunInMultiThread){
		for (INode rootNode : rootNodes) {
			String componentName = (String) rootNode.getComponent().getName();
            if (!componentName.equals("tLogCatcher") && !componentName.equals("tFlowMeterCatcher") && !componentName.equals("tAssertCatcher") && !componentName.equals("tStatCatcher")) {
%>
		runningThreadCount.add(1);
   		new Thread(){
	    	public void run()
	   		{
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put(errorCode, null);
                threadRunResultMap.put(status, "");
                threadLocal.set(threadRunResultMap);
	    	    
				<%=createCallProcess(rootNode, process.getName(), true) %>
	        	
                Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get(errorCode));
                String localStatus = (String)(((java.util.Map)threadLocal.get()).get(status));
                if (localErrorCode != null) {
                    if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                       errorCode = localErrorCode;
                    }
                }else if(!status.equals("failure")){
                        status = localStatus;
                }	
         	    
                runningThreadCount.add(-1);	        	
	    	}
		}.start();
		
<%
			}
		}
%>
	while(<%=process.getName() %>Class.runningThreadCount.getCount()>0)
    {
        try {
            Thread.sleep(10);
        } catch (Exception e) {
            e.printStackTrace();
        }            
    }
<%
	}else{ // isRunInMultiThread
		for (INode rootNode : rootNodes) {
			String componentName = (String) rootNode.getComponent().getName();
            if (!componentName.equals("tLogCatcher") && !componentName.equals("tFlowMeterCatcher") && !componentName.equals("tAssertCatcher") && !componentName.equals("tStatCatcher")) {
%>
<%=createCallProcess(rootNode, process.getName(), false) %>
<%	  }
	}
}// end if(isRunInMultiThread)
%>	
		end = System.currentTimeMillis();
		if (watch) {
    		System.out.println((end-start)+" milliseconds");
	    }
<%
	if (stats) {
%>
	runStat.stopThreadStat();
<%	
	}

	if (trace) {
%>
		runTrace.stopThreadTrace();
<%
	}	
	
	for (INode statCatcherNode : process.getNodesOfType("tStatCatcher")) {
%>
		<%=process.getName() %>Class.<%=statCatcherNode.getUniqueName() %>.addMessage(status==""?"end":status, (end-start));
		try {
			<%=process.getName() %>Class.<%=statCatcherNode.getUniqueName() %>Process();
		} catch (Exception e) {
			e.printStackTrace();
		}
<%
    }	
%>
    if(errorCode == null) {
         return status != null && status.equals("failure") ? 1 : 0;	
    } else {   
         return errorCode.intValue();
    }
  }
	
	public static void evalParam(String arg) {	   
		if (arg.startsWith("--watch")) {
    		watch = true;
    	} else if (arg.startsWith("--stat_port=")) {
    		portStats = Integer.parseInt(arg.substring(12));
    	} else if (arg.startsWith("--trace_port=")) {
    		portTraces = Integer.parseInt(arg.substring(13));
    	} else if (arg.startsWith("--client_host=")) {
    		clientHost = arg.substring(14);
    	} else if (arg.startsWith("--context=")) {
    		contextStr = arg.substring(10);
    	} else if (arg.startsWith("--father_pid=")) {
    		fatherPid = arg.substring(13);
    	} else if (arg.startsWith("--root_pid=")) {
    		rootPid = arg.substring(11);
    	} else if (arg.startsWith("--context_param")) {   		 
            String keyValue = arg.substring(16);           
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
            }
    	}
    	
	}
	
	private static void init() {

		defaultProps.clear();
		context.clear();		
		errorCode = null;		
<%
	if(!isRunInMultiThread ){
%>
	currentComponent = "";
<%
	}else{
%>	
	threadLocal = new ThreadLocal();
	runningThreadCount = new SyncInt();
<%
	}
%>
		start_Hash.clear();
		end_Hash.clear();
		ok_Hash.clear();
		globalMap.clear();		
		watch = false;
		portStats = 3334;
		portTraces = 4334;
		clientHost = null;
		defaultClientHost = "localhost";
		contextStr = "<%=codeGenArgument.getContextName() %>";
		pid = "0";
		rootPid = null;
		fatherPid = null;
		context_param.clear();
		status = "";		
	}	
}
