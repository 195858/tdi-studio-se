<%@ jet
	imports="
		org.talend.core.model.process.IProcess
		org.talend.core.model.process.INode
		org.talend.core.model.process.IConnection 
		org.talend.core.model.process.EConnectionType
		org.talend.core.model.process.ElementParameterParser
		org.talend.core.model.process.IElementParameter
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.designer.runprocess.CodeGeneratorRoutine
		org.talend.designer.codegen.i18n.Messages
		org.talend.core.ui.branding.IBrandingService
		org.talend.core.ui.branding.AbstractBrandingService
		org.talend.core.GlobalServiceRegister
		org.talend.designer.codegen.ITalendSynchronizer
		java.util.List
		java.util.ArrayList
		java.util.Vector
		java.util.Map
		org.talend.core.model.process.IContextParameter
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.utils.NodeUtil
		org.talend.core.model.utils.JavaResourcesHelper
	"
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    Vector v = (Vector) codeGenArgument.getArgument();
	IProcess process = (IProcess)v.get(0);
    String version = (String)v.get(1);
	
	boolean startable = false;
	for (INode node : (List< ? extends INode>)process.getGraphicalNodes()) {
		Object value = node.getPropertyValue("STARTABLE");
		startable = value == null? false:(Boolean)value;
		if(startable){
			break;
		}
	}
	
	boolean stats = codeGenArgument.isStatistics();
	
	List< ? extends INode> processNodes = (List< ? extends INode>)process.getGeneratingNodes();
%>

class CamelImpl extends org.apache.camel.impl.MainSupport {
	protected CamelImpl instance;

	public CamelImpl() {
		try {
			postProcessContext();
			initRoute();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * Returns the currently executing main
	 * 
	 * @return the current running instance
	 */
	public CamelImpl getInstance() {
		return instance;
	}

	protected void doStart() throws Exception {
		super.doStart();
		
		org.apache.camel.management.JmxNotificationEventNotifier notifier = new org.apache.camel.management.JmxNotificationEventNotifier();
		notifier.setSource("MyCamel");
		notifier.setIgnoreCamelContextEvents(true);
		notifier.setIgnoreRouteEvents(true);
		notifier.setIgnoreServiceEvents(true);
		
		getCamelContexts().get(0).getManagementStrategy().addEventNotifier(notifier);

		java.net.URLClassLoader sysloader = (java.net.URLClassLoader) ClassLoader.getSystemClassLoader();
		java.lang.reflect.Method method = java.net.URLClassLoader.class.getDeclaredMethod("addURL", new Class[] { java.net.URL.class });
		method.setAccessible(true);
		String[] libPaths = new String[] { 


<%
	List<Map<String, String>> dependencies = null;
	for (INode node : processNodes) {
		if (node.isActivate()) {
			if (node.getComponent().getName().equals("cMessagingEndpoint")) {
				dependencies = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__HOTLIBS__");
				for(Map<String, String> dependencie : dependencies){
					String librarieJar = dependencie.get("LIBPATH");
%>
					"<%=librarieJar %>",
<%
				}
			}
		}
	}
%>
	};
	for(String lib:libPaths){
		String separator = System.getProperty("path.separator");
		String[] jarFiles = lib.split(separator);	
		for(String jarFile:jarFiles){		
			method.invoke(sysloader, new Object[] { new java.io.File(jarFile).toURL() });
		}
	}
	
			getCamelContexts().get(0).start();

<%

			if(stats) {
%>			

			CamelStat runStat = new CamelStat(getCamelContexts().get(0));
						
			runStat.setParams();
			
			runStat.openSocket(true);
			runStat.setAllPID(rootPid, fatherPid, pid, jobName);
			runStat.startThreadStat(clientHost, portStats);
			runStat.updateStatOnJob(RunStat.JOBSTART, "");
			
			MyStatThread statsThread = new MyStatThread(runStat);
			statsThread.run();
<%
			} //if stats
%>
			
		}
		
		public void initRoute() throws Exception {
			routeBuilder = new org.apache.camel.builder.RouteBuilder() {
				public void configure() throws Exception {
<%
for (INode node : processNodes) {
			if (node.getComponent().getName().equals("cCXF")) {
				IElementParameter param = node.getElementParameter("LABEL");
				String cid = "";
   				if(param != null && !"__UNIQUE_NAME__".equals(param.getValue())){
   					cid = (String)param.getValue();	
   				}else{
   					cid = node.getUniqueName();
   				}
   				String endpointVar = "endpoint" + cid;
   				String uriRef = "uriMap.get(\"" + cid + "\")";
%>
   					org.apache.camel.Endpoint <%=endpointVar%> = endpoint(<%=uriRef%>);
<%
				String useSL = ElementParameterParser.getValue(node, "__ENABLE_SL__");
				String useSAM = ElementParameterParser.getValue(node, "__ENABLE_SAM__");
				if("true".equals(useSL)){
%>					
					if(locatorFeature != null){
							((org.apache.camel.component.cxf.CxfEndpoint)<%=endpointVar%>).getFeatures().add(locatorFeature);
					}
<%				
				}
				if("true".equals(useSAM)){	
%>
					if(eventFeature != null){
							((org.apache.camel.component.cxf.CxfEndpoint)<%=endpointVar%>).getFeatures().add(eventFeature);
					}
<%				
				}	
			}
		
}			
%>
<%	
	for (INode node : processNodes) {
		if (node.isActivate()) {
			if (node.getComponent().getName().equals("cAggregate")) {
				boolean usePersistence = "true".equals(ElementParameterParser.getValue(node, "__USE_PERSISTENCE__"));
				String repository = ElementParameterParser.getValue(node, "__REPOSITORY__");
				if(usePersistence) {
					boolean useRecovery = "true".equals(ElementParameterParser.getValue(node, "__USE_RECOVERY__"));
					String recoveryInterval = ElementParameterParser.getValue(node, "__RECOVERY_INTERVAL__");
					String deadLetterUri = ElementParameterParser.getValue(node, "__DEAD_LETTER_URI__");
					String maximumRedeliveries = ElementParameterParser.getValue(node, "__MAXIMUM_REDELIVERIES__");
					
					if("AGGREGATION".equals(repository)) {
%>
						org.apache.camel.spi.AggregationRepository repo_<%=node.getUniqueName() %> = new <%=ElementParameterParser.getValue(node, "__CUSTOM_REPOSITORY__") %>;
<%
					} else if("RECOVERABLE".equals(repository)) {
%>
						org.apache.camel.spi.RecoverableAggregationRepository repo_<%=node.getUniqueName() %> = new <%=ElementParameterParser.getValue(node, "__CUSTOM_REPOSITORY__") %>;
<%
						if(useRecovery) {
%>
							repo_<%=node.getUniqueName() %>.setUseRecovery(true);
							repo_<%=node.getUniqueName() %>.setMaximumRedeliveries(<%=maximumRedeliveries%>);
							repo_<%=node.getUniqueName() %>.setDeadLetterUri(<%=deadLetterUri%>);
							repo_<%=node.getUniqueName() %>.setRecoveryInterval(<%=recoveryInterval%>);
<% 
						}
					} else if("HAWTDB".equals(repository)) {
						boolean usePersistentFile = "true".equals(ElementParameterParser.getValue(node, "__USE_PERSISTENT_FILE__"));
						String persistentFile = ElementParameterParser.getValue(node, "__PERSISTENT_FILENAME__");
						if(usePersistentFile) {
%>
							org.apache.camel.component.hawtdb.HawtDBAggregationRepository repo_<%=node.getUniqueName() %> = new org.apache.camel.component.hawtdb.HawtDBAggregationRepository("<%=node.getUniqueName() %>", <%=persistentFile%>);
<%
						} else {
%>
							org.apache.camel.component.hawtdb.HawtDBAggregationRepository repo_<%=node.getUniqueName() %> = new org.apache.camel.component.hawtdb.HawtDBAggregationRepository("<%=node.getUniqueName() %>");
<%
						}
						if(useRecovery) {
%>
							repo_<%=node.getUniqueName() %>.setUseRecovery(true);
							repo_<%=node.getUniqueName() %>.setMaximumRedeliveries(<%=maximumRedeliveries%>);
							repo_<%=node.getUniqueName() %>.setDeadLetterUri(<%=deadLetterUri%>);
							repo_<%=node.getUniqueName() %>.setRecoveryInterval(<%=recoveryInterval%>);
<%
						}
					}
				}
			}
		}
	}
%>