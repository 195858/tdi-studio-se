<%@ jet
	imports="
		java.util.List
		java.util.ArrayList
		java.util.Vector
		java.util.Map
		org.talend.core.GlobalServiceRegister
		org.talend.core.model.process.IProcess
		org.talend.core.model.process.INode
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.EConnectionType
		org.talend.core.model.process.IElementParameter
		org.talend.core.model.process.IContextParameter
		org.talend.core.model.process.ElementParameterParser
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.utils.NodeUtil
		org.talend.core.model.utils.JavaResourcesHelper
		org.talend.core.ui.branding.IBrandingService
		org.talend.core.ui.branding.AbstractBrandingService
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.designer.runprocess.CodeGeneratorRoutine
		org.talend.designer.codegen.i18n.Messages
		org.talend.designer.codegen.ITalendSynchronizer
		org.talend.designer.core.model.utils.emf.talendfile.ContextType
	"
%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	Vector v = (Vector) codeGenArgument.getArgument();
	IProcess process = (IProcess) v.get(0);
	String version = (String) v.get(1);

/*
	boolean startable = false;
	for (INode node : (List< ? extends INode>)process.getGraphicalNodes()) {
		Object value = node.getPropertyValue("STARTABLE");
		startable = value == null? false:(Boolean)value;
		if(startable){
			break;
		}
	}
*/
	boolean stats = codeGenArgument.isStatistics();

%>
			private String propertyToString(Object obj){
				if(obj!=null && obj instanceof java.util.Date){
					return String.format("yyyy-MM-dd HH:mm:ss;%tY-%1$tm-%1$td %1$tH:%1$tM:%1$tS",obj);
				}else{
					return String.valueOf(obj);
				}
			}


			/**
			* please initial uri map 
			*/
			public void configure() throws java.lang.Exception {
<%
	List< ? extends INode> processNodes = (List< ? extends INode>)process.getGraphicalNodes();
	List<? extends INode> cxfNodes = process.getNodesOfType("cCXF");
	for (INode node : processNodes) {
			if (!node.isActivate()) {
				continue;
			}
			String nodeComponentName = node.getComponent().getName();
			if("cCXF".equals(nodeComponentName)){
			IElementParameter param = node.getElementParameter("LABEL");
		   	String cid = node.getUniqueName();
		//  http://jira.talendforge.org/browse/TESB-5241
			/*
		   	 * change to use label + unique to make it unique but readable
		   	 */
			if(param != null && !"__UNIQUE_NAME__".equals(param.getValue())){
				cid = (String)param.getValue()+"_"+cid;	
			}
			String endpointVar = "endpoint_" + node.getUniqueName();
			String uriRef = "uriMap.get(\"" + cid + "\")";
%>
				// CXF endpoint for <%=cid%>
				org.apache.camel.Endpoint <%=endpointVar%> = endpoint(<%=uriRef%>);
<%
			String useSL = ElementParameterParser.getValue(node, "__ENABLE_SL__");
			String useSAM = ElementParameterParser.getValue(node, "__ENABLE_SAM__");
			if ("true".equals(useSL)) {
				List<Map<String, String>> customProperties = (List<Map<String,String>>) ElementParameterParser.getObjectValue(node, "__SL_META_DATA__");
%>
				// Add Service Locator Service to <%=endpointVar%>
				if (null != bundleContext) {
					org.talend.esb.servicelocator.cxf.LocatorFeature locatorFeature = new org.talend.esb.servicelocator.cxf.LocatorFeature();

					<% if (!customProperties.isEmpty()) { %>
						java.util.Map<String, String> slCustomProps_<%=cid%> = new java.util.HashMap<String, String>();
						<% for (Map<String, String> custProp : customProperties) { %>
							slCustomProps_<%=cid%>.put(<%=custProp.get("NAME")%>, <%=custProp.get("VALUE")%>);
						<% } %>
<%
							boolean actAsConsumer = false;
							List<? extends IConnection> conns = node.getIncomingConnections();
							if (!conns.isEmpty()) {
								INode source = conns.get(0).getSource();
								if (!("cErrorHandler".equals(source.getComponent().getName())
										&& source.getIncomingConnections().isEmpty())) {
									actAsConsumer = true;
								}
							}
%>
						<% if (actAsConsumer) { %>
							locatorFeature.setRequiredEndpointProperties(slCustomProps_<%=cid%>);
						<% } else { %>
							locatorFeature.setAvailableEndpointProperties(slCustomProps_<%=cid%>);
						<% } %>
					<% } %>

					((org.apache.camel.component.cxf.CxfEndpoint)<%=endpointVar%>).getFeatures().add(locatorFeature);
				}
<%
			}
			//http://jira.talendforge.org/browse/TESB-3850
			String formatType = ElementParameterParser.getValue(node, "__DATAFORMAT__");
			if ("true".equals(useSAM) && !"RAW".equals(formatType)) {
%>
				// Add Service Activity Monitor Service to <%=endpointVar%>
				if (eventFeature != null) {
					((org.apache.camel.component.cxf.CxfEndpoint)<%=endpointVar%>).getFeatures().add(eventFeature);
				}
<%
			}
	}else if("cAggregate".equals(nodeComponentName)){
				boolean usePersistence = "true".equals(ElementParameterParser.getValue(node, "__USE_PERSISTENCE__"));
				String repository = ElementParameterParser.getValue(node, "__REPOSITORY__");
				if (usePersistence) {
					boolean useRecovery = "true".equals(ElementParameterParser.getValue(node, "__USE_RECOVERY__"));
					String recoveryInterval = ElementParameterParser.getValue(node, "__RECOVERY_INTERVAL__");
					String deadLetterUri = ElementParameterParser.getValue(node, "__DEAD_LETTER_URI__");
					String maximumRedeliveries = ElementParameterParser.getValue(node, "__MAXIMUM_REDELIVERIES__");

					if ("AGGREGATION".equals(repository)) {
%>
						org.apache.camel.spi.AggregationRepository repo_<%=node.getUniqueName() %> = new <%=ElementParameterParser.getValue(node, "__CUSTOM_REPOSITORY__") %>;
<%
					} else if ("RECOVERABLE".equals(repository)) {
%>
						org.apache.camel.spi.RecoverableAggregationRepository repo_<%=node.getUniqueName() %> = new <%=ElementParameterParser.getValue(node, "__CUSTOM_REPOSITORY__") %>;
<%
						if (useRecovery) {
%>
							repo_<%=node.getUniqueName() %>.setUseRecovery(true);
							repo_<%=node.getUniqueName() %>.setMaximumRedeliveries(<%=maximumRedeliveries%>);
							repo_<%=node.getUniqueName() %>.setDeadLetterUri(<%=deadLetterUri%>);
							repo_<%=node.getUniqueName() %>.setRecoveryInterval(<%=recoveryInterval%>);
<%
						}
					} else if ("HAWTDB".equals(repository)) {
						boolean usePersistentFile = "true".equals(ElementParameterParser.getValue(node, "__USE_PERSISTENT_FILE__"));
						String persistentFile = ElementParameterParser.getValue(node, "__PERSISTENT_FILENAME__");
						if (usePersistentFile) {
%>
							org.apache.camel.component.hawtdb.HawtDBAggregationRepository repo_<%=node.getUniqueName() %> = new org.apache.camel.component.hawtdb.HawtDBAggregationRepository("<%=node.getUniqueName() %>", <%=persistentFile%>);
<%
						} else {
%>
							org.apache.camel.component.hawtdb.HawtDBAggregationRepository repo_<%=node.getUniqueName() %> = new org.apache.camel.component.hawtdb.HawtDBAggregationRepository("<%=node.getUniqueName() %>");
<%
						}
						if (useRecovery) {
%>
							repo_<%=node.getUniqueName() %>.setUseRecovery(true);
							repo_<%=node.getUniqueName() %>.setMaximumRedeliveries(<%=maximumRedeliveries%>);
							repo_<%=node.getUniqueName() %>.setDeadLetterUri(<%=deadLetterUri%>);
							repo_<%=node.getUniqueName() %>.setRecoveryInterval(<%=recoveryInterval%>);
<%
						}
					}
				}
				
				String language = ElementParameterParser.getValue(node, "__LANGUAGES__");
				String useNamespaces = ElementParameterParser.getValue(node, "__USE_NAMESPACES__");
				List<Map<String, String>> namespaceValues = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__NAMESPACES__");
				if("xpath".equals(language)&&"true".equals(useNamespaces)){
					String cid = node.getUniqueName();
				
%>
				Map<String, String> <%=cid%>NSMap = new HashMap<String, String>();
				{
<%
					for(Map<String, String> m: namespaceValues){
						String pre = m.get("PREFIX");
						String uri = m.get("URI");
%>
						<%=cid%>NSMap.put(<%=pre%>, <%=uri%>);
<%
					}
%>
				}
<%
				}
	}else if("cLoop".equals(nodeComponentName)){
		String type = ElementParameterParser.getValue(node, "__LOOP_TYPE__");
		if(!"EXPRESSION_TYPE".equals(type)){
			continue;
		}
		String language = ElementParameterParser.getValue(node, "__LANGUAGES__");
		if(!"xpath".equals(language)){
			continue;
		}
		String useNamespaces = ElementParameterParser.getValue(node, "__USE_NAMESPACES__");
		if(!"true".equals(useNamespaces)){
			continue;
		}
		String cid = node.getUniqueName();
		List<Map<String, String>> namespaceValues = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__NAMESPACES__");
%>
		Map<String, String> <%=cid%>NSMap = new HashMap<String, String>();
		{
<%
			for(Map<String, String> m: namespaceValues){
				String pre = m.get("PREFIX");
				String uri = m.get("URI");
%>
				<%=cid%>NSMap.put(<%=pre%>, <%=uri%>);
<%
			}
%>
		}
<%
		
	}else if("cMessageFilter".equals(nodeComponentName)){
		String language = ElementParameterParser.getValue(node, "__LANGUAGES__");
		if(!"xpath".equals(language)){
			continue;
		}
		String useNamespaces = ElementParameterParser.getValue(node, "__USE_NAMESPACES__");
		if(!"true".equals(useNamespaces)){
			continue;
		}
		String cid = node.getUniqueName();
		List<Map<String, String>> namespaceValues = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__NAMESPACES__");
%>
		Map<String, String> <%=cid%>NSMap = new HashMap<String, String>();
		{
<%
			for(Map<String, String> m: namespaceValues){
				String pre = m.get("PREFIX");
				String uri = m.get("URI");
%>
				<%=cid%>NSMap.put(<%=pre%>, <%=uri%>);
<%
			}
%>
		}
<%
	}else if("cRecipientList".equals(nodeComponentName)||"cSplitter".equals(nodeComponentName)){
		String language = ElementParameterParser.getValue(node, "__LANGUAGES__");
		if(!"xpath".equals(language)){
			continue;
		}
		String useNamespaces = ElementParameterParser.getValue(node, "__USE_NAMESPACES__");
		if(!"true".equals(useNamespaces)){
			continue;
		}
		String cid = node.getUniqueName();
		List<Map<String, String>> namespaceValues = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__NAMESPACES__");
%>
		Map<String, String> <%=cid%>NSMap = new HashMap<String, String>();
		{
<%
			for(Map<String, String> m: namespaceValues){
				String pre = m.get("PREFIX");
				String uri = m.get("URI");
%>
				<%=cid%>NSMap.put(<%=pre%>, <%=uri%>);
<%
			}
%>
		}
<%
	}else if("cSetBody".equals(nodeComponentName)){
		String language = ElementParameterParser.getValue(node, "__LANGUAGES__");
		if(!"xpath".equals(language)){
			continue;
		}
		String useNamespaces = ElementParameterParser.getValue(node, "__USE_NAMESPACES__");
		if(!"true".equals(useNamespaces)){
			continue;
		}
		String cid = node.getUniqueName();
		List<Map<String, String>> namespaceValues = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__NAMESPACES__");
%>
		Map<String, String> <%=cid%>NSMap = new HashMap<String, String>();
		{
<%
			for(Map<String, String> m: namespaceValues){
				String pre = m.get("PREFIX");
				String uri = m.get("URI");
%>
				<%=cid%>NSMap.put(<%=pre%>, <%=uri%>);
<%
			}
%>
		}
<%
	}else if("cSetHeader".equals(nodeComponentName)){
		String useNamespaces = ElementParameterParser.getValue(node, "__USE_NAMESPACES__");
		if(!"true".equals(useNamespaces)){
			continue;
		}
		String cid = node.getUniqueName();
		List<Map<String, String>> namespaceValues = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__NAMESPACES__");
%>
		Map<String, String> <%=cid%>NSMap = new HashMap<String, String>();
		{
<%
			for(Map<String, String> m: namespaceValues){
				String pre = m.get("PREFIX");
				String uri = m.get("URI");
%>
				<%=cid%>NSMap.put(<%=pre%>, <%=uri%>);
<%
			}
%>
		}
<%
	}else if("cTalendJob".equals(nodeComponentName)){
    List< ? extends IConnection> conns = node.getIncomingConnections();
  	String cid = node.getUniqueName();
	List<Map<String, String>> contextParams = null;
    if(conns.size()>0) {
        String useJar = ElementParameterParser.getValue(node, "__FROM_EXTERNAL_JAR__");
        // when propagateHeader parameter will be removed the https://github.com/Talend/tesb-rt-se/blob/master/camel-talendjob/src/main/java/org/talend/camel/TalendProducer.java
        // have to be changed - remove populateTalendContextParamsWithCamelHeaders(exchange, args); 
        String propagateHeader = ElementParameterParser.getValue(node, "__PROPAGATE_HEADER__");
        if("true".equals(useJar)){
            String typeName = ElementParameterParser.getValue(node, "__JOB__");
            String context = ElementParameterParser.getValue(node, "__CONTEXT__");
            contextParams = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__EXTERNAL_JAR_CONTEXTPARAMS__");
%>
		org.apache.camel.Endpoint endpoint_<%=cid%> = endpoint("talend:"+ <%=typeName%>+ "?context=" + <%=context%>+"&propagateHeader=<%=propagateHeader%>");
<%
        }else{
           String typeName = "";
           contextParams = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__CONTEXTPARAMS__");
           String context = (String) node.getElementParameter("PROCESS_TYPE_CONTEXT").getValue();
           String id = (String) node.getElementParameter("PROCESS_TYPE_PROCESS").getValue();
           if(id != null){
        	   String useSelectedContext = ElementParameterParser.getValue(node, "__USE_SELECTED_CONTEXT__");
        	   String useRouteContext = ElementParameterParser.getValue(node, "__USE_ROUTE_CONTEXT__");
        	   String useJobContext = ElementParameterParser.getValue(node, "__USE_JOB_CONTEXT__");
        	   if("true".equals(useRouteContext)){
        		   context = ElementParameterParser.getProcessSelectedContext(process.getId()); // route context
        		   boolean found = ElementParameterParser.checkIfContextExisted(id, context); // check the same context exist or not in job
            	   if(!found){
            		   context = ElementParameterParser.getProcessSelectedContext(id); // if not found, then use default job context
            	   }
            	   
        	   }else if("true".equals(useJobContext)){
        		   context = ElementParameterParser.getProcessSelectedContext(id);
        	   }
        	   
	           String jobName = (String) node.getElementParameter("SELECTED_JOB_NAME").getValue();
	           String jobVersion = ElementParameterParser.getStringElementParameterValue(node.getElementParameter("PROCESS_TYPE_VERSION"));
	           String jobFolderName = JavaResourcesHelper.getJobFolderName(jobName, jobVersion);
	           typeName = codeGenArgument.getCurrentProjectName().toLowerCase() + "." + jobFolderName + "." + jobName;
	        }
%>
			org.apache.camel.Endpoint endpoint_<%=cid%> = endpoint("talend:"+<%=typeName%>.class.getName()+"?context="+"<%=context%>&propagateHeader=<%=propagateHeader%>");
<%
        }
        int contextParamsSize = contextParams.size();
        if(contextParamsSize > 0){
%>
{
        Map <String, String> propertiesMap = new HashMap<String, String>();  
<%
		for (int i=0; i<contextParamsSize; i++) {
				Map<String, String> contextParam = contextParams.get(i);
				String paramName;
				String paramValue;
		        if("true".equals(useJar)){
					paramName = contextParam.get("EXTERNAL_JAR_PARAM_NAME_COLUMN");
					paramValue = contextParam.get("EXTERNAL_JAR_PARAM_VALUE_COLUMN");
					
				} else {
					paramName = "\"" + contextParam.get("PARAM_NAME_COLUMN") + "\"";
					paramValue = contextParam.get("PARAM_VALUE_COLUMN");
				}
%>
				propertiesMap.put(<%=paramName%>, propertyToString(<%=paramValue%>));
<%
		}
%>
        endpoint_<%=cid%>.getCamelContext().setProperties(propertiesMap);
}
<%
    }
	}
	}
}
%>