<%@ jet 
  package="org.talend.designer.codegen.translators" 
  imports="
  org.talend.core.model.process.INode
  org.talend.core.model.temp.ECodePart  
  org.talend.core.model.process.ElementParameterParser
  org.talend.core.model.process.IConnection 
  org.talend.core.model.metadata.IMetadataTable
  org.talend.core.model.metadata.IMetadataColumn 
  org.talend.core.model.process.EConnectionType 
  org.talend.core.model.process.IExternalNode
  org.talend.designer.codegen.config.CodeGeneratorArgument
  org.talend.designer.codegen.config.NodesSubTree
  org.talend.core.model.process.IProcess
  java.util.List
  java.util.Set
  java.util.HashSet
 "
  class="ComponentPartFooter"
  skeleton="subprocess_header_java.skeleton"     
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
IProcess process = node.getProcess();
 
NodesSubTree subTree = (NodesSubTree) codeGenArgument.getSubTree();
ECodePart codePart = codeGenArgument.getCodePart();
boolean trace = codeGenArgument.isTrace();
boolean stat = codeGenArgument.isStatistics();
Set<IConnection> connSet =  new HashSet<IConnection>();
connSet.addAll(node.getOutgoingConnections(EConnectionType.FLOW_MAIN));
connSet.addAll(node.getOutgoingConnections(EConnectionType.FLOW_MERGE));

Set<IConnection> iterateConnSet =  new HashSet<IConnection>();
iterateConnSet.addAll(node.getOutgoingConnections(EConnectionType.ITERATE));

List<IConnection> allSubProcessConnection = codeGenArgument.getAllMainSubTreeConnections();

if((codePart.equals(ECodePart.END))&&(stat)&&connSet.size()>0){
  for(IConnection con:connSet){
%>
 runStat.updateStatOnConnection("<%=con.getUniqueName()%>"
 	+(globalMap.get("PARALLEL_ITERATOR_THREAD_ID")!=null?("."+globalMap.get("PARALLEL_ITERATOR_THREAD_ID")):""),2, 0); 

<%
  }
}

 if (codePart.equals(ECodePart.MAIN)) {
  for (IConnection conn : node.getOutgoingConnections()) {
   IMetadataTable metadata = conn.getMetadataTable();
   if (metadata!=null) {
    if (conn.getLineStyle().equals(EConnectionType.FLOW_MAIN)) {
     if (trace) {    
%>
  if (<%=conn.getName() %> !=null) {
  runTrace.isPause();
  if (runTrace.isPause()) {
   while (runTrace.isPause()) {
   	Thread.sleep(100);
   }
  }	 else {
  	
   // here we dump the line content for trace purpose
   runTrace.sendTrace("<%=conn.getName() %>","<%
         for (IMetadataColumn column : metadata.getListColumns()) {
   %><%=column.getLabel() %>="+<%=conn.getName() %>.<%=column.getLabel() %>+"|<%
         }
%>");
	}
  }
<%
     }
    }
   }
  }
  
  String inputColName = null;
  if (node.getIncomingConnections()!=null) {
   for (IConnection incomingConn : node.getIncomingConnections()) {
    if (incomingConn.getLineStyle().equals(EConnectionType.FLOW_MAIN)) {
     inputColName = incomingConn.getName();
     break;
    }
   }
  }
  List<IMetadataTable> metadatas = node.getMetadataList();
  if ((!node.isSubProcessStart())&&(node.getComponent().isDataAutoPropagated())) {
   if (inputColName!=null) {
    if ((metadatas != null) && (metadatas.size() > 0)) {
     IMetadataTable metadata = metadatas.get(0);
     if (metadata != null) {
      for (IConnection conn : node.getOutgoingConnections()) {
       if (conn.getLineStyle().equals(EConnectionType.FLOW_MAIN) || conn.getLineStyle().equals(EConnectionType.FLOW_MERGE)) {
        for (IMetadataColumn column : metadata.getListColumns()) {
%>
 <%=conn.getName() %>.<%=column.getLabel() %> = <%=inputColName %>.<%=column.getLabel() %>;
<% 
        }
       }
      }
     }
    }
   }
  }
 }
 if (codePart.equals(ECodePart.END)) {
%>

ok_Hash.put("<%=node.getUniqueName() %>", true);
end_Hash.put("<%=node.getUniqueName() %>", System.currentTimeMillis());

<%
  String statCatcher = ElementParameterParser.getValue(node,"__TSTATCATCHER_STATS__");
  if ((node.getProcess().getNodesOfType("tStatCatcher").size() > 0) & (statCatcher.equals("true"))) {
   for (INode statCatcherNode : node.getProcess().getNodesOfType("tStatCatcher")) {
%>
<%=statCatcherNode.getUniqueName() %>.addMessage("end","<%=node.getUniqueName() %>", end_Hash.get("<%=node.getUniqueName() %>")-start_Hash.get("<%=node.getUniqueName() %>"));
<%=statCatcherNode.getDesignSubjobStartNode().getUniqueName() %>Process();
<%
   }
  }
  
  for (IConnection outgoingConn : node.getOutgoingConnections()) {
  	if (outgoingConn.getTarget().isActivate()) {
		
	         
  	        if (outgoingConn.getLineStyle().equals(EConnectionType.ON_COMPONENT_OK)) { 
%>
<%=outgoingConn.getTarget().getUniqueName() %>Process();
<%  
  	        }        
       

   		if (outgoingConn.getLineStyle().equals(EConnectionType.RUN_IF)) {
%>
   if (<%=outgoingConn.getCondition() %>) {
    <%=outgoingConn.getTarget().getUniqueName() %>Process();
   }
<%
   		}
   	}
  }
 }
 
	boolean parallelIterate = false;
	for (IConnection iterateConn : iterateConnSet) { 
		parallelIterate = "true".equals(ElementParameterParser.getValue(iterateConn, "__ENABLE_PARALLEL__"));
		if (parallelIterate) {
			if (codePart.equals(ECodePart.BEGIN)) {
				String rowList=","; 
				for (IConnection conn : allSubProcessConnection) {
					rowList += conn.getUniqueName()+"Struct "+conn.getUniqueName()+",";
				}
				rowList = rowList.substring(0, rowList.length()-1);
%>
	class <%=node.getUniqueName() %>Thread extends Thread {//implements routines.system.TalendThreadPool.PropertySettable
		class ThreadedMap extends java.util.HashMap<String, Object> {
			java.util.Map<String, Object> myMap = new java.util.HashMap<String, Object>();
			private static final long serialVersionUID = 0L;

			public ThreadedMap(java.util.Map<String, Object> globalMap) {
				for (String s : globalMap.keySet()) {
					myMap.put(s, globalMap.get(s));
				}
			}

			@Override
			public Object get(Object key) {
				return myMap.get(key);
			}

			@Override
			public Object put(String key, Object value) {
				myMap.put(key, value);
				return <%=process.getName()%>.globalMap.put(key, value);
			}
		}

		ThreadedMap globalMap = null;
		boolean isRunning = false;
		
<%
			if(!subTree.isMergeSubTree()) {
				List< ? extends IConnection> rootConns = subTree.getRootNode().getOutgoingConnections();
				if ((rootConns!=null)&&(rootConns.size()>0)) {
%>
		<%=createPrivateClassInstance(subTree.getRootNode(), rootConns.get(0).getName(), false)%>
<%
				}
  			} else {  
    			List<INode> sortedMergeBranchStarts = subTree.getSortedMergeBranchStarts();    
    			for (INode startNode : sortedMergeBranchStarts) {
    				List< ? extends IConnection> rootConns = startNode.getOutgoingConnections();
    				if ((rootConns!=null)&&(rootConns.size()>0)) {
%>		  
		<%=createPrivateClassInstance(startNode, rootConns.get(0).getName(), false)%>
<%
					}
				}
    
				List< ? extends IConnection> rootConns = subTree.getMergeNode().getOutgoingConnections();
				if ((rootConns!=null)&&(rootConns.size()>0)) {
%>
		<%=createPrivateClassInstance(subTree.getMergeNode(), rootConns.get(0).getName(), false)%>
<%
				}
			}
			
			String schemaInstanceDeclaration = createPriveClassMethodDeclaration(subTree.getRootNode(), subTree.getRootNode().getOutgoingConnections().get(0).getName(), false, new java.util.HashSet<String>());
			if (schemaInstanceDeclaration.length()>0) {
				schemaInstanceDeclaration = "," + schemaInstanceDeclaration.substring(0,schemaInstanceDeclaration.length()-1); 
			}
%>
	
		public <%=node.getUniqueName() %>Thread(java.util.Map<String, Object> globalMap<%=schemaInstanceDeclaration %>, int threadID) {
			super();
			<% for (IConnection conn : allSubProcessConnection) { %>
			this.<%=conn.getUniqueName() %> = <%=conn.getUniqueName() %>;
			<% } %>
			this.globalMap = new ThreadedMap(globalMap);
			this.globalMap.myMap.put("PARALLEL_ITERATOR_THREAD_ID",Integer.toString(threadID));
		}

		
		public void run() {
			this.isRunning = true;
			try {
			String currentComponent = "";
<%
	        	if(stat){
%>
				runStat.updateStatOnConnection("<%=iterateConn.getUniqueName() %>",0,"exec"+(String)globalMap.get("PARALLEL_ITERATOR_THREAD_ID"));
<%
				}
			}
			if (codePart.equals(ECodePart.END)) {
%>
			mtp_<%=node.getUniqueName() %>.waitForEndOfQueue();
<%
			}
			continue;
		}
	}
%>




/**
 * [<%=node.getUniqueName() %> <%=codePart %> ] stop
 */