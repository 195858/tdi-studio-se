<%@ jet 
	package="org.talend.designer.codegen.translators" 
	imports="
		org.talend.core.model.process.INode
		org.talend.core.model.temp.ECodePart		
		org.talend.core.model.process.IConnection 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.process.EConnectionType 
        org.talend.core.model.process.ElementParameterParser
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.IConnectionCategory
  		java.util.List
 		 java.util.Set
  		java.util.HashSet
		java.util.Iterator
	"
	class="ComponentPartHeader" 
%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	ECodePart codePart = codeGenArgument.getCodePart();
	boolean trace = codeGenArgument.isTrace();
	boolean stat = codeGenArgument.isStatistics();
	Set<IConnection> connSet =  new HashSet<IConnection>();
	connSet.addAll(node.getOutgoingConnections(EConnectionType.FLOW_MAIN));
	connSet.addAll(node.getOutgoingConnections(EConnectionType.FLOW_MERGE));
	String incomingName = codeGenArgument.getIncomingName();
	
	Set<IConnection> iterateConnSet =  new HashSet<IConnection>();
	iterateConnSet.addAll(node.getOutgoingConnections(EConnectionType.ITERATE));
	
	List<IConnection> allSubProcessConnection = codeGenArgument.getAllMainSubTreeConnections();
%>

/**
 * [<%=node.getUniqueName() %> <%=codePart %> ] start
 */

<%
    //This part in order to feedback with the iterate_subprocess_header.javajet and iterate_subprocess_footer.javajet
    
	if (codePart.equals(ECodePart.BEGIN)) {
		boolean parallelIterate = false;
		for (IConnection iterateConn : iterateConnSet) { 
			parallelIterate = "true".equals(ElementParameterParser.getValue(iterateConn, "__ENABLE_PARALLEL__"));
	        if (parallelIterate) {
%>
			TalendThreadPool mtp_<%=iterateConn.getTarget().getUniqueName() %> = new TalendThreadPool(<%=ElementParameterParser.getValue(iterateConn,"__NUMBER_PARALLEL__") %>);
			final Object[] lockWrite = new Object[0];
			int threadIdCounter =0;
<%
			}
			continue;
		}
	}	
%>

<%
	if (codePart.equals(ECodePart.BEGIN)) {
%>

ok_Hash.put("<%=node.getUniqueName() %>", false);
start_Hash.put("<%=node.getUniqueName() %>", System.currentTimeMillis());
<%
		String statCatcher = ElementParameterParser.getValue(node,"__TSTATCATCHER_STATS__");
		if ((node.getProcess().getNodesOfType("tStatCatcher").size() > 0) && (statCatcher.equals("true"))) {
			for (INode statCatcherNode : node.getProcess().getNodesOfType("tStatCatcher")) {
%>
<%=statCatcherNode.getUniqueName() %>.addMessage("begin","<%=node.getUniqueName() %>");
<%=statCatcherNode.getDesignSubjobStartNode().getUniqueName() %>Process();
<%
			}
		}
	}
	if(codePart.equals(ECodePart.MAIN)) {
	    if ((node.getProcess().getNodesOfType("tFlowMeter").size() > 0))
	    {
        	for(IConnection temp_conn : node.getIncomingConnections(EConnectionType.FLOW_MAIN))
        	{
        	    String name_conn = temp_conn.getUniqueName();
        	    if(temp_conn.isUseByMetter())
        	    { 	    	
%>
   MetterCatcherUtils.addLineToRow("<%=name_conn%>_count");
<%
				}
			}
			
			for(IConnection temp_conn : node.getIncomingConnections(EConnectionType.FLOW_MERGE))
        	{
        	    String name_conn = temp_conn.getUniqueName();
        	    if(name_conn == incomingName && temp_conn.isUseByMetter())
        	    { 	    	
%>
   MetterCatcherUtils.addLineToRow("<%=name_conn%>_count");
<%
				}
			}			
	    }
	}
%>
currentComponent="<%=node.getUniqueName() %>";

<%
	connSet =  new HashSet<IConnection>();
	connSet.addAll(node.getIncomingConnections(EConnectionType.FLOW_MAIN));
	connSet.addAll(node.getIncomingConnections(EConnectionType.FLOW_MERGE));

	if ((codePart.equals(ECodePart.BEGIN))&&(stat)&&connSet.size()>0) {
		for(IConnection con:connSet){
%>
	runStat.updateStatOnConnection("<%=con.getUniqueName() %>"+(globalMap.get("PARALLEL_ITERATOR_THREAD_ID")!=null?("."+globalMap.get("PARALLEL_ITERATOR_THREAD_ID")):""),0, 0); 
<%		}
	}
	
	if((codePart.equals(ECodePart.MAIN))&&(stat)&&connSet.size()>0){
		for(IConnection con:connSet){
%>

//<%=con.getUniqueName()%>
//<%=(String)codeGenArgument.getIncomingName()%>


<%if (!node.getComponent().useMerge()) {%>
  runStat.updateStatOnConnection("<%=con.getUniqueName() %>"+(globalMap.get("PARALLEL_ITERATOR_THREAD_ID")!=null?("."+globalMap.get("PARALLEL_ITERATOR_THREAD_ID")):""),1, 1);
<%
	} else if(con.getUniqueName().equals((String)codeGenArgument.getIncomingName())){
%>
 runStat.updateStatOnConnection("<%=con.getUniqueName() %>"+(globalMap.get("PARALLEL_ITERATOR_THREAD_ID")!=null?("."+globalMap.get("PARALLEL_ITERATOR_THREAD_ID")):""),1, 1);
<%}%>

<%
		}
	}
%>
