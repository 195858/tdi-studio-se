<%@ jet 
	package="org.talend.designer.codegen.translators" 
	imports="
		org.talend.designer.codegen.config.NodesSubTree
		org.talend.core.model.process.INode
		java.util.List
		java.util.HashSet
		java.util.Set
		java.util.Map
		org.talend.core.model.process.IProcess
		org.talend.core.model.process.EConnectionType
		org.talend.core.model.process.IConnection
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
		org.talend.core.model.process.ElementParameterParser
		org.talend.core.model.process.IHashableInputConnections
		org.talend.core.model.process.IHashConfiguration
		org.talend.core.model.process.IHashableColumn
	" 
	class="SubProcessHeader"
	skeleton="subprocess_header_java.skeleton"
%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	NodesSubTree subTree = (NodesSubTree) codeGenArgument.getArgument();
	boolean isRunInMultiThread = codeGenArgument.getIsRunInMultiThread();
	boolean stat = codeGenArgument.isStatistics();
%>

<%
	HashSet<String> hSet = new HashSet<String>();
	for (INode node : subTree.getNodes()) {
		List<IMetadataTable> metadatas = node.getMetadataList();
			List< ? extends IConnection> conns = node.getOutgoingConnections();
			for (IConnection conn : conns) {
				// templateOrigin is used for Virtual COmponents
				String templateOrigin = "";
				if (conn.getTarget()!=null) {
					templateOrigin = ElementParameterParser.getValue(conn.getTarget(), "__ORIGIN__");
				}
				boolean isLookup = false;
				if (
					(templateOrigin.compareTo("")!=0) ||
					(conn.getLineStyle().equals(EConnectionType.FLOW_MAIN))||
					(conn.getLineStyle().equals(EConnectionType.FLOW_REF)) ||
					(conn.getLineStyle().equals(EConnectionType.FLOW_MERGE))||
					(conn.getLineStyle().equals(EConnectionType.RUN_AFTER)) 
				) {

					if(conn.getLineStyle().equals(EConnectionType.RUN_AFTER)){
						templateOrigin = ElementParameterParser.getValue(conn.getSource(), "__ORIGIN__");
					}				
					if (!hSet.contains(conn.getName() + templateOrigin)) {
						hSet.add(conn.getName() + templateOrigin);
						IMetadataTable metadata = conn.getMetadataTable();
						
						
						Set<String> hashableColumnsNames = new HashSet<String>();
						if(conn.getTarget() instanceof IHashableInputConnections) {
							IHashableInputConnections target = (IHashableInputConnections) conn.getTarget();
							IHashConfiguration hashConfiguration = target.getHashConfiguration(conn.getName());
							if(hashConfiguration != null) {
								for(IHashableColumn hashableColumn : hashConfiguration.getHashableColumns()) {
									isLookup = true;
									hashableColumnsNames.add(hashableColumn.getName());
								}
							}
						} else {
						
							//only for the lookup branch of the tJoin
							boolean isLookOftJoin = false;
							if(conn.getLineStyle().equals(EConnectionType.FLOW_REF)){
    							IProcess process = conn.getTarget().getProcess();
    							for (INode tjoinNode : process.getNodesOfType("tJoin")) {
    								if(conn.getTarget().getUniqueName().equals(tjoinNode.getUniqueName())){
    									List<Map<String, String>> joinKeys = (List<Map<String,String>>)ElementParameterParser.getObjectValue(conn.getTarget(), "__JOIN_KEY__");
    									for(Map<String, String> joinKeyLine : joinKeys){       
                                			String lookupKey = joinKeyLine.get("LOOKUP_COLUMN");
                                			hashableColumnsNames.add(lookupKey);
    									}
    									isLookOftJoin = true;
										isLookup = true;
    								}
    							}
							}
													
							if (!isLookOftJoin && metadata!=null) { 
								for (IMetadataColumn column: metadata.getListColumns()) {
									if (column.isKey()) {
										hashableColumnsNames.add(column.getLabel());
									}
								}
							}
						}
						boolean hasAtLeastOneKey = hashableColumnsNames.size() > 0;
						
%>

public static class <%=conn.getName() %>Struct<%=templateOrigin %> implements routines.system.<%= isLookup ? "IPersistableComparableLookupRow<"+conn.getName()+"Struct>" : "IPersistableRow<"+conn.getName()+"Struct"+ templateOrigin + ">" %> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];
<%
	if(hasAtLeastOneKey) {
%>
	private static final int DEFAULT_HASHCODE = 1;
    private static final int PRIME = 31;
    private int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;
    
    
<%
	}
%>
    
	<%
		if (metadata !=null) {
			for (IMetadataColumn column: metadata.getListColumns()) {
   				JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
			    %>
			    public <%= JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable()) %> <%=column.getLabel() %><%
			    	
			    	if(javaType == JavaTypesManager.CHARACTER) {
			    		%> = ' '<%
			    	}
			    	
			    	%>;

				public <%= JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable()) %> get<%=column.getLabel().substring(0, 1).toUpperCase()%><%=column.getLabel().substring(1)%> () {
					return this.<%=column.getLabel()%>;
				}
				<%			    	
			}
		}
    %>
    
    <%
	if(hasAtLeastOneKey) { // T_SH_001
	%>
    
	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	<%
		if (metadata !=null) {
			for (IMetadataColumn column: metadata.getListColumns()) {
				if (hashableColumnsNames.contains(column.getLabel())) {

					JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());

					if (JavaTypesManager.isJavaPrimitiveType(column.getTalendType(), column.isNullable())) {
					
					 	String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
					 	if(javaType == JavaTypesManager.BOOLEAN) {
						%>
		        			result = prime * result + (this.<%=column.getLabel() %> ? 1231 : 1237);
						<%
						} else {	
						%>
							result = prime * result + (int) this.<%=column.getLabel() %>;
						<%
						}
						
					} else if(javaType == JavaTypesManager.BYTE_ARRAY) {

						%>
						result = prime * result + java.util.Arrays.hashCode(this.<%=column.getLabel() %>);
						<%
					
					} else {
					%>
						result = prime * result + ((this.<%=column.getLabel() %> == null) ? 0 : this.<%=column.getLabel() %>.hashCode());
					<%
					}
					
				}
			}
		}
    %>
    		this.hashCode = result;
    		this.hashCodeDirty = false;		
		}
		return this.hashCode;
	}
	
	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final <%=conn.getName() %>Struct<%=templateOrigin %> other = (<%=conn.getName() %>Struct<%=templateOrigin %>) obj;
		<%	
		if (metadata !=null) {
			for (IMetadataColumn column: metadata.getListColumns()) {
				if (hashableColumnsNames.contains(column.getLabel())) {

					JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());

					if (JavaTypesManager.isJavaPrimitiveType(column.getTalendType(), column.isNullable())) {
					%>
						if (this.<%=column.getLabel() %> != other.<%=column.getLabel() %>) 
							return false;
					<%
					} else if(javaType == JavaTypesManager.BYTE_ARRAY) {
					%>
						if(!java.util.Arrays.equals(this.<%=column.getLabel() %>, other.<%=column.getLabel() %>)) {
							return false;
						}
					<%
					} else {
					%>
						if (this.<%=column.getLabel() %> == null) {
							if (other.<%=column.getLabel() %> != null) 
								return false;
						} else if (!this.<%=column.getLabel() %>.equals(other.<%=column.getLabel() %>)) 
							return false;
					<%
					}

				}
			}
    	}
    	%>
    	
		return true;
    }

	public void copyDataTo(<%=conn.getName() %>Struct<%=templateOrigin %> other) {

		<%
		if (metadata !=null) {
			for (IMetadataColumn column: metadata.getListColumns()) {
        	
				%>other.<%= column.getLabel() %> = this.<%= column.getLabel() %>;
	            <%
			}
		}
		%>
	}

	public void copyKeysDataTo(<%=conn.getName() %>Struct<%=templateOrigin %> other) {

		<%
		if (metadata !=null) {
			for (IMetadataColumn column: metadata.getListColumns()) {
        		if (hashableColumnsNames.contains(column.getLabel())) {
        	
					%>other.<%= column.getLabel() %> = this.<%= column.getLabel() %>;
	            	<%
	            }
			}
		}
		%>
	}
    
    
    <%
	} // T_SH_001
	%>
    
    public void <%= isLookup ? "readKeys" : "read" %>Data(ObjectInputStream dis) {

		synchronized(commonByteArrayLock) {

        	try {

				int length = 0;
		<%	
		boolean hasAtLeastOneRead = false;
		boolean hasAtLeastOneObjectType = false;
		if (metadata !=null) {
			for (IMetadataColumn column: metadata.getListColumns()) {
			  if (!isLookup || hashableColumnsNames.contains(column.getLabel())) {
			  	hasAtLeastOneRead = true;
				JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
			 	String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());

				if (JavaTypesManager.isJavaPrimitiveType(column.getTalendType(), column.isNullable())) {
					typeToGenerate=typeToGenerate.substring(0,1).toUpperCase()+typeToGenerate.substring(1);
					%>
			            this.<%=column.getLabel() %> = dis.read<%= typeToGenerate %>();
					<%
				} else if(typeToGenerate.equals("String")) {
					%>
			            length = dis.readInt();
           				if (length == -1) {
           	    			this.<%=column.getLabel() %> = null;
           				} else {
           					if(length > commonByteArray.length) {
           						if(length < 1024 && commonByteArray.length == 0) {
	               					commonByteArray = new byte[1024];
           						} else {
	               					commonByteArray = new byte[2 * length];
	               				}
           					}
               				dis.readFully(commonByteArray, 0, length);
               				this.<%=column.getLabel() %> = new String(commonByteArray, 0, length);
           				}
					<%
				} else if(typeToGenerate.equals("java.util.Date")) {
					%>
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.<%=column.getLabel() %> = null;
           				} else {
           			    	this.<%=column.getLabel() %> = new Date(dis.readLong());
           				}
					<%
				} else if(typeToGenerate.equals("byte[]")) {
					%>
			            length = dis.readInt();
           				if (length == -1) {
           	    			this.<%=column.getLabel() %> = null;
           				} else {
               				byte[] byteArray = new byte[length];
               				dis.readFully(byteArray);
               				this.<%=column.getLabel() %> = byteArray;
           				}
					<%
				} else if(typeToGenerate.equals("Object") || typeToGenerate.equals("BigDecimal") || typeToGenerate.equals("List")) {
			 		hasAtLeastOneObjectType = true;
					%>
						this.<%=column.getLabel() %> = (<%= typeToGenerate %>) dis.readObject();
					
					<%
				} else {
					typeToGenerate =JavaTypesManager.getTypeToGenerate(column.getTalendType(), false);
					typeToGenerate=typeToGenerate.substring(0,1).toUpperCase()+typeToGenerate.substring(1);
					%>
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.<%=column.getLabel() %> = null;
           				} else {
           			    	this.<%=column.getLabel() %> = dis.read<%= typeToGenerate %>();
           				}
					<%
				}
			  }
			}
    	}
	    if(hasAtLeastOneRead) {
	    %>
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        <%
        }
        %>
        
		<%
		if(hasAtLeastOneObjectType) {
		%>
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		<%
		}
		%>
        
        }
        
		<%
		if(!hasAtLeastOneRead) {
		%>
			finally {}
		<%
		}
		%>
        
      }
        
        
    }

    public void <%= isLookup ? "writeKeys" : "write" %>Data(ObjectOutputStream dos) {
        try {

		<%	
		boolean hasAtLeastOneWrite = false;
		hasAtLeastOneObjectType = false;
		if (metadata !=null) {
			for (IMetadataColumn column: metadata.getListColumns()) {
			  if (!isLookup || hashableColumnsNames.contains(column.getLabel())) {
				JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
				hasAtLeastOneWrite = true;
			 	String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
				%>
					// <%=typeToGenerate %>
				<%
				if (JavaTypesManager.isJavaPrimitiveType(column.getTalendType(), column.isNullable())) {
					typeToGenerate=typeToGenerate.substring(0,1).toUpperCase()+typeToGenerate.substring(1);
					%>
		            	dos.write<%= typeToGenerate %>(this.<%=column.getLabel() %>);
					<%
				} else if(typeToGenerate.equals("String")) {
					%>
						if(this.<%=column.getLabel() %> == null) {
			                dos.writeInt(-1);
						} else {
			                byte[] byteArray = this.<%=column.getLabel() %>.getBytes();
           			    	dos.writeInt(byteArray.length);
               				dos.write(byteArray);
		            	}
					<%
				} else if(typeToGenerate.equals("java.util.Date")) {
					%>
						if(this.<%=column.getLabel() %> == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.<%=column.getLabel() %>.getTime());
		            	}
					<%
				} else if(typeToGenerate.equals("byte[]")) {
					%>
						if(this.<%=column.getLabel() %> == null) {
			                dos.writeInt(-1);
						} else {
           			    	dos.writeInt(this.<%=column.getLabel() %>.length);
               				dos.write(this.<%=column.getLabel() %>);
		            	}
					<%
				} else if(typeToGenerate.equals("Object") || typeToGenerate.equals("BigDecimal") || typeToGenerate.equals("List")) {
					%>
       			    	dos.writeObject(this.<%=column.getLabel() %>);
					<%
				} else {
					typeToGenerate =JavaTypesManager.getTypeToGenerate(column.getTalendType(), false);
					typeToGenerate = typeToGenerate.substring(0,1).toUpperCase()+typeToGenerate.substring(1);
					%>
						if(this.<%=column.getLabel() %> == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.write<%= typeToGenerate %>(this.<%=column.getLabel() %>);
		            	}
					<%
				
				}
			  }
			}
    	}
	    if(hasAtLeastOneWrite) {
	    %>
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        <%
        }
        %>
        }
        
        <%
		if(!hasAtLeastOneWrite) {
		%>
			finally {}
		<%
		}
		%>
        
    }

    <%
	if(isLookup) { // T SH 002
	%>


    /** 
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {
            
			int length = 0;
		<%	
		hasAtLeastOneRead = false;
		hasAtLeastOneObjectType = false;
		if (metadata !=null) {
			for (IMetadataColumn column: metadata.getListColumns()) {
			  if (!hashableColumnsNames.contains(column.getLabel())) {
				JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
				hasAtLeastOneRead = true;
			 	String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());

				if (JavaTypesManager.isJavaPrimitiveType(column.getTalendType(), column.isNullable())) {
					typeToGenerate=typeToGenerate.substring(0,1).toUpperCase()+typeToGenerate.substring(1);
					%>
			            this.<%=column.getLabel() %> = dis.read<%= typeToGenerate %>();
					<%
				} else if(typeToGenerate.equals("String")) {
					%>
			            length = dis.readInt();
           				if (length == -1) {
           	    			this.<%=column.getLabel() %> = null;
           				} else {
               				byte[] byteArray = new byte[length];
               				dis.read(byteArray);
               				this.<%=column.getLabel() %> = new String(byteArray);
           				}
					<%
				} else if(typeToGenerate.equals("byte[]")) {
					%>
			            length = dis.readInt();
           				if (length == -1) {
           	    			this.<%=column.getLabel() %> = null;
           				} else {
               				byte[] byteArray = new byte[length];
               				dis.read(byteArray);
               				this.<%=column.getLabel() %> = byteArray;
           				}
					<%
				} else if(typeToGenerate.equals("java.util.Date")) {
					%>
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.<%=column.getLabel() %> = null;
           				} else {
           			    	this.<%=column.getLabel() %> = new Date(dis.readLong());
           				}
					<%
				} else if(typeToGenerate.equals("Object") || typeToGenerate.equals("BigDecimal") || typeToGenerate.equals("List")) {
			 		hasAtLeastOneObjectType = true;
					%>
       			    	this.<%=column.getLabel() %> = (<%= typeToGenerate %>) ois.readObject();
					<%
				} else {
					typeToGenerate =JavaTypesManager.getTypeToGenerate(column.getTalendType(), false);
					typeToGenerate=typeToGenerate.substring(0,1).toUpperCase()+typeToGenerate.substring(1);
					%>
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.<%=column.getLabel() %> = null;
           				} else {
           			    	this.<%=column.getLabel() %> = dis.read<%= typeToGenerate %>();
           				}
					<%
				}
			  }
			}
    	}
    	if(hasAtLeastOneRead) {
	    %>
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        <%
        }
        %>
        
		<%
		if(hasAtLeastOneObjectType) {
		%>
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		<%
		}
		%>

        }

		<%
    	if(!hasAtLeastOneRead) {
	    %>
        	finally {}
        <%
        }
        %>
        
    }

    /** 
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {
        
		<%	
		hasAtLeastOneWrite = false;
		if (metadata !=null) {
			for (IMetadataColumn column: metadata.getListColumns()) {
			  if (!hashableColumnsNames.contains(column.getLabel())) {
				JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
				hasAtLeastOneWrite = true;
			 	String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
				if (JavaTypesManager.isJavaPrimitiveType(column.getTalendType(), column.isNullable())) {
					typeToGenerate=typeToGenerate.substring(0,1).toUpperCase()+typeToGenerate.substring(1);
					%>
		            	dos.write<%= typeToGenerate %>(this.<%=column.getLabel() %>);
					<%
				} else if(typeToGenerate.equals("String")) {
					%>
						if(this.<%=column.getLabel() %> == null) {
			                dos.writeInt(-1);
						} else {
			                byte[] byteArray = this.<%=column.getLabel() %>.getBytes();
           			    	dos.writeInt(byteArray.length);
               				dos.write(byteArray);
		            	}
					<%
				} else if(typeToGenerate.equals("byte[]")) {
					%>
						if(this.<%=column.getLabel() %> == null) {
			                dos.writeInt(-1);
						} else {
           			    	dos.writeInt(this.<%=column.getLabel() %>.length);
               				dos.write(this.<%=column.getLabel() %>);
		            	}
					<%
				} else if(typeToGenerate.equals("java.util.Date")) {
					%>
						if(this.<%=column.getLabel() %> == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.<%=column.getLabel() %>.getTime());
		            	}
					<%
				} else if(typeToGenerate.equals("Object") || typeToGenerate.equals("BigDecimal") || typeToGenerate.equals("List")) {
					%>
       			    	oos.writeObject(this.<%=column.getLabel() %>);
					<%
				} else {
					typeToGenerate =JavaTypesManager.getTypeToGenerate(column.getTalendType(), false);
					typeToGenerate = typeToGenerate.substring(0,1).toUpperCase()+typeToGenerate.substring(1);
					%>
						if(this.<%=column.getLabel() %> == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.write<%= typeToGenerate %>(this.<%=column.getLabel() %>);
		            	}
					<%
				
				}
			  }
			}
    	}

    	if(hasAtLeastOneRead) {
	    %>
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        <%
        }
        %>
        	}
        <%
    	if(!hasAtLeastOneRead) {
	    %>
        	finally {}
        <%
        }
        %>
        
    }

    <%
	} // T SH 002
	%>

    public String toString() {
		
		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		<%	
		String comma = "";
		if (metadata !=null) {
			for (IMetadataColumn column: metadata.getListColumns()) {
					if(comma.length() > 0) {
					%>
						sb.append("<%= comma %>");
					<%
					}
					%>
					sb.append("<%=column.getLabel() %>");
					sb.append("=");
					sb.append(String.valueOf(this.<%=column.getLabel() %>));
				<%
				comma = ", ";
			}
    	}
	    %>
	    sb.append("]");
	    
	    return sb.toString();
    }
    
    /** 
     * Compare keys
     */
    public int compareTo(<%=conn.getName() %>Struct<%=templateOrigin %> other) {
		
		int returnValue = -1;
		<%	
		if (metadata !=null) {
			for (IMetadataColumn column: metadata.getListColumns()) {
				if (hashableColumnsNames.contains(column.getLabel())) {
					%>
						returnValue = checkNullsAndCompare(this.<%=column.getLabel() %>, other.<%=column.getLabel() %>);
						if(returnValue != 0) {
							return returnValue;
						}

					<%
				}
			}
    	}
	    %>
	    return returnValue;
    }
    
    
    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }

    
}
<%
						}
					}
				}
	}
%>
<% if (subTree.isMethodSizeNeeded()){ %>
/**
 * Start of Function: <%=subTree.getName() %>Process.
 * Byte Length of Source Code: ?SIZE? 
 */
 <% } %>
public void <%=subTree.getName() %>Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("<%=subTree.getName() %>_SUBPROCESS_STATE", 0);

<%
//this part for "Resume Management"
{
    INode firstNode = subTree.getNode(subTree.getName());
    
    //System.out.println(firstNode.getUniqueName());
    List<? extends IConnection> inConns = firstNode.getIncomingConnections();
    
    //System.out.println(inConns.size());
    for(IConnection conn : inConns){
    
    	boolean activeResume = "true".equals(ElementParameterParser.getValue(conn, "__RESUMING_CHECKPOINT__"));
    	
    	//System.out.println("Test:" + ElementParameterParser.getValue(conn, "__RESUMING_CHECKPOINT__"));
    	
    	if(activeResume){
    		EConnectionType lineStyle = conn.getLineStyle();
    		%>
    			resumeUtil.addLog(FormatterUtils.format_Date(new Date(),"mm:ss.S"), "CHECKPOINT", "CONNECTION:<%=lineStyle.getName() %>:<%=subTree.getName() %>:<%=conn.getName() %><%=conn.getOutputId() > 0 ? conn.getOutputId() : "" %>", "", Thread.currentThread().getId() + "", "", "", "", "");
    		<%
    	}
    }
}
%>

<%
	boolean isParallelize = false;
	for (INode node : subTree.getNodes()) {
		if(node!=null){
			String parallelize = ElementParameterParser.getValue(node, "__PARALLELIZE__");
			if(parallelize!=null &&parallelize.equals("true")){
				// temporary modification : if tAsyncIn is available, this is always a parallelized process
				isParallelize = true;
			}
		}
	}
	if(isParallelize){//isParallelize
%>
	
	try {
		final ParallelThreadPool pool = (ParallelThreadPool) globalMap
				.get("PARALLEL_FLOW_POOL");
		class <%=subTree.getName() %>_ParallelThread extends ParallelThread {

			public <%=subTree.getName() %>_ParallelThread(
					java.util.Map<String, Object> globalMap,
					Object[] lockWrite) {
				super(globalMap, lockWrite);
			}
			boolean isRunning = false;
			
			public void run() {
				java.util.Map threadRunResultMap = new java.util.HashMap();
				threadRunResultMap.put("errorCode", null);
				threadRunResultMap.put("status", "");
				threadLocal.set(threadRunResultMap);
				
				this.isRunning = true;
				String currentComponent = "";
				try{
	
<%
	}else{//isParallelize
%>

	String currentComponent = "";
				
	try {
	
			String currentMethodName = new Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume		
<%
	// Call for RUN AFTER links
	for (String after : subTree.getAfterSubProcesses()) {
%>
		<%=after %>Process(globalMap);
<%
	}
	}//isParallelize
%>

<%
	if(!subTree.isMergeSubTree()) {
	List< ? extends IConnection> rootConns = subTree.getRootNode().getOutgoingConnections();
	if ((rootConns!=null)&&(rootConns.size()>0)) {
%>
		<%=createPrivateClassInstance(subTree.getRootNode(), rootConns.get(0).getName(), false)%>
<%
	}
  } else {  
    List<INode> sortedMergeBranchStarts = subTree.getSortedMergeBranchStarts();    
    for (INode startNode : sortedMergeBranchStarts) {
       List< ? extends IConnection> rootConns = startNode.getOutgoingConnections();
       if ((rootConns!=null)&&(rootConns.size()>0)) {
%>		  
		<%=createPrivateClassInstance(startNode, rootConns.get(0).getName(), false)%>
<%
      }
    }
    
	List< ? extends IConnection> rootConns = subTree.getMergeNode().getOutgoingConnections();
	if ((rootConns!=null)&&(rootConns.size()>0)) {
%>
		<%=createPrivateClassInstance(subTree.getMergeNode(), rootConns.get(0).getName(), false)%>
<%
	}
    
  }
%>

<%
if(stat){
    INode firstNode = subTree.getNode(subTree.getName());
    List<? extends IConnection> inConns = firstNode.getIncomingConnections();
    for(IConnection conn : inConns){
    	EConnectionType lineStyle = conn.getLineStyle();
    	if(lineStyle == EConnectionType.RUN_IF){
    %>	
    		runStat.updateStatOnConnection("<%=conn.getUniqueName() %>", 0, "true");
    <%	
    	}else if(lineStyle == EConnectionType.ON_SUBJOB_OK || lineStyle == EConnectionType.ON_COMPONENT_OK){
    %>	
    		runStat.updateStatOnConnection("<%=conn.getUniqueName() %>", 0, "ok");
    <%	
    	}else if(lineStyle == EConnectionType.ON_SUBJOB_ERROR || lineStyle == EConnectionType.ON_COMPONENT_ERROR){
    %>	
    		runStat.updateStatOnConnection("<%=conn.getUniqueName() %>", 0, "error");
    <%	
    	}

    }
}
%>
