<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.core.model.metadata.types.JavaType
    org.talend.core.model.metadata.types.JavaTypesManager
" 
%>
	<%@ include file="mr_comparator_helper.javajet"%>
	<%
	class StructHelper{
		String structName;
		List<IMetadataColumn> columns;
		String implementsClasses;
		boolean genComparator = true;
		
		public StructHelper(String structName, List<IMetadataColumn> columns, boolean genComparator){
			this.structName = structName + "Struct";
			this.columns = columns;
			this.implementsClasses = "WritableComparable<"+this.structName+">";
			this.genComparator = genComparator;
		}
		
		public StructHelper(String structName, List<IMetadataColumn> columns){
			this.structName = structName + "Struct";
			this.columns = columns;
			this.implementsClasses = "WritableComparable<"+this.structName+">";
		}
		
		public String getStructName(){
			return structName;
		}
		
		public void appendImplClasses(String className){
			this.implementsClasses += ",";
			this.implementsClasses += className;
		}
		
		public void overrideWrite(String dataOutput){
	        if (columns !=null) {
	            for (IMetadataColumn column: columns) {
	                JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
	                String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
	                
	                if (JavaTypesManager.isJavaPrimitiveType(column.getTalendType(), column.isNullable())) {
	                    typeToGenerate=typeToGenerate.substring(0,1).toUpperCase()+typeToGenerate.substring(1);
	                    %>
                        <%=dataOutput%>.write<%=typeToGenerate%>(this.<%=column.getLabel()%>);
                    <%
	                } else{
	                	%>
	                	if(this.<%=column.getLabel()%> == null){
	                		<%
							if(typeToGenerate.equals("byte[]")){
							%>
								<%=dataOutput%>.writeInt(-1);
							<%
							}else{
							%>
								<%=dataOutput%>.writeByte(-1);
							<%
							}
							%>
						}else{
							<%
							if(typeToGenerate.equals("byte[]")){
							%>
								<%=dataOutput%>.writeInt(this.<%=column.getLabel()%>.length);
							<%
							}else{
							%>
								<%=dataOutput%>.writeByte(0);
							<%
							}
							%>
							<%
			                if(typeToGenerate.equals("Boolean")) {
							%>
								<%=dataOutput%>.writeBoolean(this.<%=column.getLabel()%>);
							<%	                
			                } else if(typeToGenerate.equals("Byte")) {
							%>
								<%=dataOutput%>.writeByte(this.<%=column.getLabel()%>);
							<%	                
			                } else if(typeToGenerate.equals("byte[]")) {
		                    %>
		                        <%=dataOutput%>.write(this.<%=column.getLabel()%>);
		                    <%
			                } else if(typeToGenerate.equals("Char") || typeToGenerate.equals("Character")) {
							%>
								<%=dataOutput%>.writeChar(this.<%=column.getLabel()%>);
							<%	                
			                } else if(typeToGenerate.equals("java.util.Date")) {
		                    %>
		                        <%=dataOutput%>.writeLong(this.<%=column.getLabel()%>.getTime());
		                    <%
			                } else if(typeToGenerate.equals("Double")) {
							%>
								<%=dataOutput%>.writeDouble(this.<%=column.getLabel()%>);
							<%	                
			                } else if(typeToGenerate.equals("Float")) {
							%>
								<%=dataOutput%>.writeFloat(this.<%=column.getLabel()%>);
							<%	                
			                } else if(typeToGenerate.equals("BigDecimal")) {
		                    %>
		                        byte[] bytes_<%=column.getLabel()%> = this.<%=column.getLabel()%>.unscaledValue().toByteArray();
		                        short length_<%=column.getLabel()%> = (short)bytes_<%=column.getLabel()%>.length;
		                        short scale_<%=column.getLabel()%> = (short)this.<%=column.getLabel()%>.scale();
		                        <%=dataOutput%>.writeShort(length_<%=column.getLabel()%>);
		                        <%=dataOutput%>.write(bytes_<%=column.getLabel()%>);
		                        <%=dataOutput%>.writeShort(scale_<%=column.getLabel()%>);
		                    <%
			                } else if(typeToGenerate.equals("Integer")){
			                %>
			                    <%=dataOutput%>.writeInt(this.<%=column.getLabel()%>);
			                <%
			                } else if(typeToGenerate.equals("Long")) {
							%>
								<%=dataOutput%>.writeLong(this.<%=column.getLabel()%>);
							<%	                
			                } else if(typeToGenerate.equals("Object")) {
							%>
								Don't support Object type: column--<%=column.getLabel()%>
							<%	                
			                } else if(typeToGenerate.equals("Short")) {
							%>
								<%=dataOutput%>.writeShort(this.<%=column.getLabel()%>);
							<%	                
			                } else if(typeToGenerate.equals("String")) {
		                    %>
		                        byte[] bytes_<%=column.getLabel()%> = this.<%=column.getLabel()%>.getBytes("UTF-8");
		                        <%=dataOutput%>.writeInt(bytes_<%=column.getLabel()%>.length);
		                        <%=dataOutput%>.write(bytes_<%=column.getLabel()%>);
		                    <%
			                } else if(typeToGenerate.equals("List")) {
							%>
								Don't support List type: column--<%=column.getLabel()%>
							<%	                
			                } else if(typeToGenerate.equals("Document")) {
							%>
								Don't support Document type: column--<%=column.getLabel()%>
							<%	                
			                } else if(typeToGenerate.equals("Dynamic")) {
							%>
								Don't support Dynamic type: column--<%=column.getLabel()%>
							<%
			                }
			               	%>
			            }
			        <%
		            }
	            }
	        }
		}
		
		public void overrideReadFields(String dataInput){
	        if (columns != null) {
	            for (IMetadataColumn column: columns) {
	                JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
	                String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
	
	                if (JavaTypesManager.isJavaPrimitiveType(column.getTalendType(), column.isNullable())) {
	                    typeToGenerate=typeToGenerate.substring(0,1).toUpperCase()+typeToGenerate.substring(1);
	                    %>
	                    this.<%=column.getLabel()%> = <%=dataInput%>.read<%=typeToGenerate%>();
	                <%
	                }else{
	                	if(typeToGenerate.equals("byte[]")){
						%>
						int length_<%=column.getLabel()%> = <%=dataInput%>.readInt();
						if(length_<%=column.getLabel()%> == -1){
						<%
						}else{
	               		%>
	                	if(<%=dataInput%>.readByte() == -1){
	                	<%
	                	}
	                	%>
							this.<%=column.getLabel()%> = null;
	                	}else{
		                	<%
			                if(typeToGenerate.equals("Boolean")){
			                %>
			                    this.<%=column.getLabel()%> = <%=dataInput%>.readBoolean();
			                <%
			                } else if(typeToGenerate.equals("Byte")){
			                %>
			                    this.<%=column.getLabel()%> = <%=dataInput%>.readByte();
			                <%
			                } else if(typeToGenerate.equals("byte[]")){
			                %>
			                	this.<%=column.getLabel()%> = new byte[length_<%=column.getLabel()%>]; 
			                    <%=dataInput%>.readFully(this.<%=column.getLabel()%>);
			                <%
			                } else if(typeToGenerate.equals("Char") || typeToGenerate.equals("Character")){
			                %>
			                    this.<%=column.getLabel()%> = <%=dataInput%>.readChar();
			                <%
			                } else if(typeToGenerate.equals("java.util.Date")) {
			                %>
			                    this.<%=column.getLabel()%> = new java.util.Date(<%=dataInput%>.readLong());
			                <%
			                } else if(typeToGenerate.equals("Double")){
			                %>
			                    this.<%=column.getLabel()%> = <%=dataInput%>.readDouble();
			                <%
			                } else if(typeToGenerate.equals("Float")){
			                %>
			                    this.<%=column.getLabel()%> = <%=dataInput%>.readFloat();
			                <%
			                } else if(typeToGenerate.equals("BigDecimal")){
			                %>
			                    int length_<%=column.getLabel()%> = <%=dataInput%>.readShort();
			                    byte[] bytes_<%=column.getLabel()%> = new byte[length_<%=column.getLabel()%>]; 
			                    <%=dataInput%>.readFully(bytes_<%=column.getLabel()%>);
			                    int scale_<%=column.getLabel()%> = <%=dataInput%>.readShort();
			                    this.<%=column.getLabel()%> = new java.math.BigDecimal(new java.math.BigInteger(bytes_<%=column.getLabel()%>), scale_<%=column.getLabel()%>);
			                <%
			                } else if(typeToGenerate.equals("Integer")){
			                %>
			                    this.<%=column.getLabel()%> = <%=dataInput%>.readInt();
			                <%
			                } else if(typeToGenerate.equals("Long")){
			                %>
			                    this.<%=column.getLabel()%> = <%=dataInput%>.readLong();
			                <%
			                } else if(typeToGenerate.equals("Object")){
			                %>
			                    Don't support Object type: column--<%=column.getLabel()%>
			                <%
			                } else if(typeToGenerate.equals("Short")){
			                %>
			                    this.<%=column.getLabel()%> = <%=dataInput%>.readShort();
			                <%
			                } else if(typeToGenerate.equals("String")) {
			                %>
			                	int length_<%=column.getLabel()%> = <%=dataInput%>.readInt();
			                    byte[] bytes_<%=column.getLabel()%> = new byte[length_<%=column.getLabel()%>]; 
			                    <%=dataInput%>.readFully(bytes_<%=column.getLabel()%>, 0, length_<%=column.getLabel()%>);
			                    this.<%=column.getLabel()%> = new String(bytes_<%=column.getLabel()%>, 0, length_<%=column.getLabel()%>, "UTF-8");
			                <%
			                } else if(typeToGenerate.equals("List")) {
			                %>
			                    Don't support List type: column--<%=column.getLabel()%>
			                <%
			                } else if(typeToGenerate.equals("Doucument")) {
			                %>
			                    Don't support Document type: column--<%=column.getLabel()%>
			                <%
			                } else if(typeToGenerate.equals("Dynamic")){
			                %>
			                    Don't support Dynamic type: column--<%=column.getLabel()%>
			                <%
			                }
			                %>
			            }
			        <%
		            }
	            }
	        }
		}
		
		public void overrideHashCode(){
		%>
			final int prime = 31;
			int result = 1;
			<%
			if (columns != null) {
				for (IMetadataColumn column: columns) {
					JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
					if (JavaTypesManager.isJavaPrimitiveType(column.getTalendType(), column.isNullable())) {
					 	String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
					 	if(javaType == JavaTypesManager.BOOLEAN) {
						%>
		        			result = prime * result + (this.<%=column.getLabel() %> ? 1231 : 1237);
						<%
						} else {	
						%>
							result = prime * result + (int) this.<%=column.getLabel() %>;
						<%
						}
					} else if(javaType == JavaTypesManager.BYTE_ARRAY) {
						%>
						result = prime * result + java.util.Arrays.hashCode(this.<%=column.getLabel() %>);
						<%
					} else {
					%>
						result = prime * result + ((this.<%=column.getLabel() %> == null) ? 0 : this.<%=column.getLabel() %>.hashCode());
					<%
					}
				}
			}
	    	%>
			return result;
		<% 
		}
		
		public void overrideEquals(String objName){
		%>
			if (this == <%=objName%>) return true;
	        if (<%=objName%> == null) return false;
	        if (getClass() != <%=objName%>.getClass()) return false;
	        final <%=structName%> other = (<%=structName%>) <%=objName%>;
	        <%   
	        if (columns !=null) {
	            for (IMetadataColumn column: columns) {
                    JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
                    if (JavaTypesManager.isJavaPrimitiveType(column.getTalendType(), column.isNullable())) {
                    %>
                        if (this.<%=column.getLabel() %> != other.<%=column.getLabel() %>) 
                            return false;
                    <%
                    } else if(javaType == JavaTypesManager.BYTE_ARRAY) {
                    %>
                        if(!java.util.Arrays.equals(this.<%=column.getLabel() %>, other.<%=column.getLabel() %>)) {
                            return false;
                        }
                    <%
                    } else {
                    %>
                        if (this.<%=column.getLabel() %> == null) {
                            if (other.<%=column.getLabel() %> != null) 
                                return false;
                        } else if (!this.<%=column.getLabel() %>.equals(other.<%=column.getLabel() %>)) 
                            return false;
                    <%
                    }
	            }
	        }
	        %>
	        return true;
		<%
		}
		
		public void overrideCompareTo(String otherName){
			//int returnValue = 0; ?
			%>
			int returnValue = -1;
	        <%  
	        if (columns !=null) {
	            for (IMetadataColumn column: columns) {
                %>
                    returnValue = checkNullsAndCompare(this.<%=column.getLabel()%>, <%=otherName%>.<%=column.getLabel()%>);
                    if(returnValue != 0) {
                        return returnValue;
                    }
                <%
	            }
	        }
	        %>
	        return returnValue;
		<%
		}
		
		public void addMethods(){
		}
		
		public void declareVars(){
		}
		
		public void generateCode(){
		%>
			public static class <%=structName %> implements <%=implementsClasses%> {
				
				<%
				if (columns !=null) {
		        for (IMetadataColumn column: columns) {
		            JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
		            %>
		            public <%= JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable()) %> <%=column.getLabel() %>
		            	<%
		                if(javaType == JavaTypesManager.CHARACTER && !column.isNullable()) {
		                %> 
		                = ' '
		                <%
		                }
		                %>;
			        <%
			        }
			    }
				%>
				
				<%declareVars();%>
								
			    public int hashCode() {
			    	<%overrideHashCode();%>
			    }
    
			    public boolean equals(Object obj) {
			        <%overrideEquals("obj");%>
			    }
			    
			    public String toString() {
					StringBuilder sb = new StringBuilder();
					sb.append(super.toString());
					sb.append("[");
					<%	
					if (columns !=null) {
						for(int i=0; i< columns.size(); i++) {
							IMetadataColumn column = columns.get(i);
							String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
							if(typeToGenerate.equals("String")) {
							%>
								sb.append("<%=i==0?"":"," %><%=column.getLabel() %>="+<%=column.getLabel() %>);
							<%
							}else{
							%>
								sb.append("<%=i==0?"":"," %><%=column.getLabel() %>="+String.valueOf(<%=column.getLabel() %>));
							<%
							}
						}
			    	}
					%>
				    sb.append("]");
				    
				    return sb.toString();
			    }
			    
				public void write(DataOutput out) throws IOException {
					<%overrideWrite("out");%>
			    }
			    
				public void readFields(DataInput in) throws IOException {
					<%overrideReadFields("in");%>
				}

			    public int compareTo(<%=structName%> other) {
			        <%overrideCompareTo("other");%>
			    }
			    
			    private int checkNullsAndCompare(Object object1, Object object2) {
			        int returnValue = 0;
					if (object1 instanceof Comparable && object2 instanceof Comparable) {
			            returnValue = ((Comparable) object1).compareTo(object2);
			        } else if (object1 != null && object2 != null) {
			            returnValue = compareStrings(object1.toString(), object2.toString());
			        } else if (object1 == null && object2 != null) {
			            returnValue = 1;
			        } else if (object1 != null && object2 == null) {
			            returnValue = -1;
			        } else {
			            returnValue = 0;
			        }
			
			        return returnValue;
			    }
			
			    private int compareStrings(String string1, String string2) {
			        return string1.compareTo(string2);
			    }
			    
	    		<%addMethods();%>
    		}
			<%
			if(genComparator){
				ComparatorHelper StructComparator = new ComparatorHelper();
				StructComparator.init(structName + "_Comparator", columns, structName);
				StructComparator.generateCode();
				
				%>
				static{
					WritableComparator.define(<%=structName%>.class, new <%=structName + "_Comparator"%>());  
				}	
			<% 
			}
		}
	}
	%>