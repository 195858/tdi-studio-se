<%@ jet 
	package="org.talend.designer.codegen.translators" 
	imports="
		org.talend.core.model.process.IProcess
		org.talend.core.model.process.INode
		org.talend.core.model.process.IConnection 
		org.talend.core.model.process.EConnectionType
		org.talend.core.model.process.ElementParameterParser
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.designer.runprocess.CodeGeneratorRoutine
		org.talend.designer.codegen.i18n.Messages
		org.talend.core.ui.branding.IBrandingService
		org.talend.core.ui.branding.AbstractBrandingService
		org.talend.core.GlobalServiceRegister
		org.talend.designer.codegen.ITalendSynchronizer
		java.util.List
		java.util.ArrayList
		java.util.Vector
		org.talend.core.model.process.IContextParameter
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.utils.NodeUtil
		org.talend.core.model.utils.JavaResourcesHelper
	"
	class="Header" 
%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    Vector v = (Vector) codeGenArgument.getArgument();
	IProcess process = (IProcess)v.get(0);
    String version = (String)v.get(1);  
	
	List< ? extends INode> processNodes = (List< ? extends INode>)process.getGeneratingNodes();
	boolean stats = codeGenArgument.isStatistics();
	boolean trace = codeGenArgument.isTrace();
	boolean isRunInMultiThread = codeGenArgument.getIsRunInMultiThread();
	List<IContextParameter> params = new ArrayList<IContextParameter>();
	params=process.getContextManager().getDefaultContext().getContextParameterList();
%>
<%
IBrandingService service=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
if(service instanceof AbstractBrandingService){
 %>
 <%=((AbstractBrandingService) service).getJobLicenseHeader(version)%>
<%
 }
  String jobFolderName = JavaResourcesHelper.getJobFolderName(process.getName(), process.getVersion());
  String packageName = codeGenArgument.getCurrentProjectName().toLowerCase() + "." + jobFolderName;
%> 
package <%= packageName %>;

<%for (String routine : CodeGeneratorRoutine.getRequiredRoutineName(process)) {
	if(!routine.equals(ITalendSynchronizer.TEMPLATE)){%>
import routines.<%=routine%>;
<%	}
}%>
import routines.system.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

<%=ElementParameterParser.getValue(process, "__HEADER_IMPORT__") %>
<%=ElementParameterParser.getValue(process, "__FOOTER_IMPORT__") %>


<%
	List<INode> nodesWithImport = process.getNodesWithImport();
	if(nodesWithImport != null) {
		for(INode node:nodesWithImport){
%>
	//the import part of <%=node.getUniqueName() %>
	<%=ElementParameterParser.getValue(node, "__IMPORT__") %>
	
<% 		}
    } 
%>

/**
 * Job: <%=process.getName() %> Purpose: <%=ElementParameterParser.getValue(process, "__PURPOSE__") %><br>
 * Description: <%=ElementParameterParser.getValue(process, "__DESCRIPTION__") %> <br>
 * @author <%=ElementParameterParser.getValue(process, "__AUTHOR__") %>
 * @version <%=version %>
 * @status <%=ElementParameterParser.getValue(process, "__STATUS__") %> 
 */                                
 public class <%=process.getName()%> extends ThreadGroup{
 		
	private final String jobVersion = "<%=process.getVersion() %>";
	private final String jobName = "<%=codeGenArgument.getJobName() %>";
	private final String projectName = "<%=codeGenArgument.getCurrentProjectName() %>";
	public Integer errorCode = null;
	private String currentComponent = "";
	private    <%=process.getName()%>() {
		super("<%=process.getName()%>");
	}
	  @Override
	public void uncaughtException(Thread t, Throwable e) {
		e.printStackTrace();
		System.exit(1);
	}
	
	class  <%=process.getName()%>InnerThread implements Runnable
		{
        public void run() {
         try {
             Route();
            }catch (Exception e)
            {
                throw new RuntimeException(e);
            }
         
           
        }