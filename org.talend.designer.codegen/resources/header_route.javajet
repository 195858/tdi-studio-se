<%@ jet
	package="org.talend.designer.codegen.translators"
	imports="
		java.util.List
		java.util.ArrayList
		java.util.Vector
		java.util.Map
		java.io.UnsupportedEncodingException
		java.net.URLEncoder
		org.talend.core.GlobalServiceRegister
		org.talend.core.model.process.IProcess
		org.talend.core.model.process.INode
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.EConnectionType
		org.talend.core.model.process.IContextParameter
		org.talend.core.model.process.IElementParameter
		org.talend.core.model.process.ElementParameterParser
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.utils.NodeUtil
		org.talend.core.model.utils.JavaResourcesHelper
		org.talend.core.ui.branding.IBrandingService
		org.talend.core.ui.branding.AbstractBrandingService
		org.talend.designer.codegen.i18n.Messages
		org.talend.designer.codegen.ITalendSynchronizer
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.designer.runprocess.CodeGeneratorRoutine
	"
	class="Header"
%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	Vector v = (Vector) codeGenArgument.getArgument();
	IProcess process = (IProcess) v.get(0);
	String version = (String) v.get(1);

	List<? extends INode> processNodes = (List<? extends INode>) process.getGeneratingNodes();
	List<? extends INode> graphicalNodes = (List<? extends INode>) process.getGraphicalNodes();
	boolean stats = codeGenArgument.isStatistics();
	boolean trace = codeGenArgument.isTrace();
	boolean isRunInMultiThread = codeGenArgument.getIsRunInMultiThread();
	List<IContextParameter> params = new ArrayList<IContextParameter>();
	params=process.getContextManager().getDefaultContext().getContextParameterList();
%>
<%
IBrandingService service = (IBrandingService) GlobalServiceRegister.getDefault().getService(IBrandingService.class);
if (service instanceof AbstractBrandingService) {
%>
<%=((AbstractBrandingService) service).getJobLicenseHeader(version)%>
<%
}

	String jobFolderName = JavaResourcesHelper.getJobFolderName(process.getName(), process.getVersion());
	String packageName = codeGenArgument.getCurrentProjectName().toLowerCase() + "." + jobFolderName;
%>
package <%= packageName %>;

<%
	java.util.Set<String> importsSet = new java.util.TreeSet<String>();
	for (String routine : CodeGeneratorRoutine.getRequiredRoutineName(process)) {
		if (!routine.equals(ITalendSynchronizer.TEMPLATE)) {
			importsSet.add("import routines."+routine);
		}
	}
	importsSet.add("import routines.system.*");
	importsSet.add("import routines.system.api.*");
	importsSet.add("import java.text.ParseException");
	importsSet.add("import java.text.SimpleDateFormat");
	importsSet.add("import java.util.Date");
	importsSet.add("import java.util.List");
	importsSet.add("import java.math.BigDecimal");
	importsSet.add("import java.io.ByteArrayOutputStream");
	importsSet.add("import java.io.ByteArrayInputStream");
	importsSet.add("import java.io.DataInputStream");
	importsSet.add("import java.io.DataOutputStream");
	importsSet.add("import java.io.ObjectOutputStream");
	importsSet.add("import java.io.ObjectInputStream");
	importsSet.add("import java.io.IOException");
	importsSet.add("import java.util.Comparator");
	importsSet.add("import java.util.Map");
	importsSet.add("import java.util.HashMap");
	importsSet.add("import org.apache.camel.spi.Registry");
	
	String headerImports = ElementParameterParser.getValue(process, "__HEADER_IMPORT__");
	if(headerImports!=null && !"".equals(headerImports.trim())){
		String[] imports = headerImports.split(";");
		for(String s: imports){
			if(s!=null && !"".equals(s.trim())){
				importsSet.add(s.trim());
			}
		}
	}
	String footerImports = ElementParameterParser.getValue(process, "__FOOTER_IMPORT__");
	if(footerImports!=null && !"".equals(footerImports.trim())){
		String[] imports = footerImports.split(";");
		for(String s: imports){
			if(s!=null && !"".equals(s.trim())){
				importsSet.add(s.trim());
			}
		}
	}

	List<INode> nodesWithImport = process.getNodesWithImport();
	if (nodesWithImport != null) {
		for (INode node:nodesWithImport) {
			String tmp = ElementParameterParser.getValue(node, "__IMPORT__");
			if(tmp == null || "".equals(tmp.trim())){
				continue;
			}
			String[] imports = tmp.trim().split(";");
			for(String s: imports){
				if(s!=null && !"".equals(s.trim())){
					importsSet.add(s.trim());
				}
			}
		}
	}
	for(String s: importsSet){
%>
		<%=s%> ;
<%
	}
%>

/**
 * Job: <%=process.getName() %> Purpose: <%=ElementParameterParser.getValue(process, "__PURPOSE__") %><br>
 * Description: <%=ElementParameterParser.getValue(process, "__DESCRIPTION__") %> <br>
 * @author <%=ElementParameterParser.getValue(process, "__AUTHOR__") %>
 * @version <%=version %>
 * @status <%=ElementParameterParser.getValue(process, "__STATUS__") %>
 */
 public class <%=process.getName()%> implements TalendESBRoute {

	private final String jobVersion = "<%=process.getVersion() %>";
	private final String jobName = "<%=codeGenArgument.getJobName() %>";
	private final String projectName = "<%=codeGenArgument.getCurrentProjectName() %>";
	public Integer errorCode = null;
	private String currentComponent = "";
	public TalendESBRoute stopDelegate = null;

	public <%=process.getName()%>(){
		initUriMap();
	}

	public void stop() throws Exception {
		if (stopDelegate != null) stopDelegate.stop();
	}

	public void shutdown() throws Exception {
		if (stopDelegate != null) stopDelegate.shutdown();
	}

<%
	for (INode node : graphicalNodes) {
		Object value = node.getPropertyValue("STARTABLE");
		if (null != value && (Boolean) value) { %>
			private org.osgi.framework.BundleContext bundleContext;

			public void setBundleContext(org.osgi.framework.BundleContext bundleContext) {
				this.bundleContext = bundleContext;
			}
			<% break;
		}
	}
%>

<%
	for (INode node : graphicalNodes) {
		if("cCXF".equals(node.getComponent().getName())) { %>
			//ESB Service Activity Monitor Feature
			private org.apache.cxf.feature.AbstractFeature eventFeature;

			public void setEventFeature(org.apache.cxf.feature.AbstractFeature eventFeature) {
				this.eventFeature = eventFeature;
			}
			<% break;
		}
	}
%>

	private org.apache.camel.builder.RouteBuilder routeBuilder;

	private java.util.Map<String, String> uriMap;

	public java.util.Map<String,String> getUriMap() {
		return this.uriMap;
	}

	public void loadCustomUriMap(java.util.Map<String,String> newMap) {
		if(newMap == null) {
			return;
		}
		for(java.util.Map.Entry<String, String> entry: newMap.entrySet()) {
			uriMap.put(entry.getKey(), entry.getValue());
		}
	}

	protected void initUriMap() {
		uriMap = new java.util.HashMap<String, String>();
<%
String cid = "";
String componentName = "";
String uri = "";
for (INode node : graphicalNodes) {
   	cid = node.getUniqueName();
//  http://jira.talendforge.org/browse/TESB-5241
//	IElementParameter param = node.getElementParameter("LABEL");
//	if(param != null && !"__UNIQUE_NAME__".equals(param.getValue())){
//		cid = (String)param.getValue();	
//	}else{
//		cid = node.getUniqueName();
//	}
   	
	componentName = node.getComponent().getName();
	uri = "";
	if ("cMessagingEndpoint".equals(componentName)) {
		uri = ElementParameterParser.getValue(node, "__URI__");
	} else if ("cFile".equals(componentName)) {
		String filePath = ElementParameterParser.getValue(node, "__URI__");
		String noop = ElementParameterParser.getValue(node, "__NOOP__");
		String flatten = ElementParameterParser.getValue(node, "__FLATTEN__");
		String bufferSize = ElementParameterParser.getValue(node, "__BUFFER_SIZE__");
		String autoCreate = ElementParameterParser.getValue(node, "__AUTOCREATE__");
		String fileName = ElementParameterParser.getValue(node, "__FILENAME__");
		String charset = ElementParameterParser.getValue(node, "__ENCODING__");

		StringBuffer arguments = new StringBuffer();

		uri = "\"file:///\"+" + filePath;

		if ("true".equals(noop)) {
			arguments.append("\"noop=true\"+");
		} else {
			arguments.append("\"noop=false\"+");
		}

		if ("false".equals(autoCreate)) {// default true, ignore.
			arguments.append("\"&autoCreate=false\"+");
		}

		if ("true".equals(flatten)) {// default false, ignore.
			arguments.append("\"&flatten=true\"+");
		}

		if (fileName != null && !fileName.equals("\"\"") && fileName.length() > 0 ) {
			arguments.append("\"&fileName=\"+").append(fileName).append("+");
		}

		if (charset != null  && !charset.equals("\"\"") && charset.length() > 0) {
			arguments.append("\"&charset=\"+").append(charset).append("+");
		}

		if (bufferSize != null && !bufferSize.equals("\"\"") && bufferSize.length() > 0) {
			arguments.append("\"&bufferSize=\"+").append(bufferSize).append("+");
		}

		List<Map<String, String>> tableValues = (List<Map<String, String>>) ElementParameterParser.getObjectValue(node, "__ADVARGUMENTS__");
		for (Map<String, String> map : tableValues) {
			String argName = map.get("NAME");
			String argValue = map.get("VALUE");
			arguments.append("\"&\"+").append(argName).append("+\"=\"+").append(argValue).append("+");
		}

		if (arguments.length() > 0) {
			arguments.deleteCharAt(arguments.length() - 1);
			uri = uri + "+\"?\"+" + arguments.toString();
		}
		System.out.println(uri);

	} else if ("cCXF".equals(componentName)) {
		String url = ElementParameterParser.getValue(node, "__ADDRESS__").trim();

		if ("true".equals(ElementParameterParser.getValue(node, "__ENABLE_SL__"))) {
			List<? extends IConnection> conns = node.getIncomingConnections();
			if (!conns.isEmpty()) {
				INode source = conns.get(0).getSource();
				if (!("cErrorHandler".equals(source.getComponent().getName())
						&& source.getIncomingConnections().isEmpty())) {
					// consumer role
					url = "((null == bundleContext) ? " + url + " : \"locator://locator/\")";
				}
			}
		}

		String serviceType = ElementParameterParser.getValue(node, "__SERVICE_TYPE__");

		StringBuilder sb = new StringBuilder();
		sb.append("\"cxf://\"+").append(url).append("+\"?" + serviceType + "=\"");

		if ("wsdlURL".equals(serviceType)) {
		
			//http://jira.talendforge.org/browse/TESB-6226
		    String filePath = "";
			
			String wsdlType = ElementParameterParser.getValue(node, "__WSDL_TYPE__");
			if("file".equals(wsdlType)){
			  filePath =  ElementParameterParser.getValue(node, "__WSDL_FILE__");
			}else{
				filePath =  ElementParameterParser.getValue(node, "__ROUTE_RESOURCE_TYPE_RES_URI__");
				filePath = "\"classpath:" + filePath + "\"";
			}
			filePath.replaceAll("\\\\","/");
			sb.append("+").append(filePath);
		} else {
			sb.append("+" + ElementParameterParser.getValue(node, "__SERVICE_CLASS__"));
		}


		String dataformat = ElementParameterParser.getValue(node, "__DATAFORMAT__");
		sb.append("+\"&dataFormat=" + dataformat + "\"");

		String specifyService = ElementParameterParser.getValue(node, "__SPECIFY_SERVICE__");
		if("true".equals(specifyService)){
			sb.append("+\"&serviceName=\"+").append(ElementParameterParser.getValue(node, "__SERVICE_NAME__").trim());
			sb.append("+\"&portName=\"+").append(ElementParameterParser.getValue(node, "__PORT_NAME__").trim());
		}

		List<Map<String, String>> tableValues = (List<Map<String, String>>) ElementParameterParser.getObjectValue(node, "__ADVARGUMENTS__");
		for (Map<String, String> map : tableValues) {
			String argName = map.get("NAME").trim();
			String argValue = map.get("VALUE").trim();
			sb.append("+\"&\"+" + argName + "+\"=\"+" + argValue);
		}
		uri = sb.toString();

	} else if ("cFtp".equals(componentName)) {
		String type = ElementParameterParser.getValue(node, "__TYPE__");
		String username = ElementParameterParser.getValue(node, "__USERNAME__");
		String server = ElementParameterParser.getValue(node, "__SERVER__");
		String port = ElementParameterParser.getValue(node, "__PORT__");
		String password = ElementParameterParser.getValue(node, "__PASSWORD__");
		String directory = ElementParameterParser.getValue(node, "__DIRECTORY__");

		StringBuffer fragments = new StringBuffer();
		fragments.append("\"" + type + "://\"");

		if (username.trim().length() > 0) {
			fragments.append("+" + username.trim()).append("+\"@\"");
		}

		fragments.append("+" + server.trim());

		if (port.trim().length() > 0) {
			fragments.append("+\":\"").append("+" + port.trim());
		}

		if (directory.trim().length() > 0) {
			fragments.append("+\"/\"").append("+" + directory.trim());
		}

		boolean hasArg = false;
		if (password.trim().length() > 0) {
			hasArg = true;
			fragments.append("+\"?password=\"+" + password);
		}

		List<Map<String, String>> tableValues = (List<Map<String, String>>) ElementParameterParser.getObjectValue(node, "__ADVARGUMENTS__");
		for (Map<String, String> map : tableValues) {
			String argName = map.get("NAME").trim();
			String argValue = map.get("VALUE").trim();
			if (!hasArg) {
				fragments.append("+\"?\"+" + argName + "+\"=\"+" + argValue);
				hasArg = true;
			} else {
				fragments.append("+\"&\"+" + argName + "+\"=\"+" + argValue);
			}
		}
		uri = fragments.toString();

	} else if("cJMS".equals(componentName)) {
		//http://jira.talendforge.org/browse/TESB-4861
		String name = ElementParameterParser.getValue(node, "__ROUTE_COMPONENT_TYPE_ID__");
		if (name == null || name.equals("")) {
			name = "jms";
		}
		name = name.replace("_", "");
		name = "\"" + name + "\"";
		//String name = ElementParameterParser.getValue(node, "__NAME__").trim();
		//Remove unnecessary subfix
		//name += "+";
		//name += ElementParameterParser.getValue(node, "__SUBFIX__").trim();
		String type = ElementParameterParser.getValue(node, "__TYPE__");
		String destination = ElementParameterParser.getValue(node, "__DESTINATION__").trim();

		boolean hasOptions = false;

		StringBuffer sb = new StringBuffer();
		sb.append(name).append("+\":" + type + ":\"").append("+" + destination);

		List<Map<String, String>> tableValues = (List<Map<String, String>>) ElementParameterParser.getObjectValue(node, "__URI_OPTIONS__");
		for (Map<String, String> map : tableValues) {
			String argName = map.get("NAME").trim();
			String argValue = map.get("VALUE").trim();

			if (!hasOptions) {
				sb.append("+\"?\"+" + argName + "+\"=\"+" + argValue);
				hasOptions = true;
			} else {
				sb.append("+\"&\"+" + argName + "+\"=\"+" + argValue);
			}
		}

		uri = sb.toString();

	} else if ("cLog".equals(componentName)) {
		String useLogEIP = ElementParameterParser.getValue(node, "__USE_LOGEIP__");
		if ("true".equals(useLogEIP)) {
			continue;
		}

		StringBuffer sb = new StringBuffer();
		sb.append("\"log:").append(cid);

		String level = ElementParameterParser.getValue(node, "__LEVEL_TYPE__");
		sb.append("?").append("level=").append(level);

		String isSize = ElementParameterParser.getValue(node, "__GROUP_SIZE__");
		String isInterval = ElementParameterParser.getValue(node, "__GROUP_INTERVAL__");
		String isFormat = ElementParameterParser.getValue(node, "__FORMAT__");

		if ("true".equals(isSize)) {
			String groupSize = ElementParameterParser.getValue(node, "__SIZE__");
			sb.append("&groupSize=").append(groupSize).append("\"");
		} else if ("true".equals(isInterval)) {
			String interval = ElementParameterParser.getValue(node, "__INTERVAL__");
			sb.append("&groupInterval=").append(interval);
			String delay = ElementParameterParser.getValue(node, "__DELAY__");
			if (!"0".equals(delay)) {
				sb.append("&groupDelay=").append(delay);
			}
			String activeOnly = ElementParameterParser.getValue(node, "__ACTIVE_ONLY__");
			if (!"true".equals(activeOnly)) {
				sb.append("&groupActiveOnly=").append(activeOnly);
			}
			sb.append("\"");
		} else if ("true".equals(isFormat)) {
			sb.append("\"");
			List<Map<String, String>> formatValues = (List<Map<String, String>>) ElementParameterParser.getObjectValue(node, "__ARGUMENTS__");
			for (Map<String, String> map : formatValues) {
				String argName = map.get("NAME").trim();
				String argValue = map.get("VALUE").trim();
				sb.append("+\"&\"+" + argName + "+\"=\"+" + argValue);
			}
		} else {
			sb.append("\"");
		}

		uri = sb.toString();

	} else if ("cMail".equals(componentName)) {

		StringBuffer sb = new StringBuffer();

		String protocols = ElementParameterParser.getValue(node, "__PROTOCOLS__");
		sb.append("\"").append(protocols).append("://");

		String host = ElementParameterParser.getValue(node, "__HOST__");
		sb.append("\"+").append(host);

		String port = ElementParameterParser.getValue(node, "__PORT__");
		if (!"\"\"".equals(port)) {
			sb.append("+\":\"+").append(port);
		}

		boolean hasParam = false;
		String userName = ElementParameterParser.getValue(node, "__USERNAME__");
		if (!"\"\"".equals(userName)) {
			sb.append("+\"?username=\"+").append(userName);
			hasParam = true;
		}

		String password = ElementParameterParser.getValue(node, "__PASSWORD__");
		if (!"\"\"".equals(password)) {
			if (hasParam) {
				sb.append("+\"&password=\"+");
			} else {
				sb.append("+\"?password=\"+");
			}
			sb.append(password);
			hasParam = true;
		}

		String subject = ElementParameterParser.getValue(node, "__SUBJECT__");
		if (!"\"\"".equals(subject)) {
			if (hasParam) {
				sb.append("+\"&subject=\"+");
			} else {
				sb.append("+\"?subject=\"+");
			}
			sb.append(subject);
			hasParam = true;
		}

		String from = ElementParameterParser.getValue(node, "__FROM__");
		if (!"\"\"".equals(from)) {
			if (hasParam) {
				sb.append("+\"&from=\"+");
			} else {
				sb.append("+\"?from=\"+");
			}
			sb.append(from);
			hasParam = true;
		}

		String to = ElementParameterParser.getValue(node, "__TO__");
		if (!"\"\"".equals(to)) {
			if (hasParam) {
				sb.append("+\"&to=\"+");
			} else {
				sb.append("+\"?to=\"+");
			}
			sb.append(to);
			hasParam = true;
		}

		String contentType = ElementParameterParser.getValue(node, "__CONTENTTYPE__");
		if (!"\"\"".equals(contentType)) {
			if (hasParam) {
				sb.append("+\"&contentType=\"+");
			} else {
				sb.append("+\"?contentType=\"+");
			}
			sb.append(contentType);
			hasParam = true;
		}

		String cc = ElementParameterParser.getValue(node, "__CC__");
		if (!"\"\"".equals(cc)) {
			if (hasParam) {
				sb.append("+\"&CC=\"+");
			} else {
				sb.append("+\"?CC=\"+");
			}
			sb.append(cc);
			hasParam = true;
		}

		String bcc = ElementParameterParser.getValue(node, "__BCC__");
		if (!"\"\"".equals(bcc)) {
			if (hasParam) {
				sb.append("+\"&BCC=\"+");
			} else {
				sb.append("+\"?BCC=\"+");
			}
			sb.append(bcc);
			hasParam = true;
		}

		List<Map<String, String>> formatValues = (List<Map<String, String>>) ElementParameterParser.getObjectValue(node, "__ARGUMENTS__");
		for (Map<String, String> map : formatValues) {
			String argName = map.get("NAME").trim();
			String argValue = map.get("VALUE").trim();
			if (hasParam) {
				sb.append("+\"&\"+" + argName + "+\"=\"+" + argValue);
			} else {
				sb.append("+\"?\"+" + argName + "+\"=\"+" + argValue);
				hasParam = true;
			}
		}

		//sb.append("+\"");
		uri = sb.toString();
	} else if ("cHttp".equals(componentName)) {

		StringBuffer sb = new StringBuffer();

		String resourceUri = ElementParameterParser.getValue(node, "__URI__");
		sb.append(resourceUri);

		boolean hasParam = resourceUri==null?false:resourceUri.contains("?");

		String method = ElementParameterParser.getValue(node, "__METHOD__");
		if("GET".equals(method)||"HEAD".equals(method) || "DELETE".equals(method)){
			List<Map<String, String>> parameters = (List<Map<String, String>>) ElementParameterParser.getObjectValue(node, "__PARAMETERS__");
			String encodeCharset = ElementParameterParser.getValue(node, "__ENCODER_CHARSET__");

			for (Map<String, String> map : parameters) {
				String argName = map.get("KEY").trim();
				String argValue = map.get("VALUE").trim();
				try{
					if(argName.startsWith("\"")&&argName.endsWith("\"")&&argName.length()>=2){
						argName = URLEncoder.encode(argName.substring(1, argName.length()-1),encodeCharset);
						argName = "\""+argName+"\"";
					}else{
						argName = URLEncoder.encode(argName,encodeCharset);
					}
					if(argValue.startsWith("\"")&&argValue.endsWith("\"")&&argValue.length()>=2){
						argValue = URLEncoder.encode(argValue.substring(1, argValue.length()-1),encodeCharset);
						argValue = "\""+argValue+"\"";
					}else{
						argValue = URLEncoder.encode(argValue,encodeCharset);
					}
				} catch (UnsupportedEncodingException e) {
					e.printStackTrace();
				}
				if (hasParam) {
					sb.append("+\"&\"+" + argName + "+\"=\"+" + argValue);
				} else {
					sb.append("+\"?\"+" + argName + "+\"=\"+" + argValue);
					hasParam = true;
				}
			}
		}

		uri = sb.toString();
	} else {
		continue;
	}
%>
		uriMap.put("<%=cid%>", <%=uri%>);
<%
}
%>
	}

	private java.util.Properties defaultProps = new java.util.Properties();

	public class ContextProperties extends java.util.Properties {

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}
		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {
		<% for (IContextParameter ctxParam : params){
			String cParaName = ctxParam.getName(); %>
			if(<%=cParaName %> != null){
			<% if(ctxParam.getType().equals("id_Date")){ %>
				String pattern_<%=cParaName %> = "yyyy-MM-dd HH:mm:ss";
				String value_<%=cParaName %> = "<%=ctxParam.getValue() %>";
				String[] parts_<%=cParaName %> = value_<%=cParaName %>.split(";");
				if (parts_<%=cParaName %>.length > 1) {
					pattern_<%=cParaName %> = parts_<%=cParaName %>[0];
					this.setProperty("<%=cParaName %>", pattern_<%=cParaName %> + ";" + FormatterUtils.format_Date(<%=cParaName %>, pattern_<%=cParaName %>));
				} else {
					this.setProperty("<%=cParaName %>", FormatterUtils.format_Date(<%=cParaName %>, pattern_<%=cParaName %>));
				}
			<% } else { %>
				this.setProperty("<%=cParaName %>", <%=cParaName %>.toString());
			<% } %>
			}
		<% } %>
		}

<%
for (IContextParameter ctxParam : params) {
	if(ctxParam.getType().equals("id_List Of Value") || ctxParam.getType().equals("id_File") || ctxParam.getType().equals("id_Directory")) { %>
		public String <%=ctxParam.getName()%>;
		public String get<%=Character.toUpperCase(ctxParam.getName().charAt(0)) + ctxParam.getName().substring(1)%>() {
			return this.<%=ctxParam.getName()%>;
		}
<%	} else { %>
		public <%=JavaTypesManager.getTypeToGenerate(ctxParam.getType(),true)%> <%=ctxParam.getName()%>;
		public <%=JavaTypesManager.getTypeToGenerate(ctxParam.getType(),true)%> get<%=Character.toUpperCase(ctxParam.getName().charAt(0)) + ctxParam.getName().substring(1)%>() {
			return this.<%=ctxParam.getName()%>;
		}
<%	}
}
%>
	}

	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}



<% if(stats) { %>

	class MyStatThread implements Runnable {

		CamelStat stats;
		boolean isFinished;

		public MyStatThread(CamelStat stats) {
			this.stats = stats;
		}

		public void run() {
			while (true) {
				try {
<%
		for (INode node : processNodes) {
			if (node.isActivate()) {
				for(int i=0; i<node.getIncomingConnections().size(); i++) {
%>
					stats.updateStatOnConnection("<%=node.getIncomingConnections().get(i).getUniqueName()%>", 1, "<%=node.getUniqueName()%>");
<%
				}
			}
		}
%>
					Thread.sleep(1000);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}
	}
<% } //if stats %>
