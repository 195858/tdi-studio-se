<%@ jet 
	package="org.talend.designer.codegen.translators" 
	imports="
		org.talend.core.model.process.IProcess
		org.talend.core.model.process.INode
		org.talend.core.model.process.IConnection 
		org.talend.core.model.process.EConnectionType
		org.talend.core.model.process.ElementParameterParser
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.designer.codegen.temp.CodeGeneratorRoutine
		org.talend.designer.codegen.i18n.Messages
		org.talend.core.ui.branding.IBrandingService
		org.talend.core.GlobalServiceRegister
		org.talend.designer.codegen.IRoutineSynchronizer
		java.util.List
		java.util.ArrayList
		java.util.Vector
		org.talend.core.model.process.IContextParameter
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.utils.NodeUtil
	"
	class="Header" 
%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    Vector v = (Vector) codeGenArgument.getArgument();
	IProcess process = (IProcess)v.get(0);
    String version = (String)v.get(1);
	
	List< ? extends INode> processNodes = (List< ? extends INode>)process.getGeneratingNodes();
	boolean stats = codeGenArgument.isStatistics();
	boolean trace = codeGenArgument.isTrace();
	boolean isRunInMultiThread = codeGenArgument.getIsRunInMultiThread();
	List<IContextParameter> params = new ArrayList<IContextParameter>();
	params=process.getContextManager().getDefaultContext().getContextParameterList();
%>
// ============================================================================
//
// <%=Messages.getString("generatedcode.copyright.title")%>
//
// <%=Messages.getString("generatedcode.copyright.body1", ((IBrandingService) GlobalServiceRegister.getDefault().getService(
                IBrandingService.class)).getFullProductName()) %>
// <%=Messages.getString("generatedcode.copyright.body2", version) %>
// <%=Messages.getString("generatedcode.copyright.body3") %>
// <%=Messages.getString("generatedcode.copyright.body4") %>
// <%=Messages.getString("generatedcode.copyright.body5") %>
//
// ============================================================================
<%
  String packageName = codeGenArgument.getCurrentProjectName().toLowerCase() + "." + codeGenArgument.getJobName().toLowerCase();
%> 
package <%= packageName %>;

<%for (String routine : CodeGeneratorRoutine.getRoutineName()) {
	if(!routine.equals(IRoutineSynchronizer.TEMPLATE)){%>
import routines.<%=routine%>;
<%	}
}%>
import routines.system.*;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;

/**
 * Job: <%=process.getName() %> Purpose: <%=ElementParameterParser.getValue(process, "__PURPOSE__") %><br>
 * Description: <%=ElementParameterParser.getValue(process, "__DESCRIPTION__") %> <br>
 * @author <%=ElementParameterParser.getValue(process, "__AUTHOR__") %>
 * @version <%=ElementParameterParser.getValue(process, "__VERSION__") %>
 * @status <%=ElementParameterParser.getValue(process, "__STATUS__") %> 
 */
 public class <%=process.getName() %> {    
    // create and load default properties
	private static java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	private static java.util.Properties context = new java.util.Properties();
<%
    for (IContextParameter ctxParam :params)
     {
        
        if(ctxParam.getType().equals("id_List Of Value") || ctxParam.getType().equals("id_File") || ctxParam.getType().equals("id_Directory") || ctxParam.getType().equals("id_Character"))
        {
     %>
     private static String <%=ctxParam.getName()%>;
     <%
        }else
        {
%>      
private static <%=JavaTypesManager.getTypeToGenerate(ctxParam.getType(),true)%>  <%=ctxParam.getName()%>;
  <%    }   
     }
%>
	private static final String jobName = "<%=codeGenArgument.getJobName() %>";
	private static final String projectName = "<%=codeGenArgument.getCurrentProjectName() %>";
	public static Integer errorCode = null;
<%
	if(!isRunInMultiThread ){
%>
	private static String currentComponent = "";
<%
	}
%>
	private static final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>(); 
	private static final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private static final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	private static final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();

<%
    if (stats) {
%>
private static RunStat runStat = new RunStat();
<%
    }
%>
<%
    if (trace) {
%>
private static RunTrace runTrace = new RunTrace();
<%
    }
%>

<% 
	for (INode logCatcher : process.getNodesOfType("tLogCatcher")) {
%>
	LogCatcherUtils <%=logCatcher.getUniqueName() %> = new LogCatcherUtils(); 
<%
	}

	for (INode statCatcher : process.getNodesOfType("tStatCatcher")) {
%>
	StatCatcherUtils <%=statCatcher.getUniqueName() %> = new StatCatcherUtils("<%=process.getId() %>", "<%=process.getVersion() %>"); 
<%
	}
	
	for (INode metterCatcher : process.getNodesOfType("tFlowMeterCatcher")) {
%>
	MetterCatcherUtils <%=metterCatcher.getUniqueName() %> = new MetterCatcherUtils("<%=process.getId() %>", "<%=process.getVersion() %>"); 
<%
	}
	
	for (INode assertCatcher : process.getNodesOfType("tAssertCatcher")) {
%>
	AssertCatcherUtils <%=assertCatcher.getUniqueName() %> = new AssertCatcherUtils(); 
<%
	}
%>
private class TalendException extends Exception {
	private Exception e = null;
	private <%=process.getName() %> c = null;
<%
	if(isRunInMultiThread ){
%>	
	private String currentComponent = null;
	private TalendException(<%=process.getName() %> c, Exception e,String errorComponent) {
		this.currentComponent= errorComponent;
<%
	}else{
%>
	private TalendException(<%=process.getName() %> c, Exception e) {
<%
	}
%>
		this.e = e;
		this.c = c;
	}
	
	@Override
	public void printStackTrace() {
	    if (!(e instanceof TalendException || e instanceof TDieException)) {
	     	globalMap.put(currentComponent+"_ERROR_MESSAGE",e.getMessage());
	        System.err.println("Exception in component " + currentComponent);
	    }
	    if (!(e instanceof TDieException)) {
	        e.printStackTrace();
	    }
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(c, new Object[] {e});
					break;
				}
			}
<%
		if (process.getNodesOfType("tLogCatcher").size() > 0) {
			List<INode> logCatchers = (List<INode>)process.getNodesOfType("tLogCatcher");
			for (INode logCatcher : logCatchers) {
				if (ElementParameterParser.getValue(logCatcher, "__CATCH_JAVA_EXCEPTION__").equals("true")) {
					// 1) add the message to the stack
%>
		  if(!(e instanceof TDieException)){
            <%=logCatcher.getUniqueName() %>.addMessage("Java Exception", currentComponent, 6, e.getMessage(), 1);
<%
					// 2) launch logCatcher subProcess
%>
			<%=logCatcher.getUniqueName() %>Process();
		  }
<%
				}
			}
		}
%>

		} catch (java.lang.SecurityException e) {
			this.e.printStackTrace();
		} catch (java.lang.IllegalArgumentException e) {
			this.e.printStackTrace();
		} catch (java.lang.IllegalAccessException e) {
			this.e.printStackTrace();
		} catch (java.lang.reflect.InvocationTargetException e) {
			this.e.printStackTrace();
		}
<% 		
		boolean needCatchTalendException = false;
		if (process.getNodesOfType("tLogCatcher").size() > 0) {
			for(INode node:process.getNodesOfType("tLogCatcher")){ 
				if(ElementParameterParser.getValue(node, "__CATCH_JAVA_EXCEPTION__").equals("true")){
				needCatchTalendException = true; 
				break;
				} 
			} 
		}
		
		if ((!needCatchTalendException) && (process.getNodesOfType("tAssertCatcher").size() > 0)) {
			for(INode node:process.getNodesOfType("tAssertCatcher")){ 
				if(ElementParameterParser.getValue(node, "__CATCH_JAVA_EXCEPTION__").equals("true")){
				needCatchTalendException = true; 
				break;
				} 
			} 
		}
		if(needCatchTalendException) {
		    if (process.getNodesOfType("tLogCatcher").size() > 0) {
		        %>
		        catch (TalendException e) {
		            // do nothing
		        }
		        <%
		    }
		}
		%>
		}
	}
}

<% // Methods for RUN IF Error links %>
<%
	for (INode node : processNodes) {
		if (node.isActivate()) {
		    %>
            public void <%=node.getUniqueName() %>_error(Exception exception) throws TalendException {
                end_Hash.put("<%=node.getUniqueName() %>", System.currentTimeMillis());
                <%
                boolean ifBeforRunError = NodeUtil.checkConnectionAfterNode(node, EConnectionType.ON_COMPONENT_ERROR);
                if(!ifBeforRunError) {
                    if (process.getNodesOfType("tAssertCatcher").size() > 0) {
                        List<INode> assertCatchers = (List<INode>)process.getNodesOfType("tAssertCatcher");
                        for (INode assertCatcher : assertCatchers) {
                            if (ElementParameterParser.getValue(assertCatcher, "__CATCH_JAVA_EXCEPTION__").equals("true")) {
                                // 1) add the message to the stack
                                %>
                                if(!(exception instanceof TDieException)){
                                    <%=assertCatcher.getUniqueName()%>.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
                                    <%=assertCatcher.getUniqueName()%>Process();
                                }
                                <%
                            }
                        }
                    }
                }                
                if (!node.getComponent().getName().equals("tDie")) {
                    String statCatcher = ElementParameterParser.getValue(node,"__TSTATCATCHER_STATS__");
                	if (statCatcher.compareTo("true")==0) {
                		for (INode statCatcherNode : node.getProcess().getNodesOfType("tStatCatcher")) {
                		    %>
                		    <%=statCatcherNode.getUniqueName() %>.addMessage("failure","<%=node.getUniqueName() %>", end_Hash.get("<%=node.getUniqueName() %>")-start_Hash.get("<%=node.getUniqueName() %>"));
                		    <%=statCatcherNode.getUniqueName() %>Process();
                		    <%
                		}
                	}
                }
                List< ? extends IConnection> conns = node.getOutgoingConnections();
                for (IConnection conn : conns) {
                    if (conn.getLineStyle().equals(EConnectionType.ON_COMPONENT_ERROR)) {
                        %>
                        try {	    
	
                            <%
                            if(isRunInMultiThread ){
                                %>
                                ((java.util.Map)threadLocal.get()).put(errorCode, null); 
                                <%=conn.getTarget().getUniqueName() %>Process();
                                ((java.util.Map)threadLocal.get()).put(status, "end");
                                <%
                            }else {
                                %>
                                errorCode = null;
                                <%=conn.getTarget().getUniqueName() %>Process();
                                status="end";
                                <%
                            }
                            %>
    	
    	
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        <%
                    }
                }
                %>
                <%=node.getSubProcessStartNode(false).getUniqueName() %>_onSubJobError(exception);
            }
            <%
		}
	}
	for (INode node : processNodes) {
		if ((node.isSubProcessStart()) && (node.isActivate())) {
%>
			public void <%=node.getUniqueName() %>_onSubJobError(Exception exception) throws TalendException {
<%
			List< ? extends IConnection> conns = node.getOutgoingConnections();
			for (IConnection conn : conns) {
				if (conn.getLineStyle().equals(EConnectionType.ON_SUBJOB_ERROR)) {
%>
				try {	    
<%
					if(isRunInMultiThread ){
%>
					((java.util.Map)threadLocal.get()).put(errorCode, null); 
					<%=conn.getTarget().getUniqueName() %>Process();
					((java.util.Map)threadLocal.get()).put(status, "end");
<%
					} else {
%>
					errorCode = null;
					<%=conn.getTarget().getUniqueName() %>Process();
					status="end";
<%
					}
%>
				} catch (Exception e) {
					e.printStackTrace();
				}
<%
				}
			}
%>
			}
<%
		}
	}
%>
