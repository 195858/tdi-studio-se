<%@ jet 
	package="org.talend.designer.codegen.translators" 
	imports="
		org.talend.core.model.process.IProcess
		org.talend.core.model.process.INode 
		org.talend.core.model.process.IConnection 
		org.talend.core.model.process.EConnectionType
		org.talend.core.model.process.ElementParameterParser
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.designer.codegen.temp.CodeGeneratorRoutine
		org.talend.designer.codegen.i18n.Messages
		org.talend.core.ui.branding.IBrandingService
		org.talend.core.GlobalServiceRegister
		java.util.List
		java.util.Vector
	"
	class="Header" 
%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    Vector v = (Vector) codeGenArgument.getArgument();
	IProcess process = (IProcess)v.get(0);
    String version = (String)v.get(1);
	
	List< ? extends INode> processNodes = (List< ? extends INode>)process.getGeneratingNodes();
	boolean stats = codeGenArgument.isStatistics();
	boolean trace = codeGenArgument.isTrace();
	boolean isRunInMultiThread = codeGenArgument.getIsRunInMultiThread();
%>
// ============================================================================
//
// <%=Messages.getString("generatedcode.copyright.title")%>
//
// <%=Messages.getString("generatedcode.copyright.body1", ((IBrandingService) GlobalServiceRegister.getDefault().getService(
                IBrandingService.class)).getFullProductName()) %>
// <%=Messages.getString("generatedcode.copyright.body2", version) %>
// <%=Messages.getString("generatedcode.copyright.body3") %>
// <%=Messages.getString("generatedcode.copyright.body4") %>
// <%=Messages.getString("generatedcode.copyright.body5") %>
//
// ============================================================================
<%
  String packageName = codeGenArgument.getCurrentProjectName().toLowerCase() + "." + codeGenArgument.getJobName().toLowerCase();
%> 
package <%= packageName %>;

<%for (String routine : CodeGeneratorRoutine.getRoutineName()) {%>
import routines.<%=routine%>;
<%}%>
import routines.system.*;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

/**
 * <%=process.getName() %> <%=process.getPurpose() %>
 * <%=process.getDescription() %> 
 * @author <%=ElementParameterParser.getValue(process, "__AUTHOR__") %>
 * @version <%=process.getVersion() %>
 * @status <%=ElementParameterParser.getValue(process, "__STATUS__") %> 
 */
 public class <%=process.getName() %> {    
    // create and load default properties
	private static java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	private static java.util.Properties context = new java.util.Properties();

	private static final String jobName = "<%=codeGenArgument.getJobName() %>";
	private static final String projectName = "<%=codeGenArgument.getCurrentProjectName() %>";
<%
	if(!isRunInMultiThread ){
%>
	private static String currentComponent = "";
<%
	}
%>
	private static final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>(); 
	private static final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private static final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	private static final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();

<%
    if (stats) {
%>
private static RunStat runStat = new RunStat();
<%
    }
%>
<%
    if (trace) {
%>
private static RunTrace runTrace = new RunTrace();
<%
    }
%>

<% 
	for (INode logCatcher : process.getNodesOfType("tLogCatcher")) {
%>
	LogCatcherUtils <%=logCatcher.getUniqueName() %> = new LogCatcherUtils(); 
<%
	}

	for (INode statCatcher : process.getNodesOfType("tStatCatcher")) {
%>
	StatCatcherUtils <%=statCatcher.getUniqueName() %> = new StatCatcherUtils("<%=process.getId() %>", "<%=process.getVersion() %>"); 
<%
	}
	
	for (INode metterCatcher : process.getNodesOfType("tMetterCatcher")) {
%>
	MetterCatcherUtils <%=metterCatcher.getUniqueName() %> = new MetterCatcherUtils("<%=process.getId() %>", "<%=process.getVersion() %>"); 
<%
	}
%>
private class TalendException extends Exception {
	private Exception e = null;
	private <%=process.getName() %> c = null;
<%
	if(isRunInMultiThread ){
%>	
	private String currentComponent = null;
	private TalendException(<%=process.getName() %> c, Exception e,String errorComponent) {
		this.currentComponent= errorComponent;
<%
	}else{
%>
	private TalendException(<%=process.getName() %> c, Exception e) {
<%
	}
%>
		this.e = e;
		this.c = c;
	}
	
	@Override
	public void printStackTrace() {
		System.err.println("Exception in component " + currentComponent);
		e.printStackTrace();

		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(c, (Object[])null);
				}
			}
<%
		if (process.getNodesOfType("tLogCatcher").size() > 0) {
			List<INode> logCatchers = (List<INode>)process.getNodesOfType("tLogCatcher");
			for (INode logCatcher : logCatchers) {
				if (ElementParameterParser.getValue(logCatcher, "__CATCH_JAVA_EXCEPTION__").equals("true")) {
					// 1) add the message to the stack
%>
			<%=logCatcher.getUniqueName() %>.addMessage("Java Exception", currentComponent, 6, e.getMessage(), 1);
<%
					// 2) launch logCatcher subProcess
%>
			<%=logCatcher.getUniqueName() %>Process();
<%
				}
			}
		}
%>
		} catch (java.lang.SecurityException e) {
			this.e.printStackTrace();
		} catch (java.lang.IllegalArgumentException e) {
			this.e.printStackTrace();
		} catch (java.lang.IllegalAccessException e) {
			this.e.printStackTrace();
		} catch (java.lang.reflect.InvocationTargetException e) {
			this.e.printStackTrace();
		} 
		<% if (process.getNodesOfType("tLogCatcher").size() > 0) { %>
			catch (TalendException e) {
			// do nothing
			}
		<% } %>
	}
}

<% // Methods for RUN IF Error links %>
<%
	for (INode node : processNodes) {
		if (node.isActivate()) {
%>
public void <%=node.getUniqueName() %>_error() throws TalendException {
	end_Hash.put("<%=node.getUniqueName() %>", java.util.Calendar.getInstance().getTimeInMillis());
<%
	String statCatcher = ElementParameterParser.getValue(node,"__TSTATCATCHER_STATS__");
	if (statCatcher.compareTo("true")==0) {
		for (INode statCatcherNode : node.getProcess().getNodesOfType("tStatCatcher")) {
%>
	<%=statCatcherNode.getUniqueName() %>.addMessage("failure","<%=node.getUniqueName() %>", end_Hash.get("<%=node.getUniqueName() %>")-start_Hash.get("<%=node.getUniqueName() %>"));
	<%=statCatcherNode.getUniqueName() %>Process();
<%
		}
	}

	List< ? extends IConnection> conns = node.getOutgoingConnections();
   	for (IConnection conn : conns) {
   		if (conn.getLineStyle().equals(EConnectionType.RUN_IF_ERROR)) {
%>
	try {
    	<%=conn.getTarget().getUniqueName() %>Process();
    	status="end";
    } catch (Exception e) {
    	e.printStackTrace();
    }
<%
		}
	}
%>
}
<%
		}
	}
%>
