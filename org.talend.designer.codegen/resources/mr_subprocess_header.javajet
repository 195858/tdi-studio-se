<%@ jet 
    imports="
        org.talend.designer.codegen.config.NodesSubTree
        org.talend.core.model.process.INode
        java.util.List
        java.util.HashSet
        java.util.Set
        java.util.Map
        java.util.Vector
        org.talend.core.model.process.IProcess
        org.talend.core.model.process.EConnectionType
        org.talend.core.model.process.IConnection
        org.talend.core.model.metadata.IMetadataTable 
        org.talend.core.model.metadata.IMetadataColumn
        org.talend.designer.codegen.config.CodeGeneratorArgument
        org.talend.core.model.metadata.types.JavaTypesManager
        org.talend.core.model.metadata.types.JavaType
        org.talend.core.model.process.ElementParameterParser
        org.talend.core.model.process.IHashableInputConnections
        org.talend.core.model.process.IHashConfiguration
        org.talend.core.model.process.IHashableColumn
        org.talend.core.model.utils.NodeUtil
        org.talend.core.model.process.IConnectionCategory
        org.talend.core.utils.TalendQuoteUtils
    "
%>
    <%@ include file="mr_struct_helper.javajet"%> 
	<%
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    Vector v = (Vector) codeGenArgument.getArgument();
    INode mrconn = (INode)v.get(0);
    NodesSubTree subTree = (NodesSubTree)v.get(1);

    for(INode node : subTree.getNodes()) {
        List<IMetadataTable> metadatas = node.getMetadataList();
        List< ? extends IConnection> conns = node.getOutgoingConnections();
        for(IConnection conn : conns) {
        	if(conn.getLineStyle().equals(EConnectionType.FLOW_MAIN) || conn.getLineStyle().equals(EConnectionType.FLOW_REF)){
        		IMetadataTable metadata = conn.getMetadataTable();
        		List<IMetadataColumn> columns = metadata.getListColumns();
        	
        		StructHelper rowStruct = new StructHelper(conn.getName(), columns);
        		rowStruct.generateCode();
        	}
	    }
	}
	%>
	public void <%=subTree.getName()%>Process(final java.util.Map<String, Object> globalMap) throws Exception{
	    try {
	    	<%
			// Call for RUN AFTER links
			for(String after : subTree.getAfterSubProcesses()){
			%>
				<%=after%>Process(globalMap);
			<% 
			}
			
	    	INode firstNode = subTree.getNode(subTree.getName());
			List<? extends IConnection> conns = firstNode.getOutgoingSortedConnections();
			String firstConnName = "";
			if(conns != null && conns.size()>0){
				IConnection conn = conns.get(0);
				if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
					firstConnName = conn.getName();
				}
			}
			//if only one component and GUI without warning,
			//if the component is tMRConfiguration, ignore
			//if the component is in lookup connector, actually we should use merge connector instead of lookup connector, but now for work, we need transfer the necessary resource 
			if(!"".equals(firstConnName)){
				//when there only have tMR*Input and tMR*Output, no warning on the GUI
				if(subTree.getNodes().size() > 1){
					if(subTree.getNodes().size() == 2){
					%>
						if(true){
							throw new Exception("No processing components defined in the subprocess <%=subTree.getName()%>Process!");
						}
					<%	
					}
					String username = ElementParameterParser.getValue(mrconn,"__USERNAME__");
					String mrDistribution = ElementParameterParser.getValue(mrconn,"__DISTRIBUTION__");
					String mrVersion = ElementParameterParser.getValue(mrconn,"__MR_VERSION__");
					boolean mrUseKrb = false;
					List<String> mrKrbSupportList = java.util.Arrays.asList("APACHE_1_0_0","HDP_1_0","HDP_1_2","HDP_1_3","Cloudera_CDH4","APACHE_1_0_3_EMR");
					if("CUSTOM".equals(mrDistribution) || mrKrbSupportList.contains(mrVersion)){
						mrUseKrb = "true".equals(ElementParameterParser.getValue(mrconn,"__USE_KRB__"));
					}
					
					if(!(username == null || "".equals(username) || "\"\"".equals(username) || mrUseKrb)){
					%>
					final String mr_temp_dir = this.mr_temp_dir; 
					UserGroupInformation ugi = UserGroupInformation.createRemoteUser(<%=username%>);
					ugi.doAs(new PrivilegedExceptionAction<Void>() {
						public Void run() throws Exception {
					<%
					}
					%>
							final FileSystem fs = FileSystem.get(getConf());
							final JobConf job = new JobConf(getConf());
							job.setJobName(projectName + "_" + jobName + "_" + jobVersion + "_" + "<%=subTree.getName()%>");
							job.setJarByClass(<%=codeGenArgument.getJobName()%>.class);
							ChainMapper chainMapper = new ChainMapper(job);
							MultipleInputs.setInputMapperClass(job);
				<%
				}
			}
			%>