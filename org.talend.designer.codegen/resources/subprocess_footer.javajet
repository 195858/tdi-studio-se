<%@ jet 
	package="org.talend.designer.codegen.translators" 
	imports="
		org.talend.designer.codegen.config.NodesSubTree
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.INode
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.EConnectionType
		org.talend.core.model.process.ElementParameterParser
		java.util.List
		java.util.Iterator
	" 
	class="SubProcessFooter" 
%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	NodesSubTree subTree = (NodesSubTree) codeGenArgument.getArgument();
	boolean isRunInMultiThread = codeGenArgument.getIsRunInMultiThread();
%>

<%
	// Calls for RUN BEFORE links
	for (String before : subTree.getBeforeSubProcesses()) {
%>
		<%=before %>Process();
<%
	}
	
	if (subTree.getRootNode().getProcess().getNodesOfType("tFlowMeterCatcher").size() > 0 
		&& subTree.getRootNode().getProcess().getNodesOfType("tFlowMeter").size() >0 ) {
		List<INode> metterCatchers = (List<INode>)subTree.getRootNode().getProcess().getNodesOfType("tFlowMeterCatcher");
		List<INode> metters = (List<INode>)subTree.getRootNode().getProcess().getNodesOfType("tFlowMeter");
		List<INode> nodes = (List<INode>)subTree.getNodes();
		
		boolean hasMetterProcess = false;
		for(INode tmp : nodes)
		{
			for(INode metter : metters)
			{
				if(tmp.getUniqueName().equals(metter.getUniqueName()))
				{
					hasMetterProcess = true;
					break;
				}
			}
			if(hasMetterProcess)
			{
				break;
			}
		}
		if(hasMetterProcess)
		{
			for (INode metterCatcher : metterCatchers) {
				
%>
	<%=metterCatcher.getUniqueName() %>Process();
<%      

			}
		}
	}
%>

	
	} catch(Exception e) {
	
<%
	if(isRunInMultiThread){
%>
	throw new TalendException(this, e, currentComponent);
<%
	}else{
%>	
		throw new TalendException(this, e);
<%
	}
%>		
	}
	
<%
	//generate the code to free memory for lookup link and virtual component buffered datas 
	boolean firstIn = true;
	boolean needGc = false;
	List<INode> nodes = subTree.getNodes();
	for(INode node:nodes){
	
	boolean isVirtualGenerateNode = node.isVirtualGenerateNode();
	
	//check the virtual component generate node
	if(isVirtualGenerateNode){
		String origin  = ElementParameterParser.getValue(node, "__ORIGIN__");
		if(origin != null && !"".equals(origin)){
			if(!needGc) needGc = true;
	%>
				<%if(firstIn){%> finally{ <% firstIn = false;}%>
				//free memory for "<%=node.getUniqueName() %>"
				globalMap.put("<%=origin %>", null);
	<%
		}
	}else{
	//check the Lookup link
		List<? extends IConnection> lookupInput = node.getIncomingConnections(EConnectionType.FLOW_REF);
		if(lookupInput!=null && lookupInput.size()>0){
			if(!needGc) needGc = true;
			//check the tMap like this, instanceof can't work			
			if(node.getClass().getName().equals("org.talend.designer.mapper.MapperComponent")){
				for(IConnection connection:lookupInput){						
     %>
     			<%if(firstIn){%> finally{ <% firstIn = false;}%>
     			//free memory for "<%=node.getUniqueName() %>"
     			globalMap.put("tHash_Lookup_<%=connection.getName() %>", null); 
     <%
            	}
            }else{
            	for(IConnection connection:lookupInput){
      %>      	
      			<%if(firstIn){%> finally{ <% firstIn = false;}%>
      			//free memory for "<%=node.getUniqueName() %>"
				globalMap.put("tHash_<%=connection.getName() %>", null);
      <%      		 
				} 
			} 
		}
	}
}

	if(needGc) {
	%>		
				System.gc();
		}		
	<%
		}
	%>
}
