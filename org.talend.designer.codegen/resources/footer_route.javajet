<%@ jet 
	package="org.talend.designer.codegen.translators" 
	imports="
		org.talend.core.model.process.IProcess
		org.talend.core.model.process.INode 
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.CorePlugin
        org.talend.core.model.process.EConnectionType
        org.talend.core.model.process.IConnection	
		org.talend.core.model.metadata.IMetadataTable
		org.talend.core.model.metadata.IMetadataColumn
		java.util.Vector
		java.util.List
		java.util.ArrayList
		org.talend.core.model.process.IContextParameter
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
		org.talend.core.model.utils.JavaResourcesHelper
		org.talend.core.model.process.ElementParameterParser
	" 
	class="Footer" 
	skeleton="footer_java.skeleton"	
%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    Vector v = (Vector) codeGenArgument.getArgument();
    IProcess process = (IProcess)v.get(0);
	
	List<IContextParameter> params = new ArrayList<IContextParameter>();
    params=process.getContextManager().getDefaultContext().getContextParameterList();
    String jobFolderName = JavaResourcesHelper.getJobFolderName(process.getName(), process.getVersion());
	
	boolean stats = codeGenArgument.isStatistics();
	
%>
	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	
	public boolean watch = false;
	//portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	
	private boolean execStat = true;
	
	private java.util.Properties context_param = new java.util.Properties();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();
    
    public static void main(String[] args){
    	final <%=process.getName() %> <%=process.getName() %>Class = new <%=process.getName() %>();
    
        int exitCode = <%=process.getName() %>Class.runJobInTOS(args);
         
         if(exitCode==1)
       System.exit(exitCode);
    }    
   
 
    public String[][] runJob(String[] args) {  
    
		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };
		return bufferValue;
    }
    
    public int runJobInTOS(String[] args) {	
	
		String lastStr = "";
        for (String arg : args) {
        	if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
		
		if(clientHost == null) {
    		clientHost = defaultClientHost;
    	}
    	
    	if(pid == null || "0".equals(pid)) {
	    	pid = TalendString.getAsciiRandomString(6);
	    }

    	if (rootPid==null) {
    		rootPid = pid;
    	}
    	if (fatherPid==null) {    	 	
    		fatherPid = pid;    		
    	}else{
    		isChildJob = true;
    	}

<%
		if (stats) {
%>    	
			if (portStats != null) {
				// portStats = -1; //for testing
				if (portStats < 0 || portStats > 65535) {
					// issue:10869, the portStats is invalid, so this client socket can't open
					System.err.println("The statistics socket port " + portStats + " is invalid.");
					execStat = false;
				}
			}else{
				execStat = false;
			}            	
<%
		}
%> 
		
		
		try {
			java.io.InputStream inContext = <%=process.getName()%>.class.getClassLoader().getResourceAsStream("<%=codeGenArgument.getCurrentProjectName().toLowerCase() %>/<%=jobFolderName %>/contexts/"+contextStr+".properties");
			
			if (inContext!=null) {
	    		//defaultProps is in order to keep the original context value
	    		defaultProps.load(inContext);
    			inContext.close();
	    		context = new ContextProperties(defaultProps);
	    	}else{
	    		//print info and job continue to run, for case: context_param is not empty.
	    		System.err.println("Could not find the context " + contextStr);
			}
			
			if(!context_param.isEmpty()) {						
			    context.putAll(context_param);		
			}
<% 
			for (IContextParameter ctxParam :params)
			{
			    String typeToGenerate ="String";
			    if( !(ctxParam.getType().equals("id_File") || ctxParam.getType().equals("id_Directory") ||ctxParam.getType().equals("id_List Of Value")))
			    {
			       typeToGenerate=JavaTypesManager.getTypeToGenerate(ctxParam.getType(),true);
			    }
			    if(typeToGenerate.equals("java.util.Date"))
			    {
			        
%>
			try{
				String context_<%=ctxParam.getName()%>_value = context.getProperty("<%=ctxParam.getName()%>");
				if (context_<%=ctxParam.getName()%>_value == null){
					context_<%=ctxParam.getName()%>_value = "";
				}
				int context_<%=ctxParam.getName()%>_pos = context_<%=ctxParam.getName()%>_value.indexOf(";");
				String context_<%=ctxParam.getName()%>_pattern =  "yyyy-MM-dd HH:mm:ss";
				if(context_<%=ctxParam.getName()%>_pos > -1){
					context_<%=ctxParam.getName()%>_pattern = context_<%=ctxParam.getName()%>_value.substring(0, context_<%=ctxParam.getName()%>_pos);
					context_<%=ctxParam.getName()%>_value = context_<%=ctxParam.getName()%>_value.substring(context_<%=ctxParam.getName()%>_pos + 1);
				}
				
			    context.<%=ctxParam.getName()%>=(java.util.Date)(new java.text.SimpleDateFormat(context_<%=ctxParam.getName()%>_pattern).parse(context_<%=ctxParam.getName()%>_value));
			   
			}catch(ParseException e)
			{
			    context.<%=ctxParam.getName()%>=null;
			}
%>
			}else if(typeToGenerate.equals("Integer"))
			    {
%> 
			  try{
			      context.<%=ctxParam.getName()%>=Integer.parseInt(context.getProperty("<%=ctxParam.getName()%>"));
			  }catch(NumberFormatException e){
			      context.<%=ctxParam.getName()%>=null;
			  }
<%
			    }else if(typeToGenerate.equals("Object")||typeToGenerate.equals("String")||typeToGenerate.equals("java.lang.String") )
			    {
%>
			    context.<%=ctxParam.getName()%>=(<%=typeToGenerate%>) context.getProperty("<%=ctxParam.getName()%>");
<%
			    }else if(typeToGenerate.equals("Character")&&ctxParam.getName()!=null)
			    {
%>
			 context.<%=ctxParam.getName()%>= new java.text.StringCharacterIterator(context.getProperty("<%=ctxParam.getName()%>")).first();			 
<%
			    } else if(typeToGenerate.equals("BigDecimal"))
            {
%>
         try{
         	context.<%=ctxParam.getName()%>= new <%=typeToGenerate%>(context.getProperty("<%=ctxParam.getName()%>"));
		 }catch(NumberFormatException e){
		    context.<%=ctxParam.getName()%>=null;
		 }
<%
            }
			     else
			    {
%> 
			 try{
			     context.<%=ctxParam.getName()%>=<%=typeToGenerate%>.parse<%=typeToGenerate%> (context.getProperty("<%=ctxParam.getName()%>"));
			 }catch(NumberFormatException e){
			     context.<%=ctxParam.getName()%>=null;
			  }
<%
			    }
			}
%>
    	} catch (java.io.IOException ie) {
    		System.err.println("Could not load context "+contextStr);
    		ie.printStackTrace();
    	}
    	
    	
		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
<% 
			for (IContextParameter ctxParam :params){
				//about the type, they are same as header.javajet
				String typeToGenerate = "String";
				if(ctxParam.getType().equals("id_List Of Value") || ctxParam.getType().equals("id_File") || ctxParam.getType().equals("id_Directory")){
					typeToGenerate = "String";
				}else{			 
					typeToGenerate = JavaTypesManager.getTypeToGenerate(ctxParam.getType(),true);
				}
%>				if (parentContextMap.containsKey("<%=ctxParam.getName()%>")) {
				context.<%=ctxParam.getName()%> = (<%=typeToGenerate %>) parentContextMap.get("<%=ctxParam.getName()%>");
			}
<%
		}
%>
		}    
		try {
			initUriMap();
			Route(true);
		} catch (Exception e) {
			System.err.println(e.getMessage());
			e.printStackTrace();
			return 1;
		}
		return 0;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
    		watch = true;
    	} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}    		
    	} else if (arg.startsWith("--trace_port=")) {
    		portTraces = Integer.parseInt(arg.substring(13));
    	} else if (arg.startsWith("--client_host=")) {
    		clientHost = arg.substring(14);
    	} else if (arg.startsWith("--context=")) {
    		contextStr = arg.substring(10);
    	} else if (arg.startsWith("--father_pid=")) {
    		fatherPid = arg.substring(13);
    	} else if (arg.startsWith("--root_pid=")) {
    		rootPid = arg.substring(11);
    	} else if (arg.startsWith("--father_node=")) {
    		fatherNode = arg.substring(14);
    	} else if (arg.startsWith("--pid=")) {
    		pid = arg.substring(6);
    	} else if (arg.startsWith("--context_param")) {   		 
            String keyValue = arg.substring(16);           
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
            }
    	}	
	}
}

class TalendRouteRegistry implements Registry {

	private Map<String, Object> map = new HashMap<String, Object>();

	private Registry wrapped = null;

	public TalendRouteRegistry() {
		this(null);
	}

	public TalendRouteRegistry(Registry wrapped) {
		this.wrapped = wrapped;
	}

	public Object lookup(String name) {
		Object obj = null;
		if (wrapped != null) {
			obj = wrapped.lookup(name);
		}
		if (obj == null) {
			obj = map.get(name);
		}
		return obj;
	}

	public <T> T lookup(String name, Class<T> type) {
		T t = null;
		if (wrapped != null) {
			t = wrapped.lookup(name, type);
		}
		if (t == null) {
			t = (T) map.get(name);
		}
		return t;
	}

	public <T> Map<String, T> lookupByType(Class<T> type) {
		Map<String, T> result = null;
		if (wrapped != null) {
			result = wrapped.lookupByType(type);
		}
		if (result == null) {
			result = new HashMap<String, T>();
		}
		if (result.isEmpty()) {
			for (Map.Entry<String, Object> entry : map.entrySet()) {
				if (type.isInstance(entry.getValue())) {
					result.put(entry.getKey(), type.cast(entry.getValue()));
				}
			}
		}
		return result;
	}

	public void register(String name, Object instance) {
		map.put(name, instance);
	}

}