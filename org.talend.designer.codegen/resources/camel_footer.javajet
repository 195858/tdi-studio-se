<%@ jet
	imports="
		org.talend.core.model.process.IProcess
		org.talend.core.model.process.INode
		org.talend.core.model.process.IConnection 
		org.talend.core.model.process.EConnectionType
		org.talend.core.model.process.ElementParameterParser
		org.talend.designer.codegen.config.CodeGeneratorArgument
		java.util.Vector
		java.util.List
		java.util.Map
	"
%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	 Vector v = (Vector) codeGenArgument.getArgument();
	IProcess process = (IProcess)v.get(0);
	
	boolean stats = codeGenArgument.isStatistics();
%>

		}
			};
			getCamelContexts().get(0).addRoutes(routeBuilder);
		}	
		

		protected void doStop() throws Exception {
			super.doStop();
			getCamelContexts().get(0).stop();
		}

		protected org.apache.camel.ProducerTemplate findOrCreateCamelTemplate() {
			return getCamelContexts().get(0).createProducerTemplate();
		}

		protected java.util.Map<String, org.apache.camel.CamelContext> getCamelContextMap() {
			java.util.Map<String, org.apache.camel.CamelContext> answer = new java.util.HashMap<String, org.apache.camel.CamelContext>();
			org.apache.camel.impl.DefaultCamelContext camelContext;
			org.apache.camel.spi.TypeConverterRegistry typeConverterRegistry;
<%
			boolean startable = false;
			for (INode node : (List< ? extends INode>)process.getGraphicalNodes()) {
				Object value = node.getPropertyValue("STARTABLE");
				startable = value == null? false:(Boolean)value;
				if(startable){
					break;
				}
			}
			
			if (startable) { 
%>
				if (bundleContext != null) {
					org.apache.camel.osgi.CamelContextFactory factory = new org.apache.camel.osgi.CamelContextFactory();
					factory.setBundleContext(bundleContext);
					camelContext = factory.createContext();
					bundleContext.registerService(org.apache.camel.CamelContext.class.getName(), camelContext, null);
				} else {
					camelContext = new org.apache.camel.impl.DefaultCamelContext();
				}
<%
			} else {
%>
				camelContext = new org.apache.camel.impl.DefaultCamelContext();
<%
			}
%>
			TalendRouteRegistry contextRegister = new TalendRouteRegistry(camelContext.getRegistry());
			camelContext.setRegistry(contextRegister);
			typeConverterRegistry = camelContext.getTypeConverterRegistry();
<%

			List<? extends INode> beanRegisterNodes = process.getNodesOfType("cBeanRegister");
			if(beanRegisterNodes != null && beanRegisterNodes.size()>0){
%>
				Object beanInstance = null;
<%			}
			for(INode node: beanRegisterNodes){
				String id = ElementParameterParser.getValue(node, "__ID__");
				String isSimple = ElementParameterParser.getValue(node, "__SIMPLE_CONFIG__");
				String classQualifiedName = ElementParameterParser.getValue(node, "__CLASS_QUALIFIED_NAME__");
				String hasArguments = ElementParameterParser.getValue(node, "__SPECIFY_ARGUMENTS__");
				List<Map<String, String>> arguments = (List<Map<String, String>>) ElementParameterParser.getObjectValue(node, "__ARGUMENTS__");
				
				String code = ElementParameterParser.getValue(node, "__CODE__");
				
				if("true".equals(isSimple)){
					StringBuilder sb = new StringBuilder();
					for(Map<String, String> s: arguments){
						if(sb.length() == 0){
							sb.append(s.get("VALUE"));
						}else{
							sb.append(",");
							sb.append(s.get("VALUE"));
						}
					}
%>
					contextRegister.register(<%=id%>, new <%=classQualifiedName%>(<%=sb.toString()%>));
<%
				}else{
%>
					<%=code%>
					if(beanInstance != null){
						contextRegister.register(<%=id%>, beanInstance);
					}
<%
				}
			}
            //cJMSConnectionFactory http://jira.talendforge.org/browse/TESB-4860
			List<? extends INode> jmsCFNodes = process.getNodesOfType("cJMSConnectionFactory");
			if(jmsCFNodes.size()>0){
%>
				javax.jms.ConnectionFactory jmsConnectionFactory = null;
<%			}
			for(INode node: jmsCFNodes){
				//Use transaction http://jira.talendforge.org/browse/TESB-5160 By LiXiaopeng
				String useTransaction = ElementParameterParser.getValue(node, "__USE_TRANSACTION__");
				String transactedMethodStr = "";
				if("true".equals(useTransaction)){
					transactedMethodStr = "Transacted";
				}
			
				//Component Name
				String name = node.getUniqueName().replace("_", "");
				name = "\"" + name + "\"";
				    // ElementParameterParser.getValue(node, "__NAME__").trim();
    				//Remove unnecessary subfix
    				//name += "+";
    				//name += ElementParameterParser.getValue(node, "__SUBFIX__").trim();
			
				//ActiveMQ
				String mqType = ElementParameterParser.getValue(node, "__MQ_TYPE__");
				if("ActiveMQ".equals(mqType)){
					String amqUri = ElementParameterParser.getValue(node, "__AMQ_BROKER_URI__").trim();
					
%>
				jmsConnectionFactory = new org.apache.activemq.ActiveMQConnectionFactory(<%=amqUri%>);
<%
				String amqPool = ElementParameterParser.getValue(node, "__AMQ_POOL__").trim();
				if("true".equals(amqPool)){
				     String amq_pool_max_connections = ElementParameterParser.getValue(node, "__AMQ_POOL_MAX_CONNECTIONS__").trim();
				     String amq_pool_max_active = ElementParameterParser.getValue(node, "__AMQ_POOL_MAX_ACTIVE__").trim();
				     String amq_pool_idle_timeout = ElementParameterParser.getValue(node, "__AMQ_POOL_IDLE_TIMEOUT__").trim();
				     String amq_pool_expiry_timeout = ElementParameterParser.getValue(node, "__AMQ_POOL_EXPIRY_TIMEOUT__").trim();
				     
				     if(amq_pool_max_connections.startsWith("\"")){
						 amq_pool_max_connections = amq_pool_max_connections.substring(1);
					 }
					 if(amq_pool_max_connections.endsWith("\"")){
						 amq_pool_max_connections = amq_pool_max_connections.substring(0, amq_pool_max_connections.length() - 1);
					 }
				     if(amq_pool_max_active.startsWith("\"")){
						 amq_pool_max_active = amq_pool_max_active.substring(1);
					 }
					 if(amq_pool_max_active.endsWith("\"")){
						 amq_pool_max_active = amq_pool_max_active.substring(0, amq_pool_max_active.length() - 1);
					 }
				     if(amq_pool_idle_timeout.startsWith("\"")){
						 amq_pool_idle_timeout = amq_pool_idle_timeout.substring(1);
					 }
					 if(amq_pool_idle_timeout.endsWith("\"")){
						 amq_pool_idle_timeout = amq_pool_idle_timeout.substring(0, amq_pool_idle_timeout.length() - 1);
					 }
				     if(amq_pool_expiry_timeout.startsWith("\"")){
						 amq_pool_expiry_timeout = amq_pool_expiry_timeout.substring(1);
					 }
					 if(amq_pool_expiry_timeout.endsWith("\"")){
						 amq_pool_expiry_timeout = amq_pool_expiry_timeout.substring(0, amq_pool_expiry_timeout.length() - 1);
					 }
%>
				org.apache.activemq.pool.PooledConnectionFactory pooledConnectionFactory_<%=node.getUniqueName()%> 
					= new org.apache.activemq.pool.PooledConnectionFactory();
				pooledConnectionFactory_<%=node.getUniqueName()%>.setConnectionFactory(jmsConnectionFactory);
				pooledConnectionFactory_<%=node.getUniqueName()%>.setExpiryTimeout(<%=amq_pool_expiry_timeout%>L);
				pooledConnectionFactory_<%=node.getUniqueName()%>.setIdleTimeout(<%=amq_pool_idle_timeout%>);
				pooledConnectionFactory_<%=node.getUniqueName()%>.setMaxConnections(<%=amq_pool_max_connections%>);
				pooledConnectionFactory_<%=node.getUniqueName()%>.setMaximumActive(<%=amq_pool_max_active%>);
				camelContext.addComponent(<%=name%>,
					org.apache.camel.component.jms.JmsComponent.jmsComponent<%=transactedMethodStr%>(pooledConnectionFactory_<%=node.getUniqueName()%>));	
<%
					 
				}else{
%>				
				camelContext.addComponent(<%=name%>,
					org.apache.camel.component.jms.JmsComponent.jmsComponent<%=transactedMethodStr%>(jmsConnectionFactory));
<%				
				    }
				}else if("WebSphere MQ".equals(mqType)){
					String wmqServer = ElementParameterParser.getValue(node, "__WQM_SEVER__");
					String wmqPort = ElementParameterParser.getValue(node, "__WMQ_PORT__");
					String wmqTransportType = ElementParameterParser.getValue(node, "__WMQ_TRANSPORT_TYPE__");
					String wmqUM = ElementParameterParser.getValue(node, "__WMQ_QUEUE_MANAGER__");
					
					//Username and password, http://jira.talendforge.org/browse/TESB-4073
					String username = ElementParameterParser.getValue(node, "__WMQ_USERNAME__");
					String password = ElementParameterParser.getValue(node, "__WMQ_PASSWORD__");
					String useAuth = ElementParameterParser.getValue(node, "__WMQ_AUTH__");
					
					if(wmqPort.startsWith("\"")){
						wmqPort = wmqPort.substring(1);
					}
					if(wmqPort.endsWith("\"")){
						wmqPort = wmqPort.substring(0, wmqPort.length() - 1);
					}
					if(wmqTransportType.startsWith("\"")){
						wmqTransportType = wmqTransportType.substring(1);
					}
					if(wmqTransportType.endsWith("\"")){
						wmqTransportType = wmqTransportType.substring(0, wmqTransportType.length() - 1);
					}
					
%>
					jmsConnectionFactory = new com.ibm.mq.jms.MQQueueConnectionFactory();
	       			((com.ibm.mq.jms.MQConnectionFactory) jmsConnectionFactory).setHostName(<%=wmqServer%>);
	       			try {
	       				((com.ibm.mq.jms.MQConnectionFactory) jmsConnectionFactory).setPort(<%=wmqPort%>);
	       				((com.ibm.mq.jms.MQConnectionFactory) jmsConnectionFactory).setTransportType(<%=wmqTransportType%>);
	       				((com.ibm.mq.jms.MQConnectionFactory) jmsConnectionFactory).setQueueManager(<%=wmqUM%>);	
	       			} catch (javax.jms.JMSException e) {
						e.printStackTrace();
					}
<%
					if("false".equals(useAuth)){
%>
					camelContext.addComponent(<%=name%>,
						org.apache.camel.component.jms.JmsComponent.jmsComponent<%=transactedMethodStr%>(jmsConnectionFactory));
<%					
					}else{
%>
					org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter connectionFactoryAdapter<%=node.getUniqueName()%> 
							= new org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter();
       				connectionFactoryAdapter<%=node.getUniqueName()%>.setUsername(<%=username%>);
      				connectionFactoryAdapter<%=node.getUniqueName()%>.setPassword(<%=password%>);
       				connectionFactoryAdapter<%=node.getUniqueName()%>.setTargetConnectionFactory(jmsConnectionFactory);
       
					camelContext.addComponent(<%=name%>,
						org.apache.camel.component.jms.JmsComponent.jmsComponent<%=transactedMethodStr%>(connectionFactoryAdapter<%=node.getUniqueName()%>));
<%						
					}					
					
				}else if("Other".equals(mqType)){
%>
					<%=ElementParameterParser.getValue(node, "__OTHER_CODE__")%>
					camelContext.addComponent(<%=name%>,
						org.apache.camel.component.jms.JmsComponent.jmsComponent<%=transactedMethodStr%>(jmsConnectionFactory));
<%
				}
			
			}
			//cConfig 
			List<? extends INode> camelContextNodes = process.getNodesOfType("cConfig");
			for(INode node: camelContextNodes){
%>
			    <%=ElementParameterParser.getValue(node, "__CODE__")%>
<%
			} 
			//http://jira.talendforge.org/browse/TESB-4087: Change CamelContext name
%>
			//using Route name as CamelContext ID
			answer.put("<%=process.getName() + "-ctx"%>", camelContext);
			camelContext.setName("<%=process.getName() + "-ctx"%>");
			return answer;
		}

		protected org.apache.camel.view.ModelFileGenerator createModelFileGenerator()
				throws javax.xml.bind.JAXBException {
			return null;
		}
	}
	
	final CamelImpl camelImplementation = new CamelImpl();
	if(start){
		stopDelegate = new TalendESBRoute() {
			
			public int runJobInTOS(String[] args) {
				return 0;
			}
			
			public String[][] runJob(String[] args) {
				return null;
			}
			
			public void stop() throws Exception {
				camelImplementation.stop();
			}
			
			public void shutdown() throws Exception {
				camelImplementation.shutdown();
			}
		};	
		camelImplementation.enableHangupSupport();
		camelImplementation.run();
	}
	return routeBuilder;
	
}