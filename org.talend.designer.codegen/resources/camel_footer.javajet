<%@ jet
	imports="
		org.talend.core.model.process.IProcess
		org.talend.core.model.process.INode
		org.talend.core.model.process.IConnection 
		org.talend.core.model.process.EConnectionType
		org.talend.core.model.process.ElementParameterParser
		org.talend.designer.codegen.config.CodeGeneratorArgument
		java.util.Vector
		java.util.List
	"
%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	 Vector v = (Vector) codeGenArgument.getArgument();
	IProcess process = (IProcess)v.get(0);
	
	boolean stats = codeGenArgument.isStatistics();
%>

		}
			};
			getCamelContexts().get(0).addRoutes(routeBuilder);
		}	
		

		protected void doStop() throws Exception {
			super.doStop();
			getCamelContexts().get(0).stop();
		}

		protected org.apache.camel.ProducerTemplate findOrCreateCamelTemplate() {
			return getCamelContexts().get(0).createProducerTemplate();
		}

		protected java.util.Map<String, org.apache.camel.CamelContext> getCamelContextMap() {
			java.util.Map<String, org.apache.camel.CamelContext> answer = new java.util.HashMap<String, org.apache.camel.CamelContext>();
			org.apache.camel.impl.DefaultCamelContext camelContext;
			org.apache.camel.spi.TypeConverterRegistry typeConverterRegistry;
<%
			boolean startable = false;
			for (INode node : (List< ? extends INode>)process.getGraphicalNodes()) {
				Object value = node.getPropertyValue("STARTABLE");
				startable = value == null? false:(Boolean)value;
				if(startable){
					break;
				}
			}
			
			if (startable) { 
%>
				if (bundleContext != null) {
					org.apache.camel.osgi.CamelContextFactory factory = new org.apache.camel.osgi.CamelContextFactory();
					factory.setBundleContext(bundleContext);
					camelContext = factory.createContext();
				} else {
					camelContext = new org.apache.camel.impl.DefaultCamelContext();
				}
<%
			} else {
%>
				camelContext = new org.apache.camel.impl.DefaultCamelContext();
<%
			}
%>
			typeConverterRegistry = camelContext.getTypeConverterRegistry();
<%
			List<? extends INode> activeMQNodes = process.getNodesOfType("cActiveMQ");
			if(activeMQNodes.size()>0){
%>
			org.apache.activemq.ActiveMQConnectionFactory amqConnectionFactory = null;
<%			}
			for(INode node: activeMQNodes){
				String url = ElementParameterParser.getValue(node, "__BROKER_URI__").trim();
				if(!url.startsWith("\"")){
					url = "\""+url;
				}
				if(!url.endsWith("\"")){
					url += "\"";
				}
%>
			amqConnectionFactory = new org.apache.activemq.ActiveMQConnectionFactory(<%=url%>);
			camelContext.addComponent("<%=node.getUniqueName().replaceAll("_","")%>",
					org.apache.activemq.camel.component.ActiveMQComponent.jmsComponent(amqConnectionFactory));
<%   
		}
%>
<%
			List<? extends INode> jmsNodes = process.getNodesOfType("cJMS");
			if(jmsNodes.size()>0){
%>
				javax.jms.ConnectionFactory connectionFactory = null;
<%			}
			for(INode node: jmsNodes){
			    String name = ElementParameterParser.getValue(node, "__NAME__").trim();
    				name += ElementParameterParser.getValue(node, "__SUBFIX__").trim();
%>
			    <%=ElementParameterParser.getValue(node, "__CODE__")%>
			   camelContext.addComponent("<%=name%>",
					org.apache.activemq.camel.component.ActiveMQComponent.jmsComponent(connectionFactory));
<%
			}
%>
<%
			//cConfig 
			List<? extends INode> camelContextNodes = process.getNodesOfType("cConfig");
			for(INode node: camelContextNodes){
%>
			    <%=ElementParameterParser.getValue(node, "__CODE__")%>
<%
			}
%>
			answer.put("camel-1", camelContext);
			return answer;
		}

		protected org.apache.camel.view.ModelFileGenerator createModelFileGenerator()
				throws javax.xml.bind.JAXBException {
			return null;
		}
	}
	
	final CamelImpl camelImplementation = new CamelImpl();
	if(start){
		stopDelegate = new TalendESBRoute() {
			
			public int runJobInTOS(String[] args) {
				return 0;
			}
			
			public String[][] runJob(String[] args) {
				return null;
			}
			
			public void stop() throws Exception {
				camelImplementation.stop();
			}
			
			public void shutdown() throws Exception {
				camelImplementation.shutdown();
			}
		};	
		camelImplementation.enableHangupSupport();
		camelImplementation.run();
	}
	return routeBuilder;
	
}