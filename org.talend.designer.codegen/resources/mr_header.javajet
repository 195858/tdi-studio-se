<%@ jet
    imports="
        org.talend.core.model.process.IProcess
        org.talend.core.model.process.INode
        org.talend.core.model.process.IConnection
        org.talend.core.model.process.EConnectionType
        org.talend.core.model.process.ElementParameterParser
        org.talend.designer.codegen.config.CodeGeneratorArgument
        org.talend.designer.runprocess.CodeGeneratorRoutine
        org.talend.designer.codegen.i18n.Messages
        org.talend.core.ui.branding.IBrandingService
        org.talend.core.ui.branding.AbstractBrandingService
        org.talend.core.GlobalServiceRegister
        org.talend.designer.codegen.ITalendSynchronizer
        java.util.List
        java.util.ArrayList
        java.util.Vector
        org.talend.core.model.process.IContextParameter
        org.talend.core.model.metadata.types.JavaTypesManager
        org.talend.core.model.utils.NodeUtil
        org.talend.core.model.utils.JavaResourcesHelper
    "
%>
<%
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    Vector v = (Vector) codeGenArgument.getArgument();
    IProcess process = (IProcess)v.get(0);
    String version = (String)v.get(1);

    List< ? extends INode> processNodes = (List< ? extends INode>)process.getGeneratingNodes();
    List<IContextParameter> params = new ArrayList<IContextParameter>();
    params=process.getContextManager().getDefaultContext().getContextParameterList();
%>
<%
//?
IBrandingService service=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
if(service instanceof AbstractBrandingService){
%>
<%=((AbstractBrandingService) service).getJobLicenseHeader(version)%>
<%
}
    String jobFolderName = JavaResourcesHelper.getJobFolderName(process.getName(), process.getVersion());
    String packageName = codeGenArgument.getCurrentProjectName().toLowerCase() + "." + jobFolderName;
%>
package <%= packageName %>;

<%for (String routine : CodeGeneratorRoutine.getRequiredRoutineName(process)) {
    if(!routine.equals(ITalendSynchronizer.TEMPLATE)){%>
import routines.<%=routine%>;
<%  }
}%>
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.io.InputStream; 
import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import java.util.Comparator;
import java.util.Iterator;
import java.security.PrivilegedExceptionAction;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.FSDataInputStream;
import org.apache.hadoop.fs.FSDataOutputStream;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.compress.CompressionCodec;
import org.apache.hadoop.io.compress.CompressionCodecFactory;
import org.apache.hadoop.io.compress.GzipCodec;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.NullWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.io.Writable;
import org.apache.hadoop.io.WritableComparable;
import org.apache.hadoop.io.WritableComparator;
import org.apache.hadoop.io.WritableUtils;
import org.apache.hadoop.io.SequenceFile;
import org.apache.hadoop.mapred.FileAlreadyExistsException;
import org.apache.hadoop.mapred.FileInputFormat;
import org.apache.hadoop.mapred.SequenceFileInputFormat;
import org.apache.hadoop.mapred.FileOutputFormat;
import org.apache.hadoop.mapred.FileSplit;
import org.apache.hadoop.mapred.InputSplit;
import org.apache.hadoop.mapred.InvalidJobConfException;
import org.apache.hadoop.mapred.JobClient;
import org.apache.hadoop.mapred.JobConf;
import org.apache.hadoop.mapred.JobConfigurable;
import org.apache.hadoop.mapred.Mapper;
import org.apache.hadoop.mapred.MapReduceBase;
import org.apache.hadoop.mapred.OutputCollector;
import org.apache.hadoop.mapred.RecordReader;
import org.apache.hadoop.mapred.RecordWriter;
import org.apache.hadoop.mapred.Reducer;
import org.apache.hadoop.mapred.Reporter;
import org.apache.hadoop.mapred.InputFormat;
import org.apache.hadoop.mapred.OutputFormat;
import org.apache.hadoop.security.UserGroupInformation;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;
import org.apache.hadoop.util.Progressable;
import org.apache.hadoop.util.ReflectionUtils;

import org.talend.hadoop.mapred.lib.ChainMapper;
import org.talend.hadoop.mapred.lib.ChainReducer;
import org.talend.hadoop.mapred.lib.MRJobClient;
import org.talend.hadoop.mapred.lib.MultipleInputs;
import org.talend.hadoop.mapred.lib.MultipleOutputs; 

<%=ElementParameterParser.getValue(process, "__HEADER_IMPORT__") %>
<%=ElementParameterParser.getValue(process, "__FOOTER_IMPORT__") %>


<%
    List<INode> nodesWithImport = process.getNodesWithImport();
    if(nodesWithImport != null) {
        for(INode node:nodesWithImport){
%>
    //the import part of <%=node.getUniqueName() %>
    <%=ElementParameterParser.getValue(node, "__IMPORT__") %>

<%      }
    }
%>

@SuppressWarnings("unused")

/**
 * Job: <%=process.getName() %> Purpose: <%=ElementParameterParser.getValue(process, "__PURPOSE__") %><br>
 * Description: <%=ElementParameterParser.getValue(process, "__DESCRIPTION__") %> <br>
 * @author <%=ElementParameterParser.getValue(process, "__AUTHOR__") %>
 * @version <%=version %>
 * @status <%=ElementParameterParser.getValue(process, "__STATUS__") %>
 */
public class <%=process.getName()%> extends Configured implements Tool, TalendJob {
	
	private final static String utf8Charset = "UTF-8";
	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
    
    private MRJobClient mrJobClient;
    
	// create and load default properties
    private java.util.Properties defaultProps = new java.util.Properties();
    // create application properties with default
    public static class ContextProperties extends java.util.Properties {

        private static final long serialVersionUID = 1L;
        
        public static final String CONTEXT_FILE_NAME = "talend.context.fileName";
        public static final String CONTEXT_KEYS = "talend.context.keys";
        public static final String CONTEXT_PARAMS_PREFIX = "talend.context.params.";
        public static final String CONTEXT_PARENT_KEYS = "talend.context.parent.keys";
        public static final String CONTEXT_PARENT_PARAMS_PREFIX = "talend.context.parent.params.";

        public ContextProperties(java.util.Properties properties){
            super(properties);
        }
        public ContextProperties(){
            super();
        }
        public ContextProperties(Configuration job){
        	super();
			String contextFileName = job.get(CONTEXT_FILE_NAME);
        	try {
				if(contextFileName != null && !"".equals(contextFileName)){
					java.io.File contextFile = new java.io.File(contextFileName);
					if(contextFile.exists()){
						java.io.InputStream contextIn = contextFile.toURI().toURL().openStream();
						this.load(contextIn);
						contextIn.close();
					}else{
						<%//input/output format will be init on client and getSplit() will be called on client%>
						java.io.InputStream contextIn = <%=process.getName()%>.class.getClassLoader().getResourceAsStream("<%=codeGenArgument.getCurrentProjectName().toLowerCase()%>/<%=jobFolderName%>/contexts/"+contextFileName);
						if(contextIn != null){
							this.load(contextIn);
							contextIn.close();
						}
					}
				}
				java.util.StringTokenizer st = new java.util.StringTokenizer(job.get(CONTEXT_KEYS, ""), " ");
				while (st.hasMoreTokens()) {
					String contextKey = st.nextToken();
					if(job.get(CONTEXT_PARAMS_PREFIX + contextKey) != null){
	            		this.put(contextKey, job.get(CONTEXT_PARAMS_PREFIX + contextKey));
	            	}
		        }
		        st = new java.util.StringTokenizer(job.get(CONTEXT_PARENT_KEYS, ""), " ");
				while (st.hasMoreTokens()) {
					String contextKey = st.nextToken();
					if(job.get(CONTEXT_PARENT_PARAMS_PREFIX + contextKey) != null){
	            		this.put(contextKey, job.get(CONTEXT_PARENT_PARAMS_PREFIX + contextKey));
	            	}
		        }
		        
				this.loadValue();
			} catch (java.io.IOException ie) {
				System.err.println("Could not load context " + contextFileName);
				ie.printStackTrace();
			}
        }

        public void synchronizeContext(){
            <%
            for(IContextParameter ctxParam : params){
                String cParaName = ctxParam.getName();
                %>
                if(<%=cParaName %> != null){
                    <%if(ctxParam.getType().equals("id_Date")){%>
                        String pattern_<%=cParaName %> = "yyyy-MM-dd HH:mm:ss";
                        String value_<%=cParaName %> = "<%=ctxParam.getValue() %>";
                        String[] parts_<%=cParaName %> = value_<%=cParaName %>.split(";");
                        if(parts_<%=cParaName %>.length > 1){
                            pattern_<%=cParaName %> = parts_<%=cParaName %>[0];
                            this.setProperty("<%=cParaName %>", pattern_<%=cParaName %> + ";" + FormatterUtils.format_Date(<%=cParaName %>, pattern_<%=cParaName %>));
                        }else{
                            this.setProperty("<%=cParaName %>", FormatterUtils.format_Date(<%=cParaName %>, pattern_<%=cParaName %>));
                        }
                    <%}else{%>
                        this.setProperty("<%=cParaName %>", <%=cParaName %>.toString());
                    <%}%>
                }
            <% 
            }
            %>
        }

        <%
        for(IContextParameter ctxParam : params){
            if(ctxParam.getType().equals("id_List Of Value") || ctxParam.getType().equals("id_File") || ctxParam.getType().equals("id_Directory")){
            %>
                public String <%=ctxParam.getName()%>;
                public String get<%=Character.toUpperCase(ctxParam.getName().charAt(0)) + ctxParam.getName().substring(1)%>(){
                    return this.<%=ctxParam.getName()%>;
                }
            <%
            }else{
            %>
                public <%=JavaTypesManager.getTypeToGenerate(ctxParam.getType(),true)%> <%=ctxParam.getName()%>;
                public <%=JavaTypesManager.getTypeToGenerate(ctxParam.getType(),true)%> get<%=Character.toUpperCase(ctxParam.getName().charAt(0)) + ctxParam.getName().substring(1)%>(){
                    return this.<%=ctxParam.getName()%>;
                }
            <%
            }
        }
        %>
        public void loadValue(){
	        <%
	        for(IContextParameter ctxParam : params){
	            String typeToGenerate ="String";
	            if( !(ctxParam.getType().equals("id_File") || ctxParam.getType().equals("id_Directory") ||ctxParam.getType().equals("id_List Of Value"))){
	               typeToGenerate=JavaTypesManager.getTypeToGenerate(ctxParam.getType(),true);
	            }
	            if(typeToGenerate.equals("java.util.Date")){
				%>
		            try{
		                String context_<%=ctxParam.getName()%>_value = this.getProperty("<%=ctxParam.getName()%>");
		                if (context_<%=ctxParam.getName()%>_value == null){
		                    context_<%=ctxParam.getName()%>_value = "";
		                }
		                int context_<%=ctxParam.getName()%>_pos = context_<%=ctxParam.getName()%>_value.indexOf(";");
		                String context_<%=ctxParam.getName()%>_pattern =  "yyyy-MM-dd HH:mm:ss";
		                if(context_<%=ctxParam.getName()%>_pos > -1){
		                    context_<%=ctxParam.getName()%>_pattern = context_<%=ctxParam.getName()%>_value.substring(0, context_<%=ctxParam.getName()%>_pos);
		                    context_<%=ctxParam.getName()%>_value = context_<%=ctxParam.getName()%>_value.substring(context_<%=ctxParam.getName()%>_pos + 1);
		                }
	
		                this.<%=ctxParam.getName()%>=(java.util.Date)(new java.text.SimpleDateFormat(context_<%=ctxParam.getName()%>_pattern).parse(context_<%=ctxParam.getName()%>_value));
	
		            }catch(ParseException e){
		                this.<%=ctxParam.getName()%>=null;
		            }
	          	<%
	            }else if(typeToGenerate.equals("Object")||typeToGenerate.equals("String")||typeToGenerate.equals("java.lang.String")){
	            %>
	            	this.<%=ctxParam.getName()%>=(<%=typeToGenerate%>) this.getProperty("<%=ctxParam.getName()%>");
	            <%
	            }else if(typeToGenerate.equals("Character")&&ctxParam.getName()!=null){
	         	%>
	         		this.<%=ctxParam.getName()%>= new java.text.StringCharacterIterator(this.getProperty("<%=ctxParam.getName()%>")).first();
	     		<%
	            }else{
	         	%> 
	         		try{
	             		this.<%=ctxParam.getName()%>=routines.system.ParserUtils.parseTo_<%=typeToGenerate%>(this.getProperty("<%=ctxParam.getName()%>"));
	         		}catch(NumberFormatException e){
	             		this.<%=ctxParam.getName()%>=null;
	          		}
	         	<%
	            }
	        }
	        %>
	    }
    }
    private ContextProperties context = new ContextProperties();
    public ContextProperties getContext() {
        return this.context;
    }

	private final String jobVersion = "<%=process.getVersion() %>";
	private final String jobName = "<%=codeGenArgument.getJobName() %>";
	private final String projectName = "<%=codeGenArgument.getCurrentProjectName() %>";
	public Integer errorCode = null;
	
	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}
	
	//should be remove later
	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		
	}

