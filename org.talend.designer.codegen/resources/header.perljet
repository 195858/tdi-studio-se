<%@ jet 
	package="org.talend.designer.codegen.translators" 
	imports="
		org.talend.core.model.process.IProcess
		org.talend.core.model.process.INode 
		org.talend.core.model.process.IConnection 
		org.talend.core.model.process.EConnectionType
		org.talend.core.model.process.ElementParameterParser
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.designer.codegen.temp.CodeGeneratorRoutine
		org.talend.designer.codegen.i18n.Messages
		org.talend.core.ui.branding.BrandingService
		java.util.List
		java.util.Vector
	"
	class="Header" 
%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    Vector v = (Vector) codeGenArgument.getArgument();
	IProcess process = (IProcess)v.get(0);
    String version = (String)v.get(1);
	
	List< ? extends INode> processNodes = (List< ? extends INode>)process.getGeneratingNodes();
	boolean stats = codeGenArgument.isStatistics();
	boolean trace = codeGenArgument.isTrace();
%>
#!/usr/bin/perl

=head1 <%=ElementParameterParser.getValue(process, "__NAME__") %>
Process <%=ElementParameterParser.getValue(process, "__NAME__") %>, version <%=ElementParameterParser.getValue(process, "__VERSION__") %>, status <%=ElementParameterParser.getValue(process, "__STATUS__") %>.
Author: <%=ElementParameterParser.getValue(process, "__AUTHOR__") %>
Purpose: <%=ElementParameterParser.getValue(process, "__PURPOSE__") %>
<%=ElementParameterParser.getValue(process, "__DESCRIPTION__") %>
=cut

<%
    if (stats) {
%>
use talend::runstat;
<%
    }
%>
<%
    if (trace) {
%>
use talend::trace;
<%
    }
%>

<%for (String routine : CodeGeneratorRoutine.getRoutineName()) {%>
use <%=routine%>;
<%}%>

my $_licence = <<'END_OF_LICENCE';

 <%=Messages.getString("generatedcode.copyright.title")%>

 <%=Messages.getString("generatedcode.copyright.body", version, BrandingService.getInstance().getFullProductName())%>

END_OF_LICENCE

# print $_licence;

use Getopt::Long;
use Time::HiRes qw/gettimeofday tv_interval time/;
my %opt = ();
GetOptions(
    \%opt,
    qw/context=s stat_port=i trace_port=i watch father_pid=s root_pid=s/
);

<%
    if (trace) {
%>
StartTrace($opt{trace_port}, '127.0.0.1') if defined $opt{trace_port};
<%
    }
%>

our %_context;
our %_globals;

$_globals{pid} = getRandomString(6, ['a'..'z', 'A'..'Z', 0..9]);

$_globals{father_pid} = defined $opt{father_pid}
    ? $opt{father_pid}
    : $_globals{pid}
;

$_globals{root_pid} = defined $opt{root_pid}
    ? $opt{root_pid}
    : $_globals{pid}
;

$_globals{job_name} = '<%=codeGenArgument.getJobName() %>';
$_globals{project_name} = '<%=codeGenArgument.getCurrentProjectName() %>';
$_globals{start} = [gettimeofday];

<%
    for (INode statCatcher : process.getNodesOfType("tStatCatcher")) {
%>
<%=statCatcher.getUniqueName()%>_subprocess(
    message => 'begin',
);

<%
    }
%>
if (defined $opt{context}) {
    my $context_filename =
        $_globals{project_name}
        .'.job_'.$_globals{job_name}
        .'_'.$opt{context}
        .'.pl'
    ;

    use FindBin;
    use lib $FindBin::Bin;
    require $context_filename;
}

<% // Constants for RUN IF OK links %>
use constant true   => 1;
use constant false  => 0;
use constant null   => undef;

<% // Constants for RUN IF Error links %>
$SIG{__DIE__} = \&global_die_catcher;
$current_component=undef;

sub global_die_catcher {
    our $_globals;
    $_globals{job_failure} = 1;

    if (defined $current_component) {
        my $dying_component = $current_component;

        my $exception = $_[0];
        chomp($exception);

        $_globals{$dying_component}{ERROR_MESSAGE} = $exception;

<%
    for (INode logCatcher : process.getNodesOfType("tLogCatcher")) {
%>
        <%=logCatcher.getUniqueName()%>_subprocess(
            type => 'Perl die',
            origin => $dying_component,
            priority => 6,
            message => $_globals{$dying_component}{ERROR_MESSAGE},
        );
<%
    }
    for (INode statCatcher : process.getNodesOfType("tStatCatcher")) {
%>
        if (exists $_globals{$dying_component}{start}) {
            <%=statCatcher.getUniqueName()%>_subprocess(
                message => 'failure',
                origin  => $dying_component,
            );
            
            <%=statCatcher.getUniqueName()%>_subprocess(
                message => sprintf(
                    '%.1f seconds',
                    tv_interval(
                        $_globals{$dying_component}{start},
                        [gettimeofday]
                    )
                ),
                origin  => $dying_component,
            );
        }

<%
    }
%>
        no strict 'refs';
        &{$dying_component.'_error'}();
    }

<%
    for (INode statCatcher : process.getNodesOfType("tStatCatcher")) {
%>
    <%=statCatcher.getUniqueName()%>_subprocess(
        message => $_globals{job_failure} ? 'failure' : 'end',
    );

    $_globals{stop} = [gettimeofday];

    $_globals{duration} = sprintf(
        '%.1f', 
        tv_interval(
            $_globals{start},
            $_globals{stop}
        )
    );
    
    <%=statCatcher.getUniqueName()%>_subprocess(
        message => sprintf(
            '%s seconds',
            $_globals{duration}
        ),
    );
<%
    }
%>

}
<% // Methods for RUN IF Error links %>
<%
    for (INode node : processNodes) {
        if (node.isActivate()) {
%>
sub <%=node.getUniqueName() %>_error() {
<%
            List< ? extends IConnection> conns =
                node.getOutgoingConnections();

            for (IConnection conn : conns) {
                if (conn.getLineStyle().equals(EConnectionType.RUN_IF_ERROR)){
%>
    <%=conn.getTarget().getUniqueName() %>_subprocess();
    $_globals{job_failure} = 0;
<%
                }
            }
%>
}
<%
        }
    }
%>
