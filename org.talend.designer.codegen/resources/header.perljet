<%@ jet 
	package="org.talend.designer.codegen.translators" 
	imports="
		org.talend.core.model.process.IProcess
		org.talend.core.model.process.INode 
		org.talend.core.model.process.IConnection 
		org.talend.core.model.process.EConnectionType
		org.talend.core.model.process.ElementParameterParser
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.designer.codegen.temp.CodeGeneratorRoutine
		org.talend.designer.codegen.i18n.Messages
		org.talend.core.ui.branding.BrandingService
		java.util.List
		java.util.Vector
	"
	class="Header" 
%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    Vector v = (Vector) codeGenArgument.getArgument();
	IProcess process = (IProcess)v.get(0);
    String version = (String)v.get(1);
	
	List< ? extends INode> processNodes = (List< ? extends INode>)process.getGeneratingNodes();
	boolean stats = codeGenArgument.isStatistics();
	boolean trace = codeGenArgument.isTrace();
%>
#!/usr/bin/perl

=head1 <%=ElementParameterParser.getValue(process, "__NAME__") %>
Process <%=ElementParameterParser.getValue(process, "__NAME__") %>, version <%=ElementParameterParser.getValue(process, "__VERSION__") %>, status <%=ElementParameterParser.getValue(process, "__STATUS__") %>.
Author: <%=ElementParameterParser.getValue(process, "__AUTHOR__") %>
Purpose: <%=ElementParameterParser.getValue(process, "__PURPOSE__") %>
<%=ElementParameterParser.getValue(process, "__DESCRIPTION__") %>
=cut

<%
    if (stats) {
%>
use talend::runstat;
<%
    }
%>

<%
    if (trace) {
%>
use talend::trace;
<%
    }
%>


my $_licence = <<'END_OF_LICENCE';

 <%=Messages.getString("generatedcode.copyright.title")%>

 <%=Messages.getString("generatedcode.copyright.body", version, BrandingService.getInstance().getFullProductName())%>

END_OF_LICENCE

# print $_licence;

use Getopt::Long;
use Time::HiRes qw/gettimeofday tv_interval/;
my %opt = ();
GetOptions(
    \%opt,
    qw/context=s stat_port=i trace_port=i watch/
);

our %_context;
our %_globals;

$_globals{job_name} = '<%=codeGenArgument.getJobName() %>';
$_globals{start} = [gettimeofday];

<%
    if (process.getNodesOfType("tStatCatcher").size() > 0) {
%>
tStatCatcher_1_subprocess(
    message => 'begin',
);

<%
    }
%>
if (defined $opt{context}) {
#     print(
#         'tsInfo>  Running process with context: ',
#         $opt{context},
#         ' (./tUser/parameters_', $opt{context}, '.pl)',
#         "\n\n"
#     );

    require $opt{context};
}

<%for (String routine : CodeGeneratorRoutine.getRoutineName()) {%>
use <%=routine%>;
<%}%>


<% // Constants for RUN IF OK links %>
use constant true   => 1;
use constant false  => 0;
use constant null   => undef;

<% // Constants for RUN IF Error links %>
$SIG{__DIE__} = \&global_die_catcher;
$current_component=undef;

sub global_die_catcher {
    if (defined $current_component) {
        my $dying_component = $current_component;

        our $_globals;

        my $exception = $_[0];
        chomp($exception);

        $_globals{$dying_component}{ERROR_MESSAGE}      = $exception;
        $_globals{$dying_component}{PERL_ERROR_MESSAGE} = $!;
        $_globals{$dying_component}{PERL_ERROR_CODE}    = int($!);

        if (defined &main::tLogCatcher_1_subprocess) {
            tLogCatcher_1_subprocess(
                type => 'Perl die',
                origin => $dying_component,
                priority => 100,
                error_message => $_globals{$dying_component}{ERROR_MESSAGE},
                perl_error_message => $_globals{$dying_component}{PERL_ERROR_MESSAGE},
                perl_error_code => $_globals{$dying_component}{PERL_ERROR_CODE},
            );
        }

        no strict 'refs';
        &{$dying_component.'_error'}();
    }
}
<% // Methods for RUN IF Error links %>
<%
	for (INode node : processNodes) {
		if (node.isActivate()) {
%>
sub <%=node.getUniqueName() %>_error() {
<%
		List< ? extends IConnection> conns = node.getOutgoingConnections();
    	for (IConnection conn : conns) {
       		if (conn.getLineStyle().equals(EConnectionType.RUN_IF_ERROR)) {
%>
    <%=conn.getTarget().getUniqueName() %>_subprocess();
<%
                }
	}
%>
}
<%
		}
	}
%>
