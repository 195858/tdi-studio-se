<%@ jet 
    imports="
        org.talend.core.model.process.IProcess
        org.talend.core.model.process.INode 
        org.talend.designer.codegen.config.CodeGeneratorArgument
        org.talend.core.CorePlugin
        org.talend.core.model.process.EConnectionType
        org.talend.core.model.process.IConnection   
        org.talend.core.model.metadata.IMetadataTable
        org.talend.core.model.metadata.IMetadataColumn
        java.util.Vector
        java.util.List
        java.util.Map
        java.util.ArrayList
        org.talend.core.model.process.IContextParameter
        org.talend.core.model.metadata.types.JavaTypesManager
        org.talend.core.model.metadata.types.JavaType
        org.talend.core.model.utils.JavaResourcesHelper
        org.talend.core.model.process.ElementParameterParser
    " 
%>
	<%
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    Vector v = (Vector) codeGenArgument.getArgument();
    IProcess process = (IProcess)v.get(0);
    List<INode> rootNodes = (List<INode>)v.get(1);
    INode mrconn = (INode)v.get(2);
    String jobFolderName = JavaResourcesHelper.getJobFolderName(process.getName(), process.getVersion());
    List<IContextParameter> params = new ArrayList<IContextParameter>();
    params=process.getContextManager().getDefaultContext().getContextParameterList();
    
    String mrNameNode = ElementParameterParser.getValue(mrconn,"__NAMENODE__");
    String mrJobTracker = ElementParameterParser.getValue(mrconn,"__JOBTRACKER__");
    
	boolean useYarn = "true".equals(ElementParameterParser.getValue(mrconn, "__USE_YARN__"));
    String resourceManager = ElementParameterParser.getValue(mrconn,"__RESOURCE_MANAGER__");
    
	String mrDistribution = ElementParameterParser.getValue(mrconn,"__DISTRIBUTION__");
	String mrVersion = ElementParameterParser.getValue(mrconn,"__MR_VERSION__");
    boolean mrUseKrb = false;
    List<String> mrKrbSupportList = java.util.Arrays.asList("APACHE_1_0_0","HDP_1_0","HDP_1_2","HDP_1_3","Cloudera_CDH4","APACHE_1_0_3_EMR");
    if("CUSTOM".equals(mrDistribution) || mrKrbSupportList.contains(mrVersion)){
    	mrUseKrb = "true".equals(ElementParameterParser.getValue(mrconn,"__USE_KRB__"));
    }
    String mrNNPrincipal = ElementParameterParser.getValue(mrconn,"__NAMENODE_PRINCIPAL__");
    String mrJTPrincipal = ElementParameterParser.getValue(mrconn,"__JOBTRACKER_PRINCIPAL__");
    boolean useKeytab = "true".equals(ElementParameterParser.getValue(mrconn, "__USE_KEYTAB__"));
    String userPrincipal = ElementParameterParser.getValue(mrconn, "__PRINCIPAL__");
    String keytabPath = ElementParameterParser.getValue(mrconn, "__KEYTAB_PATH__");
    List<Map<String, String>> mrCustomProps = (List<Map<String,String>>)ElementParameterParser.getObjectValue(mrconn,"__HADOOP_ADVANCED_PROPERTIES__");
    String mrUserName = ElementParameterParser.getValue(mrconn,"__USERNAME__");
    boolean mrNeedUserName = !(mrUserName == null || "".equals(mrUserName) || "\"\"".equals(mrUserName) || mrUseKrb);
	String mrServerPathSeparator = ElementParameterParser.getValue(mrconn,"__SERVER_PATH_SEPARATOR__");
	boolean mrClearTempFolder = "true".equals(ElementParameterParser.getValue(mrconn,"__RM_TEMP_FOLDER__"));
	String mrTempFolder = ElementParameterParser.getValue(mrconn,"__TEMP_FOLDER__");
	%>
	private MRRunStat runStat = new MRRunStat();
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public String clientHost;
	public String defaultClientHost = "localhost";
	private boolean execStat = true;

	public String contextStr = "<%=codeGenArgument.getContextName()%>";
	public boolean isDefaultContext = true;

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status= "";

	private String mr_temp_dir = "";
	
	
    public static void main(String[] args){
		final <%=process.getName() %> <%=process.getName() %>Class = new <%=process.getName() %>();
        int exitCode = <%=process.getName() %>Class.runJobInTOS(args);
        System.exit(exitCode);
    }
    
    public String[][] runJob(String[] args){
        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };
		return bufferValue;
    }
    
    public int runJobInTOS (String[] args) {
		<%
		if(mrconn == null){
			System.err.println("use tMRConnection component to config the hadoop environment");	
		}else{
			%>
			System.out.println("start!!!!!!!!!1");
			for(String arg : args){
				System.out.println(arg);
			}
			System.out.println("end!!!!!!!!!1");
			try{
				int exitCode = ToolRunner.run(new Configuration(), this, args);
				return exitCode;
			}catch(Exception ex){
				ex.printStackTrace();
				return 1;
			}
		<%
		}
		%>
    }
    
    public int run(String[] args) throws Exception {
    	for(String arg : args){
	        evalParam(arg);
        }
		
		startStat();
		
		initContext();
        
        initMapReduceJob(getConf());
        
        mr_temp_dir = (new java.io.File(<%=mrTempFolder%>, jobName)).toString();
        validTempFolder(mr_temp_dir);
        
		<%
		for(INode rootNode : rootNodes){
	        String componentName = rootNode.getComponent().getName();
	        String uniqueName = rootNode.getUniqueName();
			%>
			try{
                <%=rootNode.getUniqueName()%>Process(globalMap);
			}catch(Exception e){
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				status = "failure";
			}
		<%
	    }
	
		if(mrClearTempFolder){ 
		%>
			clearTempFolder();
		<%
		}
		%>
		
		endStat();
		
		int returnCode = 0;
		if(errorCode == null){
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		}else{
			returnCode = errorCode.intValue();
		}
		return returnCode;	
	}
	
	private void runMRJob(JobConf job, int groupID, int mrjobIDInGroup) throws IOException{
		String currentClientPathSeparator = System.getProperty("path.separator");
		System.setProperty("path.separator", <%=mrServerPathSeparator%>);
		if(job.get("mapred.reducer.class") == null){
			job.setNumReduceTasks(0);					
		}
		mrJobClient.setGroupID(groupID);
		mrJobClient.setMRJobIDInGroup(mrjobIDInGroup);
		mrJobClient.runJob(job);
		System.setProperty("path.separator", currentClientPathSeparator);
	}
	
	private void initMapReduceJob(Configuration conf) throws IOException{
		//set basic info
		FileSystem.setDefaultUri(conf, <%=mrNameNode%>);
		<%if(("CUSTOM".equals(mrDistribution) && useYarn) || (!"CUSTOM".equals(mrDistribution) && ("PIVOTAL_HD_1_0_1".equals(mrVersion) || "HDP_2_0".equals(mrVersion) || "Cloudera_CDH4_YARN".equals(mrVersion)))) {%>
			conf.set("mapreduce.framework.name", "yarn");
			conf.set("yarn.resourcemanager.address", <%=resourceManager%>);
			<%
			boolean setSchedulerAddress = "true".equals(ElementParameterParser.getValue(mrconn, "__SET_SCHEDULER_ADDRESS__"));
			if(setSchedulerAddress) {
				String schedulerAddress = ElementParameterParser.getValue(mrconn,"__RESOURCEMANAGER_SCHEDULER_ADDRESS__");
				%>
				conf.set("yarn.resourcemanager.scheduler.address", <%=schedulerAddress%>);
			<%
			}
			%>
			//set default yarn classpath with environment variable
			conf.set("yarn.application.classpath","$HADOOP_CONF_DIR,$HADOOP_COMMON_HOME/*,$HADOOP_COMMON_HOME/lib/*,$HADOOP_HDFS_HOME/*,$HADOOP_HDFS_HOME/lib/*,$HADOOP_MAPRED_HOME/*,$HADOOP_MAPRED_HOME/lib/*,$YARN_HOME/*,$YARN_HOME/lib/*,$HADOOP_YARN_HOME/*,$HADOOP_YARN_HOME/lib/*,$HADOOP_COMMON_HOME/share/hadoop/common/*,$HADOOP_COMMON_HOME/share/hadoop/common/lib/*,$HADOOP_HDFS_HOME/share/hadoop/hdfs/*,$HADOOP_HDFS_HOME/share/hadoop/hdfs/lib/*,$HADOOP_YARN_HOME/share/hadoop/yarn/*,$HADOOP_YARN_HOME/share/hadoop/yarn/lib/*");
			<%
			boolean setMemory = "true".equals(ElementParameterParser.getValue(mrconn, "__SET_MEMORY__"));
			if(setMemory) {
				String mapMemory = ElementParameterParser.getValue(mrconn,"__MAPREDUCE_MAP_MEMORY_MB__");
				String reduceMemory = ElementParameterParser.getValue(mrconn,"__MAPREDUCE_REDUCE_MEMORY_MB__");
				String amMemory = ElementParameterParser.getValue(mrconn,"__YARN_APP_MAPREDUCE_AM_RESOURCE_MB__");
				%>
				conf.set("mapreduce.map.memory.mb", <%=mapMemory%>);
				conf.set("mapreduce.reduce.memory.mb", <%=reduceMemory%>);
				conf.set("yarn.app.mapreduce.am.resource.mb", <%=amMemory%>);
			<%
			}
		}else{
		%>
			conf.set("mapred.job.tracker", <%=mrJobTracker%>);
		<%
		}
		if(mrUseKrb){
			if(useKeytab) {
		%>
				org.apache.hadoop.security.UserGroupInformation.loginUserFromKeytab(<%=userPrincipal%>, <%=keytabPath%>);
		<%
			}
		%>
			conf.set("dfs.namenode.kerberos.principal", <%=mrNNPrincipal%>);
			conf.set("mapreduce.jobtracker.kerberos.principal", <%=mrJTPrincipal%>);
		<%
		}
		%>

		<%//For TDI-27581 add map and reduce memory
    	if(!"CUSTOM".equals(mrDistribution) && ("HDP_1_2".equals(mrVersion) || "HDP_1_3".equals(mrVersion))) {
        	String mapMemory = ElementParameterParser.getValue(mrconn,"__MAPRED_JOB_MAP_MEMORY_MB__");
        	String reduceMemory = ElementParameterParser.getValue(mrconn,"__MAPRED_JOB_REDUCE_MEMORY_MB__");
			%>
        	conf.set("mapred.job.map.memory.mb", <%=mapMemory%>);
        	conf.set("mapred.job.reduce.memory.mb", <%=reduceMemory%>);
		<%
    	}
		%>

		//tunning m/r jobs
		setDefaultMapReduceConfig(conf);
		
		//set custom hadoop properties
		setCustomHadoopProperties(conf);

		//set context
		setContext(conf);
		
		//init MRJobClient
		mrJobClient = new MRJobClient();
		if(execStat){
			mrJobClient.setRunStat(runStat);
		}
	}
	
	private void setCustomHadoopProperties(Configuration conf){
		<%
		if(mrCustomProps!=null && mrCustomProps.size()>0){
			for(int i = 0; i < mrCustomProps.size(); i++){
				Map<String, String> mrCustomProp = mrCustomProps.get(i);
				%>
				conf.set(String.valueOf(<%=mrCustomProp.get("PROPERTY")%>), String.valueOf(<%=mrCustomProp.get("VALUE")%>));
			<%
			}
		}
		%>
	}
		
	private void setDefaultMapReduceConfig(Configuration conf) throws IOException{
		//set default reduce number
		JobConf jobConf = new JobConf(conf);
		setCustomHadoopProperties(jobConf);
		JobClient client = new JobClient(jobConf);
		int maxReduceNum = client.getClusterStatus()
				.getMaxReduceTasks();
		
		int reduceNum = (int) (maxReduceNum * 0.99);
		reduceNum = reduceNum > 0 ? reduceNum : 1;
		
		conf.setInt("mapred.reduce.tasks", reduceNum);
		//set distributedcache
		org.apache.hadoop.filecache.DistributedCache.createSymlink(conf);
	}
	
	private void validTempFolder(String mr_temp_dir) throws Exception{	
		java.io.File[] rootFoldersArray = java.io.File.listRoots();
		java.util.List<java.io.File> listRootFoldersReadOnly = java.util.Arrays.asList(rootFoldersArray);
		java.util.List<java.io.File> listRootFolders = new java.util.ArrayList<java.io.File>(listRootFoldersReadOnly);
		listRootFolders.add(new java.io.File(System.getProperty("user.home")));
		<%if(mrNeedUserName){%>
		listRootFolders.add(new java.io.File("/user/" + <%=mrUserName%>));
		<%}%>
		listRootFolders.add(new java.io.File("/user/" + System.getProperty("user.name")));
		if(listRootFolders.contains(new java.io.File(mr_temp_dir))) {
			throw new Exception("Using a root folder or a home folder as the temporary directory is not recommended, please choose another one.");
		}
	}
	
	private void startStat(){
		if(clientHost == null){
			clientHost = defaultClientHost;
		}
		if(portStats != null){
			// portStats = -1; //for testing
			if(portStats < 0 || portStats > 65535){
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}
		if(execStat){
			try{
				runStat.startThreadStat(clientHost, portStats);
			}catch(java.io.IOException ioException){
				ioException.printStackTrace();
			}
		}
	}
	
	private void endStat(){
		if(execStat){
			runStat.stopThreadStat();
		}
	}
	
	private void initContext(){
		//get context
		try{
	        //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.  
	        java.io.InputStream inContext = <%=process.getName()%>.class.getClassLoader().getResourceAsStream("<%=codeGenArgument.getCurrentProjectName().toLowerCase()%>/<%=jobFolderName%>/contexts/"+contextStr+".properties");
	        if(isDefaultContext && inContext == null){
	
	        }else{
	            if(inContext!=null){
	            	//defaultProps is in order to keep the original context value
                    defaultProps.load(inContext);
                    inContext.close();
                    context = new ContextProperties(defaultProps);
	            }else{
	                //print info and job continue to run, for case: context_param is not empty.
	                System.err.println("Could not find the context " + contextStr);
	            }
	        }
	        
	        if(!context_param.isEmpty()){
	        	context.putAll(context_param);
	        }
	        context.loadValue();
	        if(parentContextMap != null && !parentContextMap.isEmpty()){
		        <%
		        for(IContextParameter ctxParam :params){
		            String typeToGenerate = "String";
		            if(ctxParam.getType().equals("id_List Of Value") || ctxParam.getType().equals("id_File") || ctxParam.getType().equals("id_Directory")){
		                typeToGenerate = "String";
		            }else{
		                typeToGenerate = JavaTypesManager.getTypeToGenerate(ctxParam.getType(),true);
		        	}
		        	%>
		        	if(parentContextMap.containsKey("<%=ctxParam.getName()%>")){
		                context.<%=ctxParam.getName()%> = (<%=typeToGenerate %>) parentContextMap.get("<%=ctxParam.getName()%>");
		            }
		        <%
		        }
		        %>
	        }
	    }catch (java.io.IOException ie){
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }	
	}
	
	private void setContext(Configuration conf){
		//get context
		try{
	        //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.  
	        java.net.URL inContextUrl = <%=process.getName()%>.class.getClassLoader().getResource("<%=codeGenArgument.getCurrentProjectName().toLowerCase()%>/<%=jobFolderName%>/contexts/"+contextStr+".properties");
	        if(isDefaultContext && inContextUrl == null){
	
	        }else{
	            if(inContextUrl!=null){
                    conf.set(ContextProperties.CONTEXT_FILE_NAME, contextStr+".properties");
	                org.talend.hadoop.mapred.lib.DistributedCache.addCacheFile(new java.net.URI(inContextUrl.getProtocol(),inContextUrl.getHost(),inContextUrl.getPath(), contextStr+".properties"), conf);
	            }
	        }
            
	        if(!context_param.isEmpty()){
	            for(Object contextKey : context_param.keySet()){
	            	conf.set(ContextProperties.CONTEXT_PARAMS_PREFIX + contextKey, context.getProperty(contextKey.toString()));
	            	conf.set(ContextProperties.CONTEXT_KEYS, conf.get(ContextProperties.CONTEXT_KEYS, "") + " " + contextKey);
	            }
	        }

	        if(parentContextMap != null && !parentContextMap.isEmpty()){
		        <%
		        for(IContextParameter ctxParam : params){
		        %>
		        	if(parentContextMap.containsKey("<%=ctxParam.getName()%>")){
		        		conf.set(ContextProperties.CONTEXT_PARENT_PARAMS_PREFIX + "<%=ctxParam.getName()%>", parentContextMap.get("<%=ctxParam.getName()%>").toString());
	            		conf.set(ContextProperties.CONTEXT_PARENT_KEYS, conf.get(ContextProperties.CONTEXT_KEYS, "") + " " + "<%=ctxParam.getName()%>");
		            }
		        <%
		        }
		        %>
	        }
	    }catch (java.net.URISyntaxException e){
            System.err.println("Could not load context "+contextStr);
            e.printStackTrace();
        }	
	}
	
	private void clearTempFolder(){
		try{
			<%
			if(mrNeedUserName){
			%>
				final String mr_temp_dir = this.mr_temp_dir;
				UserGroupInformation ugi = UserGroupInformation.createRemoteUser(<%=mrUserName%>);
				ugi.doAs(new PrivilegedExceptionAction<Void>() {
					public Void run() throws Exception {
			<%
			}
			%>
						FileSystem fs = FileSystem.get(getConf());
						fs.delete(new Path(mr_temp_dir),true);
			<%
			if(mrNeedUserName){
			%>			
						return null;
					}	
				});
			<%
			}
			%>
		} catch (Exception e) {
			e.printStackTrace();
		} 
	}
	
	private String genTempFolderForComponent(String name){
		java.io.File tempDir = new java.io.File(mr_temp_dir, name);
		String tempDirPath = tempDir.getPath();
		if(java.io.File.separatorChar != '/')
		    tempDirPath = tempDirPath.replace(java.io.File.separatorChar, '/');
		return tempDirPath;
	}
	
	private void evalParam(String arg) {
		if (arg.startsWith("--context=")) {
			contextStr = arg.substring("--context=".length());
			isDefaultContext = false;
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring("--context_param".length() + 1);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
			}
		} else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        }
    }
    
    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}        
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}
		
		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {
					
					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) { 
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}
		
		return result.toString();
    }
	
	public Integer getErrorCode() {
		return errorCode;
	}
	
	public String getStatus() {
		return status;
	}
}