<%@ jet package="org.talend.designer.codegen.translators" imports="org.talend.core.model.process.INode org.talend.core.model.process.ElementParameterParser org.talend.core.model.metadata.IMetadataTable org.talend.core.model.metadata.IMetadataColumn java.util.List" class="FileInputStart" %>

# +-------------------------------------------------------------------------+
# | [inputFile begin] starts here                                           |
# +-------------------------------------------------------------------------+

<%
	INode node = (INode) argument;
	List<IMetadataTable> metadatas = node.getMetaDataList();
	if ((metadatas!=null)&&(metadatas.size()>0)) {
		IMetadataTable metadata = metadatas.get(0);
		if (metadata!=null) {
%>

use FileHandle;
use List::Util qw/min/;
use talend::filesOp;

my %input_desc_<%=metadata.getTableName() %> = (
    filename      => <%=ElementParameterParser.getValue(node, "__FILENAME__") %>,
    row_separator => <%=ElementParameterParser.getValue(node, "__ROWSEPARATOR__") %>,
    header        => <%=ElementParameterParser.getValue(node, "__HEADER__") %>,
    footer        => <%=ElementParameterParser.getValue(node, "__FOOTER__") %>,
    limit         => <%=ElementParameterParser.getValue(node, "__LIMIT__") %>,
    schema        => [
    <%
		for (IMetadataColumn column: metadata.getListColumns()) {
    %>
    	{
            name    => '<%=column.getLabel() %>',
            key     => <%=column.isKey() %>,
            type    => '<%=column.getType() %>',
            len     => <%=column.getLength() %>,
            null    => <%=column.isNullable() %>,
            default => '<%=column.getDefault() %>',
            comment => '<%=column.getComment() %>',
		},
	<%
		}
    %>
    ]
);

use constant INPUT_FIELD_SEPARATOR_<%=metadata.getTableName() %> => <%=ElementParameterParser.getValue(node, "__FIELDSEPARATOR__") %>;
$/ = $input_desc_<%=metadata.getTableName() %>{row_separator};

my $input_FH_<%=metadata.getTableName() %> = new FileHandle;
open($input_FH_<%=metadata.getTableName() %>, '<', $input_desc_<%=metadata.getTableName() %>{filename})
    or die 'cannot open file "' . $input_desc_<%=metadata.getTableName() %>{filename} . '"';

# move to the first useful line
if ($input_desc_<%=metadata.getTableName() %>{header} > 0) {
    for (1..$input_desc_<%=metadata.getTableName() %>{header}) {
        my $useless_line_<%=metadata.getTableName() %> = <$input_FH_<%=metadata.getTableName() %>>;
    }
}

# as we have a limit and/or a footer, we need to know the number of rows in
# the input file
my $total_line_<%=metadata.getTableName() %> = tFileRowCount(
    filename => $input_desc_<%=metadata.getTableName() %>{filename},
    rowseparator => $input_desc_<%=metadata.getTableName() %>{row_separator},
    buffersize => 4096,
);

my $first_row_<%=metadata.getTableName() %> = 1 + $input_desc_<%=metadata.getTableName() %>{header};
my $last_row_<%=metadata.getTableName() %> =
    $input_desc_<%=metadata.getTableName() %>{header}
    + min(
        $input_desc_<%=metadata.getTableName() %>{limit},
        $total_line_<%=metadata.getTableName() %> - $input_desc_<%=metadata.getTableName() %>{header} - $input_desc_<%=metadata.getTableName() %>{footer}
    );

# print 'total lines: ', $total_line_<%=metadata.getTableName() %>, "\n";
# print 'first row: ', $first_row_<%=metadata.getTableName() %>, "\n";
# print 'last row: ', $last_row_<%=metadata.getTableName() %>, "\n";
# exit();

for my $line_number_<%=metadata.getTableName() %> ($first_row_<%=metadata.getTableName() %> .. $last_row_<%=metadata.getTableName() %>) {

<%
		}
	}
%>

# +-------------------------------------------------------------------------+
# | [inputFile begin] stops here                                            |
# +-------------------------------------------------------------------------+
