<%@ jet 
package="org.talend.designer.codegen.translators" 
	imports="
	java.util.ArrayList
	java.util.List
	org.talend.designer.codegen.config.CodeGeneratorArgument

	org.talend.designer.mapper.MapperComponent
	org.talend.designer.mapper.external.data.ExternalMapperData 
	org.talend.designer.mapper.external.data.ExternalMapperTable
	org.talend.designer.mapper.external.data.ExternalMapperTableEntry
	org.talend.designer.mapper.language.ILanguage
	org.talend.designer.mapper.language.generation.GenerationManagerFactory
	org.talend.designer.mapper.language.generation.PerlGenerationManager
	org.talend.designer.mapper.language.LanguageProvider
	org.talend.designer.mapper.model.metadata.MapperDataTestGenerator
	" 
	class="MapperBegin" 
%>

<%

	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	MapperComponent node = (MapperComponent) codeGenArgument.getArgument();
	boolean stats = codeGenArgument.isStatistics();
	
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        ExternalMapperData data;
        if (node != null) {
            data = (ExternalMapperData) node.getExternalData();
        } else {
            org.talend.designer.mapper.MapperMain.setStandAloneMode(true);
            MapperDataTestGenerator testGenerator = new MapperDataTestGenerator(LanguageProvider.getCurrentLanguage(), false);
            data = (ExternalMapperData) testGenerator.getExternalData();
        }

        List<ExternalMapperTable> inputTables = data.getInputTables();
        List<ExternalMapperTable> varsTables = data.getVarsTables();
        List<ExternalMapperTable> outputTables = data.getOutputTables();

        String cr = "\n";

        int indent = 1;

        ILanguage currentLanguage = LanguageProvider.getPerlLanguage();

        PerlGenerationManager gm = (PerlGenerationManager) GenerationManagerFactory.getInstance().getGenerationManager(currentLanguage);

        StringBuilder sb = new StringBuilder();

        gm.setInputTables(inputTables);
        gm.setVarsTables(varsTables);

        List<ExternalMapperTable> allTablesList = new ArrayList<ExternalMapperTable>(inputTables);
        allTablesList.addAll(varsTables);
        allTablesList.addAll(outputTables);

        // constants
        for (ExternalMapperTable table : allTablesList) {
            List<ExternalMapperTableEntry> tableEntries = table.getMetadataTableEntries();
            if (tableEntries == null) {
                continue;
            }
            String tableName = table.getName();
            sb.append(cr);
            int lstSize = tableEntries.size();
            for (int i = 0; i < lstSize; i++) {
                ExternalMapperTableEntry tableEntry = (ExternalMapperTableEntry) tableEntries.get(i);
                sb.append(cr + gm.indent(indent) + "use constant " + tableName + "__" + tableEntry.getName() + " => " + i + ";");
            }
        }

        // column names
        for (ExternalMapperTable table : outputTables) {
            List<ExternalMapperTableEntry> tableEntries = table.getMetadataTableEntries();
            String tableName = table.getName();
            sb.append(cr + cr + gm.indent(indent) + "my @colnames_" + tableName + " = (");
            int lstSize = tableEntries.size();
            indent++;
            for (int i = 0; i < lstSize; i++) {
                ExternalMapperTableEntry tableEntry = (ExternalMapperTableEntry) tableEntries.get(i);
                sb.append(cr + gm.indent(indent) + "'" + tableEntry.getName() + "',");
            }
            indent--;
            sb.append(cr + gm.indent(indent) + ");");
        }

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

%>
<%= sb.toString()%>
