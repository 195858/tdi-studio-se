<%@ jet 
package="org.talend.designer.codegen.translators" 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.metadata.IMetadataTable
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.List
"
class="FileOutputLDIFStart"
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
boolean stats = codeGenArgument.isStatistics();

List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
    IMetadataTable metadata = metadatas.get(0);
    if (metadata!=null) {
        String cid = metadata.getTableName();
%>

use FileHandle;

my %desc_<%=cid %> = (
    filename   => <%=ElementParameterParser.getValue(node, "__FILENAME__") %>,
    wrap       => <%=ElementParameterParser.getValue(node, "__WRAP__") %>,
    changetype => '<%=ElementParameterParser.getValue(node, "__CHANGETYPE__") %>',
    changes    => '<%=ElementParameterParser.getValue(node, "__CHANGES__") %>',
    schema        => [
    <%
        for (IMetadataColumn column: metadata.getListColumns()) {
    %>
        {
            name    => '<%=column.getLabel() %>',
            key     => <%=column.isKey() %>,
            type    => '<%=column.getType() %>',
            len     => <%=column.getLength() %>,
            null    => <%=column.isNullable() %>,
            default => '<%=column.getDefault() %>',
            comment => '<%=column.getComment() %>',
        },
	<%
        }
    %>
    ],
);

<%
        int i = 0;
        for (IMetadataColumn column: metadata.getListColumns()) {
%>
    use constant <%=cid %>__<%=column.getLabel() %> => <%= i %>;
<%
            i++;
        }
%>

my $nb_fields_<%=cid %> = scalar @{ $desc_<%=cid %>{schema} };
my $nb_line_<%=cid %> = 0;
my @colnames_<%=cid %> = map { $_->{name} } @{ $desc_<%=cid %>{schema} };

use Net::LDAP::LDIF;

my $ldif_<%=cid %> = Net::LDAP::LDIF->new(
    $desc_<%=cid %>{filename},
    'w',
    onerror => 'undef',
    change  => 1,
    wrap => $desc_<%=cid %>{wrap},
);

<%
    }
}
%>
