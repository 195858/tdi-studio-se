<%@ jet
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.process.IConnection
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.core.model.process.EConnectionType
    org.talend.core.model.process.ElementParameterParser
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.commons.utils.generation.LocationUtils
    org.talend.commons.utils.generation.EntryLocation
    java.util.List
    java.util.ArrayList
"
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

LocationUtils locationUtils = new LocationUtils();

List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
    IMetadataTable metadata = metadatas.get(0);
    if (metadata!=null) {
        String code = ElementParameterParser.getValue(node, "__CODE__");

        List<EntryLocation> locations = new ArrayList<EntryLocation>();

        // replace $output_row[field1] by $tPerlRow_1[tPerlRow_1__field1]

        List<IMetadataColumn> columns = metadata.getListColumns();
        for(IMetadataColumn column : columns) {
            locations.add(
                new EntryLocation(
                    cid,
                    column.getLabel()
                )
            );
        }
        
        // we give a default value to prevComponentName so that no error
        // occur when the user tries to generated Perl code while no input
        // component was linked to our tPerlRow.
        String inputRowName = new String("input_row");
        String prevComponentName = new String("prev_component_name");

        List< ? extends IConnection> inConns = node.getIncomingConnections();
        if (inConns != null && !inConns.isEmpty()) {
            IConnection inConn = inConns.get(0);
            IMetadataTable inMetadata = inConn.getMetadataTable();
            inputRowName = inConn.getName();

            columns = inMetadata.getListColumns();
            for(IMetadataColumn column : columns) {
                locations.add(
                    new EntryLocation(
                        inputRowName,
                        column.getLabel()
                    )
                );
            }
        }

        // Here comes the substitutions!



        code = code.replaceAll(
            "\\$output_row\\[",
            "\\$"+ cid +"["
        );
        
        code = code.replaceAll(
            "\\$input_row\\[",
            "\\$"+ inputRowName +"["
        );

        code = locationUtils.replaceColumnNameToConstantName(
            code,
            (EntryLocation[])locations.toArray(new EntryLocation[0])
        );

        code = code.replaceAll(
            "\\$"+ cid +"\\[",
            "\\$"+ cid +"->["
        );
        
        code = code.replaceAll(
            "\\$"+ inputRowName +"\\[",
            "\\$"+ inputRowName +"->["
        );
        

        // In case the user would make some tricky Perl things, he can use
        // the arrays as a whole.
        code = code.replaceAll(
            "@input_row",
            "@\\$" + inputRowName
        );

        code = code.replaceAll(
            "@output_row",
            "@\\$" + cid
        );
        

%>

my $<%=cid%> = [];

    <%=code%>

    $nb_line_<%=cid%>++;
    
<%
    }
}
%>
