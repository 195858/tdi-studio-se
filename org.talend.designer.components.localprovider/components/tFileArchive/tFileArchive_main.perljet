<%@ jet
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.List
    java.util.Map
"
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

String source = ElementParameterParser.getValue(
    node,
    "__SOURCE__"
);

String includeSubdir = ElementParameterParser.getValue(
    node,
    "__INCLUDE_SUBDIR__"
);

String level = ElementParameterParser.getValue(
    node,
    "__LEVEL__"
);

String allFiles = ElementParameterParser.getValue(
    node,
    "__ALL_FILES__"
);

List<Map<String, String>> masks =
    (List<Map<String,String>>)ElementParameterParser.getObjectValue(
        node,
        "__MASK__"
    );
%>

{
<%
if (allFiles.equals("true")) {
%>
    my @files = getFileList(
        directory      => <%=source%>,
        include_subdir => <%=includeSubdir%>,
    );
<%
}
else {
%>
    my @files = (
<%
    for (Map<String, String> mask : masks) {
%>
        getFileList(
            directory      => <%=source%>,
            case_sensitive => <%=mask.get("CASE_SENSITIVE")%>,
            filemask       => filemaskToRegex(<%=mask.get("FILEMASK")%>),
            include_subdir => <%=includeSubdir%>,
        ),
<%
    }
%>
    );
<%
}
%>

    # use Data::Dumper;
    # print Dumper(\@files);

    for my $file (@files) {
        my $new_filename = $file;
        $new_filename =~ s{^$source_<%=cid%>}{};
        $new_filename =~ s{^/*}{};

        # print $new_filename, "\n";

        if (-d $file) {
            $zip_<%=cid%>->addDirectory($file, $new_filename);
        }
        else {
            my $member = $zip_<%=cid%>->addFile($file, $new_filename);
            $member->desiredCompressionLevel(<%=level%>);
        }
    }
}
