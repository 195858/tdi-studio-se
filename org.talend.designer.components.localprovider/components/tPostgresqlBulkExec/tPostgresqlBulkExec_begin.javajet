<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.core.model.metadata.MetadataTalendType    
    org.talend.core.model.metadata.MappingTypeRetriever    
    java.util.List
    java.util.ArrayList    
    java.util.Map
    java.util.HashMap
" 
skeleton="../templates/db_output_bulk.skeleton" 
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();
String table = ElementParameterParser.getValue(node, "__TABLE__");
String dbSchema = ElementParameterParser.getValue(node, "__SCHEMA_DB__");
String dataAction = ElementParameterParser.getValue(node,"__DATA_ACTION__");
StringBuilder tableName = new StringBuilder();
StringBuilder tmpTableName = new StringBuilder();
boolean standardConformingString= ("true").equals(ElementParameterParser.getValue(node,"__USE_L2_VERSION__"));
boolean convertToUppercase = false; // not active this function
boolean useExistingConnection = "true".equalsIgnoreCase(ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__"));
%>
String tableName_<%=cid%> = null;
int deletedCount_<%=cid%>=0;
<%
if(dbSchema == null || ("").equals(dbSchema) || ("\"\"").equals(dbSchema)) {
    tableName.append("\\\"\" + " + table + " + \"\\\"");
    %>
    tableName_<%=cid%> = <%=table%>;
    <%
} else {
    tableName.append("\\\"\" + " + dbSchema + " + \"\\\".\\\"\" + " + table + " + \"\\\"");
    %>
    tableName_<%=cid%> = <%=dbSchema%> + "\".\"" + <%=table%>;
    <%
}
if(("UPDATE").equals(dataAction)) {
    tmpTableName = tableName;
    tableName = new StringBuilder("\\\"tmp_" + cid ); //tableName not end. will add pid when create a temp table for update.
}
String file = ElementParameterParser.getValue(node, "__FILENAME__");
List<IMetadataColumn> columnList = getColumnList(node);
StringBuilder copyColumns = new StringBuilder("");
if(columnList != null && columnList.size() > 0) {
    copyColumns.append(" (");
    int count = 0;
    for(IMetadataColumn column : columnList) {
        copyColumns.append("\\\"" + column.getOriginalDbColumnName() + "\\\"");
        if(count != columnList.size() - 1) {
            copyColumns.append(",");
        }
        count++;
    }
    copyColumns.append(") ");
}
StringBuilder notNullColumns = new StringBuilder(" ");
List<Map<String, String>> notNullCols =
    (List<Map<String,String>>)ElementParameterParser.getObjectValue(
        node,"__FORCENOTNULL__" );
if(notNullCols != null && notNullCols.size() > 0) {
    notNullColumns.append("FORCE NOT NULL ");
    int notNullCount = 0;
    for(Map<String, String> notNullCol : notNullCols) {
        if(("true").equals(notNullCol.get("FORCENOTNULL"))) {
            notNullColumns.append("\\\"" + notNullCol.get("SCHEMA_COLUMN") + "\\\",");
            notNullCount++;
        }
    }
    if(notNullCount == 0) {
        notNullColumns = new StringBuilder(" ");
    }
}


%>
String bulkSQL_<%=cid%> = "COPY " + "<%=tableName.toString()%>" 
 <%if (("UPDATE").equals(dataAction)) {%>+ "_"+ pid + "\""<%}%>
 +"<%=copyColumns.toString()%>FROM '" + <%=file%> + "' WITH "; 
 bulkSQL_<%=cid%> = bulkSQL_<%=cid%>.replace("\\","/");
<%
String fileType = ElementParameterParser.getValue(node, "__FILETYPE__");
String oids = (("true").equals(ElementParameterParser.getValue(node, "__OIDS__")) ? "OIDS" : "");
if(("BINARYFILE").equals(fileType)) {
    %>
    bulkSQL_<%=cid%> += "BINARY <%=oids%>";
    <%
} else {
    %>
    bulkSQL_<%=cid%> += "<%=oids%> " + "DELIMITER AS '" + <%=ElementParameterParser.getValue(node, "__FIELDS_TERMINATED_BY__")%> + "' ";
    bulkSQL_<%=cid%> += "NULL AS '" + <%=ElementParameterParser.getValue(node, "__NULLSTRING__")%> + "' ";
    <%
    if(("CSVFILE").equals(fileType)) {
        String header = (("true").equals(ElementParameterParser.getValue(node, "__HEADER__")) ? "HEADER" : "");
        String escapeChar = ElementParameterParser.getValue(node, "__ESCAPE_CHAR__");        
        String textEnclosure = ElementParameterParser.getValue(node, "__TEXT_ENCLOSURE__");        
        %>
        bulkSQL_<%=cid%> += "CSV <%=header%> QUOTE AS '" + <%=textEnclosure %>.replaceAll("\\\\", "\\\\\\\\") + "' ";
        <%if(standardConformingString) {
        %>
        bulkSQL_<%=cid%> += "ESCAPE AS '" + <%=escapeChar %> + "' "; 
        <%
        }else {%>
        bulkSQL_<%=cid%> += "ESCAPE AS '" + <%=escapeChar %>.replaceAll("\\\\", "\\\\\\\\") + "' ";
        <%}%>        
        bulkSQL_<%=cid%> += "<%=notNullColumns.toString().substring(0, notNullColumns.toString().length() - 1)%>";
        <%
    }
}



String host = ElementParameterParser.getValue(node, "__HOST__");
String port = ElementParameterParser.getValue(node, "__PORT__");
String dbName = ElementParameterParser.getValue(node, "__DBNAME__");
String userName = ElementParameterParser.getValue(node, "__USER__");
String password = ElementParameterParser.getValue(node, "__PASS__");
%> 
java.sql.Connection conn_<%=cid%> = null;
	<%
	if(useExistingConnection) {
    		String conn = "conn_" + ElementParameterParser.getValue(node,"__CONNECTION__");
	%>
	 	conn_<%=cid%> = (java.sql.Connection)globalMap.get("<%=conn%>");
	 <%
	 } else {
	 %>
		java.lang.Class.forName("org.postgresql.Driver").newInstance();
		conn_<%=cid %> = java.sql.DriverManager.getConnection("jdbc:postgresql://" + <%=host%> + ":" + <%=port%> + "/" + <%=dbName%>, <%=userName%>, <%=password%>);
	<%
	}
	%>

<%
String tableAction = ElementParameterParser.getValue(node,"__TABLE_ACTION__");
String dbmsId = ElementParameterParser.getValue(node,"__MAPPING__");
List<Column> stmtStructure = null;
Manager manager = null;
if(columnList != null && columnList.size() > 0) {
	stmtStructure = getManager(dbmsId, cid).createColumnList(columnList, null);
%>
	<%@ include file="../templates/_tableAction.javajet"%>	
<%    
}


if(("UPDATE").equals(dataAction)) {

    if(columnList != null && columnList.size() > 0) {    
        int keyCount = 0;
        for(IMetadataColumn column : columnList) {
            if(column.isKey()) {
                keyCount++;
            }
        }
        %>
        int keyCount_<%=cid%> = <%=keyCount%>;
        if(keyCount_<%=cid%> == 0) {
            throw new RuntimeException("For bulk update, Schema must have a key at least."); 
        }
        
        String tmpTableName_<%=cid%> = tableName_<%=cid%>;
        tableName_<%=cid%> = "tmp_<%=cid%>" + "_" + pid ;        
        java.sql.Statement stmtCreateTmp_<%=cid%> = conn_<%=cid%>.createStatement();
        stmtCreateTmp_<%=cid%>.execute("<%=manager.getCreateTableSQL(stmtStructure)%>");
        stmtCreateTmp_<%=cid%>.close();
        
        
        <%if(standardConformingString) {
   		%>
   		java.sql.CallableStatement cs_<%=cid%> =conn_<%=cid %>.prepareCall("set standard_conforming_strings=on");
   		cs_<%=cid%>.execute();
   		cs_<%=cid%>.close();
   		<%}%>        
        
        java.sql.Statement stmtTmpBulk_<%=cid%> = conn_<%=cid%>.createStatement();
        stmtTmpBulk_<%=cid%>.execute(bulkSQL_<%=cid%>);
        stmtTmpBulk_<%=cid%>.close();
        
        tableName_<%=cid%> = tmpTableName_<%=cid%>;
        tmpTableName_<%=cid%> = "tmp_<%=cid%>" + "_" + pid;
        
        java.sql.Statement stmtUpdateBulk_<%=cid%> = conn_<%=cid%>.createStatement();
        
        stmtUpdateBulk_<%=cid%>.executeUpdate("<%=manager.getUpdateBulkSQL(columnList)%>");
        stmtUpdateBulk_<%=cid%>.close();
        tableName_<%=cid%> = tmpTableName_<%=cid%>;
        
        java.sql.Statement stmtTmpDrop_<%=cid%> = conn_<%=cid%>.createStatement();
        stmtTmpDrop_<%=cid%>.execute("<%=manager.getDropTableSQL()%>");
        stmtTmpDrop_<%=cid%>.close();
        <%
    }
} else if(("INSERT").equals(dataAction)) {
    %>
   <%if(standardConformingString) {
   %>
   	java.sql.CallableStatement cs_<%=cid%> =conn_<%=cid %>.prepareCall("set standard_conforming_strings=on");
   	cs_<%=cid%>.execute();
   	cs_<%=cid%>.close();
   <%}%>
    
    java.sql.Statement stmtBulk_<%=cid %> = conn_<%=cid %>.createStatement();
    //stmt.execute("SET client_encoding to 'UNICODE'");
    stmtBulk_<%=cid %>.execute(bulkSQL_<%=cid%>);
    stmtBulk_<%=cid %>.close();    
    <%
}
%>
conn_<%=cid %>.close();
