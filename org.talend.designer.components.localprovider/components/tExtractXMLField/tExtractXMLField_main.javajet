<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn 
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.IConnectionCategory
    org.talend.core.model.process.EConnectionType
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.Map
    java.util.List
    org.talend.core.model.metadata.types.JavaTypesManager
	org.talend.core.model.metadata.types.JavaType
" 
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();

String cid = node.getUniqueName();
String xmlField = ElementParameterParser.getValue(node, "__XMLFIELD__");

List<Map<String, String>> mapping = (List<Map<String,String>>)ElementParameterParser.getObjectValueXML(node, "__MAPPING__");
String loopQuery = ElementParameterParser.getValue(node, "__LOOP_QUERY__"); 
String limit = ElementParameterParser.getValue(node, "__LIMIT__");
if (("").equals(limit)) {
	limit = "-1";
}

//get XML field content
String inputConnName = "";
List<IMetadataColumn> inColumns = null;
if (node.getIncomingConnections()!=null) {
	for (IConnection incomingConn : node.getIncomingConnections()) {
		if (incomingConn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
			inputConnName = incomingConn.getName();
			IMetadataTable inputMetadataTable = incomingConn.getMetadataTable();
			inColumns = inputMetadataTable.getListColumns();
			for (IMetadataColumn inputCol : inputMetadataTable.getListColumns()) {
				if(inputCol.getLabel().equals(xmlField))
				{
%>
	String xmlStr_<%=cid%> = <%=inputConnName%>.<%=xmlField%>;
<%
					break;
				}
			}
		}
	}
}

List< ? extends IConnection> outputConns = node.getOutgoingSortedConnections();

    	if (outputConns!=null) {
    		if (outputConns.size()>0) {
    			for (int i=0;i<outputConns.size();i++) {
    				IConnection connTemp = outputConns.get(i);
    				if (connTemp.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
%>
    		<%=connTemp.getName() %> = null;			
<%
    				}
    			}
    		}
    	}

    String rejectConnName = "";
    List<? extends IConnection> rejectConns = node.getOutgoingConnections("REJECT");
    if(rejectConns != null && rejectConns.size() > 0) {
        IConnection rejectConn = rejectConns.get(0);
        rejectConnName = rejectConn.getName();
    }
    List<IMetadataColumn> rejectColumnList = null;
    IMetadataTable metadataTable = node.getMetadataFromConnector("REJECT");
    if(metadataTable != null) {
        rejectColumnList = metadataTable.getListColumns();      
    }

String outputConnName = "";
if (outputConns!=null && outputConns.size()>0) {
	IConnection outputConn = outputConns.get(0);
	outputConnName = outputConn.getName();  
    IMetadataTable outputMetadata = outputConn.getMetadataTable();
    if (outputMetadata!=null) {
    	List<IMetadataColumn> columns= outputMetadata.getListColumns();
%>
class NameSpaceTool_<%=cid%> {

    public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();
    
	private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

    public void countNSMap(org.dom4j.Element el) {
        for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
            if (ns.getPrefix().trim().length() == 0) {
                xmlNameSpaceMap.put("pre"+defualtNSPath.size(), ns.getURI());
                String path = "";
                org.dom4j.Element elTmp = el;
                while (elTmp != null) {
                   	if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
                        path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
                    } else {
                        path = "/" + elTmp.getName() + path;
                    }
                    elTmp = elTmp.getParent();
                }
                defualtNSPath.add(path);
            } else {
                xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
            }

        }
        for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
            countNSMap(e);
        }
    }
    
    public String addDefaultNSPrefix(String path, String loopPath) {
        if (defualtNSPath.size() > 0) {
        	String fullPath = loopPath;
        	if(!path.equals(fullPath)){
            	for (String tmp : path.split("/")) {
            		if (("..").equals(tmp)) {
                        fullPath = fullPath.substring(0, fullPath.lastIndexOf("/"));
                    } else {
                        fullPath += "/" + tmp;
                    }
            	}
            }
        	int[] indexs = new int[fullPath.split("/").length - 1];
            java.util.Arrays.fill(indexs, -1);
            int length = 0;
            for (int i = 0; i < defualtNSPath.size(); i++) {
                if (defualtNSPath.get(i).length() > length && fullPath.startsWith(defualtNSPath.get(i))) {
                    java.util.Arrays.fill(indexs, defualtNSPath.get(i).split("/").length - 2, indexs.length, i);
                    length = defualtNSPath.get(i).length();
                }
            }

            StringBuilder newPath = new StringBuilder();
            String[] pathStrs = path.split("/");
            for (int i = 0; i < pathStrs.length; i++) {
                String tmp = pathStrs[i];
                if (newPath.length() > 0) {
                    newPath.append("/");
                }
                if (tmp.length() > 0 && tmp.indexOf(":") == -1 && tmp.indexOf(".") == -1 /*&& tmp.indexOf("@") == -1*/) {
                    int index = indexs[i + indexs.length - pathStrs.length];
                    if (index >= 0) {
                    	//==== add by wliu to support both filter and functions==
						if(tmp.indexOf("[")>0 && tmp.indexOf("]")>tmp.indexOf("[")){//include filter
							String tmpStr=replaceElementWithNS(tmp,"pre"+index+":");
							newPath.append(tmpStr);
						}else{
							if(tmp.indexOf("@") != -1 || tmp.indexOf("(")<tmp.indexOf(")")){  // include attribute
								newPath.append(tmp);
							}else{
						//==add end=======	
                        		newPath.append("pre").append(index).append(":").append(tmp);
                        	}
                        }                    
                    } else {
                        newPath.append(tmp);
                    }
                } else {
                    newPath.append(tmp);
                }
            }
            return newPath.toString();
        }
        return path;
    }
    
	private String matches = "@*\\b[a-z|A-Z|_]+[[-]*\\w]*\\b[^'|^\\(]";
    private java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(matches);
    
	private String replaceElementWithNS(String global, String pre){

        java.util.regex.Matcher match = pattern.matcher(global);
        StringBuffer sb = new StringBuffer();
        match.reset();
        while (match.find()) {
            String group = match.group();
            String tmp = "";
            if (group.toLowerCase().matches("\\b(div|mod|and|or)\\b.*") || group.matches("@.*")) {
                tmp = group;
            } else {
                tmp = tmp + pre + group;
            }
            match.appendReplacement(sb, tmp);
        }
        match.appendTail(sb);
        
        return sb.toString();
	}
	

}

	NameSpaceTool_<%=cid%> nsTool_<%=cid%> = new NameSpaceTool_<%=cid%>();
    org.dom4j.io.SAXReader reader_<%=cid%> = new org.dom4j.io.SAXReader();
    org.dom4j.Document doc_<%=cid%> = null;
    java.util.HashMap xmlNameSpaceMap_<%=cid%> = null;
    org.dom4j.XPath x_<%=cid%> = null;
    java.util.List<org.dom4j.tree.AbstractNode> nodeList_<%=cid%> = null;
    try{
<%if(rejectConnName.equals(outputConnName)){%> <%=rejectConnName %> = null; <%}%>
	    doc_<%=cid%>= reader_<%=cid%>.read(new java.io.StringReader(xmlStr_<%=cid%>));
	    nsTool_<%=cid%>.countNSMap(doc_<%=cid%>.getRootElement());
	    xmlNameSpaceMap_<%=cid%> = nsTool_<%=cid%>.xmlNameSpaceMap;

    	x_<%=cid%> = doc_<%=cid%>.createXPath(nsTool_<%=cid%>.addDefaultNSPrefix(<%=loopQuery%>,<%=loopQuery%>));
      
    	x_<%=cid%>.setNamespaceURIs(xmlNameSpaceMap_<%=cid%>); 
    
    	nodeList_<%=cid%> = (java.util.List<org.dom4j.tree.AbstractNode>)x_<%=cid%>.selectNodes(doc_<%=cid%>);
    
if(nodeList_<%=cid%> !=null){

    String str_<%=cid %> = "";
    for (org.dom4j.tree.AbstractNode temp_<%=cid%>: nodeList_<%=cid%>) {
    	<%=outputConnName%> = new <%=outputConnName%>Struct();
    	nb_line_<%=cid%>++;	
<%
		if (limit.compareTo("-1")!=0) {
%>
    	if (nb_line_<%=cid%>><%=Integer.parseInt(limit)%>) {
    		break;
    	}
<%
		}
		//get the mapping column 
		for (int i=0;i<mapping.size();i++) { 
			for(IMetadataColumn column:columns) {
				if (mapping.get(i).get("SCHEMA_COLUMN")!=null) {
					if (column.getLabel().compareTo(mapping.get(i).get("SCHEMA_COLUMN"))==0) {
        				String query = mapping.get(i).get("QUERY");
        				if(query.trim().length()>0 && query.startsWith("\"")){
        					if(query.startsWith("\"") && query.endsWith("\"")){
        						query = query.substring(1, query.length() - 1);
        					}
%>
	org.dom4j.XPath xTmp<%=i%>_<%=cid%> = temp_<%=cid%>.createXPath(nsTool_<%=cid%>.addDefaultNSPrefix("<%=query%>",<%=loopQuery%>));
    xTmp<%=i%>_<%=cid%>.setNamespaceURIs(xmlNameSpaceMap_<%=cid%>);  
    str_<%=cid %> = xTmp<%=i%>_<%=cid%>.valueOf(temp_<%=cid%>);
	if (str_<%=cid %> != null ) {
<%
							String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
							JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
							String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
							if (javaType == JavaTypesManager.STRING || javaType == JavaTypesManager.OBJECT) {
%>
		<%=outputConnName%>.<%=column.getLabel() %> = str_<%= cid %>;
<%
							} else {
								if (javaType == JavaTypesManager.DATE) {
%>
		<%=outputConnName%>.<%=column.getLabel() %> = ParserUtils.parseTo_Date(str_<%= cid %>, <%= patternValue %>);
<%
								} else {
%>
		<%=outputConnName%>.<%=column.getLabel() %> = ParserUtils.parseTo_<%= typeToGenerate %>(str_<%= cid %>);
<%
								}
							}
%>
	}
<%
        				}else{
%>
		<%=outputConnName%>.<%=column.getLabel()%> = <%=inputConnName%>.<%=column.getLabel()%>;
<%
						}
					}
				}
			}
		}
%>
	}//for
}

    }catch(Exception e){
<%if(!("").equals(rejectConnName) && rejectColumnList != null && rejectColumnList.size() > 0) {%>
		<%=rejectConnName %> = new <%=rejectConnName %>Struct();
<% 	for(IMetadataColumn column : columns) {
  		if(!xmlField.equals(column.getLabel())){
  			for(IMetadataColumn inColumn : inColumns){
  				if(inColumn.getLabel().equals(column.getLabel())){%>
        <%=rejectConnName%>.<%=column.getLabel()%> = <%=inputConnName %>.<%=column.getLabel()%>;
<%
					break;
				}
			}
		}
    }%>
		<%=rejectConnName %>.errorXMLField = <%=inputConnName %>.<%=xmlField%>;
		<%=rejectConnName %>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
		<%=outputConnName %> = null;
<%} else if(("").equals(rejectConnName)){%>
    	System.err.println(e.getMessage());
    	<%=outputConnName %> = null;
<%}%>
    }

<%
	}
}
%>

   globalMap.put("<%=cid %>_NB_LINE", nb_line_<%=cid%>);



			
