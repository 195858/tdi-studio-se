<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn 
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.IConnectionCategory
    org.talend.core.model.process.EConnectionType
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.Map
    java.util.List
    org.talend.core.model.metadata.types.JavaTypesManager
	org.talend.core.model.metadata.types.JavaType
" 
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();

String cid = node.getUniqueName();
String xmlField = ElementParameterParser.getValue(node, "__XMLFIELD__");

List<Map<String, String>> mapping = (List<Map<String,String>>)ElementParameterParser.getObjectValueXML(node, "__MAPPING__");
String loopQuery = ElementParameterParser.getValue(node, "__LOOP_QUERY__"); 
String limit = ElementParameterParser.getValue(node, "__LIMIT__");
if (("").equals(limit)) {
	limit = "-1";
}

//get XML field content
String inputConnName = "";
List<IMetadataColumn> inColumns = null;
if (node.getIncomingConnections()!=null) {
	for (IConnection incomingConn : node.getIncomingConnections()) {
		if (incomingConn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
			inputConnName = incomingConn.getName();
			IMetadataTable inputMetadataTable = incomingConn.getMetadataTable();
			inColumns = inputMetadataTable.getListColumns();
			for (IMetadataColumn inputCol : inputMetadataTable.getListColumns()) {
				if(inputCol.getLabel().equals(xmlField))
				{
%>
	String xmlStr_<%=cid%> = <%=inputConnName%>.<%=xmlField%>;
<%
					break;
				}
			}
		}
	}
}

List< ? extends IConnection> outputConns = node.getOutgoingSortedConnections();

    String rejectConnName = "";
    List<? extends IConnection> rejectConns = node.getOutgoingConnections("REJECT");
    if(rejectConns != null && rejectConns.size() > 0) {
        IConnection rejectConn = rejectConns.get(0);
        rejectConnName = rejectConn.getName();
    }
    List<IMetadataColumn> rejectColumnList = null;
    IMetadataTable metadataTable = node.getMetadataFromConnector("REJECT");
    if(metadataTable != null) {
        rejectColumnList = metadataTable.getListColumns();      
    }

String outputConnName = "";
if (outputConns!=null && outputConns.size()>0) {
	IConnection outputConn = outputConns.get(0);
	outputConnName = outputConn.getName();  
    IMetadataTable outputMetadata = outputConn.getMetadataTable();
    if (outputMetadata!=null) {
    	List<IMetadataColumn> columns= outputMetadata.getListColumns();
%>
	NameSpaceTool_<%=cid%> nsTool_<%=cid%> = new NameSpaceTool_<%=cid%>();
    org.dom4j.io.SAXReader reader_<%=cid%> = new org.dom4j.io.SAXReader();
    org.dom4j.Document doc_<%=cid%> = null;
    java.util.HashMap xmlNameSpaceMap_<%=cid%> = null;
    org.dom4j.XPath x_<%=cid%> = null;
    java.util.List<org.dom4j.tree.AbstractNode> nodeList_<%=cid%> = null;
    
    boolean isStructError_<%=cid %>= true;
    
    try{
    
	    doc_<%=cid%>= reader_<%=cid%>.read(new java.io.StringReader(xmlStr_<%=cid%>));
	    nsTool_<%=cid%>.countNSMap(doc_<%=cid%>.getRootElement());
	    xmlNameSpaceMap_<%=cid%> = nsTool_<%=cid%>.xmlNameSpaceMap;

    	x_<%=cid%> = doc_<%=cid%>.createXPath(nsTool_<%=cid%>.addDefaultNSPrefix(<%=loopQuery%>,<%=loopQuery%>));
      
    	x_<%=cid%>.setNamespaceURIs(xmlNameSpaceMap_<%=cid%>); 
    
    	nodeList_<%=cid%> = (java.util.List<org.dom4j.tree.AbstractNode>)x_<%=cid%>.selectNodes(doc_<%=cid%>);
    	
    	isStructError_<%=cid %> = false;
    	
    }catch(Exception e){
<%
if(!("").equals(rejectConnName) && rejectColumnList != null && rejectColumnList.size() > 0) {
%>
		<%=outputConnName %> = null;
		<%=rejectConnName %> = new <%=rejectConnName %>Struct();
<%
	 	for(IMetadataColumn column : columns) {
	  		if(!xmlField.equals(column.getLabel())){
	  			for(IMetadataColumn inColumn : inColumns){
	  				if(inColumn.getLabel().equals(column.getLabel())){
%>
        <%=rejectConnName%>.<%=column.getLabel()%> = <%=inputConnName %>.<%=column.getLabel()%>;
<%
						break;
					}
				}
			}
	    }
%>
		<%=rejectConnName %>.errorXMLField = <%=inputConnName %>.<%=xmlField%>;
		<%=rejectConnName %>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
<%
} else if(("").equals(rejectConnName)){
%>
    	System.err.println(e.getMessage());
    	<%=outputConnName %> = null;
<%}%>
    }
    
    org.dom4j.Node node_<%=cid %> = null;
    String str_<%=cid %> = "";
    for(int i_<%=cid %>=0; isStructError_<%=cid %> || (nodeList_<%=cid %>!=null && i_<%=cid %> < nodeList_<%=cid %>.size());i_<%=cid %>++){
    	
    	if(!isStructError_<%=cid %>){
    	
    		org.dom4j.tree.AbstractNode temp_<%=cid %> = nodeList_<%=cid %>.get(i_<%=cid %>);

<%
    	if (outputConns!=null) {
    		if (outputConns.size()>0) {
    			for (int i=0;i<outputConns.size();i++) {
    				IConnection connTemp = outputConns.get(i);
    				if (connTemp.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
%>
    		<%=connTemp.getName() %> = null;			
<%
    				}
    			}
    		}
    	}
%>		
	    	<%=outputConnName%> = new <%=outputConnName%>Struct();
	    	nb_line_<%=cid%>++;	
<%
		if (limit.compareTo("-1")!=0) {
%>
	    	if (nb_line_<%=cid%>><%=Integer.parseInt(limit)%>) {
	    		break;
	    	}
<%
		}
%>
			try{
<%
		//get the mapping column 
		for (int i=0;i<mapping.size();i++) { 
			for(IMetadataColumn column:columns) {
				if (mapping.get(i).get("SCHEMA_COLUMN")!=null) {
					if (column.getLabel().compareTo(mapping.get(i).get("SCHEMA_COLUMN"))==0) {
        				String query = mapping.get(i).get("QUERY");
        				if(query.trim().length()>0 && query.startsWith("\"")){
        					
        					String nodeCheck = mapping.get(i).get("NODECHECK");
        					
        					if(query.startsWith("\"") && query.endsWith("\"")){
        						query = query.substring(1, query.length() - 1);
        					}
%>
				org.dom4j.XPath xTmp<%=i%>_<%=cid%> = temp_<%=cid%>.createXPath(nsTool_<%=cid%>.addDefaultNSPrefix("<%=query%>",<%=loopQuery%>));
			    xTmp<%=i%>_<%=cid%>.setNamespaceURIs(xmlNameSpaceMap_<%=cid%>);
			    node_<%=cid%> = xTmp<%=i%>_<%=cid%>.selectSingleNode(temp_<%=cid%>);
<%
							if(("true").equals(nodeCheck)){
%>
				str_<%=cid %> = node_<%=cid %>.asXML();
<%
							}else{
%>
			    str_<%=cid %> = xTmp<%=i%>_<%=cid%>.valueOf(temp_<%=cid %>);
<%
							}
%>
				if (str_<%=cid %> != null ) {
<%
							String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
							JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
							String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
							if (javaType == JavaTypesManager.STRING || javaType == JavaTypesManager.OBJECT) {
%>
				<%=outputConnName%>.<%=column.getLabel() %> = str_<%= cid %>;
<%
							} else {
								if (javaType == JavaTypesManager.DATE) {
%>
				<%=outputConnName%>.<%=column.getLabel() %> = ParserUtils.parseTo_Date(str_<%= cid %>, <%= patternValue %>);
<%
								} else {
%>
				<%=outputConnName%>.<%=column.getLabel() %> = ParserUtils.parseTo_<%= typeToGenerate %>(str_<%= cid %>);
<%
								}
							}
%>
			}
<%
        				}else{
%>
			<%=outputConnName%>.<%=column.getLabel()%> = <%=inputConnName%>.<%=column.getLabel()%>;
<%
						}
					}
				}
			}
		}
%>
<%if(rejectConnName.equals(outputConnName)){%> <%=outputConnName%>=null; <%}%>
    	}catch(Exception e){
<%
if(!("").equals(rejectConnName) && rejectColumnList != null && rejectColumnList.size() > 0) {
%>
		<%=outputConnName %> = null;
		<%=rejectConnName %> = new <%=rejectConnName %>Struct();
<%
	 	for(IMetadataColumn column : columns) {
	  		if(!xmlField.equals(column.getLabel())){
	  			for(IMetadataColumn inColumn : inColumns){
	  				if(inColumn.getLabel().equals(column.getLabel())){
%>
        <%=rejectConnName%>.<%=column.getLabel()%> = <%=inputConnName %>.<%=column.getLabel()%>;
<%
						break;
					}
				}
			}
	    }
%>
		<%=rejectConnName %>.errorXMLField = <%=inputConnName %>.<%=xmlField%>;
		<%=rejectConnName %>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
<%
} else if(("").equals(rejectConnName)){
%>
    	System.err.println(e.getMessage());
    	<%=outputConnName %> = null;
<%}%>
    	}
    }
    
    isStructError_<%=cid %> = false;

<%
	}
}
%>

   globalMap.put("<%=cid %>_NB_LINE", nb_line_<%=cid%>);



			
