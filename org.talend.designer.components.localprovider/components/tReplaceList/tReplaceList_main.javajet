<%@ jet
imports="
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.EConnectionType
    org.talend.core.model.process.INode
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn 
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.metadata.types.JavaTypesManager
    org.talend.core.model.metadata.types.JavaType
    java.util.List
    java.util.Map
    java.util.ArrayList
    org.talend.commons.utils.StringUtils
"
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;

INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

List<Map<String, String>> columnOptions =
    (List<Map<String,String>>)ElementParameterParser.getObjectValue(
        node,
        "__COLUMN_OPTIONS__"
    );


List<IMetadataTable> metadatas = node.getMetadataList();
if (metadatas != null && metadatas.size() > 0) {
    List<IConnection> inputConnections;
    List<IConnection> outputConnections;
    String main = null;
    inputConnections = (List<IConnection>) node.getIncomingConnections();
    outputConnections = (List<IConnection>) node.getOutgoingConnections();
    for (IConnection connection : inputConnections) {
        if (connection == null) {
            continue;
        }

        if (connection.getLineStyle() == EConnectionType.FLOW_MAIN) {
            main = connection.getName();
            continue;
        }
    }

    IMetadataTable metadata = metadatas.get(0);

    int column_num = 0;
    for (Map<String, String> columnOption: columnOptions) {
        if (("true").equals(columnOption.get("REPLACE"))) {
        	IMetadataColumn column = metadata.getListColumns().get(column_num);
        	String testType = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
        	// Don't know why javaType.isGenerateWithCanonicalName() returns "true" when it's java.util.Date, so need to handle the name
        	if("java.util.Date".equals(testType)){
        		testType = "Date";
        	}
            String columnName = metadata.getListColumns().get(column_num).getLabel();
%>
			String inputFlow_<%=cid%>_<%=columnName%> = String.valueOf(<%=main%>.<%=columnName%>);

            for(Object o:replace_<%=cid%>.keySet()){
            	if(o.getClass().getSimpleName() .equals("<%=testType%>")){
	                String search<%=cid%> = String.valueOf(o);
            		if(replace_<%=cid%>.get(o).getClass().getSimpleName() .equals("<%=testType%>")){
		                String replace<%=cid%> = String.valueOf(replace_<%=cid%>.get(o));
		                inputFlow_<%=cid%>_<%=columnName%> = inputFlow_<%=cid%>_<%=columnName%>.replaceAll(<%if(("true").equals(columnOption.get("CASE_INSENSITIVE"))) {%>"(?i)" + <%}%>search<%=cid%>,replace<%=cid%>);
            		}
            	}
            }
<%
        }
        column_num++;
    }
    
    //output
    int outColumn_num=0;
    for (IConnection connection : outputConnections){
        String outConName = connection.getName();
        for(Map<String,String> columnOption: columnOptions){
            if (("true").equals(columnOption.get("REPLACE"))){
            	IMetadataColumn column = connection.getTarget().getMetadataList().get(0).getListColumns().get(outColumn_num);
        		String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
                String columnname = column.getLabel();
                if("java.util.Date".equals(typeToGenerate)){
%>
                	<%=main%>.<%=columnname%> = new java.util.Date(inputFlow_<%=cid%>_<%=columnname%>);
<%
				}else if("BigDecimal".equals(typeToGenerate)){
%>
                	<%=main%>.<%=columnname%> = new <%=typeToGenerate%>(inputFlow_<%=cid%>_<%=columnname%>);
<%
				}else if("Character".equals(typeToGenerate)){
%>
                	<%=main%>.<%=columnname%> = new <%=typeToGenerate%>(inputFlow_<%=cid%>_<%=columnname%>.toCharArray()[0]);
<%
				}else{
%>
                	<%=main%>.<%=columnname%> = <%=typeToGenerate%>.valueOf(inputFlow_<%=cid%>_<%=columnname%>);
<%
				}
            }
            outColumn_num ++;
       }
       
    }
    
    
%>

<%
}
%>
