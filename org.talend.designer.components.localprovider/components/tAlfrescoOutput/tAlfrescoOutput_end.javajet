<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.process.ElementParameterParser
    java.util.List
    java.util.ArrayList
    java.util.LinkedList
    java.util.Map
    java.util.HashMap
    org.talend.core.model.metadata.IMetadataTable
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.core.model.metadata.types.JavaTypesManager
	org.talend.core.model.metadata.types.JavaType
"
%>

<%
// 3. in end.javajet, we output the last part of the acp xml after to its documents (i.e. rows),
// then call the alfresco server with it as a parameter, then handle the returned result
    
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
    IMetadataTable metadata = metadatas.get(0);
    if (metadata!=null) {
        
        // getting useful parameters
	    String targetLocationBase = ElementParameterParser.getValue(node, "__TARGET_LOCATION_BASE__");
	    
	    String documentMode = ElementParameterParser.getValue(node, "__DOCUMENT_MODE__");
	    String containerMode = ElementParameterParser.getValue(node, "__CONTAINER_MODE__");
        
	    String resultLogFilenameString = ElementParameterParser.getValue(node, "__RESULT_LOG_FILENAME__");
        %>
        
      try {
         talendAcpXmlWriter_<%=cid%>.close();
      } catch (fr.openwide.talendalfresco.acpxml.AcpXmlException e) {
         throw new fr.openwide.talendalfresco.rest.client.RestClientException("Error creating XML result", e);
      }
      
      String content_<%=cid%> = talendAcpXmlWriter_<%=cid%>.toString();
      ByteArrayInputStream acpXmlIs_<%=cid%> = new ByteArrayInputStream(content_<%=cid%>.getBytes());
      
      fr.openwide.talendalfresco.rest.client.ClientImportCommand importCmd_<%=cid%> = new fr.openwide.talendalfresco.rest.client.ClientImportCommand("<%=targetLocationBase%>", acpXmlIs_<%=cid%>);
      importCmd_<%=cid%>.setDocumentMode("<%=documentMode%>");
      importCmd_<%=cid%>.setContainerMode("<%=containerMode%>");
   
      // Execute the command.
      alfrescoRestClient_<%=cid%>.execute(importCmd_<%=cid%>);
    
      // logout
      try {
      	alfrescoRestClient_<%=cid%>.logout();
      } catch (fr.openwide.talendalfresco.rest.client.RestClientException e) {
         throw new fr.openwide.talendalfresco.rest.client.RestClientException("Error initing client", e);
      }
      
      // setting global var NB_LINE for further components
      globalMap.put("<%=cid %>_NB_LINE", nbLine_<%=cid%>);
      
      
      // handling result logs
      System.out.println(importCmd_<%=cid%>.toString() + " " + importCmd_<%=cid%>.getResultMessage() + " " + importCmd_<%=cid%>.getResultError());
      
    java.io.File resultLogFile_<%=cid%> = new java.io.File(<%=resultLogFilenameString%>);
    java.io.BufferedWriter resultLogOut_<%=cid%> = new java.io.BufferedWriter(
            new java.io.OutputStreamWriter(new java.io.FileOutputStream(resultLogFile_<%=cid%>)));
      for (String[] resultLog_<%=cid%> : importCmd_<%=cid%>.getResultLogs()) {
         String successOrError_<%=cid%> = resultLog_<%=cid%>[0];
         resultLogOut_<%=cid%>.write(successOrError_<%=cid%>); // success or error
         resultLogOut_<%=cid%>.write(";");
         resultLogOut_<%=cid%>.write(resultLog_<%=cid%>[1]); // namepath
         resultLogOut_<%=cid%>.write(";");
         String message_<%=cid%> = resultLog_<%=cid%>[2];
         if (message_<%=cid%> != null) {
         	if (!"success".equals(successOrError_<%=cid%>)) {
         		message_<%=cid%> = message_<%=cid%>.replaceAll(";", ",").replaceAll("\n", "   ");
         	}
         	resultLogOut_<%=cid%>.write(message_<%=cid%>); // message
         	resultLogOut_<%=cid%>.write(";");
         }
         resultLogOut_<%=cid%>.write(resultLog_<%=cid%>[3]); // date
         resultLogOut_<%=cid%>.write(";");
         if (resultLog_<%=cid%>[4] != null) {
         	resultLogOut_<%=cid%>.write(resultLog_<%=cid%>[4]); // noderef
         	resultLogOut_<%=cid%>.write(";");
         }
         if (resultLog_<%=cid%>[5] != null) {
         	resultLogOut_<%=cid%>.write(resultLog_<%=cid%>[5]); // doctype
         }
         resultLogOut_<%=cid%>.write("\n");
      }
    resultLogOut_<%=cid%>.close();
    
    System.out.println("Result (log file " + <%=resultLogFilenameString%> + ") :\n");
    java.io.BufferedReader resultLogIn_<%=cid%> = new java.io.BufferedReader(
            new java.io.InputStreamReader(new java.io.FileInputStream(resultLogFile_<%=cid%>)));
    String resultLogInLine_<%=cid%>;
    while  ((resultLogInLine_<%=cid%> = resultLogIn_<%=cid%>.readLine()) != null) {
    	System.out.println(resultLogInLine_<%=cid%>);
    }
    resultLogIn_<%=cid%>.close();
        <%
        
        
    }
}
%>