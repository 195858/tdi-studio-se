<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable  
		org.talend.designer.codegen.config.CodeGeneratorArgument
		java.util.List
	" 
%>
//tFileList_Begin
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
    boolean incldSubdir = ElementParameterParser.getValue(node, "__INCLUDSUBDIR__").equals("true");
    String filelistType = ElementParameterParser.getValue(node, "__LIST_MODE__");
%>

    String directory_<%=cid%> = <%=ElementParameterParser.getValue(node, "__DIRECTORY__") %>;
    String filemask_<%=cid%> = <%=ElementParameterParser.getValue(node, "__FILEMASK__")%> + "$";
    if(filemask_<%=cid%>.indexOf("^") == -1) 
    {
        filemask_<%=cid%> = "^" + filemask_<%=cid%>;
    }
    filemask_<%=cid%> = java.util.regex.Pattern.compile("[*]").matcher(filemask_<%=cid%>).replaceAll(".*");
   
    boolean case_sensitive_<%=cid%> = <%=ElementParameterParser.getValue(node, "__CASE_SENSITIVE__").equals("YES") %>;
	java.util.regex.Pattern fileNamePattern_<%=cid%> = java.util.regex.Pattern.compile(filemask_<%=cid%>);
	if(!case_sensitive_<%=cid%>){
    	fileNamePattern_<%=cid%> = java.util.regex.Pattern.compile(filemask_<%=cid%>, java.util.regex.Pattern.CASE_INSENSITIVE);
	}       
	java.io.File file_<%=cid%> = new java.io.File(directory_<%=cid%>);
    final java.util.List<java.io.File> list_<%=cid%> = new java.util.ArrayList<java.io.File>(); 
    <%
    if(incldSubdir) {
    %>
        file_<%=cid%>.listFiles(new java.io.FilenameFilter() {
            public boolean accept(java.io.File dir, String name) {
                java.io.File file = new java.io.File(dir, name);
                <%
                if(filelistType.equals("FILES")) {
                    %>
                    if(!file.isDirectory()) {
                        list_<%=cid%>.add(file);
                        return true;
                    } else {
                        file.listFiles(this);
                    }
                    <%
                } else if(filelistType.equals("DIRECTORIES")) {
                    %>
                    if(!file.isDirectory()) {
                        return true;
                    } else {
                        list_<%=cid%>.add(file);
                        file.listFiles(this);
                    }
                    <%
                } else if(filelistType.equals("BOTH")) {
                    %>
                    if(!file.isDirectory()) {
                        list_<%=cid%>.add(file);
                    } else {
                        list_<%=cid%>.add(file);
                        file.listFiles(this);
                    }
                    <%
                }
                %>
                return false;
            }
        });
    <%} 
    else 
    {%> 
         file_<%=cid%>.listFiles(new java.io.FilenameFilter() {
             public boolean accept(java.io.File dir, String name) {
                 java.io.File file = new java.io.File(dir, name);
                 <%
                 if(filelistType.equals("FILES")) {
                     %>
                     if(!file.isDirectory()) {
                         list_<%=cid%>.add(file);
                     }
                     <%
                 } else if(filelistType.equals("DIRECTORIES")) {
                     %>
                     if(file.isDirectory()) {
                         list_<%=cid%>.add(file);
                     }
                     <%
                 } else if(filelistType.equals("BOTH")) {
                     %>
                     list_<%=cid%>.add(file);
                     <%
                 }
                 %>
                 return true;
             }
         });
    <%
    }
    %> 
    int NB_FILE<%=cid%> = 0;
    for (int i_<%=cid%> = 0; i_<%=cid%> < list_<%=cid%>.size() ; i_<%=cid%>++){
        
        java.io.File files_<%=cid%> =list_<%=cid%>.get(i_<%=cid%>);
        String fileName_<%=cid%> = files_<%=cid%>.getAbsolutePath().replace("\\","/").replace(directory_<%=cid%>+"/","");

        if(!fileNamePattern_<%=cid%>.matcher(fileName_<%=cid%>).find()){
            continue;
        }
       
        String currentFileName_<%=cid%> = files_<%=cid%>.getName(); 
        String currentFilePath_<%=cid%> = files_<%=cid%>.getAbsolutePath();
        NB_FILE<%=cid%>++;
        
        globalMap.put("<%=cid%>_CURRENT_FILE", currentFileName_<%=cid%>);
        globalMap.put("<%=cid %>_CURRENT_FILEPATH", currentFilePath_<%=cid%>);
