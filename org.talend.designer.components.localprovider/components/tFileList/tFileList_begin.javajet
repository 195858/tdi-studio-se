<%@ jet 
	imports="
		java.util.List

		org.talend.core.model.metadata.IMetadataColumn
		org.talend.core.model.metadata.IMetadataTable
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.process.ElementParameterParser
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.core.model.process.INode
		org.talend.designer.codegen.config.CodeGeneratorArgument
	" 
%>
//tFileList_Begin
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
    boolean incldSubdir = ElementParameterParser.getValue(node, "__INCLUDSUBDIR__").equals("true");
    boolean ifexclude = ElementParameterParser.getValue(node, "__IFEXCLUDE__").equals("true");
    String filelistType = ElementParameterParser.getValue(node, "__LIST_MODE__");
    boolean useGlob = ElementParameterParser.getValue(node, "__GLOBEXPRESSIONS__").equals("true");
%>

    String directory_<%=cid%> = <%=ElementParameterParser.getValue(node, "__DIRECTORY__") %>;
    String filemask_<%=cid%> = <%=ElementParameterParser.getValue(node, "__FILEMASK__")%>;
<%if(useGlob){%>
 	filemask_<%=cid%> = org.apache.oro.text.GlobCompiler.globToPerl5(filemask_<%=cid%>.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
<%}%>
            
<%if(ifexclude){%>   
    String excludefilemask_<%=cid%> = <%=ElementParameterParser.getValue(node, "__EXCLUDEFILEMASK__")%>;    
    <%if(useGlob){%>
     	excludefilemask_<%=cid%> = org.apache.oro.text.GlobCompiler.globToPerl5(excludefilemask_<%=cid%>.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
    <%}%>
	java.util.regex.Pattern excludefileNamePattern_<%=cid%> = java.util.regex.Pattern.compile(excludefilemask_<%=cid%>);
        
<%}%>        
  
    boolean case_sensitive_<%=cid%> = <%=ElementParameterParser.getValue(node, "__CASE_SENSITIVE__").equals("YES") %>;
	java.util.regex.Pattern fileNamePattern_<%=cid%> = java.util.regex.Pattern.compile(filemask_<%=cid%>);
	if(!case_sensitive_<%=cid%>){
    	fileNamePattern_<%=cid%> = java.util.regex.Pattern.compile(filemask_<%=cid%>, java.util.regex.Pattern.CASE_INSENSITIVE);
<%if(ifexclude){%> 
    	excludefileNamePattern_<%=cid%> = java.util.regex.Pattern.compile(excludefilemask_<%=cid%>, java.util.regex.Pattern.CASE_INSENSITIVE);
<%}%> 
	}       
	java.io.File file_<%=cid%> = new java.io.File(directory_<%=cid%>);
    final java.util.List<java.io.File> list_<%=cid%> = new java.util.ArrayList<java.io.File>(); 
    <%
    if(incldSubdir) {
    %>
        file_<%=cid%>.listFiles(new java.io.FilenameFilter() {
            public boolean accept(java.io.File dir, String name) {
                java.io.File file = new java.io.File(dir, name);
                <%
                if(filelistType.equals("FILES")) {
                    %>
                    if(!file.isDirectory()) {
                        list_<%=cid%>.add(file);
                        return true;
                    } else {
                        file.listFiles(this);
                    }
                    <%
                } else if(filelistType.equals("DIRECTORIES")) {
                    %>
                    if(!file.isDirectory()) {
                        return true;
                    } else {
                        list_<%=cid%>.add(file);
                        file.listFiles(this);
                    }
                    <%
                } else if(filelistType.equals("BOTH")) {
                    %>
                    if(!file.isDirectory()) {
                        list_<%=cid%>.add(file);
                    } else {
                        list_<%=cid%>.add(file);
                        file.listFiles(this);
                    }
                    <%
                }
                %>
                return false;
            }
        });
    <%} 
    else 
    {%> 
         file_<%=cid%>.listFiles(new java.io.FilenameFilter() {
             public boolean accept(java.io.File dir, String name) {
                 java.io.File file = new java.io.File(dir, name);
                 <%
                 if(filelistType.equals("FILES")) {
                     %>
                     if(!file.isDirectory()) {
                         list_<%=cid%>.add(file);
                     }
                     <%
                 } else if(filelistType.equals("DIRECTORIES")) {
                     %>
                     if(file.isDirectory()) {
                         list_<%=cid%>.add(file);
                     }
                     <%
                 } else if(filelistType.equals("BOTH")) {
                     %>
                     list_<%=cid%>.add(file);
                     <%
                 }
                 %>
                 return true;
             }
         });
    <%
    }
    %> 
    int NB_FILE<%=cid%> = 0;
    for (int i_<%=cid%> = 0; i_<%=cid%> < list_<%=cid%>.size() ; i_<%=cid%>++){
        
        java.io.File files_<%=cid%> =list_<%=cid%>.get(i_<%=cid%>);
        String fileName_<%=cid%> = files_<%=cid%>.getName();
<%if(ifexclude){%> 
        if(!fileNamePattern_<%=cid%>.matcher(fileName_<%=cid%>).matches()||excludefileNamePattern_<%=cid%>.matcher(fileName_<%=cid%>).matches()){
            continue;
        }
 <%}else{%>       
 		if(!fileNamePattern_<%=cid%>.matcher(fileName_<%=cid%>).matches()){
            continue;
        }
 <%}%> 
 
        String currentFileName_<%=cid%> = files_<%=cid%>.getName(); 
        String currentFilePath_<%=cid%> = files_<%=cid%>.getAbsolutePath();
        NB_FILE<%=cid%>++;
        
        globalMap.put("<%=cid%>_CURRENT_FILE", currentFileName_<%=cid%>);
        globalMap.put("<%=cid %>_CURRENT_FILEPATH", currentFilePath_<%=cid%>);
        globalMap.put("<%=cid%>_NB_FILE", NB_FILE<%=cid%>);
        
<%	
	//*************************************************************//	
	//The following part will extract data from globalMap to schema in order to support the MAIN link simply.
	//step 1:
	
	IConnection firstDataConn = null;
	List<IMetadataColumn> firstColumnList = null;

	//1. get first DATA Link
	List< ? extends IConnection> conns = node.getOutgoingSortedConnections();	
	if(conns != null && conns.size() > 0){
		for(IConnection conn : conns){
			if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
				firstDataConn = conn;
				break;
			}
		}
	}

	//2. get first columnList (with real columns data) 	
	List<IMetadataTable> metadatas = node.getMetadataList();
	if ( metadatas != null && metadatas.size() > 0 ) {
		IMetadataTable metadata = metadatas.get(0);
		if(metadata != null){
			firstColumnList = metadata.getListColumns(); 
			if ( firstColumnList == null || firstColumnList.size() == 0 ) {
				firstColumnList = null;
			}
		}
	}
	
	//3. check the config Link and Schema
	if(firstDataConn != null && firstColumnList != null)
	{
    	//step 2:
    
        String firstDataConnName = firstDataConn.getName();
        for (IMetadataColumn column: firstColumnList) {
        	String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
%>	
		<%=firstDataConnName %>.<%=column.getLabel() %> = ((<%=typeToGenerate %>)globalMap.get("<%=cid %>_<%=column.getLabel() %>"));
<%
	    }
 	}
%>     
