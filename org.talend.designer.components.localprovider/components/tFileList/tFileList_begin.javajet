<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable  
		org.talend.designer.codegen.config.CodeGeneratorArgument
		java.util.List
	" 
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	
	List<IMetadataTable> metadatas = node.getMetadataList();
	if ((metadatas!=null)&&(metadatas.size()>0)) {
		IMetadataTable metadata = metadatas.get(0);
		if (metadata!=null) {
            boolean incldSubdir=ElementParameterParser.getValue(node, "__INCLUDSUBDIR__").equals("true");
%>

        String directory<%=cid %>       = <%=ElementParameterParser.getValue(node, "__DIRECTORY__") %>;
        String filemask<%=cid %>        = <%=ElementParameterParser.getValue(node, "__FILEMASK__")%>+"$";
        boolean flag<%=cid%>=false;
        if(filemask<%=cid %>.indexOf("^")==-1) 
        {
            filemask<%=cid %>="^"+filemask<%=cid %>;
        }
        if(!(filemask<%=cid %>.lastIndexOf(".*$")==-1) &&  filemask<%=cid %>.lastIndexOf("*.*$")==-1)
        {
            filemask<%=cid %>=filemask<%=cid %>.substring(0,filemask<%=cid %>.length()-3)+"$";
            flag<%=cid%>=true;
        }else{
            filemask<%=cid %> = java.util.regex.Pattern.compile("[*]").matcher(filemask<%=cid %>).replaceAll(".*");
        }
       
        boolean case_sensitive<%=cid %> = <%=ElementParameterParser.getValue(node, "__CASE_SENSITIVE__").equals("YES") %>;
		java.util.regex.Pattern fileNamePattern<%=cid %> = java.util.regex.Pattern.compile(filemask<%=cid %>);
		if(!case_sensitive<%=cid %>){
        	fileNamePattern<%=cid %> = java.util.regex.Pattern.compile(filemask<%=cid %>, java.util.regex.Pattern.CASE_INSENSITIVE);
		}       
 		java.io.File file<%=cid %>=new java.io.File(directory<%=cid %>);
        final java.util.List<java.io.File> list_<%=cid%>= new java.util.ArrayList<java.io.File>(); 
 <%
   if(incldSubdir==true)
   {
 %>
        file<%=cid%>.listFiles(new java.io.FilenameFilter() {
            public boolean accept(java.io.File dir, String name) {
                java.io.File file = new java.io.File(dir, name);
                if (file.isFile()) {
                    list_<%=cid%>.add(file);
                    return true;
                } else {
                
                    file.listFiles(this);
                }
                return false;
            }
        });
 <%}else{%> 
 file<%=cid%>.listFiles(new java.io.FilenameFilter() {
     public boolean accept(java.io.File dir, String name) {
         java.io.File file = new java.io.File(dir, name);
             list_<%=cid%>.add(file);
             return true;
     }
 });
<%}%> 
        for (int i<%=cid%> = 0; i<%=cid%> < list_<%=cid%>.size(); i<%=cid%>++){
            
            java.io.File files<%=cid%> =list_<%=cid%>.get(i<%=cid%>);
            String fileName<%=cid%>=files<%=cid%>.getName();
            if(flag<%=cid%>==true)
            {
                if(!(fileName<%=cid%>.indexOf(".")==-1))
                {
                    if(!fileNamePattern<%=cid %>.matcher(fileName<%=cid%>.substring(0,fileName<%=cid%>.indexOf("."))).find()){
                        continue;
                    }
                }else
                {
                    if(!fileNamePattern<%=cid %>.matcher(fileName<%=cid%>).find()){
                        continue;
                    }
                }
            }else
            {
                if(!fileNamePattern<%=cid %>.matcher(fileName<%=cid%>).find()){
                    continue;
                }
            }
           
            String currentFileName_<%=cid%> = files<%=cid %>.getName(); 
            String currentFilePath_<%=cid%> = files<%=cid %>.getAbsolutePath();
            
            globalMap.put("<%=cid %>_CURRENT_FILE", currentFileName_<%=cid%>);
            globalMap.put("<%=cid %>_CURRENT_FILEPATH", currentFilePath_<%=cid%>);
        
<%
		}
	}
%>
