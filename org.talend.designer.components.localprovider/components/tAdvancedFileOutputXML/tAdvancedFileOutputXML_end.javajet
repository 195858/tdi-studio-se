<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.process.ElementParameterParser
    java.util.List
    java.util.ArrayList
    java.util.LinkedList
    java.util.Map
    java.util.HashMap
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.types.JavaTypesManager
	org.talend.core.model.metadata.types.JavaType
"
%>

<%
class XMLNode{
	public XMLNode(String path, String type, XMLNode parent, String column){
		this.path = path;
		this.parent = parent;
		this.type = type;
		this.column = column;
		if (type.equals("ELEMENT")) {
            this.name = path.substring(path.lastIndexOf("/") + 1);
        } else {
            this.name = path;
        }
	}
	public String name = null;
	public String path = null;
	public String type = null;
	public String column = null;
	public String value = null;
	public int special = 0;  //1 is subtree root, 2 is subtree root parent, 4 is groupby, 8 nest XML
	public XMLNode parent = null;
	public List<XMLNode> attributes = new LinkedList<XMLNode>();
	public List<XMLNode> namespaces = new LinkedList<XMLNode>();
	public List<XMLNode> elements = new LinkedList<XMLNode>();
}

//XMLTool
class XMLTool{
	
	public XMLNode removeEmptyElement(XMLNode root) {
        List<XMLNode> removeNodes = new LinkedList<XMLNode>();
        for (XMLNode attri : root.attributes) {
            if (attri.column == null || attri.column.length() == 0) {
                attri.parent = null;
                removeNodes.add(attri);
            }
        }
        root.attributes.removeAll(removeNodes);

        removeNodes.clear();
        for (XMLNode ns : root.namespaces) {
            if (ns.column == null || ns.column.length() == 0) {
                ns.parent = null;
                removeNodes.add(ns);
            }
        }
        root.namespaces.removeAll(removeNodes);

        removeNodes.clear();
        for (XMLNode child : root.elements) {
            removeNodes.add(removeEmptyElement(child));
        }
        root.elements.removeAll(removeNodes);

        if (root.attributes.size() == 0 && root.namespaces.size() == 0 && root.elements.size() == 0
                && (root.column == null || root.column.length() == 0)) {
            return root;
        } else {
            return null;
        }
    }
}
class XSDToolByDom4j{
    String cid = null;
    public void generateXSD(String parent, String currEleName, XMLNode root){
    	if(root.type.equals("ELEMENT")){
    		createElement(parent,currEleName,root);
			
			if(root.elements!=null && root.elements.size()>0
			  || root.attributes!=null && root.attributes.size()>0){
%>
		org.dom4j.Element <%=currEleName%>_c_<%=cid%> = <%=currEleName%>_<%=cid%>.addElement("xsd:complexType");
		org.dom4j.Element <%=currEleName%>_s_<%=cid%> = <%=currEleName%>_c_<%=cid%>.addElement("xsd:sequence");
<%
        		int index = 0;
        		for(XMLNode child:root.elements){
        			generateXSD(currEleName+"_s", currEleName+"_"+index++, child);
        		}
        		
        		for(XMLNode attri:root.attributes){
        			createAttribute(currEleName+"_c",attri);
        		}
			}
    	}
    }
    
    private void createElement(String parent, String currEleName, XMLNode node){
%>
		org.dom4j.Element <%=currEleName%>_<%=cid%> = <%=parent%>_<%=cid%>.addElement("xsd:element");
		<%=currEleName%>_<%=cid%>.addAttribute("name","<%=node.name%>");
		<%=currEleName%>_<%=cid%>.addAttribute("nillable","true");
<%
		if(node.parent != null){
%>
		<%=currEleName%>_<%=cid%>.addAttribute("minOccurs","0");
		<%=currEleName%>_<%=cid%>.addAttribute("maxOccurs","unbounded");
<%
		}
    }
    
    private void createAttribute(String parent, XMLNode node){
%>
		<%=parent%>_<%=cid%>.addElement("xsd:attribute").addAttribute("name","<%=node.name%>");
<%
    }
}

class XSDToolByNull{
	String cid = null;
    public void generateXSD(String emptyspace, XMLNode root){
    	if(root.type.equals("ELEMENT")){
    		createElement(emptyspace, root);
			
			if(root.elements!=null && root.elements.size()>0
			  || root.attributes!=null && root.attributes.size()>0){
%>
		out_xsd_<%=cid%>.write("<%=emptyspace%>  <xsd:complexType>");
		out_xsd_<%=cid%>.newLine();
		out_xsd_<%=cid%>.write("<%=emptyspace%>    <xsd:sequence>");
		out_xsd_<%=cid%>.newLine();
<%
        		for(XMLNode child:root.elements){
        			generateXSD(emptyspace+"      ", child);
        		}
%>
		out_xsd_<%=cid%>.write("<%=emptyspace%>    </xsd:sequence>");
		out_xsd_<%=cid%>.newLine();
<%
        		for(XMLNode attri:root.attributes){
        			createAttribute(emptyspace+"    ",attri);
        		}
%>
		out_xsd_<%=cid%>.write("<%=emptyspace%>  </xsd:complexType>");
		out_xsd_<%=cid%>.newLine();
<%
			}
%>
		out_xsd_<%=cid%>.write("<%=emptyspace%></xsd:element>");
		out_xsd_<%=cid%>.newLine();
<%
    	}
    }
    
    private void createElement(String emptyspace, XMLNode node){
%>
		out_xsd_<%=cid%>.write("<%=emptyspace%><xsd:element name=\"<%=node.name%>\" nillable=\"true\" "+
<%
		if(node.parent != null){
%>
		"minOccurs=\"0\" maxOccurs=\"unbounded\""+
<%
		}
%>
		">");
		out_xsd_<%=cid%>.newLine();
<%
    }
    
    private void createAttribute(String emptyspace, XMLNode node){
%>
		out_xsd_<%=cid%>.write("<%=emptyspace%><xsd:attribute name= \"<%=node.name%>\"/>");
		out_xsd_<%=cid%>.newLine();
<%
    }
}

CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String allowEmpty = ElementParameterParser.getValue(node, "__CREATE_EMPTY_ELEMENT__");
String outputAsXSD = ElementParameterParser.getValue(node, "__OUTPUT_AS_XSD__");
List<Map<String, String>> rootTable = 
	(List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__ROOT__");
List<Map<String, String>> groupTable = 
	(List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__GROUP__");
List<Map<String, String>> loopTable = 
	(List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__LOOP__");

String encoding = ElementParameterParser.getValue(node, "__ENCODING__");
String mode = ElementParameterParser.getValue(node, "__GENERATION_MODE__");
String cid = node.getUniqueName();
List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
	String split = ElementParameterParser.getValue(node, "__SPLIT__");
	if(split.equals("true")){
%>
if(currentRowCount_<%=cid %> > 0){
<%
	}
	if(mode.equals("Dom4j")){
%>
	java.io.FileOutputStream stream_<%=cid%> = new java.io.FileOutputStream(fileName_<%=cid%>);
    org.dom4j.io.XMLWriter output_<%=cid%> = new org.dom4j.io.XMLWriter(stream_<%=cid%>, format_<%=cid%>);
<%
		if(outputAsXSD.equals("true")){
%>
	doc_<%=cid%>.getRootElement().addAttribute("xsi:noNamespaceSchemaLocation", file_<%=cid%>.substring(file_<%=cid%>.lastIndexOf("/")+1)+".xsd");
    doc_<%=cid%>.getRootElement().addNamespace("xsi", "http://www.w3.org/2001/XMLSchema-instance");
<%
		}
%>  
    nestXMLTool_<%=cid%>.replaceDefaultNameSpace(doc_<%=cid%>.getRootElement());
    output_<%=cid%>.write(doc_<%=cid%>);
    output_<%=cid%>.close();
<%
	}else if(mode.equals("Null")){
		String path = loopTable.get(0).get("PATH");
		String[] endTabs = path.split("/");	
		for(int i=endTabs.length-2;i>0;i--){
			String tab = endTabs[i];
			String emptyspace = "";
			for(int len = 1; len<i;len++){
				emptyspace += "  ";
			}
			if(tab!=null && tab.length()>0){
%>
	out_<%=cid%>.newLine();
	out_<%=cid%>.write("<%=emptyspace%></<%=tab%>>");
<%
			}
		}
%>
	out_<%=cid%>.close();
<%
	}
	if(split.equals("true")){
%>
}
<%
	}
%>
globalMap.put("<%=cid %>_NB_LINE",nb_line_<%=cid %>);
<%
//-------Map to tree---------------------
	if(outputAsXSD.equals("true")){
    	XMLTool tool= new XMLTool();
    	List<List<Map<String, String>>> tables = new ArrayList<List<Map<String, String>>>();
        tables.add(rootTable);
        tables.add(groupTable);
        tables.add(loopTable);
    
        XMLNode root =null;
        XMLNode tmpParent = null;
        XMLNode tmpMainNode = null;
        if(loopTable==null || loopTable.size()==0){
        	return "";
        }
        String mainPath = loopTable.get(0).get("PATH");
        for (List<Map<String, String>> tmpTable : tables) {
            tmpParent = tmpMainNode;
            for (Map<String, String> tmpMap : tmpTable) {
                XMLNode tmpNew = null;
                if (tmpMap.get("ATTRIBUTE").equals("attri")) {
                    tmpNew = new XMLNode(tmpMap.get("PATH"), "ATTRIBUTE", tmpParent, tmpMap.get("COLUMN"));
                    tmpParent.attributes.add(tmpNew);
                } else {
                    if (tmpParent == null) {
                        tmpNew = new XMLNode(tmpMap.get("PATH"), "ELEMENT", tmpParent, tmpMap.get("COLUMN"));
                        root = tmpNew;
                    } else {
                        String tmpParentPath = tmpMap.get("PATH").substring(0, tmpMap.get("PATH").lastIndexOf("/"));
               		 	while (tmpParent != null && !tmpParentPath.equals(tmpParent.path)) {
                            tmpParent = tmpParent.parent;
                        }
                        tmpNew = new XMLNode(tmpMap.get("PATH"), "ELEMENT", tmpParent, tmpMap.get("COLUMN"));
                         if (tmpMap.get("ATTRIBUTE").equals("main")) {
                            tmpParent.elements.add(tmpNew);
                        }else{
                        	tmpParent.elements.add(0,tmpNew);
                        }
                    }
                    if (tmpMap.get("ATTRIBUTE").equals("main")) {
                        tmpMainNode = tmpNew;
                    }
                    tmpParent = tmpNew;
                }
            }
        }
        
        if(!allowEmpty.equals("true")){
        	tool.removeEmptyElement(root);
        }

//-------generate XSD file---------------------
		if(mode.equals("Dom4j")){
%>
	org.dom4j.Document doc_xsd_<%=cid%>  = org.dom4j.DocumentHelper.createDocument();
	
	org.dom4j.Element root_xsd_<%=cid%> = doc_xsd_<%=cid%>.addElement("xsd:schema");
    root_xsd_<%=cid%>.addNamespace("xsd", "http://www.w3.org/2001/XMLSchema");
<%
	XSDToolByDom4j xsdTool = new XSDToolByDom4j();
	xsdTool.cid = cid;
	xsdTool.generateXSD("root_xsd","ele_xsd",root);
%>
	java.io.FileOutputStream stream_xsd_<%=cid%> = new java.io.FileOutputStream(file_<%=cid%>+".xsd");
    org.dom4j.io.XMLWriter output_xsd_<%=cid%> = new org.dom4j.io.XMLWriter(stream_xsd_<%=cid%>, format_<%=cid%>);
    output_xsd_<%=cid%>.write(doc_xsd_<%=cid%> );
    output_xsd_<%=cid%>.close();
<%
		}else if(mode.equals("Null")){
%>
	java.io.BufferedWriter out_xsd_<%=cid%> = new java.io.BufferedWriter(
		new java.io.OutputStreamWriter(new java.io.FileOutputStream(file_<%=cid%>+".xsd"), <%=encoding%>));
	out_xsd_<%=cid%>.write("<xsd:schema xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">");
	out_xsd_<%=cid%>.newLine();
<%
	XSDToolByNull xsdTool = new XSDToolByNull();
	xsdTool.cid=cid;
	xsdTool.generateXSD("  ",root);
%>
	out_xsd_<%=cid%>.write("</xsd:schema>");
	out_xsd_<%=cid %>.close();
<%
		}
    }
}
%>