<%@ jet
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.metadata.IMetadataTable
    java.util.List
    java.util.Map
    java.util.ArrayList
   	org.talend.core.model.process.IConnection    
	org.talend.core.model.process.IConnectionCategory
"
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();
String cid_original = cid;
cid = cid_original.replace("tAdvancedFileOutputXML","tAFOX");

List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
    IMetadataTable metadata = metadatas.get(0);
    if (metadata!=null) {
    	List< ? extends IConnection> conns = node.getIncomingConnections();
		if(conns!=null && conns.size()>0){
    		IConnection conn = conns.get(0);
    		if(conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)){ 
        		String split = ElementParameterParser.getValue(node, "__SPLIT__");
        		String encoding = ElementParameterParser.getValue(node, "__ENCODING__");
        		String fileName = ElementParameterParser.getValue(node, "__FILENAME__");
        		//======================add by wliu============================
        		boolean isMerge=ElementParameterParser.getValue(node, "__MERGE__").equals("true");
        		
        		//==========================end================================
        		String mode = ElementParameterParser.getValue(node, "__GENERATION_MODE__");
        		List<Map<String, String>> rootTable = 
                	(List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__ROOT__");
                List<Map<String, String>> groupTable = 
                	(List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__GROUP__");
                List<Map<String, String>> loopTable = 
                	(List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__LOOP__");
%>
int nb_line_<%=cid%> = 0;
<%if(isMerge==true){%>
boolean needRoot_<%=cid%>  = false;
<%}else{%>
boolean	needRoot_<%=cid%> = true;
<%}%>
String fileName_<%=cid%> = <%=fileName%>;
<%
				if(ElementParameterParser.getValue(node,"__CREATE__").equals("true")){
%>
java.io.File createFile<%=cid%> = new java.io.File(fileName_<%=cid%>); 
if(!createFile<%=cid%>.exists()){ 
	(new java.io.File(fileName_<%=cid%>.substring(0,fileName_<%=cid%>.lastIndexOf("/")))).mkdirs(); 
	needRoot_<%=cid%>=true;
}<%					if(isMerge==true){%>else{
				if(createFile<%=cid %>.isFile()){
					if(createFile<%=cid %>.length()<1){
						needRoot_<%=cid %> = true;
					}
				}
			}
				 <%}%>

<%
				}
				if(split.equals("true")){
%>
int currentRowCount_<%=cid%> = 0;
int currentFileCount_<%=cid%> = 0;
String file_<%=cid%> = fileName_<%=cid%>.substring(0,fileName_<%=cid%>.lastIndexOf("."));
String suffix_<%=cid %> = fileName_<%=cid %>.substring(fileName_<%=cid%>.lastIndexOf("."));
fileName_<%=cid%> = file_<%=cid%>+"0" + suffix_<%=cid %>;
<%
				}
%>
java.util.List<java.util.List<String>> groupbyList_<%=cid%> = new java.util.ArrayList<java.util.List<String>>();
java.util.Map<String,String> valueMap_<%=cid%> = new java.util.HashMap<String,String>();
<%
// *** generation mode init ***
				if(mode.equals("Dom4j")){
%>

class NestXMLTool_<%=cid%>{
	public void parseAndAdd(org.dom4j.Element nestRoot, String value){
		try {
            org.dom4j.Document doc4Str = org.dom4j.DocumentHelper.parseText("<root>"+ value + "</root>");
    		nestRoot.setContent(doc4Str.getRootElement().content());
    	} catch (Exception e) {
    		e.printStackTrace();
    		nestRoot.setText(value);
        }
	}
	
	public void setText(org.dom4j.Element element, String value){
		if (value.startsWith("<![CDATA[") && value.endsWith("]]>")) {
			String text = value.substring(9, value.length()-3);
			element.addCDATA(text);
		}else{
			element.setText(value);
		}
	}
	
	public void replaceDefaultNameSpace(org.dom4j.Element nestRoot){
		if (nestRoot!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) nestRoot.elements()) {
        		if (tmp.getQName().getNamespace().getURI().equals("") && tmp.getQName().getNamespace().getPrefix().equals("")){
        			tmp.setQName(org.dom4j.DocumentHelper.createQName(tmp.getName(), nestRoot.getQName().getNamespace()));
	        	}
    	    	replaceDefaultNameSpace(tmp);
       		}
       	}
	}
	
	public void removeEmptyElement(org.dom4j.Element root){
		if (root!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) root.elements()) {
				removeEmptyElement(tmp);
			}
			if (root.content().size() == 0 
    			&& root.attributes().size() == 0 
    			&& root.declaredNamespaces().size() == 0) {
    			if(root.getParent()!=null){
                	root.getParent().remove(root);
                }
            }
		}
	}
}

NestXMLTool_<%=cid%> nestXMLTool_<%=cid%> = new NestXMLTool_<%=cid%>();

// sort group root element for judgement of group
java.util.List<org.dom4j.Element> groupElementList_<%=cid%> = new java.util.ArrayList<org.dom4j.Element>();
org.dom4j.Element root4Group_<%=cid%> = null;

org.dom4j.Document doc_<%=cid %>=null;
<%
					if(isMerge==true){//append mode
%>
if(needRoot_<%=cid %> ==false){
	try{
		org.dom4j.io.SAXReader saxReader_<%=cid %>= new org.dom4j.io.SAXReader();
		doc_<%=cid %> = saxReader_<%=cid %>.read(createFile<%=cid %>);
	} catch (Exception ex) {
	    ex.printStackTrace();
	    throw new Exception("can not find the file:" + fileName_<%=cid %>);
	}
}else{
	doc_<%=cid %>=org.dom4j.DocumentHelper.createDocument();
}
<%
					}else{
%>
	doc_<%=cid %>=org.dom4j.DocumentHelper.createDocument();
<%
					}
%>
org.dom4j.io.OutputFormat format_<%=cid%> = org.dom4j.io.OutputFormat.createPrettyPrint();
format_<%=cid %>.setEncoding(<%=encoding%>);

<%
				}else if(mode.equals("Null")){
%>
java.util.List<String> endTabStrs_<%=cid%> = new java.util.ArrayList<String>();
java.util.List<String> startTabStrs_<%=cid%> = new java.util.ArrayList<String>();
<%
            		if(loopTable.size()>0){
            			String emptyspace = "";
        				String endPath = loopTable.get(0).get("PATH");
        				String[] endTabs = endPath.split("/");
        				for(int len = 1; len<endTabs.length-1;len++){
%>
endTabStrs_<%=cid%>.add("<%=emptyspace%></<%=endTabs[len]%>>");
startTabStrs_<%=cid%>.add("\n<%=emptyspace%><<%=endTabs[len]%>>");
<%
	         				emptyspace += "  ";
            			}
        			}
%>
int preUnNullMaxIndex_<%=cid%> = -1;
int preNewTabIndex_<%=cid%> = -1;
String[] startTabs_<%=cid%> = new String[endTabStrs_<%=cid%>.size()];
java.io.BufferedWriter out_<%=cid%> = new java.io.BufferedWriter(
	new java.io.OutputStreamWriter(new java.io.FileOutputStream(fileName_<%=cid%>), <%=encoding%>));
out_<%=cid%>.write("<?xml version=\"1.0\" encoding=\""+<%=encoding%>+"\"?>");
out_<%=cid%>.newLine();
<%
				}
			}
		}
	}
}
%>
