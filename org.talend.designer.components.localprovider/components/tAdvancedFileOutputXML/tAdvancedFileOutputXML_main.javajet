<%@ jet
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.process.ElementParameterParser
    java.util.List
    java.util.ArrayList
    java.util.LinkedList
    java.util.Map
    java.util.HashMap
  	org.talend.core.model.process.IConnection    
	org.talend.core.model.process.IConnectionCategory
    org.talend.core.model.metadata.types.JavaTypesManager
	org.talend.core.model.metadata.types.JavaType
"
skeleton="tAdvancedFileOutputXML_java.skeleton"
%>

<%
//XMLTool
class XMLTool{
	public boolean advancedSeparator = false;
	public String thousandsSeparator = null;
 	public String decimalSeparator =null;
	public String connName = null;
	public String cid = null;
	
	public void getValue(XMLNode node){
%>
		valueMap_<%=cid%>.get("<%=node.relatedColumn.getLabel()%>")
<%
	}

	public void getValue(IMetadataColumn column){
		JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
		String defaultValue=column.getDefault();
		boolean isNotSetDefault = false;
		if(defaultValue!=null){
			isNotSetDefault = defaultValue.length()==0;
		}else{
			isNotSetDefault=true;
		}
%>
	(
<%
		if(column.isNullable()){
%>
		<%=connName%>.<%=column.getLabel()%> != null?
<%
		}
		
        if(advancedSeparator && JavaTypesManager.isNumberType(javaType, column.isNullable())) { 
        	if(javaType == JavaTypesManager.BIGDECIMAL) {
%>
    		FormatterUtils.format_Number(String.valueOf(<%=connName%>.<%=column.getLabel()%>.doubleValue()), <%= thousandsSeparator%>,<%=decimalSeparator %>)					
<%
    		} else {
%>
    		FormatterUtils.format_Number(String.valueOf(<%=connName%>.<%=column.getLabel()%>), <%= thousandsSeparator %>,<%=decimalSeparator %>)						
<%
	   		}
        } else if(JavaTypesManager.isJavaPrimitiveType( column.getTalendType(), column.isNullable())){
%>
            String.valueOf(<%=connName%>.<%=column.getLabel()%>)
<%
        }else if(javaType == JavaTypesManager.DATE){
            if( column.getPattern() != null && column.getPattern().trim().length() != 0 ){
%>
            FormatterUtils.format_Date(<%=connName%>.<%=column.getLabel()%>,<%=column.getPattern()%>)
<%
            }else{
%>
			<%=connName%>.<%=column.getLabel()%>
<%
           }
        }else if (javaType == JavaTypesManager.BIGDECIMAL) {
%>
			String.valueOf(<%=connName%>.<%=column.getLabel()%>.doubleValue())
<%
        }else{
%>
            <%=connName%>.<%=column.getLabel()%>.toString()
<%
		}
		if(column.isNullable()){
			%>:<% 
			if(isNotSetDefault == false){
				%><%=column.getDefault()%><%
			}else{
				%>null<%
			}
		}
%>
		)
<%
	}
}

// ------------------- *** Dom4j generation mode start *** ------------------- //
class GenerateToolByDom4j{
	String cid = null;
	boolean allowEmpty = false;
	boolean outputAsXSD = false;
	XMLTool tool = null;
	public void generateCode(XMLNode node, String currEleName, String parentName){
		if(node.type.equals("ELEMENT")){
			createElement(currEleName,node,parentName);
			setText(currEleName,node);
			for(XMLNode ns:node.namespaces){
				addNameSpace(currEleName,ns);
			}
			for(XMLNode attri:node.attributes){
				addAttribute(currEleName,attri);
			}
			int index = 0;
			for(XMLNode child:node.elements){
				if(0==(child.special & 1)){
					generateCode(child,currEleName+"_"+index++,currEleName);
				}
			}
			if(node.relatedColumn != null && (node.special & 2)==0 && (node.special & 1)==0){
				if(!outputAsXSD && !allowEmpty){
%>
			if (<%=currEleName%>_<%=cid%>.content().size() == 0 
				&& <%=currEleName%>_<%=cid%>.attributes().size() == 0 
				&& <%=currEleName%>_<%=cid%>.declaredNamespaces().size() == 0) {
                <%=parentName%>_<%=cid%>.remove(<%=currEleName%>_<%=cid%>);
            }
			
<%
				}
			}
		}
	}
	private void createElement(String currEleName, XMLNode node, String parentName){
%>
		org.dom4j.Element <%=currEleName%>_<%=cid%> = <%=parentName%>_<%=cid%>.addElement("<%=node.name%>");
<%
		if(0!=(node.special & 2)){
%>
		subTreeRootParent_<%=cid%> = <%=currEleName%>_<%=cid%>;
<%
		}
	}
	private void setText(String currEleName, XMLNode node){
		if(node.relatedColumn!=null){
			JavaType javaType = JavaTypesManager.getJavaTypeFromId(node.relatedColumn.getTalendType());
			if(javaType == JavaTypesManager.OBJECT){
%>
		if(<%tool.getValue(node);%>!=null){
			nestXMLTool_<%=cid%> .parseAndAdd(<%=currEleName%>_<%=cid%>,<%tool.getValue(node);%>);
		}
<%
				if(outputAsXSD){
%>
		else{
			nestXMLTool_<%=cid%> .parseAndAdd(<%=currEleName%>_<%=cid%>,"");
			<%=currEleName%>_<%=cid%>.addAttribute("xsi:nil","true");
		}
<%
				}
			}else{
%>
		if(<%tool.getValue(node);%>!=null){
			nestXMLTool_<%=cid%> .setText(<%=currEleName%>_<%=cid%>,<%tool.getValue(node);%>);
		}
<%
				if(outputAsXSD){
%>
		else{
			<%=currEleName%>_<%=cid%>.setText("");
			<%=currEleName%>_<%=cid%>.addAttribute("xsi:nil","true");
		}
<%
				}
			}
		}
	}
	private void addAttribute(String currEleName, XMLNode node){
		if(node.relatedColumn!=null){
%>
		if(<%tool.getValue(node);%>!=null){
			<%=currEleName%>_<%=cid%>.addAttribute("<%=node.path%>",<%tool.getValue(node);%>);
		}
<%
		}
	}
	private void addNameSpace(String currEleName, XMLNode node){
		if(node.relatedColumn!=null){
%>
		if(<%tool.getValue(node);%>!=null){
			<%=currEleName%>_<%=cid%>.addNamespace("<%=node.path%>",TalendString.replaceSpecialCharForXML(<%tool.getValue(node);%>));
<%
			if(node.path ==null || node.path.length()==0){
%>
        	<%=currEleName%>_<%=cid%>.setQName(org.dom4j.DocumentHelper.createQName(<%=currEleName%>_<%=cid%>.getName(),
        	org.dom4j.DocumentHelper.createNamespace("",TalendString.replaceSpecialCharForXML(<%tool.getValue(node);%>))));
<%
			}
%>
		}
<%
		}
	}
}
// ------------------- *** Dom4j generation mode end *** ------------------- //

// ------------------- *** Null generation mode start *** ------------------- //
class GenerateToolByNull{
	String cid = null;
	boolean allowEmpty = false;
	boolean outputAsXSD = false;
	XMLTool tool = null;
	
	public void generateCode(XMLNode node, String emptySpace){	
		if(node.type.equals("ELEMENT")){
			startElement(node,emptySpace);
			setText(node);
			XMLNode mainNode = null;
			for(XMLNode child:node.elements){
				if(!child.isMainNode()){ //make the main node output last
					if(!outputAsXSD && !allowEmpty && (child.relatedColumn != null || child.childrenColumnList.size()>0)){
%>
		if( false
<%
                    	for(IMetadataColumn column : child.childrenColumnList){
                    		%> || valueMap_<%=cid%>.get("<%=column.getLabel()%>") != null<%
                    	}
%>
		){
<%
						generateCode(child,emptySpace+"  ");
%>
		}
<%
            		}else{
            			generateCode(child,emptySpace+"  ");
            		}
				}
			}

			if(!node.isMainNode()){ // is not main node
				endElement(node,emptySpace);
			}
		}
	}
	private void startElement(XMLNode node, String emptySpace){
%>
		buf_<%=cid%>.append("\n");
		buf_<%=cid%>.append("<%=emptySpace%><<%=node.name%>");
<%
		if(outputAsXSD && node.parent==null){
%>
		buf_<%=cid%>.append(" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"");
		buf_<%=cid%>.append(" xsi:noNamespaceSchemaLocation= \""+ file_<%=cid%>.substring(file_<%=cid%>.lastIndexOf("/")+1)+".xsd"+"\"");
<%
		}
		for(XMLNode ns:node.namespaces){
			addNameSpace(ns);
		}
		for(XMLNode attri:node.attributes){
			addAttribute(attri);
		}
		if(outputAsXSD && node.relatedColumn != null){
%>
		if(<%tool.getValue(node);%>==null){
			buf_<%=cid%>.append(" xsi:nil=\"true\"");
		}
<%
		}
%>
		buf_<%=cid%>.append(">");
<%
	}
	
	public void endElement(XMLNode node, String emptySpace){
		if(node.elements.size()>0){
%>
		buf_<%=cid%>.append("\n");
		buf_<%=cid%>.append("<%=emptySpace%></<%=node.name%>>");
<%
		}else{
%>
		buf_<%=cid%>.append("</<%=node.name%>>");
<%
		}
	}
	private void setText(XMLNode node){
		if(node.relatedColumn!=null){
			JavaType javaType = JavaTypesManager.getJavaTypeFromId(node.relatedColumn.getTalendType());
			if(javaType == JavaTypesManager.OBJECT){
%>
		if(<%tool.getValue(node);%>!=null){
			buf_<%=cid%>.append(<%tool.getValue(node);%>);
		}
<%
			}else{
%>
		if(<%tool.getValue(node);%>!=null){
			buf_<%=cid%>.append(TalendString.checkCDATAForXML(<%tool.getValue(node);%>));
		}
<%
			}
		}
	}
	private void addAttribute(XMLNode node){
		if(node.relatedColumn!=null){
%>
		if(<%tool.getValue(node);%>!=null){
			buf_<%=cid%>.append(" <%=node.path%>=\""+TalendString.replaceSpecialCharForXML(<%tool.getValue(node);%>)+"\"");
		}
<%
		}
	}
	private void addNameSpace(XMLNode node){
		if(node.relatedColumn!=null){
%>
		if(<%tool.getValue(node);%>!=null){
<%
			if(node.path ==null || node.path.length()==0){
%>
        	buf_<%=cid%>.append(" xmlns=\""+TalendString.replaceSpecialCharForXML(<%tool.getValue(node);%>)+"\"");
<%
			}else{
%>
			buf_<%=cid%>.append(" xmlns:<%=node.path%>=\""+TalendString.replaceSpecialCharForXML(<%tool.getValue(node);%>)+"\"");
<%
			}
%>
		}
<%
		}
	}
}
// ------------------- *** Null generation mode end *** ------------------- //

// ------------------- *** Common code start *** ------------------- //
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();
List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
	IMetadataTable metadata = metadatas.get(0);
    if (metadata!=null) {
    	List< ? extends IConnection> conns = node.getIncomingConnections();
    	if(conns!=null && conns.size()>0){
    		IConnection conn = conns.get(0);
    		if(conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)){ 
    		
            	List<Map<String, String>> rootTable = 
                	(List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__ROOT__");
                List<Map<String, String>> groupTable = 
                	(List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__GROUP__");
                List<Map<String, String>> loopTable = 
                	(List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__LOOP__");
                
                String allowEmpty = ElementParameterParser.getValue(node, "__CREATE_EMPTY_ELEMENT__");
                String outputAsXSD = ElementParameterParser.getValue(node, "__OUTPUT_AS_XSD__");
                String encoding = ElementParameterParser.getValue(node, "__ENCODING__");
                
                String split = ElementParameterParser.getValue(node, "__SPLIT__");
                String splitEvery = ElementParameterParser.getValue(node, "__SPLIT_EVERY__");
                
                String advancedSeparatorStr = ElementParameterParser.getValue(node, "__ADVANCED_SEPARATOR__");
        		boolean advancedSeparator = (advancedSeparatorStr!=null&&!advancedSeparatorStr.equals(""))?advancedSeparatorStr.equals("true"):false;
        		String thousandsSeparator = ElementParameterParser.getValueWithJavaType(node, "__THOUSANDS_SEPARATOR__", JavaTypesManager.CHARACTER);
        		String decimalSeparator = ElementParameterParser.getValueWithJavaType(node, "__DECIMAL_SEPARATOR__", JavaTypesManager.CHARACTER); 
        		
        		String mode = ElementParameterParser.getValue(node, "__GENERATION_MODE__");
        		
        		// init tool
                XMLTool tool = new XMLTool();
                tool.connName = conn.getName();
                tool.advancedSeparator=advancedSeparator;
                tool.thousandsSeparator=thousandsSeparator;
                tool.decimalSeparator=decimalSeparator;
                tool.cid=cid;
                
                // change tables to a tree 
				Object[] treeObjs = getTree(rootTable, groupTable, loopTable, metadata.getListColumns());
            	List<XMLNode> mainList = (ArrayList<XMLNode>)treeObjs[0];
                List<XMLNode> groupList = (ArrayList<XMLNode>)treeObjs[1];
                XMLNode root = mainList.get(0);
            	XMLNode loop = (XMLNode)treeObjs[2];
                
                if(!allowEmpty.equals("true")){
                	removeEmptyElement(root);
                }
                
                List<List<XMLNode>> groupbyNodeList = new ArrayList<List<XMLNode>>();
                for(XMLNode group:groupList){
                	groupbyNodeList.add(getGroupByNodeList(group));
                }
%>
	nb_line_<%=cid%>++;
	valueMap_<%=cid%>.clear();
<%
				for(IMetadataColumn column :metadata.getListColumns()){
%>
	valueMap_<%=cid%>.put("<%=column.getLabel()%>",<%tool.getValue(column);%>);
<%
				}
// ------------------- *** Common code end *** ------------------- //

// ------------------- *** Dom4j generation mode start *** ------------------- //
if(mode.equals("Dom4j")){

	//init the generate tool.
	GenerateToolByDom4j generateToolByDom4j = new GenerateToolByDom4j();
    if(outputAsXSD.equals("true")){
    	generateToolByDom4j.outputAsXSD = true;
    }
    if(allowEmpty.equals("true")){
    	generateToolByDom4j.allowEmpty = true;
    }
    generateToolByDom4j.cid = cid;
    generateToolByDom4j.tool = tool;
    
    //start generate code
%>
	org.dom4j.Element subTreeRootParent_<%=cid%> = null;
	
	// build root xml tree 
	if (needRoot_<%=cid%>) {
		needRoot_<%=cid%>=false;
<%
	generateToolByDom4j.generateCode(root,"root","doc");
%>
		root4Group_<%=cid%> = subTreeRootParent_<%=cid%>;
	}else{
		subTreeRootParent_<%=cid%>=root4Group_<%=cid%>;
	}
	// build group xml tree 
<%
	if(groupTable.size()>0){
%>
	boolean isNewElememt = false;
<%
	}
	for(int i=0;i<groupList.size();i++){
		XMLNode groupRootNode = groupList.get(i);
%>
	if(isNewElememt || groupbyList_<%=cid%>.size()<=<%=i%> || groupbyList_<%=cid%>.get(<%=i%>)==null
<%
		for(int j=0;j<groupbyNodeList.get(i).size();j++){
			XMLNode attr = groupbyNodeList.get(i).get(j);
			if(attr.relatedColumn!=null){
%>
	|| ( groupbyList_<%=cid%>.get(<%=i%>).get(<%=j%>)!=null 
		? !groupbyList_<%=cid%>.get(<%=i%>).get(<%=j%>).equals(<%tool.getValue(attr);%>) 
		: <%tool.getValue(attr);%>!=null )
<%
			}
		}
%>
	){
<%
		generateToolByDom4j.generateCode(groupList.get(i),"group"+i+"_","subTreeRootParent");
%>
		if(groupbyList_<%=cid%>.size()<=<%=i%>){
        	groupbyList_<%=cid%>.add(new java.util.ArrayList<String>());
        }else{
        	groupbyList_<%=cid%>.get(<%=i%>).clear();
        }
<%
		for(int j=0;j<groupbyNodeList.get(i).size();j++){
			XMLNode attr = groupbyNodeList.get(i).get(j);
%>
		groupbyList_<%=cid%>.get(<%=i%>).add(<%tool.getValue(attr);%>);
<%
		}
%>
        isNewElememt=true;
        if(groupElementList_<%=cid%>.size()<=<%=i%>){
			groupElementList_<%=cid%>.add(group<%=i%>__<%=cid%>);
        }else{
        	groupElementList_<%=cid%>.set(<%=i%>,group<%=i%>__<%=cid%>);
        }
        
	}else{
		subTreeRootParent_<%=cid%>=groupElementList_<%=cid%>.get(<%=i%>);
	}
<%
	}
%>
	// build loop xml tree
<%
	generateToolByDom4j.generateCode(loop,"loop","subTreeRootParent");
	
	//file split
	if(split.equals("true")){
%>
    currentRowCount_<%=cid %>++;
    if(currentRowCount_<%=cid %> == <%= splitEvery%>){
    	needRoot_<%=cid%>  = true;
    	fileName_<%=cid%> = file_<%=cid%> + currentFileCount_<%=cid %> + ".xml";
        currentRowCount_<%=cid %> = 0;
        currentFileCount_<%=cid %>++;
    	groupbyList_<%=cid%>.clear();

    	java.io.FileOutputStream stream_<%=cid%> = new java.io.FileOutputStream(fileName_<%=cid%>);
        org.dom4j.io.XMLWriter output_<%=cid%> = new org.dom4j.io.XMLWriter(stream_<%=cid%>, format_<%=cid%>);
<%
		if(outputAsXSD.equals("true")){
%>
		doc_<%=cid%>.getRootElement().addAttribute("xsi:noNamespaceSchemaLocation", file_<%=cid%>.substring(file_<%=cid%>.lastIndexOf("/")+1)+".xsd");
        doc_<%=cid%>.getRootElement().addNamespace("xsi", "http://www.w3.org/2001/XMLSchema-instance");
<%
		}
%>        
        nestXMLTool_<%=cid%>.replaceDefaultNameSpace(doc_<%=cid%>.getRootElement());
        output_<%=cid%>.write(doc_<%=cid%>);
        output_<%=cid%>.close();
        doc_<%=cid%>  = org.dom4j.DocumentHelper.createDocument();
    	groupElementList_<%=cid%>.clear();
    }
<%
	}
}
// ------------------- *** Dom4j generation mode end *** ------------------- //

// ------------------- *** Null generation mode start *** ------------------- //
else if(mode.equals("Null")){

	//init the generate tool.
	GenerateToolByNull generateToolByNull = new GenerateToolByNull();
    if(outputAsXSD.equals("true")){
    	generateToolByNull.outputAsXSD = true;
    }
    if(allowEmpty.equals("true")){
    	generateToolByNull.allowEmpty = true;
    }
    generateToolByNull.cid = cid;
    generateToolByNull.tool = tool;
%>
	StringBuffer buf_<%=cid%> = new StringBuffer();
	//init value is 0 not -1, because it will output the root tab when all the row value is null.
	int unNullMaxIndex_<%=cid%> = 0;

	// build root xml tree 
	if (needRoot_<%=cid%>) {
		needRoot_<%=cid%>=false;
<%
	String rootEmptySpace = "";
	for(int i=0;i<mainList.size();i++){
		generateToolByNull.generateCode(mainList.get(i),rootEmptySpace);
		rootEmptySpace+="  ";
		
		if(!generateToolByNull.outputAsXSD && !generateToolByNull.allowEmpty){
			if(mainList.get(i).relatedColumn != null || mainList.get(i).childrenColumnList.size()>0){
%>
		if( false
<%
                	for(IMetadataColumn column : mainList.get(i).childrenColumnList){
                		%> || valueMap_<%=cid%>.get("<%=column.getLabel()%>") != null<%
                	}
%>
		){
			unNullMaxIndex_<%=cid%> = <%=i%>;
		}
<%
			}
%>
		startTabs_<%=cid%>[<%=i%>] = buf_<%=cid%>.toString();
        buf_<%=cid%> = new StringBuffer();
<%
		}else{
%>
		out_<%=cid%>.write(buf_<%=cid%>.toString());
        buf_<%=cid%> = new StringBuffer();
<%
		}
	}
%>
	}
	
	// build group xml tree 
<%
	if(groupTable.size()>0){
%>
	boolean isNewElememt = false;
	//The index of group element which is the first new group in groups.
	int newTabIndex_<%=cid%> = -1;
	//Buffer all group tab XML, then set to startTabBuffer.
    String[] groupBuffer_<%=cid%> = new String[<%=groupList.size()%>];
<%
	}
	for(int i=0;i<groupList.size();i++){
		XMLNode groupRootNode = groupList.get(i);
%>

	// need a new group element <%=groupRootNode.name%> or not
	if(isNewElememt || groupbyList_<%=cid%>.size()<=<%=i%> || groupbyList_<%=cid%>.get(<%=i%>)==null
<%
		for(int j=0;j<groupbyNodeList.get(i).size();j++){
			XMLNode attr = groupbyNodeList.get(i).get(j);
			if(attr.relatedColumn!=null){
%>
	|| ( groupbyList_<%=cid%>.get(<%=i%>).get(<%=j%>)!=null 
		? !groupbyList_<%=cid%>.get(<%=i%>).get(<%=j%>).equals(<%tool.getValue(attr);%>) 
		: <%tool.getValue(attr);%>!=null )
<%
			}
		}
%>
	){
		// Is the first new element in groups.
		if(isNewElememt == false && groupbyList_<%=cid%>.size()><%=i%>){
			newTabIndex_<%=cid%> = <%=i%>;
		}

		// count the groupby element
		if(groupbyList_<%=cid%>.size()<=<%=i%>){
        	groupbyList_<%=cid%>.add(new java.util.ArrayList<String>());
        }else{
        	groupbyList_<%=cid%>.get(<%=i%>).clear();
        }
<%
		for(int j=0;j<groupbyNodeList.get(i).size();j++){
			XMLNode attr = groupbyNodeList.get(i).get(j);
%>
		groupbyList_<%=cid%>.get(<%=i%>).add(<%tool.getValue(attr);%>);
<%
		}
%>
        isNewElememt=true;
	}
	
	// subtree XML string generate
<%
		String emptySpace = "";
		for(int len = groupList.get(i).path.split("/").length-1;len>1;len--){
			emptySpace +="  ";
		}
		generateToolByNull.generateCode(groupList.get(i),emptySpace);
		
		if(!outputAsXSD.equals("true") && !allowEmpty.equals("true")){
			if((groupList.get(i).relatedColumn != null || groupList.get(i).childrenColumnList.size()>0)){
%>
	if( false
<%
            	for(IMetadataColumn column : groupList.get(i).childrenColumnList){
            		%> || valueMap_<%=cid%>.get("<%=column.getLabel()%>") != null<%
            	}
%>
	){
		unNullMaxIndex_<%=cid%> = <%=i+mainList.size()%>;
	}
<%
			}
		}
%>
	// buffer the start tabs to group buffer
	groupBuffer_<%=cid%>[<%=i%>] = buf_<%=cid%>.toString();
    buf_<%=cid%> = new StringBuffer();
<%
	}//End of groupList loop
	
	if(groupTable.size()>0){
%>
	//output the previous groups as there's a new group
    if (newTabIndex_<%=cid%> >= 0) {
        //out_<%=cid%>.newLine();//Track code
<%
		if(!outputAsXSD.equals("true") && !allowEmpty.equals("true")){
%>
		// output unNull tabs in start tabs buffer
        if (preUnNullMaxIndex_<%=cid%> >= 0) {
            for (int i_<%=cid%> = 0; i_<%=cid%> < startTabs_<%=cid%>.length; i_<%=cid%>++) {
                if (i_<%=cid%> <= preUnNullMaxIndex_<%=cid%>) {
                    if (startTabs_<%=cid%>[i_<%=cid%>] != null) {
                        out_<%=cid%>.write(startTabs_<%=cid%>[i_<%=cid%>]);
                    }
                    startTabs_<%=cid%>[i_<%=cid%>] = null;
                }
            }
        }
<%
		}else{
%>
		//output all start tabs buffer
		for (int i_<%=cid%> = 0; i_<%=cid%> < startTabs_<%=cid%>.length; i_<%=cid%>++) {
            if (startTabs_<%=cid%>[i_<%=cid%>] != null) {
                out_<%=cid%>.write(startTabs_<%=cid%>[i_<%=cid%>]);
            }
            startTabs_<%=cid%>[i_<%=cid%>] = null;
        }
<%
		}
		if(!outputAsXSD.equals("true") && !allowEmpty.equals("true")){
%>
        // output endtabs
        if (preUnNullMaxIndex_<%=cid%> >= preNewTabIndex_<%=cid%>
            && preUnNullMaxIndex_<%=cid%> >= <%=mainList.size()%> + newTabIndex_<%=cid%>) {
            for (int i_<%=cid%> = preUnNullMaxIndex_<%=cid%>; i_<%=cid%> >= <%=mainList.size()%> + newTabIndex_<%=cid%>; i_<%=cid%>--) {
                out_<%=cid%>.newLine();
                out_<%=cid%>.write(endTabStrs_<%=cid%>
                        .get(i_<%=cid%>));
            }
        } else {
<%
		}
%>
            for (int i_<%=cid%> = preNewTabIndex_<%=cid%> - 1; i_<%=cid%> >= <%=mainList.size()%> + newTabIndex_<%=cid%>; i_<%=cid%>--) {
                out_<%=cid%>.newLine();
                out_<%=cid%>.write(endTabStrs_<%=cid%>
                        .get(i_<%=cid%>));
            }
<%
		if(!outputAsXSD.equals("true") && !allowEmpty.equals("true")){
%>
        }
<%
		}
%>
        preNewTabIndex_<%=cid%> = newTabIndex_<%=cid%> + <%=mainList.size()%>;
    }

    // set new element groupbuffer to startbuffer
    for (int i_<%=cid%> = 0; i_<%=cid%> < groupBuffer_<%=cid%>.length; i_<%=cid%>++) {
        // when newTabIndex is null, must use the perNewTabIndex
        if (i_<%=cid%> >= preNewTabIndex_<%=cid%> - <%=mainList.size()%>) {
            startTabs_<%=cid%>[i_<%=cid%> + <%=mainList.size()%>] = groupBuffer_<%=cid%>[i_<%=cid%>];
        }
    }
<%
	}
	if(!outputAsXSD.equals("true") && !allowEmpty.equals("true")){
%>
	//reset the preUnNullMaxIndex
	if(unNullMaxIndex_<%=cid%>>=0){
    	preUnNullMaxIndex_<%=cid%>=unNullMaxIndex_<%=cid%>;
	}else{
		if(preUnNullMaxIndex_<%=cid%>><%=mainList.size()-1%>){
			preUnNullMaxIndex_<%=cid%>=<%=mainList.size()-1%>;
		}
	}
<%
	}
%>
	// build loop xml tree
<%
	String emptySpace = "";
	for(int len =loop.path.split("/").length-1;len>1;len--){
		emptySpace +="  ";
	}
	if(!outputAsXSD.equals("true") && !allowEmpty.equals("true")){
%>
		if( false
<%
    	for(IMetadataColumn column : loop.childrenColumnList){
    		%> || valueMap_<%=cid%>.get("<%=column.getLabel()%>") != null<%
    	}
%>
		){
<%
	}
	generateToolByNull.generateCode(loop,emptySpace);
	generateToolByNull.endElement(loop,emptySpace);
%>
		// output all buffer
		for (int i_<%=cid%> = 0; i_<%=cid%> < startTabs_<%=cid%>.length; i_<%=cid%>++) {
            if (startTabs_<%=cid%>[i_<%=cid%>] != null && startTabs_<%=cid%>[i_<%=cid%>].length() > 0) {
                out_<%=cid%>.write(startTabs_<%=cid%>[i_<%=cid%>]);
                startTabs_<%=cid%>[i_<%=cid%>] = null;
            }
        }
		out_<%=cid%>.write(buf_<%=cid%>.toString());
		preNewTabIndex_<%=cid%> = <%=groupList.size()+mainList.size()%>;
<%
	if(!outputAsXSD.equals("true") && !allowEmpty.equals("true")){
%>
            preUnNullMaxIndex_<%=cid%> = <%=groupList.size()+mainList.size()-1%>;
		}
<%
	}
	
	//file split 
	if(split.equals("true")){
%>
    currentRowCount_<%=cid %>++;
    if(currentRowCount_<%=cid %> == <%= splitEvery%>){
    	needRoot_<%=cid%>  = true;
    	fileName_<%=cid%> = file_<%=cid%> + currentFileCount_<%=cid %> + ".xml";
        currentRowCount_<%=cid %> = 0;
        currentFileCount_<%=cid %>++;
    	groupbyList_<%=cid%>.clear();
 
<%
		if(!outputAsXSD.equals("true") && !allowEmpty.equals("true")){
%>   	
	if (preUnNullMaxIndex_<%=cid%> >= 0) {
        // output all buffer
        for (int j_<%=cid%> = 0; j_<%=cid%> <= preUnNullMaxIndex_<%=cid%>; j_<%=cid%>++) {
            if (startTabs_<%=cid%>[j_<%=cid%>] != null)
                out_<%=cid%>.write(startTabs_<%=cid%>[j_<%=cid%>]);
        }

        if (preUnNullMaxIndex_<%=cid%> < preNewTabIndex_<%=cid%> ) {
			for (int i_<%=cid%> = preNewTabIndex_<%=cid%> - 1; i_<%=cid%> >= 0; i_<%=cid%>--) {
                out_<%=cid%>.newLine();
                out_<%=cid%>.write(endTabStrs_<%=cid%>.get(i_<%=cid%>));
            }
        } else {
            for (int i_<%=cid%> = preUnNullMaxIndex_<%=cid%>; i_<%=cid%> >= 0; i_<%=cid%>--) {
                out_<%=cid%>.newLine();
                out_<%=cid%>.write(endTabStrs_<%=cid%>.get(i_<%=cid%>));
            }
        }
    }
<%
		}else{
			if(loopTable.size()>0){
%>
	for (int i_<%=cid%> = endTabStrs_<%=cid%>.size() - 1; i_<%=cid%> >= 0; i_<%=cid%>--) {
        out_<%=cid%>.newLine();
        out_<%=cid%>.write(endTabStrs_<%=cid%>.get(i_<%=cid%>));
    }
<%
			}
		}
%>
	    preUnNullMaxIndex_<%=cid%> = -1;
        preNewTabIndex_<%=cid%> = -1;
    	startTabs_<%=cid%> = new String[endTabStrs_<%=cid%>.size()];
    	
		out_<%=cid%>.close();
		out_<%=cid%> = new java.io.BufferedWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream(file_<%=cid%> + currentFileCount_<%=cid %> + ".xml"), <%=encoding%>));
        out_<%=cid%>.write("<?xml version=\"1.0\" encoding=\""+<%=encoding%>+"\"?>");
        out_<%=cid%>.newLine();
	}
<%
	}
}
// ------------------- *** Null generation mode end *** ------------------- //

// ------------------- *** Common code start *** ------------------- //
			}
		}
	}
}
// ------------------- *** Common code end *** ------------------- //
%>