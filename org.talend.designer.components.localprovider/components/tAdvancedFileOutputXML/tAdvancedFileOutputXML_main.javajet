<%@ jet
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.process.ElementParameterParser
    java.util.List
    java.util.ArrayList
    java.util.LinkedList
    java.util.Map
    java.util.HashMap
  	org.talend.core.model.process.IConnection    
	org.talend.core.model.process.IConnectionCategory
    org.talend.core.model.metadata.types.JavaTypesManager
	org.talend.core.model.metadata.types.JavaType
"
%>

<%
class XMLNode{
	public XMLNode(String path, String type, XMLNode parent, String column){
		this.path = path;
		this.parent = parent;
		this.type = type;
		this.column = column;
		if (type.equals("ELEMENT")) {
            this.name = path.substring(path.lastIndexOf("/") + 1);
        } else {
            this.name = path;
        }
	}
	public String name = null;
	public String path = null;
	public String type = null;
	public String column = null;
	public IMetadataColumn relatedColumn=null;
	public String value = null;
	public int special = 0;  //1 is subtree root, 2 is subtree root parent, 4 is groupby, 8 nest XML
	public XMLNode parent = null;
	public List<XMLNode> attributes = new LinkedList<XMLNode>();
	public List<XMLNode> namespaces = new LinkedList<XMLNode>();
	public List<XMLNode> elements = new LinkedList<XMLNode>();
}

//XMLTool
class XMLTool{
	public boolean outputAsXSD = false;
	public boolean advancedSeparator = false;
	public String thousandsSeparator = null;
 	public String decimalSeparator =null;
	public String connName = null;
	
	public void generateCode(XMLNode node, String cid, String currEleName, String parentName){
		if(node.type.equals("ELEMENT")){
			createElement(cid,currEleName,node,parentName);
			setText(cid,currEleName,node);
			for(XMLNode ns:node.namespaces){
				addNameSpace(cid,currEleName,ns);
			}
			for(XMLNode attri:node.attributes){
				addAttribute(cid,currEleName,attri);
			}
			int index = 0;
			for(XMLNode child:node.elements){
				if(0==(child.special & 1)){
					generateCode(child,cid,currEleName+"_"+index++,currEleName);
				}
			}
			if(node.relatedColumn != null && !outputAsXSD && (node.special & 2)==0 && (node.special & 1)==0){
%>
			if (<%=currEleName%>_<%=cid%>.content().size() == 0 
				&& <%=currEleName%>_<%=cid%>.attributes().size() == 0 
				&& <%=currEleName%>_<%=cid%>.declaredNamespaces().size() == 0) {
                <%=parentName%>_<%=cid%>.remove(<%=currEleName%>_<%=cid%>);
            }
			
<%
			}
		}
	}
	private void createElement(String cid, String currEleName, XMLNode node, String parentName){
%>
		org.dom4j.Element <%=currEleName%>_<%=cid%> = <%=parentName%>_<%=cid%>.addElement("<%=node.name%>");
<%
		if(0!=(node.special & 2)){
%>
		subTreeRootParent_<%=cid%> = <%=currEleName%>_<%=cid%>;
<%
		}
	}
	private void setText(String cid, String currEleName, XMLNode node){
		if(node.relatedColumn!=null){
			JavaType javaType = JavaTypesManager.getJavaTypeFromId(node.relatedColumn.getTalendType());
			if(javaType == JavaTypesManager.OBJECT){
%>
		if(<%getValue(cid, node);%>!=null){
			nestXMLTool_<%=cid%> .parseAndAdd(<%=currEleName%>_<%=cid%>,<%getValue(cid, node);%>);
		}
<%
				if(outputAsXSD){
%>
		else{
			nestXMLTool_<%=cid%> .parseAndAdd(<%=currEleName%>_<%=cid%>,"");
			<%=currEleName%>_<%=cid%>.addAttribute("xsi:nil","true");
		}
<%
				}
			}else{
%>
		if(<%getValue(cid, node);%>!=null){
			<%=currEleName%>_<%=cid%>.setText(<%getValue(cid, node);%>);
		}
<%
				if(outputAsXSD){
%>
		else{
			<%=currEleName%>_<%=cid%>.setText("");
			<%=currEleName%>_<%=cid%>.addAttribute("xsi:nil","true");
		}
<%
				}
			}
		}
	}
	private void addAttribute(String cid, String currEleName, XMLNode node){
		if(node.relatedColumn!=null){
%>
		if(<%getValue(cid, node);%>!=null){
			<%=currEleName%>_<%=cid%>.addAttribute("<%=node.path%>",<%getValue(cid, node);%>);
		}
<%
		}
	}
	private void addNameSpace(String cid, String currEleName, XMLNode node){
		if(node.relatedColumn!=null){
%>
		if(<%getValue(cid, node);%>!=null){
			<%=currEleName%>_<%=cid%>.addNamespace("<%=node.path%>",<%getValue(cid, node);%>);
<%
			if(node.path ==null || node.path.length()==0){
%>
        	<%=currEleName%>_<%=cid%>.setQName(org.dom4j.DocumentHelper.createQName(<%=currEleName%>_<%=cid%>.getName(),
        	org.dom4j.DocumentHelper.createNamespace("",<%getValue(cid, node);%>)));
<%
			}
%>
		}
<%
		}
	}

	private void getValue(String cid, XMLNode node){
		IMetadataColumn column = node.relatedColumn;
		JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
		String defaultValue=column.getDefault();
		boolean isNotSetDefault = false;
		if(defaultValue!=null){
			isNotSetDefault = defaultValue.length()==0;
		}else{
			isNotSetDefault=true;
		}
%>
	(
<%
		if(column.isNullable()){
%>
		<%=connName%>.<%=column.getLabel()%> != null?
<%
		}
		
        if(advancedSeparator && JavaTypesManager.isNumberType(javaType, column.isNullable())) { 
        	if(javaType == JavaTypesManager.BIGDECIMAL) {
%>
    		FormatterUtils.format_Number(String.valueOf(<%=connName%>.<%=column.getLabel()%>.doubleValue()), <%= thousandsSeparator%>,<%=decimalSeparator %>)					
<%
    		} else {
%>
    		FormatterUtils.format_Number(String.valueOf(<%=connName%>.<%=column.getLabel()%>), <%= thousandsSeparator %>,<%=decimalSeparator %>)						
<%
	   		}
        } else if(JavaTypesManager.isJavaPrimitiveType( column.getTalendType(), column.isNullable())){
%>
            String.valueOf(<%=connName%>.<%=column.getLabel()%>)
<%
        }else if(javaType == JavaTypesManager.DATE){
            if( column.getPattern() != null && column.getPattern().trim().length() != 0 ){
%>
            FormatterUtils.format_Date(<%=connName%>.<%=column.getLabel()%>,<%=column.getPattern()%>)
<%
            }else{
%>
			<%=connName%>.<%=column.getLabel()%>
<%
           }
        }else if (javaType == JavaTypesManager.BIGDECIMAL) {
%>
			String.valueOf(<%=connName%>.<%=column.getLabel()%>.doubleValue())
<%
        }else{
%>
            <%=connName%>.<%=column.getLabel()%>.toString()
<%
		}
		if(column.isNullable()){
			%>:<% 
			if(isNotSetDefault == false){
				%><%=column.getDefault()%><%
			}else{
				%>null<%
			}
		}
%>
		)
<%
	}

	public void setIMetadataColumn(XMLNode node, List<IMetadataColumn> colList){
        String value = null;
        JavaType javaType=null;
     	if( node.column!=null && node.column.length()>0){
           for(IMetadataColumn column:colList) {
                if(column.getLabel().equals(node.column)){
                    node.relatedColumn = column;
                }
            }
        }
    }
    
    public XMLNode removeEmptyElement(XMLNode root) {
        List<XMLNode> removeNodes = new LinkedList<XMLNode>();
        for (XMLNode attri : root.attributes) {
            if (attri.column == null || attri.column.length() == 0) {
                attri.parent = null;
                removeNodes.add(attri);
            }
        }
        root.attributes.removeAll(removeNodes);

        removeNodes.clear();
        for (XMLNode ns : root.namespaces) {
            if (ns.column == null || ns.column.length() == 0) {
                ns.parent = null;
                removeNodes.add(ns);
            }
        }
        root.namespaces.removeAll(removeNodes);

        removeNodes.clear();
        for (XMLNode child : root.elements) {
            removeNodes.add(removeEmptyElement(child));
        }
        root.elements.removeAll(removeNodes);

        if (root.attributes.size() == 0 && root.namespaces.size() == 0 && root.elements.size() == 0
                && (root.column == null || root.column.length() == 0)) {
            return root;
        } else {
            return null;
        }
    }
}

CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();
List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
	IMetadataTable metadata = metadatas.get(0);
    if (metadata!=null) {
    	List< ? extends IConnection> conns = node.getIncomingConnections();
    	if(conns!=null && conns.size()>0){
    		IConnection conn = conns.get(0);
    		if(conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)){ 
            	List<Map<String, String>> rootTable = 
                	(List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__ROOT__");
                List<Map<String, String>> groupTable = 
                	(List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__GROUP__");
                List<Map<String, String>> loopTable = 
                	(List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__LOOP__");
                
                String allowEmpty = ElementParameterParser.getValue(node, "__CREATE_EMPTY_ELEMENT__");
                String outputAsXSD = ElementParameterParser.getValue(node, "__OUTPUT_AS_XSD__");
                
                String split = ElementParameterParser.getValue(node, "__SPLIT__");
                String splitEvery = ElementParameterParser.getValue(node, "__SPLIT_EVERY__");
                
                String advancedSeparatorStr = ElementParameterParser.getValue(node, "__ADVANCED_SEPARATOR__");
        		boolean advancedSeparator = (advancedSeparatorStr!=null&&!advancedSeparatorStr.equals(""))?advancedSeparatorStr.equals("true"):false;
        		String thousandsSeparator = ElementParameterParser.getValue(node, "__THOUSANDS_SEPARATOR__");
        		String decimalSeparator = ElementParameterParser.getValue(node, "__DECIMAL_SEPARATOR__"); 
                
                //XMLTool
                XMLTool tool = new XMLTool();
                if(outputAsXSD.equals("true")){
                	tool.outputAsXSD = true;
                }
                tool.connName = conn.getName();
                tool.advancedSeparator=advancedSeparator;
                tool.thousandsSeparator=thousandsSeparator;
                tool.decimalSeparator=decimalSeparator;

//------------change Map to a Tree------------------
				List<List<Map<String, String>>> tables = new ArrayList<List<Map<String, String>>>();
                tables.add(rootTable);
                tables.add(groupTable);
                tables.add(loopTable);
            
                List<XMLNode> specialList = new ArrayList<XMLNode>();
                XMLNode tmpParent = null;
                XMLNode tmpMainNode = null;
                if(loopTable==null || loopTable.size()==0){
                	return "";
                }
                String mainPath = loopTable.get(0).get("PATH");
                for (List<Map<String, String>> tmpTable : tables) {
                    tmpParent = tmpMainNode;
                    for (Map<String, String> tmpMap : tmpTable) {
                        XMLNode tmpNew = null;
                        if (tmpMap.get("ATTRIBUTE").equals("attri")) {
                            tmpNew = new XMLNode(tmpMap.get("PATH"), "ATTRIBUTE", tmpParent, tmpMap.get("COLUMN"));
                            tmpParent.attributes.add(tmpNew);
                        } else if (tmpMap.get("ATTRIBUTE").equals("ns")) {
                            tmpNew = new XMLNode(tmpMap.get("PATH"), "NAMESPACE", tmpParent, tmpMap.get("COLUMN"));
                            tmpParent.namespaces.add(tmpNew);
                        } else {
                            if (tmpParent == null) {
                                tmpNew = new XMLNode(tmpMap.get("PATH"), "ELEMENT", tmpParent, tmpMap.get("COLUMN"));
                                tmpNew.special |= 1;
                                specialList.add(tmpNew);
                            } else {
                                String tmpParentPath = tmpMap.get("PATH").substring(0, tmpMap.get("PATH").lastIndexOf("/"));
                       		 	while (tmpParent != null && !tmpParentPath.equals(tmpParent.path)) {
                                    tmpParent = tmpParent.parent;
                                }
                                tmpNew = new XMLNode(tmpMap.get("PATH"), "ELEMENT", tmpParent, tmpMap.get("COLUMN"));
                                tmpParent.elements.add(tmpNew);
                                if (tmpMap.get("ATTRIBUTE").equals("main") && tmpTable != rootTable) {
                                	tmpNew.special |= 1;
                                    tmpParent.special |=2;
                                    specialList.add(tmpNew);
                                }
                            }
                            if (tmpMap.get("ATTRIBUTE").equals("main")) {
                                tmpMainNode = tmpNew;
                            }
                            tmpParent = tmpNew;
                        }
                        tool.setIMetadataColumn(tmpNew, metadata.getListColumns());
                    }
                }
                
                if(!allowEmpty.equals("true")){
                	tool.removeEmptyElement(specialList.get(0));
                }
//------------start generate code-------------------
%>
	nb_line_<%=cid%>++;
	String value_<%=cid%>=null;
	org.dom4j.Element subTreeRootParent_<%=cid%> = null;
	// build root xml tree 
	if (needRoot_<%=cid%>) {
<%
       			tool.generateCode(specialList.get(0),cid,"root","doc");
%>
		root4Group_<%=cid%> = subTreeRootParent_<%=cid%>;
		needRoot_<%=cid%>=false;
	}else{
		subTreeRootParent_<%=cid%>=root4Group_<%=cid%>;
	}
	
	// build group xml tree 
<%
				if(groupTable.size()>0){
%>
	boolean isNewElememt = false;
<%
				}
				
				for(int i=1;i<specialList.size()-1;i++){
					XMLNode groupRootNode = specialList.get(i);
%>
	if(isNewElememt || groupRootList_<%=cid%>.size()<=<%=i-1%> || groupRootList_<%=cid%>.get(<%=i-1%>)==null
<%
					for(XMLNode attr:groupRootNode.attributes)
					{
						if(attr.relatedColumn!=null){
%>
		|| (groupRootList_<%=cid%>.get(<%=i-1%>).attribute("<%=attr.name%>")!=null && <%tool.getValue(cid, attr);%>==null) 
		|| (groupRootList_<%=cid%>.get(<%=i-1%>).attribute("<%=attr.name%>")==null && <%tool.getValue(cid, attr);%>!=null) 
		|| ((groupRootList_<%=cid%>.get(<%=i-1%>).attribute("<%=attr.name%>")!=null && <%tool.getValue(cid, attr);%>!=null)
		&& !groupRootList_<%=cid%>.get(<%=i-1%>).attribute("<%=attr.name%>").getText().equals(<%tool.getValue(cid, attr);%>))
<%
						}
					}
%>
	){
	
<%
					tool.generateCode(specialList.get(i),cid,"group"+i+"_","subTreeRootParent");
%>
		//---
		if(groupRootList_<%=cid%>.size()<=<%=i-1%>){
        	groupRootList_<%=cid%>.add(group<%=i%>__<%=cid%>);
        }else{
        	groupRootList_<%=cid%>.set(<%=i-1%>, group<%=i%>__<%=cid%>);
        }
        isNewElememt=true;
	}else{
		subTreeRootParent_<%=cid%>=groupRootList_<%=cid%>.get(<%=i-1%>);
	}
<%
				}
%>
	// build loop xml tree
	
<%
				tool.generateCode(specialList.get(specialList.size()-1),cid,"loop","subTreeRootParent");
				
				//split
				if(split.equals("true")){
%>
    currentRowCount_<%=cid %>++;
    if(currentRowCount_<%=cid %> == <%= splitEvery%>){
    	java.io.FileOutputStream stream_<%=cid%> = new java.io.FileOutputStream(fileName_<%=cid%>);
        org.dom4j.io.XMLWriter output_<%=cid%> = new org.dom4j.io.XMLWriter(stream_<%=cid%>, format_<%=cid%>);
<%
					if(outputAsXSD.equals("true")){
%>
		doc_<%=cid%>.getRootElement().addAttribute("xsi:noNamespaceSchemaLocation", file_<%=cid%>.substring(file_<%=cid%>.lastIndexOf("/")));
        doc_<%=cid%>.getRootElement().addNamespace("xsi", "http://www.w3.org/2001/XMLSchema-instance");
<%
					}
%>        
        nestXMLTool_<%=cid%>.replaceDefaultNameSpace(doc_<%=cid%>.getRootElement());
        output_<%=cid%>.write(doc_<%=cid%>);
        output_<%=cid%>.close();
        
        currentRowCount_<%=cid %> = 0;
        currentFileCount_<%=cid %>++;
        doc_<%=cid%>  = org.dom4j.DocumentHelper.createDocument();
    	needRoot_<%=cid%>  = true;
    	fileName_<%=cid%> = file_<%=cid%> + currentFileCount_<%=cid %> + ".xml";
    	groupRootList_<%=cid%>.clear();
}
<%
				}
			}
		}
	}
}
%>