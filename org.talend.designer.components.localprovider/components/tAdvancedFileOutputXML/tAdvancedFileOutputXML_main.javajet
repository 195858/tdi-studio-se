<%@ jet
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.process.ElementParameterParser
    java.util.List
    java.util.ArrayList
    java.util.Map
  	org.talend.core.model.process.IConnection    
	org.talend.core.model.process.IConnectionCategory
    org.talend.core.model.metadata.types.JavaTypesManager
	org.talend.core.model.metadata.types.JavaType
"
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();
List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
	IMetadataTable metadata = metadatas.get(0);
    if (metadata!=null) {
    	List< ? extends IConnection> conns = node.getIncomingConnections();
    	if(conns!=null && conns.size()>0){
    		IConnection conn = conns.get(0);
    		if(conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)){ 
            	List<Map<String, String>> rootTable = 
                	(List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__ROOT__");
                List<Map<String, String>> groupTable = 
                	(List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__GROUP__");
                List<Map<String, String>> loopTable = 
                	(List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__LOOP__");
                String split = ElementParameterParser.getValue(node, "__SPLIT__");
                String splitEvery = ElementParameterParser.getValue(node, "__SPLIT_EVERY__");
                
                //mark the main group in groupTable
                if(loopTable.size() > 0){
                    String loopPath=loopTable.get(0).get("PATH");
                    boolean isMainGroupAttribute = false;
                    for(Map<String, String> map:groupTable){
                    	if (map.get("ATTRIBUTE").equals("true")) {
                    		if(isMainGroupAttribute){
                    			map.put("TYPE","Group");
                    		}
                    	}else{
                    		if( loopPath.startsWith(map.get("PATH"))){
                    			map.put("TYPE","Main");
                    			isMainGroupAttribute = true;
                    		}else{
                    			isMainGroupAttribute = false;
                    		}
                    	}
                    }
                }
%>
	nb_line_<%=cid%>++;
	
	org.dom4j.Element group4Loop_<%=cid%>=null;

	// build root xml tree 
	if (needRoot_<%=cid%>) {
<%
				//sort the name of Element for adding attributes, as attributes record on table must follow its ownner's
        		String currEleName=null;
        		int elementCount = 0;
        		boolean isRootAttribute = false;
            	for(Map<String, String> map:rootTable){
            		String value = null;
            		if( map.get("COLUMN")!=null && map.get("COLUMN").length()>0){
            			for(IMetadataColumn column:metadata.getListColumns()) {
            				if(column.getLabel().equals(map.get("COLUMN"))){
            					JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
            					if(JavaTypesManager.isJavaPrimitiveType( column.getTalendType(), column.isNullable())){
            						value = "String.valueOf("+conn.getName()+"."+map.get("COLUMN")+")";
            					}else if(javaType == JavaTypesManager.DATE){
            						if( column.getPattern() != null && column.getPattern().trim().length() != 0 ){
            							value ="FormatterUtils.format_Date(" + conn.getName() + "." +column.getLabel()+ "," +column.getPattern()+")";
            						}else{
            							value = conn.getName()+"."+map.get("COLUMN");
            						}
            					}else{
            						value = conn.getName()+"."+map.get("COLUMN");
            					}
            				}
            			}
        			}else if(map.get("VALUE") != null && map.get("VALUE").length()>0){
        				value = map.get("VALUE");
        			}
            		String path = map.get("PATH");
                    if (map.get("ATTRIBUTE").equals("true")) {
                        if(isRootAttribute){ //it is the attirbute of root
                        	if(value!=null){
%>
		doc_<%=cid%>.getRootElement().addAttribute("<%=path%>",<%=value%>==null?"\"\"":<%=value%>.toString());
<%
							}else{
%>
		doc_<%=cid%>.getRootElement().addAttribute("<%=path%>","");
<%
							}
						}else{
							if(value!=null){
%>
		<%=currEleName%>_<%=cid%>.addAttribute("<%=path%>",<%=value%>==null?"\"\"":<%=value%>.toString());
<%
							}else{
%>
		<%=currEleName%>_<%=cid%>.addAttribute("<%=path%>",""));
<%
							}
						}
            		}else{
            			if(currEleName==null){
            				isRootAttribute = true;
            			}else{
            				isRootAttribute = false;
            			}
            			currEleName = "element"+elementCount;
            			elementCount++;
%>
		org.dom4j.Element <%=currEleName%>_<%=cid%> = org.dom4j.DocumentHelper.makeElement(doc_<%=cid%>,"<%=path%>");		
<%
						if(value!=null){
%>
		<%=currEleName%>_<%=cid%>.setText(<%=value%>==null?"\"\"":<%=value%>.toString());
<%
						}
            		}
            	}
%>
		needRoot_<%=cid%>=false;
	}
	
	// build group xml tree 
<%
				if(groupTable.size()>0){
%>
	boolean isNewElememt = false;
<%
				}
				//sort current attributes name for grouping judgement.
				List<String> currAttributeNameList = new ArrayList<String>();
				String currentGroupRoot = null;
				String currentGroupRootPath = null;
				int groupRootCount = 0;
				for(Map<String, String> map:groupTable){
            		String value = null;
            		if( map.get("COLUMN")!=null && map.get("COLUMN").length()>0){
            			for(IMetadataColumn column:metadata.getListColumns()) {
            				if(column.getLabel().equals(map.get("COLUMN"))){
            					JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
            					if(JavaTypesManager.isJavaPrimitiveType( column.getTalendType(), column.isNullable())){
            						value = "String.valueOf("+conn.getName()+"."+map.get("COLUMN")+")";
            					}else if(javaType == JavaTypesManager.DATE){
            						if( column.getPattern() != null && column.getPattern().trim().length() != 0 ){
            							value ="FormatterUtils.format_Date(" + conn.getName() + "." +column.getLabel()+ "," +column.getPattern()+")";
            						}else{
            							value = conn.getName()+"."+map.get("COLUMN");
            						}
            					}else{
            						value = conn.getName()+"."+map.get("COLUMN");
            					}
            				}
            			}
        			}else if(map.get("VALUE") != null && map.get("VALUE").length()>0){
        				value = map.get("VALUE");
        			}

        			String path = map.get("PATH");
                    if (map.get("ATTRIBUTE").equals("true")) {
                    	if(map.get("TYPE")!=null && map.get("TYPE").length()>0){
                    		currAttributeNameList.add(path);
                    	}
                    	if(value!=null){
%>
	<%=currEleName%>_<%=cid%>.addAttribute("<%=path%>",<%=value%>==null?"\"\"":<%=value%>.toString());
<%
						}else{
%>
	<%=currEleName%>_<%=cid%>.addAttribute("<%=path%>","");
<%
						}
                    }else{
                    	currEleName =  "element"+elementCount;
            			elementCount++;
                    	if(map.get("TYPE")!=null && map.get("TYPE").length()>0){
                    		currentGroupRootPath = path;
                    		if(currentGroupRoot!=null){ // process previous group root
%>
	if(isNewElememt || groupRootList_<%=cid%>.size()<=<%=groupRootCount%> || groupRootList_<%=cid%>.get(<%=groupRootCount%>)==null
<%
								for(String attr:currAttributeNameList)
								{
%>
		|| !groupRootList_<%=cid%>.get(<%=groupRootCount%>).attribute("<%=attr%>").getText().equals(<%=currentGroupRoot%>_<%=cid%>.attribute("<%=attr%>").getText())
<%
								}
								currAttributeNameList.clear();
%>
	){
        group4Loop_<%=cid%>.add(<%=currentGroupRoot%>_<%=cid%>);
        group4Loop_<%=cid%> = <%=currentGroupRoot%>_<%=cid%>;
        if(groupRootList_<%=cid%>.size()<=<%=groupRootCount%>){
        	groupRootList_<%=cid%>.add(<%=currentGroupRoot%>_<%=cid%>);
        }else{
        	groupRootList_<%=cid%>.set(<%=groupRootCount%>, <%=currentGroupRoot%>_<%=cid%>);
        }
        isNewElememt=true;
	} else {
        group4Loop_<%=cid%> = groupRootList_<%=cid%>.get(<%=groupRootCount%>);
    }
<%
								groupRootCount++;
                    		}else{ //currentGroupRoot == null
%>
	group4Loop_<%=cid%> = (org.dom4j.Element)doc_<%=cid%>.selectSingleNode("<%=path.substring(0,path.lastIndexOf("/") )%>");
<%
                    		}
%>
	org.dom4j.Element <%=currEleName%>_<%=cid%> = org.dom4j.DocumentHelper.createElement("<%=path.substring(path.lastIndexOf("/") + 1)%>");
<%
							currentGroupRoot = currEleName;
                    	}else{ //not group element
%>
	org.dom4j.Element <%=currEleName%>_<%=cid%> = 
		org.dom4j.DocumentHelper.makeElement(<%=currentGroupRoot%>_<%=cid%>,"<%=path.replaceFirst(currentGroupRootPath,"")%>");
<%
							if(value!=null){
%>
	<%=currEleName%>_<%=cid%>.setText(<%=value%>==null?"\"\"":<%=value%>.toString());
<%
							}
                    	}
                    }
        		}
        		if(currentGroupRoot!=null){ // process last group root
%>
	if(isNewElememt || groupRootList_<%=cid%>.size()<=<%=groupRootCount%> ||groupRootList_<%=cid%>.get(<%=groupRootCount%>)==null
<%
					for(String attr:currAttributeNameList)
					{
%>
		|| !groupRootList_<%=cid%>.get(<%=groupRootCount%>).attribute("<%=attr%>").getText().equals(<%=currentGroupRoot%>_<%=cid%>.attribute("<%=attr%>").getText())
<%
					}
					currAttributeNameList.clear();
%>
	){
        group4Loop_<%=cid%>.add(<%=currentGroupRoot%>_<%=cid%>);
        group4Loop_<%=cid%> = <%=currentGroupRoot%>_<%=cid%>;
        if(groupRootList_<%=cid%>.size()<=<%=groupRootCount%>){
        	groupRootList_<%=cid%>.add(<%=currentGroupRoot%>_<%=cid%>);
        }else{
        	groupRootList_<%=cid%>.set(<%=groupRootCount%>, <%=currentGroupRoot%>_<%=cid%>);
        }
	} else {
        group4Loop_<%=cid%> = groupRootList_<%=cid%>.get(<%=groupRootCount%>);
    }
<%
						groupRootCount++;
            		}
%>
	// build loop xml tree 
<%
				String loopRootName=null;
				String loopRootPath = null;
				for(Map<String, String> map:loopTable){
            		String value = null;
            		if( map.get("COLUMN")!=null && map.get("COLUMN").length()>0){
            			for(IMetadataColumn column:metadata.getListColumns()) {
            				if(column.getLabel().equals(map.get("COLUMN"))){
            					JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
            					if(JavaTypesManager.isJavaPrimitiveType( column.getTalendType(), column.isNullable())){
            						value = "String.valueOf("+conn.getName()+"."+map.get("COLUMN")+")";
            					}else if(javaType == JavaTypesManager.DATE){
            						if( column.getPattern() != null && column.getPattern().trim().length() != 0 ){
            							value ="FormatterUtils.format_Date(" + conn.getName() + "." +column.getLabel()+ "," +column.getPattern()+")";
            						}else{
            							value = conn.getName()+"."+map.get("COLUMN");
            						}
            					}else{
            						value = conn.getName()+"."+map.get("COLUMN");
            					}
            				}
            			}
        			}else if(map.get("VALUE") != null && map.get("VALUE").length()>0){
        				value = map.get("VALUE");
        			}
        			
            		String path = map.get("PATH");
                     if (map.get("ATTRIBUTE").equals("true")) {
                     	if(value!=null){
%>
	<%=currEleName%>_<%=cid%>.addAttribute("<%=path%>",<%=value%>==null?"\"\"":<%=value%>.toString());
<%
						}else{
%>
	<%=currEleName%>_<%=cid%>.addAttribute("<%=path%>","");
<%
						}
                    }else{
                    	if(loopRootName == null){// the first one
                   			loopRootName = path.substring(path.lastIndexOf("/") + 1);
                   			loopRootPath = path;
                   			currEleName = loopRootName;
%>
	if(group4Loop_<%=cid%> == null)
	{
		group4Loop_<%=cid%> = (org.dom4j.Element)doc_<%=cid%>.selectSingleNode("<%=path.substring(0,path.lastIndexOf("/") )%>");
	}
	org.dom4j.Element <%=currEleName%>_<%=cid%> = 
		org.dom4j.DocumentHelper.createElement("<%=loopRootName%>");//"<%=path%>".replaceFirst(group4Loop_<%=cid%>.getPath(), ""));
	group4Loop_<%=cid%>.add(<%=currEleName%>_<%=cid%>);
<%
						}else{
							currEleName =  "element"+elementCount;
            				elementCount++;
%>
	org.dom4j.Element <%=currEleName%>_<%=cid%> = 
		org.dom4j.DocumentHelper.makeElement(<%=loopRootName%>_<%=cid%>,"<%=path.replaceFirst(loopRootPath,"")%>");
<%
						}
						if(value!=null){
%>
	<%=currEleName%>_<%=cid%>.setText(<%=value%>==null?"\"\"":<%=value%>.toString());
<%
						}
                    }
				}
				
				//split
				if(split.equals("true")){
%>
    currentRowCount_<%=cid %>++;
    if(currentRowCount_<%=cid %> == <%= splitEvery%>){
        org.dom4j.io.XMLWriter output_<%=cid%> = new org.dom4j.io.XMLWriter(new java.io.FileWriter(
        	new java.io.File(fileName_<%=cid%>)), format_<%=cid%>);
        output_<%=cid%>.write(doc_<%=cid%>);
        output_<%=cid%>.close();
        
        currentRowCount_<%=cid %> = 0;
        currentFileCount_<%=cid %>++;
        doc_<%=cid%>  = org.dom4j.DocumentHelper.createDocument();
    	needRoot_<%=cid%>  = true;
    	fileName_<%=cid%> = file_<%=cid%> + currentFileCount_<%=cid %> + ".xml";
    	groupRootList_<%=cid%>.clear();
}
<%
				}
			}
		}
	}
}
%>