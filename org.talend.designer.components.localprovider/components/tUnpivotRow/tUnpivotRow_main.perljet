<%@ jet
imports="
    org.talend.core.model.process.INode
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.process.IConnection
    org.talend.core.model.metadata.IMetadataTable
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.List
    java.util.Map
    java.util.ArrayList
    org.talend.commons.utils.StringUtils
"
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

IMetadataTable inMetadata = null;
IConnection inConnection = null;
String inputRowName = new String("input_row");

List<? extends IConnection> incomingConnections = node.getIncomingConnections();
if (incomingConnections != null && !incomingConnections.isEmpty()) {
    inConnection = incomingConnections.get(0);
    inMetadata = inConnection.getMetadataTable();
    inputRowName = inConnection.getName();
}

String concatenateDelimiter = ElementParameterParser.getValue(
    node,
    "__CONCATENATE_DELIMITER__"
);

List<Map<String, String>> rowKeys =
    (List<Map<String,String>>)ElementParameterParser.getObjectValue(
        node,
        "__ROW_KEYS__"
    );

if (inMetadata != null) {

    List<String> pivotKeyIndexesArray = new ArrayList<String>();
    List<String> rowKeyIndexesArray = new ArrayList<String>();

    int j = 0;
    for (IMetadataColumn column: inMetadata.getListColumns()) {
        boolean isRowKey = false;
        for(int i=0; i<rowKeys.size(); i++) {
            Map<String, String> rowKey = rowKeys.get(i);
            if (column.getLabel().equals(rowKey.get("COLUMN"))) {
                isRowKey = true;
            }
        }

        if (isRowKey) {
            rowKeyIndexesArray.add(Integer.toString(j));
        }
        else {
            pivotKeyIndexesArray.add(Integer.toString(j));
        }

        j++;
    }


    String pivotKeyIndexesString = StringUtils.join(
        pivotKeyIndexesArray.toArray(),
        ", "
    );
    String rowKeyIndexesString = StringUtils.join(
        rowKeyIndexesArray.toArray(),
        ", "
    );
%>
$nb_line_input_<%=cid %>++;

my $row_key = join(<%=concatenateDelimiter%>, @$<%=inputRowName%>[<%=rowKeyIndexesString%>]);
my @pivot_values = @$<%=inputRowName%>[<%=pivotKeyIndexesString%>];
my $pivot_index = -1;

foreach my $pivot_value (@pivot_values) {
    $pivot_index++;
    $nb_line_output_<%=cid %>++;

    my $<%=cid%> = [
        $row_key,
        $pivot_colnames_<%=cid%>[$pivot_index],
        $pivot_value
    ];
<%
}
%>
