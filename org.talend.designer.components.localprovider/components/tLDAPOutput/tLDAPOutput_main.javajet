<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.Map
    java.util.List
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn 
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.IConnectionCategory
"
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	
	String insertMode =ElementParameterParser.getValue(node, "__INSERT_MODE__");
	String separatorText=ElementParameterParser.getValue(node, "__MULTI_VALUE_SEPARATOR__");
	String dieOnError = ElementParameterParser.getValue(node, "__DIE_ON_ERROR__");
	String dnColumnName = ElementParameterParser.getValue(node, "__DN_COLUMN_NAME__");
	boolean useAttributeOptions = "true".equals(ElementParameterParser.getValue(node, "__USE_ATTRIBUTE_OPTIONS__"));
	List<Map<String, String>> attributeOptions = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__ATTRIBUTE_OPTIONS__");
	String separator = separatorText;
	if(("\"|\"").equals(separatorText)){
		separator="\"\\\\|\"";
	}
	
	String rejectConnName = null;
	List<? extends IConnection> rejectConns = node.getOutgoingConnections("REJECT");
	if(rejectConns != null && rejectConns.size() > 0) {
	    IConnection rejectConn = rejectConns.get(0);
	    rejectConnName = rejectConn.getName();
	}
	List<IMetadataColumn> rejectColumnList = null;
	IMetadataTable metadataTable = node.getMetadataFromConnector("REJECT");
	if(metadataTable != null) {
	    rejectColumnList = metadataTable.getListColumns();	    
	}
	
	List<? extends IConnection> outgoingConns = node.getOutgoingSortedConnections();
    for(IConnection conn : outgoingConns) {
        if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
%>
        <%=conn.getName() %> = null;            
<%      }
    }
    
	String cid = node.getUniqueName();
	List<IMetadataTable> metadatas = node.getMetadataList();
	if ((metadatas!=null)&&(metadatas.size()>0)) {
		IMetadataTable metadata = metadatas.get(0);
		List<IMetadataColumn> columnList = metadata.getListColumns();
		
    	List< ? extends IConnection> conns = node.getIncomingConnections();
    	for(IConnection conn:conns){
    		if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.MAIN)) {
     			String firstConnName = conn.getName();
    			if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {	
%>
					javax.naming.directory.Attributes entry_<%=cid%> = new javax.naming.directory.BasicAttributes(true);
					whetherReject_<%=cid%> = false;
					String dn_<%=cid%> = <%=conn.getName() %>.<%=dnColumnName%>.trim();
<%
					for(IMetadataColumn column:columnList){		
						if (dnColumnName.equals(column.getLabel().trim())) {
							continue;
						}
						if(!("DELETE").equals(insertMode) && !("UPDATA").equals(insertMode)){
%>
	if(<%=conn.getName() %>.<%=column.getLabel()%> != null){
    	if(<%=conn.getName() %>.<%=column.getLabel()%>.trim().indexOf(<%=separatorText%>)>0){
    		javax.naming.directory.Attribute attr_<%=cid%> = new javax.naming.directory.BasicAttribute("<%=column.getOriginalDbColumnName()%>");
    		for(String value_<%=cid%> : <%=conn.getName() %>.<%=column.getLabel()%>.trim().split(<%=separator%>)){
    			attr_<%=cid%>.add(value_<%=cid%>);    		
    		}
    		entry_<%=cid%>.put(attr_<%=cid%>);
    	}else{
    		entry_<%=cid%>.put("<%=column.getOriginalDbColumnName()%>",<%=conn.getName() %>.<%=column.getLabel()%>);
    	}
    }
<%
						}
					}
%>
	try{
<%
					if(("ADD").equals(insertMode)){
%>
						ctx_<%=cid%>.modifyAttributes(dn_<%=cid%>, javax.naming.directory.DirContext.ADD_ATTRIBUTE, entry_<%=cid%>);
<%
					} else if(("INSERT").equals(insertMode)){
%> 
						ctx_<%=cid%>.createSubcontext(dn_<%=cid%>, entry_<%=cid%>);
<%
					}else if(("UPDATA").equals(insertMode)){
					if(useAttributeOptions && attributeOptions.size() > 0){
					//7631: tLDAPOutput: Add a attributes options parameter 
%>
						List<javax.naming.directory.ModificationItem> mfItem_<%=cid%> = new java.util.ArrayList();
						List<javax.naming.directory.Attribute> forUpate<%=cid%> = new java.util.ArrayList();
<%
					  	for (int i=0; i<attributeOptions.size(); i++) {
					  		Map<String, String> row  = attributeOptions.get(i);
					  		String option = row.get("ATTRIBUTE_OPTION").trim();
					  		String name = row.get("ATTRIBUTE_NAME").trim();
					  			if (!"REMOVE_ATTRIBUTE".equals(option)) {
%>
							    	for(String value_<%=cid%> : <%=conn.getName() %>.<%=name%>.trim().split(<%=separator%>)){
							    			javax.naming.directory.Attribute attrForUpate_<%=cid%> = new javax.naming.directory.BasicAttribute("<%=name%>", value_<%=cid%>); 		
							    			forUpate<%=cid%>.add(attrForUpate_<%=cid%>);
							    	}
<%
  								} else {
%>
							  		javax.naming.directory.Attribute attrForUpate_<%=cid%>= new javax.naming.directory.BasicAttribute("<%=name%>");
							  		forUpate<%=cid%>.add(attrForUpate_<%=cid%>);
<%
  								}
  								if ("ADD".equals(option)) {
%>
							  		for (javax.naming.directory.Attribute attrForUpate_<%=cid%> : forUpate<%=cid%>) {
							  			mfItem_<%=cid%>.add(new javax.naming.directory.ModificationItem(javax.naming.directory.DirContext.ADD_ATTRIBUTE, attrForUpate_<%=cid%>));
							  		}
<%
  								} else if ("REPLACE".equals(option)) {
%>
							    	for (javax.naming.directory.Attribute attrForUpate_<%=cid%> : forUpate<%=cid%>) {
							  			mfItem_<%=cid%>.add(new javax.naming.directory.ModificationItem(javax.naming.directory.DirContext.REPLACE_ATTRIBUTE, attrForUpate_<%=cid%>));
							  		}
<%
  								} else if ("REMOVE_VALUE".equals(option)){
%>
									for (javax.naming.directory.Attribute attrForUpate_<%=cid%> : forUpate<%=cid%>) {
										mfItem_<%=cid%>.add(new javax.naming.directory.ModificationItem(javax.naming.directory.DirContext.REMOVE_ATTRIBUTE, attrForUpate_<%=cid%>));
									}
<%
  								} else {
%>
							  	  for (javax.naming.directory.Attribute attrDelete_<%=cid%> : forUpate<%=cid%>) {
							  			mfItem_<%=cid%>.add(new javax.naming.directory.ModificationItem(javax.naming.directory.DirContext.REMOVE_ATTRIBUTE, attrDelete_<%=cid%>));
							  		}
<%
  								}
  						}  
%>
  						ctx_<%=cid%>.modifyAttributes(dn_<%=cid%>,mfItem_<%=cid%>.toArray(new javax.naming.directory.ModificationItem[0]));
<%
  	//7631
					}else{
%>
						ctx_<%=cid%>.modifyAttributes(dn_<%=cid%>, javax.naming.directory.DirContext.REPLACE_ATTRIBUTE, entry_<%=cid%>);
<%
					}
					}else if(("DELETE").equals(insertMode)){
%>
						ctx_<%=cid%>.destroySubcontext(dn_<%=cid%>);
<%
					}else if(("INSERT_UPDATA").equals(insertMode)){
%>
						boolean found = false;
						try{
							ctx_<%=cid%>.getAttributes(dn_<%=cid%>);
							found = true;
						}catch(javax.naming.NameNotFoundException nfEx_<%=cid%>)
						{
							ctx_<%=cid%>.createSubcontext(dn_<%=cid%>, entry_<%=cid%>);
						}
						if(found)
						{
							ctx_<%=cid%>.modifyAttributes(dn_<%=cid%>, javax.naming.directory.DirContext.REPLACE_ATTRIBUTE, entry_<%=cid%>);
						}
<%
					}
%>
	}catch(Exception e){
        whetherReject_<%=cid%> = true;
<%
        if (("true").equals(dieOnError)) {
%>
        throw(e);
<%
        } else {
            if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
%>
        <%=rejectConnName %> = new <%=rejectConnName %>Struct();
<%
                for(IMetadataColumn column : columnList) {
%>
        <%=rejectConnName%>.<%=column.getLabel()%> = <%=firstConnName%>.<%=column.getLabel()%>;
<%
                }
%>
                <%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
<%
            } else {
%>
                System.err.print(e.getMessage());
<%
            }
        }
%>
    }
<%
    	if(outgoingConns != null && outgoingConns.size() > 0) {
%>
        if(!whetherReject_<%=cid%>) {
<%
            for(IConnection outgoingConn : outgoingConns) {
                if(rejectConnName == null || (rejectConnName != null && !outgoingConn.getName().equals(rejectConnName))) {
                    if(outgoingConn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
%>
			<%=outgoingConn.getName()%> = new <%=outgoingConn.getName()%>Struct();
<%
                        for(IMetadataColumn column : columnList) {
%>
            <%=outgoingConn.getName()%>.<%=column.getLabel()%> = <%=firstConnName%>.<%=column.getLabel()%>;
<% 
                        }
                    }
                }
            }
%>
        }
<%
    }
				}
			}
		}
	}
%>
