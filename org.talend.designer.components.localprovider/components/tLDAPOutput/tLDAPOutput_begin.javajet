<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn 
    org.talend.core.model.process.IConnection
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.process.IConnectionCategory
    java.util.List
" 
class="LDAPInput"
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	String baseDN=ElementParameterParser.getValue(node, "__BASEDN__");

	String connection = ElementParameterParser.getValue(node, "__CONNECTION__");
	String exConn= "conn_" + connection;
	String useExistingConn = ElementParameterParser.getValue(node, "__USE_EXISTING_CONNECTION__");
	String insertMode =ElementParameterParser.getValue(node, "__INSERT_MODE__");

if(("false").equals(useExistingConn)){
	String host=ElementParameterParser.getValue(node, "__HOST__");
	String port=ElementParameterParser.getValue(node, "__PORT__");
	String protocol=ElementParameterParser.getValue(node, "__PROTOCOL__");
	String advanced=ElementParameterParser.getValue(node, "__ADVANCEDCA__");
	String storepath=ElementParameterParser.getValue(node, "__STORECA__");
	String storepwd = ElementParameterParser.getValue(node, "__STORECAPWD__");
	boolean alwaysTrust = ("true").equals(ElementParameterParser.getValue(node, "__ALWAYS_TRUST__"));
	String user =ElementParameterParser.getValue(node, "__USER__");
	String passwd =ElementParameterParser.getValue(node, "__PASS__");
	String referrals=ElementParameterParser.getValue(node, "__REFERRALS__");
	String aliases=ElementParameterParser.getValue(node, "__ALIASES__");
%>
	java.util.Hashtable env_<%=cid%> = new java.util.Hashtable();
	env_<%=cid%>.put(javax.naming.Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.ldap.LdapCtxFactory");
    env_<%=cid%>.put(javax.naming.Context.SECURITY_AUTHENTICATION, "simple");// "none","simple","strong"
    env_<%=cid%>.put(javax.naming.Context.SECURITY_PRINCIPAL, <%=user%>);
    env_<%=cid%>.put(javax.naming.Context.SECURITY_CREDENTIALS, <%=passwd%>);
	env_<%=cid%>.put(javax.naming.Context.REFERRAL, "<%=referrals%>");
	env_<%=cid%>.put("java.naming.ldap.derefAliases","<%=aliases%>");
<%
	if(baseDN == null || baseDN.length()<=2){
%>
	env_<%=cid%>.put(javax.naming.Context.PROVIDER_URL, "ldap://"+<%=host%>+":"+<%=port%>);
<%
	}else{
%>
	env_<%=cid%>.put(javax.naming.Context.PROVIDER_URL, "ldap://"+<%=host%>+":"+<%=port%>+"/"+<%=baseDN%>);
<%
	}
    if(("LDAPS").equals(protocol)){
%>
	env_<%=cid%>.put(javax.naming.Context.SECURITY_PROTOCOL, "ssl");
	env_<%=cid%>.put("java.naming.ldap.factory.socket", "talend.ssl.AdvancedSocketFactory");
<%
	}
	if(("LDAPS").equals(protocol) || ("TLS").equals(protocol)){
		if(("true").equals(advanced)){
			if(alwaysTrust) {
%>
	talend.ssl.AdvancedSocketFactory.alwaysTrust();
<%
			} else {
%>
	talend.ssl.AdvancedSocketFactory.setCertStorePath(<%=storepath%>);
<%
				if(storepwd !=null && storepwd.length() !=0 ){%>
	talend.ssl.AdvancedSocketFactory.setCertStorePassword(<%=storepwd %>);
<%
				}
			}
		}
    }
%>
    javax.naming.ldap.InitialLdapContext ctx_<%=cid%> = new javax.naming.ldap.InitialLdapContext(env_<%=cid%>, null);
<%
	if(("TLS").equals(protocol)){
%>
	javax.naming.ldap.StartTlsRequest tldsReq_<%=cid%> = new javax.naming.ldap.StartTlsRequest();
    javax.naming.ldap.StartTlsResponse tls_<%=cid%> =(javax.naming.ldap.StartTlsResponse)ctx_<%=cid%>.extendedOperation(tldsReq_<%=cid%>);
    javax.net.ssl.SSLSession session_<%=cid%> = tls_<%=cid%>.negotiate((javax.net.ssl.SSLSocketFactory)talend.ssl.AdvancedSocketFactory.getDefault());
<%
	}
}else{
%>
	javax.naming.ldap.InitialLdapContext ctx_<%=cid%> = (javax.naming.ldap.InitialLdapContext)globalMap.get("<%=exConn%>");
<%
}
%>
boolean whetherReject_<%=cid%> = false;
int nb_line_<%=cid %> = 0;
<%	if(("DELETE").equals(insertMode)){ %>
		talend.ssl.ldap.LdapAction ldap_<%=cid %> = new talend.ssl.ldap.LdapAction();
<%	}%>
	//check is base64 begin	
	class CheckBase64_<%=cid%>{
		public void checkByteArray(boolean isBase64,String columnName,javax.naming.directory.Attributes entry,byte[] bytearray) throws com.sun.org.apache.xml.internal.security.exceptions.Base64DecodingException{
			if(isBase64){
				entry.put(columnName,com.sun.org.apache.xml.internal.security.utils.Base64.decode(bytearray));
			}
			else{
				entry.put(columnName,bytearray);
			}
		}
		
		public void checkString(boolean isBase64,String columnName,javax.naming.directory.Attributes entry,String inputValue) throws com.sun.org.apache.xml.internal.security.exceptions.Base64DecodingException{
			if(isBase64){
				entry.put(columnName,com.sun.org.apache.xml.internal.security.utils.Base64.decode(inputValue));
			}
			else{
				entry.put(columnName,inputValue);
			}
		}
		
		public void addToAttribute(boolean isBase64,javax.naming.directory.Attribute attr,String inputValue) throws com.sun.org.apache.xml.internal.security.exceptions.Base64DecodingException{
			if(isBase64){
  				attr.add(com.sun.org.apache.xml.internal.security.utils.Base64.decode(inputValue));
			}else{
				attr.add(inputValue);
			}
		}
		
		public void checkByteArrayUpdate(boolean isBase64,String columnName,List<javax.naming.directory.Attribute> forUpate,byte[] bytearray) throws com.sun.org.apache.xml.internal.security.exceptions.Base64DecodingException{
			if(isBase64){
				forUpate.add(new javax.naming.directory.BasicAttribute(columnName, com.sun.org.apache.xml.internal.security.utils.Base64.decode(bytearray)));
			}else{
				forUpate.add(new javax.naming.directory.BasicAttribute(columnName, bytearray));
			}
		}
		public void checkStringUpdate(boolean isBase64,String columnName,List<javax.naming.directory.Attribute> forUpate,String inputValue) throws com.sun.org.apache.xml.internal.security.exceptions.Base64DecodingException{
			if(isBase64){
				forUpate.add(new javax.naming.directory.BasicAttribute(columnName, com.sun.org.apache.xml.internal.security.utils.Base64.decode(inputValue)));
			}else{
				forUpate.add(new javax.naming.directory.BasicAttribute(columnName, inputValue));
			}
		}
		
	}
	CheckBase64_<%=cid%> base64_<%=cid%> = new CheckBase64_<%=cid%>();
	//check is base64 end