<%@ jet 
imports="
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.process.INode
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.ArrayList
    java.util.List
    java.util.Map
"
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

boolean printResponse = ElementParameterParser.getValue(node,"__PRINT__").equals("true");

String uri = ElementParameterParser.getValue(node, "__URI__");

String directory = ElementParameterParser.getValue(node, "__DIRECTORY__");
String filename = ElementParameterParser.getValue(node, "__FILENAME__");

boolean needAuth = ElementParameterParser.getValue(node,"__NEED_AUTH__").equals("true");
String username = ElementParameterParser.getValue(node,"__AUTH_USERNAME__");
String password = ElementParameterParser.getValue(node,"__AUTH_PASSWORD__");

String timeout = ElementParameterParser.getValue(node,"__TIMEOUT__");
%>

<%
	/* The following is post upload part */
    boolean uploadFile = ElementParameterParser.getValue(node,"__UPLOAD__").equals("true");
    
	List<Map<String, String>> commonParams = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__COMMON_PARAMS__");
	List<Map<String, String>> fileParams = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__FILE_PARAMS__");
	List<String> varPartList = new ArrayList<String>();
%>    
    org.apache.commons.httpclient.HttpClient client_<%=cid %> = new org.apache.commons.httpclient.HttpClient();
    client_<%=cid %>.getHttpConnectionManager().getParams().setConnectionTimeout(<%=timeout %>);
    org.apache.commons.httpclient.methods.PostMethod post_<%=cid %> = new org.apache.commons.httpclient.methods.PostMethod(<%=uri %>);		

<%if(needAuth){%>
    org.apache.commons.httpclient.Credentials creds_<%=cid %> = new org.apache.commons.httpclient.UsernamePasswordCredentials(<%=username %>, <%=password %>);
    client_<%=cid %>.getState().setCredentials(org.apache.commons.httpclient.auth.AuthScope.ANY, creds_<%=cid %>);
<%}%>

<%	//common string parameter part	
	int i = 0;
	for(Map<String, String> param : commonParams){
		i++;
		String name = param.get("COMMON_PARAMS_NAME");
		String value = param.get("COMMON_PARAMS_VALUE");
		varPartList.add("common_" + i + "_" + cid);
%>
	org.apache.commons.httpclient.methods.multipart.StringPart common_<%=i %>_<%=cid %> = new org.apache.commons.httpclient.methods.multipart.StringPart(<%=name %>, <%=value %>);
<%
	}
%>

<%	//file parameter part
	if(uploadFile){
	int j = 0;	
	for(Map<String, String> param : fileParams){
		String name = param.get("FILE_PARAMS_NAME");
		String value = param.get("FILE_PARAMS_VALUE");
		varPartList.add("file_" + j + "_" + cid);
%>
	org.apache.commons.httpclient.methods.multipart.FilePart file_<%=j %>_<%=cid %>  = new org.apache.commons.httpclient.methods.multipart.FilePart(<%=name %>, new java.io.File(<%=value %>));	
<%
	}
	}
%>
    org.apache.commons.httpclient.methods.multipart.Part[] parts_<%=cid %> = new org.apache.commons.httpclient.methods.multipart.Part[]{<%for(String var: varPartList){%><%=var %>,<%}%>};		
    
    post_<%=cid %>.setRequestEntity(new org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity(parts_<%=cid %>, post_<%=cid %>.getParams()));					
    			
    //here excute the post the method
    client_<%=cid %>.executeMethod(post_<%=cid %>);
        
<%  if(printResponse){%>	
	
	System.out.println("Status Line: " + post_<%=cid %>.getStatusLine());
	
	//write out the response headers
	System.out.println("*** Response Header Part ***");	
	org.apache.commons.httpclient.Header[] responseHeaders_<%=cid %> = post_<%=cid %>.getResponseHeaders();	
	for (int i=0; i<responseHeaders_<%=cid %>.length; i++){
    	System.out.print(responseHeaders_<%=cid %>[i]);
	}
<%  }%>
    
	java.io.InputStream in_<%=cid %> = post_<%=cid %>.getResponseBodyAsStream();

	String fileName_<%=cid %> = <%=filename%>;
	
	//open directory
	java.io.File dir_<%=cid %> = new java.io.File(<%=directory %>);
	
	java.net.URL url_<%=cid %> = new java.net.URL(<%=uri %>);
	
	//open file dans la directory
	if (fileName_<%=cid %>.compareTo("")==0) {
		fileName_<%=cid %> = url_<%=cid %>.getFile();
		if (fileName_<%=cid %>.compareTo("")==0) {
			fileName_<%=cid %> = "defaultfilename.txt";
		}
	}
	java.io.File file_<%=cid%> = new java.io.File(dir_<%=cid %>,fileName_<%=cid %>);
	file_<%=cid%>.getParentFile().mkdirs();
	java.io.FileOutputStream out_<%=cid %> = new java.io.FileOutputStream(file_<%=cid%>);

    byte[] buffer_<%=cid %> = new byte[1024];
    int count_<%=cid %> = 0;
    while ((count_<%=cid %> = in_<%=cid %>.read(buffer_<%=cid %>)) > 0) {
        out_<%=cid %>.write(buffer_<%=cid %>, 0, count_<%=cid %>);
    }
    
    // close opened object
    in_<%=cid %>.close();
    out_<%=cid %>.close();

	post_<%=cid %>.releaseConnection();