<%@ jet 
imports="
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.process.INode
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.ArrayList
    java.util.List
    java.util.Map
"
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

String protocol = ElementParameterParser.getValue(node,"__PROTO__");
boolean bUseCache = "true".equals(ElementParameterParser.getValue(node, "__USE_CACHE__"));
String directory = ElementParameterParser.getValue(node, "__DIRECTORY__");
boolean bMakeDirs = "true".equals(ElementParameterParser.getValue(node, "__MAKEDIRS__"));
String filename = ElementParameterParser.getValue(node, "__FILENAME__");
String dieOnError = ElementParameterParser.getValue(node,"__DIE_ON_ERROR__");
%>
java.io.InputStream retIS_<%=cid%> = null;
<%
if(("http").equals(protocol) || ("https").equals(protocol)){

  String uri = ElementParameterParser.getValue(node, "__URI__");
  boolean post = ("true").equals(ElementParameterParser.getValue(node,"__POST__"));
  boolean printResponse = ("true").equals(ElementParameterParser.getValue(node,"__PRINT__"));
  boolean needAuth = ("true").equals(ElementParameterParser.getValue(node,"__NEED_AUTH__"));
  String username = ElementParameterParser.getValue(node,"__AUTH_USERNAME__");
  String password = ElementParameterParser.getValue(node,"__AUTH_PASSWORD__");
  String timeout = ElementParameterParser.getValue(node,"__TIMEOUT__");
  boolean redirect = "true".equals(ElementParameterParser.getValue(node, "__REDIRECT__"));

  boolean useProxy = ("true").equals(ElementParameterParser.getValue(node,"__USE_PROXY__"));
  String proxyHost = ElementParameterParser.getValue(node,"__PROXY_HOST__");
  String proxyPort = ElementParameterParser.getValue(node,"__PROXY_PORT__");
  String proxyUser = ElementParameterParser.getValue(node,"__PROXY_USERNAME__");
  String proxyPassword = ElementParameterParser.getValue(node,"__PROXY_PASSWORD__");
  boolean useProxyNTLM = ("true").equals(ElementParameterParser.getValue(node,"__PROXY_NTLM__"));
  String proxyDomain = ElementParameterParser.getValue(node,"__PROXY_DOMAIN__");
  if ("https".equals(protocol)){
%>
    class MyProtocolSocketFactory implements org.apache.commons.httpclient.protocol.ProtocolSocketFactory {
      private javax.net.ssl.SSLContext sslcontext = null;
      private javax.net.ssl.SSLContext createSSLContext() {
          javax.net.ssl.SSLContext sslcontext = null;
          try {
              sslcontext = javax.net.ssl.SSLContext.getInstance("SSL");
              sslcontext.init(null, new javax.net.ssl.TrustManager[] { new TrustAnyTrustManager() },
                      new java.security.SecureRandom());
          } catch (java.security.NoSuchAlgorithmException e) {
              e.printStackTrace();
          } catch (java.security.KeyManagementException e) {
              e.printStackTrace();
          }
          return sslcontext;
      }
      private javax.net.ssl.SSLContext getSSLContext() {
          if (this.sslcontext == null) {
              this.sslcontext = createSSLContext();
          }
          return this.sslcontext;
      }
      public java.net.Socket createSocket(java.net.Socket socket, String host, int port, boolean autoClose)
              throws java.io.IOException, java.net.UnknownHostException {
          return getSSLContext().getSocketFactory().createSocket(socket, host, port, autoClose);
      }
      public java.net.Socket createSocket(String host, int port) throws java.io.IOException, java.net.UnknownHostException {
          return getSSLContext().getSocketFactory().createSocket(host, port);
      }
      public java.net.Socket createSocket(String host, int port, java.net.InetAddress clientHost, int clientPort)
              throws java.io.IOException, java.net.UnknownHostException {
          return getSSLContext().getSocketFactory().createSocket(host, port, clientHost, clientPort);
      }
      public java.net.Socket createSocket(String host, int port, java.net.InetAddress localAddress, int localPort,
              org.apache.commons.httpclient.params.HttpConnectionParams params) throws java.io.IOException,
              java.net.UnknownHostException, org.apache.commons.httpclient.ConnectTimeoutException {
          if (params == null) {
              throw new IllegalArgumentException("Parameters may not be null");
          }
          int timeout = params.getConnectionTimeout();
          javax.net.SocketFactory socketfactory = getSSLContext().getSocketFactory();
          if (timeout == 0) {
              return socketfactory.createSocket(host, port, localAddress, localPort);
          } else {
              java.net.Socket socket = socketfactory.createSocket();
              java.net.SocketAddress localaddr = new java.net.InetSocketAddress(localAddress, localPort);
              java.net.SocketAddress remoteaddr = new java.net.InetSocketAddress(host, port);
              socket.bind(localaddr);
              socket.connect(remoteaddr, timeout);
              return socket;
          }
      }
      class TrustAnyTrustManager implements javax.net.ssl.X509TrustManager {
          public void checkClientTrusted(java.security.cert.X509Certificate[] chain, String authType)
                  throws java.security.cert.CertificateException {
          }
          public void checkServerTrusted(java.security.cert.X509Certificate[] chain, String authType)
                  throws java.security.cert.CertificateException {
          }
          public java.security.cert.X509Certificate[] getAcceptedIssuers() {
              return new java.security.cert.X509Certificate[] {};
          }
      }
    }
    if ((<%=uri %>).toLowerCase().startsWith("https://")){
      org.apache.commons.httpclient.protocol.Protocol myhttps = new org.apache.commons.httpclient.protocol.Protocol("https", new MyProtocolSocketFactory(), 443);
      org.apache.commons.httpclient.protocol.Protocol.registerProtocol("https", myhttps);
    }
  <%}%>
  org.apache.commons.httpclient.HttpClient client_<%=cid %> = new org.apache.commons.httpclient.HttpClient();  
  client_<%=cid %>.getHttpConnectionManager().getParams().setConnectionTimeout(<%=timeout %>);
  
  <%if(useProxy){%> 
    client_<%=cid %>.getHostConfiguration().setProxy(<%=proxyHost %>, Integer.parseInt(<%=proxyPort%>));
    <%if(useProxyNTLM){%>
      client_<%=cid %>.getState().setProxyCredentials(
        new org.apache.commons.httpclient.auth.AuthScope( <%=proxyHost %>, Integer.parseInt(<%=proxyPort%>), null ),
          new org.apache.commons.httpclient.NTCredentials( <%=proxyUser %>,
		    <%=proxyPassword %>, <%=proxyHost %>, <%=proxyDomain %> ));
    <%}else{%>
      client_<%=cid %>.getState().setProxyCredentials(
  	    new org.apache.commons.httpclient.auth.AuthScope(<%=proxyHost %>, Integer.parseInt(<%=proxyPort%>), null),
    	  new org.apache.commons.httpclient.UsernamePasswordCredentials(<%=proxyUser %>, <%=proxyPassword %>));
    <%}
  }%>

  <%if(needAuth){
    if ((!useProxy) && useProxyNTLM && (!"".equals(proxyDomain))){
  %>
      client_<%=cid %>.getState().setCredentials(org.apache.commons.httpclient.auth.AuthScope.ANY, new org.apache.commons.httpclient.NTCredentials(<%=username %>, <%=password %>, new java.net.URL(<%=uri%>).getHost(), <%=proxyDomain%>));
    <%} else{%>
      client_<%=cid %>.getState().setCredentials(org.apache.commons.httpclient.auth.AuthScope.ANY, new org.apache.commons.httpclient.UsernamePasswordCredentials(<%=username %>, <%=password %>));
    <%}
  }%>

  <%if(post){%>
    org.apache.commons.httpclient.methods.PostMethod method_<%=cid%> = new org.apache.commons.httpclient.methods.PostMethod(<%=uri %>);
    <%
    List<Map<String, String>> commonParams = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__COMMON_PARAMS__");	
    List<String> varPartList = new ArrayList<String>();	//common string parameter part	
    int i = 0;
    for(Map<String, String> param : commonParams){
      i++;
      String name = param.get("COMMON_PARAMS_NAME");
      String value = param.get("COMMON_PARAMS_VALUE");
      varPartList.add("common_" + i + "_" + cid);
      %>
      org.apache.commons.httpclient.methods.multipart.StringPart common_<%=i %>_<%=cid %> = new org.apache.commons.httpclient.methods.multipart.StringPart(<%=name %>, <%=value %>);
      <%
    }
    
    if ("true".equals(ElementParameterParser.getValue(node,"__UPLOAD__"))){
      List<Map<String, String>> fileParams = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__FILE_PARAMS__");
      int j = 0;
      for(Map<String, String> param : fileParams){
        j++;
        String name = param.get("FILE_PARAMS_NAME");
        String value = param.get("FILE_PARAMS_VALUE");
        varPartList.add("file_" + j + "_" + cid);
        %>
        org.apache.commons.httpclient.methods.multipart.FilePart file_<%=j %>_<%=cid %>  = new org.apache.commons.httpclient.methods.multipart.FilePart(<%=name %>, new java.io.File(<%=value %>));  
        <%
      }
    }
    %>
    
    org.apache.commons.httpclient.methods.multipart.Part[] parts_<%=cid %> = new org.apache.commons.httpclient.methods.multipart.Part[]{<%for(String var: varPartList){%><%=var %>,<%}%>};    
    method_<%=cid%>.setRequestEntity(new org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity(parts_<%=cid %>, method_<%=cid%>.getParams()));          
  <%} else{%>
    org.apache.commons.httpclient.methods.GetMethod method_<%=cid%> = new org.apache.commons.httpclient.methods.GetMethod(<%=uri %>);
  <%}%>
   
	boolean isContinue = true;
	int status_<%=cid%>;
	String finalURL_<%=cid%> = <%=uri%>;
  try{
  
<%if(redirect && post){%>
	//Bug13155, add support of redirection
	boolean redirect_<%=cid%> = true;
  	while(redirect_<%=cid%>){
    	status_<%=cid%> = client_<%=cid %>.executeMethod(method_<%=cid%>);
  		if((status_<%=cid%> == org.apache.commons.httpclient.HttpStatus.SC_MOVED_TEMPORARILY) || (status_<%=cid%> == org.apache.commons.httpclient.HttpStatus.SC_MOVED_PERMANENTLY) || (status_<%=cid%> == org.apache.commons.httpclient.HttpStatus.SC_SEE_OTHER) || (status_<%=cid%> == org.apache.commons.httpclient.HttpStatus.SC_TEMPORARY_REDIRECT)){
  			if(method_<%=cid%>.getResponseHeader("location").getValue().substring(0, 4).equals("http")){
  				method_<%=cid%>.releaseConnection();
  				method_<%=cid%> = new org.apache.commons.httpclient.methods.PostMethod(method_<%=cid%>.getResponseHeader("location").getValue());
  			}else{
	  			method_<%=cid%>.setURI(new org.apache.commons.httpclient.URI("/" + method_<%=cid%>.getResponseHeader("location").getValue(), false));
  			}
  			System.out.println("Redirect to: " +method_<%=cid%>.getURI());
  			finalURL_<%=cid%> = method_<%=cid%>.getURI().toString();
  		}else if(status_<%=cid%> == org.apache.commons.httpclient.HttpStatus.SC_OK){
  			redirect_<%=cid%> = false;
  		}else{
			throw new Exception("Method failed: " + method_<%=cid%>.getStatusLine());
  		}
  	}
<%}else{%>
    status_<%=cid%>  = client_<%=cid %>.executeMethod(method_<%=cid%>);     
    if (status_<%=cid%> != org.apache.commons.httpclient.HttpStatus.SC_OK) {      
      throw new Exception("Method failed: " + method_<%=cid%>.getStatusLine());
    }
<%}%>
  }catch(Exception e){
    <% if(("true").equals(dieOnError)){%>
      throw(e);
    <% }else{%>   
      System.err.println("There is an exception on: " + <%=uri %>);
      e.printStackTrace();
      System.out.println("\r\n");
      isContinue = false;
    <%}%>
  }
  
  if (isContinue){   
    <%if(printResponse){%>
      System.out.println("Status Line: " + method_<%=cid%>.getStatusLine());  
      //write out the response headers
      System.out.println("*** Response Header ***");  
      org.apache.commons.httpclient.Header[] responseHeaders_<%=cid %> = method_<%=cid%>.getResponseHeaders();  
  
      for (int i = 0; i < responseHeaders_<%=cid %>.length; i++){
        System.out.print(responseHeaders_<%=cid %>[i]);
      }
    <%}%>
    
    <%if (bUseCache){%>
      retIS_<%=cid%> = method_<%=cid%>.getResponseBodyAsStream();
    <%} else{%>
      java.io.InputStream in_<%=cid %> = method_<%=cid%>.getResponseBodyAsStream();
      String sDir_<%=cid%> = (<%=directory%>).trim();
      String fileName_<%=cid %> = (<%=filename%>).trim();    
  
      //open directory
      java.net.URL url_<%=cid %> = new java.net.URL(finalURL_<%=cid%>);
    
      String sURIPath_<%=cid%> = "";
      int iLastSlashIndex_<%=cid%> = 0;
      sURIPath_<%=cid%> = url_<%=cid %>.getFile();
      iLastSlashIndex_<%=cid%> = sURIPath_<%=cid%>.lastIndexOf("/");
      
      <%if (bMakeDirs){%>
        sDir_<%=cid%> = sDir_<%=cid%>.concat(iLastSlashIndex_<%=cid%> > 0 ? sURIPath_<%=cid%>.substring(0, iLastSlashIndex_<%=cid%>) : "");
      <%}%>
        
      //if not input file name, get the name from URI
      if ("".equals(fileName_<%=cid %>)) {      
        if (iLastSlashIndex_<%=cid%> > 0 && (!sURIPath_<%=cid%>.endsWith("/"))){
          fileName_<%=cid %> = sURIPath_<%=cid%>.substring(iLastSlashIndex_<%=cid%> + 1);
        } else{
          fileName_<%=cid %> = "defaultfilename.txt";
        }
      }
    
      java.io.File dir_<%=cid %> = new java.io.File(sDir_<%=cid%>);
    
      // pretreatment
      try{
        java.io.File test_file_<%=cid%> = new java.io.File(dir_<%=cid %>, fileName_<%=cid %>);
        test_file_<%=cid%>.getParentFile().mkdirs();
        if (test_file_<%=cid%>.createNewFile()){
          test_file_<%=cid%>.delete();
        }
      } catch(Exception e){
        fileName_<%=cid %> = "defaultfilename.txt";
      }
  
      java.io.File file_<%=cid%> = new java.io.File(dir_<%=cid %>, fileName_<%=cid %>);
      file_<%=cid%>.getParentFile().mkdirs();    
      java.io.FileOutputStream out_<%=cid %> = new java.io.FileOutputStream(file_<%=cid%>);
      byte[] buffer_<%=cid %> = new byte[1024];
      int count_<%=cid %> = 0;
      while ((count_<%=cid %> = in_<%=cid %>.read(buffer_<%=cid %>)) > 0) {
        out_<%=cid %>.write(buffer_<%=cid %>, 0, count_<%=cid %>);
      }
      // close opened object
      in_<%=cid %>.close();   
      out_<%=cid %>.close(); 
      method_<%=cid%>.releaseConnection();
    <%}%>    
  }
<%
}

if(("ftp").equals(protocol)){

  String uri = ElementParameterParser.getValue(node, "__URI__");
  boolean useProxy = ("true").equals(ElementParameterParser.getValue(node,"__USE_PROXY__"));
  String proxyHost = ElementParameterParser.getValue(node,"__PROXY_HOST__");
  String proxyPort = ElementParameterParser.getValue(node,"__PROXY_PORT__");
  String proxyUser = ElementParameterParser.getValue(node,"__PROXY_USERNAME__");
  String proxyPassword = ElementParameterParser.getValue(node,"__PROXY_PASSWORD__");
  
  //The following part support the socks proxy for FTP and SFTP (Socks V4 or V5, they are all OK). 
  //And it can not work with the FTP proxy directly, only support the socks proxy.
  if(useProxy){
%>
    java.util.Properties props = System.getProperties();
    props.put("socksProxyPort", <%=proxyPort %>);
    props.put("socksProxyHost", <%=proxyHost %>);
    props.put("java.net.socks.username", <%=proxyUser %>);
    props.put("java.net.socks.password", <%=proxyPassword %>);        
<% }%>
  //open url stream
  java.net.URL url_<%=cid %> = new java.net.URL(<%=uri %>);    
  java.net.URLConnection conn_<%=cid %> = url_<%=cid %>.openConnection();
  
  <%if (bUseCache){%>
    retIS_<%=cid%> = conn_<%=cid %>.getInputStream();
  <%} else {%>
    java.io.DataInputStream in_<%=cid%> = null;
    String sDir_<%=cid%> = (<%=directory%>).trim();
    String fileName_<%=cid %> = (<%=filename%>).trim();
    
    String sURIPath_<%=cid%> = "";
    int iLastSlashIndex_<%=cid%> = 0;
    sURIPath_<%=cid%> = url_<%=cid %>.getFile();
    iLastSlashIndex_<%=cid%> = sURIPath_<%=cid%>.lastIndexOf("/");
      
    <%if (bMakeDirs){%>
      sDir_<%=cid%> = sDir_<%=cid%>.concat(iLastSlashIndex_<%=cid%> > 0 ? sURIPath_<%=cid%>.substring(0, iLastSlashIndex_<%=cid%>) : "");
    <%}%>

    //if not input file name, get the name from URI
    if ("".equals(fileName_<%=cid %>)) {      
      if (iLastSlashIndex_<%=cid%> > 0 && (!sURIPath_<%=cid%>.endsWith("/"))){
        fileName_<%=cid %> = sURIPath_<%=cid%>.substring(iLastSlashIndex_<%=cid%> + 1);
      } else{
        fileName_<%=cid %> = "defaultfilename.txt";
      }
    }
    
    java.io.File dir_<%=cid %> = new java.io.File(sDir_<%=cid%>);

    try{
      java.io.File testfile_<%=cid%> = new java.io.File(dir_<%=cid %>, fileName_<%=cid %>);
      testfile_<%=cid%>.getParentFile().mkdirs();
      if (testfile_<%=cid%>.createNewFile()){
        testfile_<%=cid%>.delete();
      }
    } catch(Exception e){
      fileName_<%=cid %> = "defaultfilename.txt";
    }
    
    // copy file
    try{
      in_<%=cid%> = new java.io.DataInputStream(conn_<%=cid %>.getInputStream());
    }catch(Exception e){
      <% if(("true").equals(dieOnError)){%>    
        throw(e);
      <%}else{%>
        System.err.println("There is an exception on: " + <%=uri %>);
        e.printStackTrace();
        System.out.println("\r\n");
        in_<%=cid%> = null;      
      <%}%>
    }  
   
    final java.io.DataOutputStream out_<%=cid%>= new java.io.DataOutputStream(new java.io.FileOutputStream(new java.io.File(dir_<%=cid %>, fileName_<%=cid %>)));

    if(in_<%=cid%>!=null){
      byte[] buffer_<%=cid%> = new byte[1024];
      int count_<%=cid%> = 0;
      while ((count_<%=cid%> = in_<%=cid%>.read(buffer_<%=cid%>)) > 0) {
        out_<%=cid%>.write(buffer_<%=cid%>, 0, count_<%=cid%>);
      }    
      in_<%=cid%>.close();
    }    
    out_<%=cid%>.close();
<%}
}

if(("smb").equals(protocol)){//1
  String srcurl = ElementParameterParser.getValue(node, "__SMB_URI__"); 
  String domain = ElementParameterParser.getValue(node,"__SMB_DOMAIN__");
  String username = ElementParameterParser.getValue(node,"__SMB_USERNAME__");
  String password = ElementParameterParser.getValue(node,"__SMB_PASSWORD__");
%>     
  String srcurl_<%=cid %> = <%=srcurl %>;
  String fileName_<%=cid %> = <%=filename %>;
  String username_<%=cid %> = <%=username %>;
  String password_<%=cid %> = <%=password %>;
    
  if (fileName_<%=cid %>.compareTo("") == 0) {
    fileName_<%=cid %> = srcurl_<%=cid %>.substring(srcurl_<%=cid %>.lastIndexOf("/"));
  }
  if (username_<%=cid %>.compareTo("") == 0) {
    username_<%=cid %> = null;
  }
  if (password_<%=cid %>.compareTo("") == 0) {
    password_<%=cid %> = null;
  }
  try {        
    jcifs.smb.NtlmPasswordAuthentication auth = new jcifs.smb.NtlmPasswordAuthentication(<%=domain %>, username_<%=cid %>, password_<%=cid %>);
    jcifs.smb.SmbFile sf = new jcifs.smb.SmbFile(srcurl_<%=cid %>, auth);
        
    <%if (bUseCache){%>
      retIS_<%=cid%> = new jcifs.smb.SmbFileInputStream(sf);
    <%} else {%>
      jcifs.smb.SmbFileInputStream in = new jcifs.smb.SmbFileInputStream(sf);
      java.io.File destFile = new java.io.File(<%=directory %>, fileName_<%=cid %>);
      destFile.getParentFile().mkdirs();
      java.io.OutputStream out = new java.io.FileOutputStream(destFile);

      byte[] buf = new byte[1024];
      int len;
      while ((len = in.read(buf)) > 0) {
        out.write(buf, 0, len);
      }
      in.close();
      out.close();
  } catch (java.io.FileNotFoundException ex) {
    System.err.println(ex.getMessage());
    <%}%> 
  } catch (Exception e){
    System.err.println(e.getMessage());
  }
<%}//1%>

globalMap.put("<%=cid%>_INPUT_STREAM", retIS_<%=cid%>);