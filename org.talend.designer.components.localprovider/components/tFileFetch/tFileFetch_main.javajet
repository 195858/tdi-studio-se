<%@ jet 
imports="
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.process.INode
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.ArrayList
    java.util.List
    java.util.Map
"
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

boolean postOption = ElementParameterParser.getValue(node,"__POST__").equals("true");

/* The following is download part */
if(!postOption) {

String directory = ElementParameterParser.getValue(node, "__DIRECTORY__");
String uri = ElementParameterParser.getValue(node, "__URI__");
String filename = ElementParameterParser.getValue(node, "__FILENAME__");

%>
	String fileName<%=cid %> = <%=filename%>;
	
	//open directory
	java.io.File dir<%=cid %> = new java.io.File(<%=directory %>);
        		
    // open url stream
	java.net.URL url<%=cid %> = new java.net.URL(<%=uri %>);
	java.net.URLConnection conn<%=cid %> = url<%=cid %>.openConnection();
	
	//open file dans la directory
	if (fileName<%=cid %>.compareTo("")==0) {
		fileName<%=cid %> = url<%=cid %>.getFile();
		if (fileName<%=cid %>.compareTo("")==0) {
			fileName<%=cid %> = "defaultfilename.txt";
		}
	}
    final java.io.DataOutputStream out<%=cid%>= new java.io.DataOutputStream(new java.io.FileOutputStream(new java.io.File(
            dir<%=cid %>, fileName<%=cid %>))); 
	// copy file
    final java.io.DataInputStream in<%=cid%> = new java.io.DataInputStream(conn<%=cid %>.getInputStream());
	//close opened object
    byte[] buffer<%=cid%> = new byte[1024];
    int count<%=cid%> = 0;
    while ((count<%=cid%> = in<%=cid%>.read(buffer<%=cid%>)) > 0) {
        out<%=cid%>.write(buffer<%=cid%>, 0, count<%=cid%>);
    }
    // close opened object
    in<%=cid%>.close();
    out<%=cid%>.close();
    
<%
	}else{
	/* The following is post upload part */
	
    String posturl = ElementParameterParser.getValue(node,"__POSTURL__");
    	
    boolean needAuth = ElementParameterParser.getValue(node,"__NEED_AUTH__").equals("true");
    String username = ElementParameterParser.getValue(node,"__AUTH_USERNAME__");
    String password = ElementParameterParser.getValue(node,"__AUTH_PASSWORD__");
    
    String timeout = ElementParameterParser.getValue(node,"__TIMEOUT__");
    
    boolean printResponse = ElementParameterParser.getValue(node,"__PRINT__").equals("true");
    
	List<Map<String, String>> commonParams = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__COMMON_PARAMS__");
	List<Map<String, String>> fileParams = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__FILE_PARAMS__");
	List<String> varPartList = new ArrayList<String>();
%>    
    org.apache.commons.httpclient.HttpClient client_<%=cid %> = new org.apache.commons.httpclient.HttpClient();
    client_<%=cid %>.getHttpConnectionManager().getParams().setConnectionTimeout(<%=timeout %>);
    org.apache.commons.httpclient.methods.PostMethod post_<%=cid %> = new org.apache.commons.httpclient.methods.PostMethod(<%=posturl %>);		

<%if(needAuth){%>
    org.apache.commons.httpclient.Credentials creds_<%=cid %> = new org.apache.commons.httpclient.UsernamePasswordCredentials(<%=username %>, <%=password %>);
    client_<%=cid %>.getState().setCredentials(org.apache.commons.httpclient.auth.AuthScope.ANY, creds_<%=cid %>);
<%}%>

<%	//common string parameter part	
	int i = 0;
	for(Map<String, String> param : commonParams){
		i++;
		String name = param.get("COMMON_PARAMS_NAME");
		String value = param.get("COMMON_PARAMS_VALUE");
		varPartList.add("common_" + i + "_" + cid);
%>
	org.apache.commons.httpclient.methods.multipart.StringPart common_<%=i %>_<%=cid %> = new org.apache.commons.httpclient.methods.multipart.StringPart(<%=name %>, <%=value %>);
<%
	}
%>

<%	//file parameter part
	int j = 0;	
	for(Map<String, String> param : fileParams){
		String name = param.get("FILE_PARAMS_NAME");
		String value = param.get("FILE_PARAMS_VALUE");
		varPartList.add("file_" + j + "_" + cid);
%>
	org.apache.commons.httpclient.methods.multipart.FilePart file_<%=j %>_<%=cid %>  = new org.apache.commons.httpclient.methods.multipart.FilePart(<%=name %>, new java.io.File(<%=value %>));	
<%
	}
%>
    org.apache.commons.httpclient.methods.multipart.Part[] parts_<%=cid %> = new org.apache.commons.httpclient.methods.multipart.Part[]{<%for(String var: varPartList){%><%=var %>,<%}%>};		
    
    post_<%=cid %>.setRequestEntity(new org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity(parts_<%=cid %>, post_<%=cid %>.getParams()));					
    			
    //here excute the post the method
    client_<%=cid %>.executeMethod(post_<%=cid %>);
<%  if(printResponse){%>
	String responseBody_<%=cid %> = "";
	String responseLine_<%=cid %> = "";

	java.io.BufferedReader br_<%=cid %> = 
	new java.io.BufferedReader(new java.io.InputStreamReader(post_<%=cid %>.getResponseBodyAsStream()));
	while ((responseLine_<%=cid %> = br_<%=cid %>.readLine()) != null) {
    responseBody_<%=cid %> += responseLine_<%=cid %> + "\n";
	}
	br_<%=cid %>.close();

	//write out the response headers
	System.out.println("*** Response ***");
	System.out.println("Status Line: " + post_<%=cid %>.getStatusLine());
	org.apache.commons.httpclient.Header[] responseHeaders_<%=cid %> = post_<%=cid %>.getResponseHeaders();
	for (int i=0; i<responseHeaders_<%=cid %>.length; i++){
    System.out.print(responseHeaders_<%=cid %>[i]);
	}

	//write out the response body
	System.out.println("*** Response Body ***");
	System.out.println(responseBody_<%=cid %>);
<%  }%>
	post_<%=cid %>.releaseConnection();
<%}%>