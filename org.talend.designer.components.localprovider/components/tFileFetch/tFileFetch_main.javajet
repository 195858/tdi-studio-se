<%@ jet 
imports="
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.process.INode
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.ArrayList
    java.util.List
    java.util.Map
"
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();


String protocol = ElementParameterParser.getValue(node,"__PROTO__");




String directory = ElementParameterParser.getValue(node, "__DIRECTORY__");
boolean bMakeDirs = "true".equals(ElementParameterParser.getValue(node, "__MAKEDIRS__"));
String filename = ElementParameterParser.getValue(node, "__FILENAME__");

String dieOnError = ElementParameterParser.getValue(node,"__DIE_ON_ERROR__");
%>   

<%if(("http").equals(protocol)){

String uri = ElementParameterParser.getValue(node, "__URI__");
boolean post = ("true").equals(ElementParameterParser.getValue(node,"__POST__"));
boolean printResponse = ("true").equals(ElementParameterParser.getValue(node,"__PRINT__"));
boolean needAuth = ("true").equals(ElementParameterParser.getValue(node,"__NEED_AUTH__"));
String username = ElementParameterParser.getValue(node,"__AUTH_USERNAME__");
String password = ElementParameterParser.getValue(node,"__AUTH_PASSWORD__");
String timeout = ElementParameterParser.getValue(node,"__TIMEOUT__");

boolean useProxy = ("true").equals(ElementParameterParser.getValue(node,"__USE_PROXY__"));
String proxyHost = ElementParameterParser.getValue(node,"__PROXY_HOST__");
String proxyPort = ElementParameterParser.getValue(node,"__PROXY_PORT__");
String proxyUser = ElementParameterParser.getValue(node,"__PROXY_USERNAME__");
String proxyPassword = ElementParameterParser.getValue(node,"__PROXY_PASSWORD__");
boolean useProxyNTLM = ("true").equals(ElementParameterParser.getValue(node,"__PROXY_NTLM__"));
String proxyDomain = ElementParameterParser.getValue(node,"__PROXY_DOMAIN__");
%>
    org.apache.commons.httpclient.HttpClient client_<%=cid %> = new org.apache.commons.httpclient.HttpClient();
    boolean isContinue=true;
    client_<%=cid %>.getHttpConnectionManager().getParams().setConnectionTimeout(<%=timeout %>);
<%if(post){%>
    org.apache.commons.httpclient.methods.PostMethod post_<%=cid %> = new org.apache.commons.httpclient.methods.PostMethod(<%=uri %>);		
<%}else{%>
	org.apache.commons.httpclient.methods.GetMethod get_<%=cid %> = new org.apache.commons.httpclient.methods.GetMethod(<%=uri %>);
<%}%>

<%if(useProxy){%> 
		client_<%=cid %>.getHostConfiguration().setProxy(<%=proxyHost %>, Integer.parseInt(<%=proxyPort%>));
	<%if(useProxyNTLM){%>
		client_<%=cid %>.getState().setProxyCredentials(
						new org.apache.commons.httpclient.auth.AuthScope( <%=proxyHost %>, Integer.parseInt(<%=proxyPort%>), null ),
						new org.apache.commons.httpclient.NTCredentials( <%=proxyUser %>,
								<%=proxyPassword %>, <%=proxyHost %>, <%=proxyDomain %> ));			
	<%}else{%>
		client_<%=cid %>.getState().setProxyCredentials(
  	  new org.apache.commons.httpclient.auth.AuthScope(<%=proxyHost %>, Integer.parseInt(<%=proxyPort%>), null),
    	new org.apache.commons.httpclient.UsernamePasswordCredentials(<%=proxyUser %>, <%=proxyPassword %>));
  <%}%>
<%}%>


<%if(needAuth){
   if ((!useProxy) && useProxyNTLM && (!"".equals(proxyDomain))){
%>
    client_tFileFetch_1.getState().setCredentials(org.apache.commons.httpclient.auth.AuthScope.ANY, new org.apache.commons.httpclient.NTCredentials(<%=username %>, <%=password %>, new java.net.URL(<%=uri%>).getHost(), <%=proxyDomain%>));
<%  
   } else{
%>
    org.apache.commons.httpclient.Credentials creds_<%=cid %> = new org.apache.commons.httpclient.UsernamePasswordCredentials(<%=username %>, <%=password %>);
    client_<%=cid %>.getState().setCredentials(org.apache.commons.httpclient.auth.AuthScope.ANY, creds_<%=cid %>);
<% }
}%>

<%if(post){
	boolean uploadFile = ("true").equals(ElementParameterParser.getValue(node,"__UPLOAD__"));
    
	List<Map<String, String>> commonParams = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__COMMON_PARAMS__");
	List<Map<String, String>> fileParams = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__FILE_PARAMS__");
	List<String> varPartList = new ArrayList<String>();	//common string parameter part	
	int i = 0;
	for(Map<String, String> param : commonParams){
		i++;
		String name = param.get("COMMON_PARAMS_NAME");
		String value = param.get("COMMON_PARAMS_VALUE");
		varPartList.add("common_" + i + "_" + cid);
%>
	org.apache.commons.httpclient.methods.multipart.StringPart common_<%=i %>_<%=cid %> = new org.apache.commons.httpclient.methods.multipart.StringPart(<%=name %>, <%=value %>);
<%
	}
%>

<%	//file parameter part
	if(uploadFile){
	int j = 0;	
	for(Map<String, String> param : fileParams){
		String name = param.get("FILE_PARAMS_NAME");
		String value = param.get("FILE_PARAMS_VALUE");
		varPartList.add("file_" + j + "_" + cid);
%>
	org.apache.commons.httpclient.methods.multipart.FilePart file_<%=j %>_<%=cid %>  = new org.apache.commons.httpclient.methods.multipart.FilePart(<%=name %>, new java.io.File(<%=value %>));	
<%
	}
	}
%>
    org.apache.commons.httpclient.methods.multipart.Part[] parts_<%=cid %> = new org.apache.commons.httpclient.methods.multipart.Part[]{<%for(String var: varPartList){%><%=var %>,<%}%>};		
    
    post_<%=cid %>.setRequestEntity(new org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity(parts_<%=cid %>, post_<%=cid %>.getParams()));					
//here excute the post the method
   try{
    int status_<%=cid%>  = client_<%=cid %>.executeMethod(post_<%=cid %>);     
    if (status_<%=cid%> != org.apache.commons.httpclient.HttpStatus.SC_OK) {      
      throw new Exception("Method failed: " + post_<%=cid %>.getStatusLine());
    }      
   }catch(Exception e){
<% if(("true").equals(dieOnError)){
%>
   throw(e);
<% }else{
%>   
      System.err.println("There is an exception on: "+<%=uri %>);
      e.printStackTrace();
      System.out.println("\r\n");
      isContinue=false;
<% }
%>
}
      
            
     
<% }else{%>   			
    try{      
      int status_<%=cid%>  = client_<%=cid %>.executeMethod(get_<%=cid %>);     
      if (status_<%=cid%> != org.apache.commons.httpclient.HttpStatus.SC_OK) {       
        throw new Exception("Method failed: " + get_<%=cid %>.getStatusLine());
      }  
    
    }catch(Exception e){
<% if(("true").equals(dieOnError)){
%>
   throw(e);
<% }else{
%>   
      System.err.println("There is an exception on: "+<%=uri %>);
      e.printStackTrace();
      System.out.println("\r\n");
      isContinue=false;
<% }
%>  
} 
<%}%>
    if(isContinue==true){
<%  if(printResponse){%>	
	
	<%if(post){%>
	System.out.println("Status Line: " + post_<%=cid %>.getStatusLine());
	<%}else{%>
	System.out.println("Status Line: " + get_<%=cid %>.getStatusLine());
	<%}%>
	//write out the response headers
	System.out.println("*** Response Header ***");	
	<%if(post){%>
	org.apache.commons.httpclient.Header[] responseHeaders_<%=cid %> = post_<%=cid %>.getResponseHeaders();	
	<%}else{%>
	org.apache.commons.httpclient.Header[] responseHeaders_<%=cid %> = get_<%=cid %>.getResponseHeaders();	
	<%}%>
	for (int i=0; i<responseHeaders_<%=cid %>.length; i++){
    	System.out.print(responseHeaders_<%=cid %>[i]);
	}
<%  }%>

    <%if(post){%>
	java.io.InputStream in_<%=cid %> = post_<%=cid %>.getResponseBodyAsStream();
	<%}else{%>
	java.io.InputStream in_<%=cid %> = get_<%=cid %>.getResponseBodyAsStream();
	<%}%>
	String fileName_<%=cid %> = <%=filename%>;
	
	//open directory
	
	
	java.net.URL url_<%=cid %> = new java.net.URL(<%=uri %>);	
    int iLocation_<%=cid%> = 0;
    String sFullPath_<%=cid%> = "";
<%  if (bMakeDirs){ %>
	  sFullPath_<%=cid%> = url_<%=cid %>.getFile();
	  iLocation_<%=cid%> = sFullPath_<%=cid%>.lastIndexOf("/");	
	  sFullPath_<%=cid%> = iLocation_<%=cid%> > 0 ? sFullPath_<%=cid%>.substring(0, iLocation_<%=cid%>) : "";
<%  }%>	

    java.io.File dir_<%=cid %> = new java.io.File(<%=directory %> + sFullPath_<%=cid%>);
    
	//open file dans la directory
	if (fileName_<%=cid %>.compareTo("")==0) {
	  fileName_<%=cid %> = url_<%=cid %>.getFile();
	  iLocation_<%=cid%> = fileName_<%=cid %>.lastIndexOf("/");
	  if (iLocation_<%=cid%> > 0){
	    fileName_<%=cid %> = fileName_<%=cid %>.substring(iLocation_<%=cid%> + 1);
	  } else{
	    fileName_<%=cid %> = "defaultfilename.txt";
	  }
	}
		 
	try{
	  java.io.File test_file_<%=cid%> = new java.io.File(dir_<%=cid %>, fileName_<%=cid %>);
	  test_file_<%=cid%>.getParentFile().mkdirs();
	  if (test_file_<%=cid%>.createNewFile()){
	    test_file_<%=cid%>.delete();
	  }
	} catch(Exception e){
	  fileName_<%=cid %> = "defaultfilename.txt";
	}
	java.io.File file_<%=cid%> = new java.io.File(dir_<%=cid %>,fileName_<%=cid %>);
	file_<%=cid%>.getParentFile().mkdirs();
	java.io.FileOutputStream out_<%=cid %> = new java.io.FileOutputStream(file_<%=cid%>);

    byte[] buffer_<%=cid %> = new byte[1024];
    int count_<%=cid %> = 0;
    while ((count_<%=cid %> = in_<%=cid %>.read(buffer_<%=cid %>)) > 0) {
        out_<%=cid %>.write(buffer_<%=cid %>, 0, count_<%=cid %>);
    }
    
    // close opened object
    in_<%=cid %>.close();
    out_<%=cid %>.close();
    }
    <%if(post){%>
	post_<%=cid %>.releaseConnection();
	<%}else{%>
	get_<%=cid %>.releaseConnection();
	<%}%>
	
<%}
if(("ftp").equals(protocol)){%>

<%
String uri = ElementParameterParser.getValue(node, "__URI__");
boolean useProxy = ("true").equals(ElementParameterParser.getValue(node,"__USE_PROXY__"));
String proxyHost = ElementParameterParser.getValue(node,"__PROXY_HOST__");
String proxyPort = ElementParameterParser.getValue(node,"__PROXY_PORT__");
String proxyUser = ElementParameterParser.getValue(node,"__PROXY_USERNAME__");
String proxyPassword = ElementParameterParser.getValue(node,"__PROXY_PASSWORD__");
//The following part support the socks proxy for FTP and SFTP (Socks V4 or V5, they are all OK). 
//And it can not work with the FTP proxy directly, only support the socks proxy.
if(useProxy){
%>
        java.util.Properties props = System.getProperties();
        props.put("socksProxyPort", <%=proxyPort %>);
        props.put("socksProxyHost", <%=proxyHost %>);
        props.put("java.net.socks.username", <%=proxyUser %>);
        props.put("java.net.socks.password", <%=proxyPassword %>);        
<%}%>

String fileName<%=cid %> = <%=filename %>;
java.io.DataInputStream in<%=cid%>=null;


        		
    // open url stream
	java.net.URL url<%=cid %> = new java.net.URL(<%=uri %>);
	java.net.URLConnection conn<%=cid %> = url<%=cid %>.openConnection();

	int iLocation<%=cid%> = 0;
    String sFullPath<%=cid%> = "";
<%  if (bMakeDirs){ %>
	  sFullPath<%=cid%> = url<%=cid %>.getFile();
	  iLocation<%=cid%> = sFullPath<%=cid%>.lastIndexOf("/");	
	  sFullPath<%=cid%> = iLocation<%=cid%> > 0 ? sFullPath<%=cid%>.substring(0, iLocation<%=cid%>) : "";
<%  }%>	

	//open directory
	java.io.File dir<%=cid %> = new java.io.File(<%=directory %> + sFullPath<%=cid%>);
	//open file dans la directory
	if (fileName<%=cid %>.compareTo("")==0) {
	  fileName<%=cid %> = url<%=cid %>.getFile();
	  iLocation<%=cid%> = fileName<%=cid %>.lastIndexOf("/");
	  if (iLocation<%=cid%> > 0){
	    fileName<%=cid %> = fileName<%=cid %>.substring(iLocation<%=cid%> + 1);
	  } else{
	    fileName<%=cid %> = "defaultfilename.txt";
	  }
	}
		
	try{
	  java.io.File testfile<%=cid%> = new java.io.File(dir<%=cid %>, fileName<%=cid %>);
	  testfile<%=cid%>.getParentFile().mkdirs();
	  if (testfile<%=cid%>.createNewFile()){
	    testfile<%=cid%>.delete();
	  }
	} catch(Exception e){
	  fileName<%=cid %> = "defaultfilename.txt";
	}
    
	// copy file
   try{
   in<%=cid%> = new java.io.DataInputStream(conn<%=cid %>.getInputStream());
   }catch(Exception e){
<% if(("true").equals(dieOnError)){
%>    throw(e);
<%}else{
%>
      System.err.println("There is an exception on: "+<%=uri %>);
      e.printStackTrace();
      System.out.println("\r\n");
      in<%=cid%>=null;      
<%}
%>    
}  
    final java.io.DataOutputStream out<%=cid%>= new java.io.DataOutputStream(new java.io.FileOutputStream(new java.io.File(
            dir<%=cid %>, fileName<%=cid %>)));
	//close opened object
	if(in<%=cid%>!=null){
    byte[] buffer<%=cid%> = new byte[1024];
    int count<%=cid%> = 0;
    while ((count<%=cid%> = in<%=cid%>.read(buffer<%=cid%>)) > 0) {
        out<%=cid%>.write(buffer<%=cid%>, 0, count<%=cid%>);
    }
    // close opened object
    in<%=cid%>.close();
    }
    out<%=cid%>.close();


<%}
if(("smb").equals(protocol)){ //1%>

<%
  String srcurl = ElementParameterParser.getValue(node, "__SMB_URI__"); 
  String domain = ElementParameterParser.getValue(node,"__SMB_DOMAIN__");
  String username = ElementParameterParser.getValue(node,"__SMB_USERNAME__");
  String password = ElementParameterParser.getValue(node,"__SMB_PASSWORD__");
%>
 
    class SambaProtoClient_<%=cid %>{
      
      private void copySMBFile(String domain, String username, String password, String srcURL, String dirFilePath, String destFilePath) {
        try {
           

            jcifs.smb.NtlmPasswordAuthentication auth = new jcifs.smb.NtlmPasswordAuthentication(domain, username, password);

           
            jcifs.smb.SmbFile sf = new jcifs.smb.SmbFile(srcURL, auth);

            jcifs.smb.SmbFileInputStream in = new jcifs.smb.SmbFileInputStream(sf);

            java.io.File destFile = new java.io.File(dirFilePath,destFilePath);
            destFile.getParentFile().mkdirs();
            java.io.OutputStream out = new java.io.FileOutputStream(destFile);

            byte[] buf = new byte[1024];
            int len;
            while ((len = in.read(buf)) > 0) {
                out.write(buf, 0, len);
            }
            in.close();
            out.close();
        } catch (java.io.FileNotFoundException ex) {
            System.out.println(ex.getMessage());
        } catch (java.io.IOException e) {
            System.out.println(e.getMessage());
        }
    }
    
    }
    
    String srcurl_<%=cid %>=<%=srcurl %>;
    String fileName_<%=cid %>=<%=filename %>;
    String username_<%=cid %>=<%=username %>;
    String password_<%=cid %>=<%=password %>;
    	if (fileName_<%=cid %>.compareTo("")==0) {
		fileName_<%=cid %> = srcurl_<%=cid %>.substring(srcurl_<%=cid %>.lastIndexOf("/"));
		
	}
	
		if (username_<%=cid %>.compareTo("")==0) {
		username_<%=cid %> =null;
		
	}
	
	   if (password_<%=cid %>.compareTo("")==0) {
		password_<%=cid %> =null;
		
	}
	 
    SambaProtoClient_<%=cid %> spc_<%=cid %>=new SambaProtoClient_<%=cid %>();
    spc_<%=cid %>.copySMBFile(<%=domain %>, username_<%=cid %>, password_<%=cid %>, srcurl_<%=cid %>, <%=directory %>, fileName_<%=cid %>);


<%
}//1
%>
  

