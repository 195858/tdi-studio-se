<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser
		org.talend.core.model.metadata.IMetadataTable
		org.talend.designer.codegen.config.CodeGeneratorArgument
		java.util.List
		java.util.Map
	"
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();	
	String host = ElementParameterParser.getValue(node, "__HOST__");
	String port = ElementParameterParser.getValue(node, "__PORT__");
	String user = ElementParameterParser.getValue(node, "__USERNAME__");
	String pass = ElementParameterParser.getValue(node, "__PASSWORD__");
	String overwrite = ElementParameterParser.getValue(node, "__OVERWRITE__");
	String sftpoverwrite=ElementParameterParser.getValue(node, "__SFTPOVERWRITE__");
	String localdir = ElementParameterParser.getValue(node, "__LOCALDIR__");	
	String remotedir = ElementParameterParser.getValue(node, "__REMOTEDIR__");
	String encoding = ElementParameterParser.getValue(node, "__ENCODING__");
	boolean sftp = ElementParameterParser.getValue(node, "__SFTP__").equals("true");
	String authMethod = ElementParameterParser.getValue(node,"__AUTH_METHOD__");
	String privateKey = ElementParameterParser.getValue(node,"__PRIVATEKEY__");
	String passPhrase = ElementParameterParser.getValue(node,"__PASSPHRASE__");
	List<Map<String, String>> files = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__FILES__");

    boolean useProxy = ElementParameterParser.getValue(node,"__UES_PROXY__").equals("true");
    String proxyHost = ElementParameterParser.getValue(node,"__PROXY_HOST__");
    String proxyPort = ElementParameterParser.getValue(node,"__PROXY_PORT__");
    String proxyUser = ElementParameterParser.getValue(node,"__PROXY_USERNAME__");
    String proxyPassword = ElementParameterParser.getValue(node,"__PROXY_PASSWORD__");	
    
    boolean append = ElementParameterParser.getValue(node, "__APPEND__").equals("true");
		
	String cid = node.getUniqueName();
%>
	int nb_file_<%=cid%> = 0;
	
<%
//The following part support the socks proxy for FTP and SFTP (Socks V4 or V5, they are all OK). 
//And it can not work with the FTP proxy directly, only support the socks proxy.
if(useProxy){
%>
        java.util.Properties props = System.getProperties();
        props.put("socksProxyPort", <%=proxyPort %>);
        props.put("socksProxyHost", <%=proxyHost %>);
        props.put("java.net.socks.username", <%=proxyUser %>);
        props.put("java.net.socks.password", <%=proxyPassword %>);        
<%}%>
	
<%
	if(sftp){ // *** sftp *** //
%>	
    class MyUserInfo implements com.jcraft.jsch.UserInfo, com.jcraft.jsch.UIKeyboardInteractive {
    
    	String passphrase_<%=cid %> = <%=passPhrase %>;
        public String getPassphrase() { return passphrase_<%=cid %>; }
        
        public String getPassword() { return null; } 
        
        public boolean promptPassword(String arg0) { return true; } 
        
        public boolean promptPassphrase(String arg0) { return true; } 
        
        public boolean promptYesNo(String arg0) { return true; } 
        
        public void showMessage(String arg0) { } 
        
        public String[] promptKeyboardInteractive(String destination, String name, String instruction, String[] prompt,
                boolean[] echo) {
           String[] password_<%=cid%> = {<%=pass%>};
           return password_<%=cid%>;
        }
    }; 
    
    final com.jcraft.jsch.UserInfo defaultUserInfo_<%=cid%> = new MyUserInfo();
    
    class MyProgressMonitor implements com.jcraft.jsch.SftpProgressMonitor {
        
        private long percent = -1;
        
        public void init(int op, String src, String dest, long max) {}
 		
 		public boolean count(long count) {return true;}

        public void end() {}
    } 
    
    class SFTPGetter_<%=cid%> {

        private com.jcraft.jsch.ChannelSftp cnlSFTP = null;

        private com.jcraft.jsch.SftpProgressMonitor monitor = null;

        private int count = 0;

        public void getAllFiles(String remoteDirectory, String localDirectory) throws com.jcraft.jsch.SftpException {
            cnlSFTP.cd(remoteDirectory);
            java.util.Vector sftpFiles = cnlSFTP.ls(".");
            for (Object sftpFile : sftpFiles) {
                com.jcraft.jsch.ChannelSftp.LsEntry lsEntry = (com.jcraft.jsch.ChannelSftp.LsEntry) sftpFile;
                com.jcraft.jsch.SftpATTRS attrs = lsEntry.getAttrs();
                if (lsEntry.getFilename().equals(".") || lsEntry.getFilename().equals("..")) {
                    continue;
                }
                if (attrs.isDir()) {
                    java.io.File localFile = new java.io.File(localDirectory + "/" + lsEntry.getFilename());
                    if (!localFile.exists()) {
                        localFile.mkdir();
                    }
                    getAllFiles(remoteDirectory + "/" + lsEntry.getFilename(), localDirectory + "/"
                            + lsEntry.getFilename());
                    cnlSFTP.cd(remoteDirectory);
                } else if (!attrs.isLink()) {
                    downloadFile(localDirectory, lsEntry.getFilename());
                }
            }
        }

        public void getFiles(String remoteDirectory, String localDirectory, String maskStr)
                throws com.jcraft.jsch.SftpException {
            cnlSFTP.cd(remoteDirectory);
            java.util.Vector sftpFiles = cnlSFTP.ls(".");
            for (Object sftpFile : sftpFiles) {
                com.jcraft.jsch.ChannelSftp.LsEntry lsEntry = (com.jcraft.jsch.ChannelSftp.LsEntry) sftpFile;
                com.jcraft.jsch.SftpATTRS attrs = lsEntry.getAttrs();
                if (lsEntry.getFilename().equals(".") || lsEntry.getFilename().equals("..")) {
                    continue;
                }
                if (!attrs.isDir() && !attrs.isLink()) {
                    if (lsEntry.getFilename().matches(maskStr)) {
                        downloadFile(localDirectory, lsEntry.getFilename());
                    }
                }
            }
        }

		public void chdir(String path) throws com.jcraft.jsch.SftpException{
			cnlSFTP.cd(path);
		}
		
		public String pwd() throws com.jcraft.jsch.SftpException{
			return cnlSFTP.pwd();
		}
		
        private void downloadFile(String localFileName, String remoteFileName) throws com.jcraft.jsch.SftpException {
        try {
            cnlSFTP.get(remoteFileName, localFileName, monitor,
<%
	if(sftpoverwrite.equals("overwrite")){
%>    			
				com.jcraft.jsch.ChannelSftp.OVERWRITE
<%
	}else if(sftpoverwrite.equals("append")){
%>
				com.jcraft.jsch.ChannelSftp.APPEND
<%
	}else if(sftpoverwrite.equals("resume")){
%>
				com.jcraft.jsch.ChannelSftp.RESUME
<%
	}
%>
            );
            globalMap.put("<%=cid %>_CURRENT_STATUS", "File transfer OK.");
            }catch(com.jcraft.jsch.SftpException e){
            if (e.id == com.jcraft.jsch.ChannelSftp.SSH_FX_FAILURE
                                || e.id == com.jcraft.jsch.ChannelSftp.SSH_FX_BAD_MESSAGE) {
                            globalMap.put("<%=cid %>_CURRENT_STATUS", "File transfer fail.");
                        }
                        throw e;
            }
            count++;
        }
    }
    
    com.jcraft.jsch.JSch jsch_<%=cid%>=new com.jcraft.jsch.JSch(); 
    
    <%if(authMethod.equals("PUBLICKEY")){%>
    jsch_<%=cid%>.addIdentity(<%=privateKey %>, defaultUserInfo_<%=cid%>.getPassphrase());
    <%}%>
    
    com.jcraft.jsch.Session session_<%=cid%>=jsch_<%=cid%>.getSession(<%=user%>, <%=host%>, <%=port%>);
    
    <%if(authMethod.equals("PASSWORD")){%> 
	session_<%=cid%>.setPassword(<%=pass%>); 
    <%}%>
    
    session_<%=cid%>.setUserInfo(defaultUserInfo_<%=cid%>); 
    session_<%=cid%>.connect(); 
    
    com.jcraft.jsch. Channel channel_<%=cid%>=session_<%=cid%>.openChannel("sftp"); 
    channel_<%=cid%>.connect(); 
    com.jcraft.jsch.ChannelSftp c_<%=cid%>=(com.jcraft.jsch.ChannelSftp)channel_<%=cid%>; 
    c_<%=cid%>.setFilenameEncoding(<%=encoding%>);
    
    com.jcraft.jsch.SftpProgressMonitor monitor_<%=cid%> = new MyProgressMonitor();
    SFTPGetter_<%=cid%> getter_<%=cid%> = new SFTPGetter_<%=cid%>();
    getter_<%=cid%>.cnlSFTP = c_<%=cid%>;
    getter_<%=cid%>.monitor = monitor_<%=cid%>;
    
	String remotedir_<%=cid %> = <%=remotedir%>;
	c_<%=cid%>.cd(remotedir_<%=cid %>);
    
<%
	}else{ // *** ftp *** //
%>	

	class FTPGetter_<%=cid%> {

        private com.enterprisedt.net.ftp.FTPClient ftpClient = null;

        private int count = 0;

        public void getAllFiles(String remoteDirectory, String localDirectory) throws java.io.IOException,
                com.enterprisedt.net.ftp.FTPException, java.text.ParseException {
            ftpClient.chdir(remoteDirectory);
            String path = ftpClient.pwd();
            com.enterprisedt.net.ftp.FTPFile[] ftpFiles = ftpClient.dirDetails(".");
            for (com.enterprisedt.net.ftp.FTPFile ftpFile : ftpFiles) {
                if (ftpFile.isDir()) {
                  if ((!ftpFile.getName().equals(".")) && (!ftpFile.getName().equals(".."))) {
                	java.io.File localFile = new java.io.File(localDirectory + "/" + ftpFile.getName());
                    if (!localFile.exists()) {
                        localFile.mkdir();
                    }
                    getAllFiles(path + "/" + ftpFile.getName(), localDirectory + "/" + ftpFile.getName());
                    ftpClient.chdir(path);
                  }
                } else if (!ftpFile.isLink()) {
					downloadFile(localDirectory + "/" + ftpFile.getName(),ftpFile.getName());
                }
            }
        }

        public void getFiles(String remoteDirectory, String localDirectory, String maskStr) throws java.io.IOException,
                com.enterprisedt.net.ftp.FTPException, java.text.ParseException {
            ftpClient.chdir(remoteDirectory);
            com.enterprisedt.net.ftp.FTPFile[] ftpFiles = ftpClient.dirDetails(".");
            for (com.enterprisedt.net.ftp.FTPFile ftpFile : ftpFiles) {
                if (!ftpFile.isDir() && !ftpFile.isLink()) {
                    if (ftpFile.getName().matches(maskStr)) {
                        downloadFile(localDirectory + "/" + ftpFile.getName(),ftpFile.getName());
                    }
                }
            }
        }
        
        public void chdir(String path) throws java.io.IOException, 
        		com.enterprisedt.net.ftp.FTPException{
			ftpClient.chdir(path);
		}
		
		public String pwd() throws java.io.IOException, 
				com.enterprisedt.net.ftp.FTPException{
			return ftpClient.pwd();
		}
        
        private void downloadFile(String localFileName, String remoteFileName) throws java.io.IOException,
                com.enterprisedt.net.ftp.FTPException {
        	java.io.File localFile = new java.io.File(localFileName);
        	try{
<%if(append){%>
			java.io.FileOutputStream fout = new java.io.FileOutputStream(localFile, true);
			ftpClient.get(fout, remoteFileName);
			globalMap.put("<%=cid %>_CURRENT_STATUS", "File transfer OK.");
<%
	}else if(overwrite.equals("never")){
%>
			if (!localFile.exists()) {
                ftpClient.get(localFileName, remoteFileName);
               globalMap.put("<%=cid %>_CURRENT_STATUS", "File transfer OK.");
            }else{
            	globalMap.put("<%=cid %>_CURRENT_STATUS", "No file transfered.");
            }
<%
	}else if(overwrite.equals("always")){
%>
			ftpClient.get(localFileName, remoteFileName);
			globalMap.put("<%=cid %>_CURRENT_STATUS", "File transfer OK.");
<%
	}else if(overwrite.equals("size_differ")){
%>
			if(localFile.exists()){
        		long ftpSize=ftpClient.size(remoteFileName);
        		long localSize=localFile.length();
        		if(ftpSize!=localSize)
        		{
        	 		ftpClient.get(localFileName, remoteFileName);
        	 		globalMap.put("<%=cid %>_CURRENT_STATUS", "File transfer OK.");
        		}else {
                    globalMap.put("<%=cid %>_CURRENT_STATUS", "No file transfered.");

                }
        	}else{
        		ftpClient.get(localFileName, remoteFileName);
        		globalMap.put("<%=cid %>_CURRENT_STATUS", "File transfer OK.");
        	}
<%
	}
%>

	} catch (com.enterprisedt.net.ftp.FTPException e) {
        globalMap.put("<%=cid %>_CURRENT_STATUS", "File transfer fail.");
		throw e;
    }
            count++;
        }
    }
    
	com.enterprisedt.net.ftp.FTPClient ftp_<%=cid %> = new com.enterprisedt.net.ftp.FTPClient();
	ftp_<%=cid %>.setRemoteHost(<%=host %>);
	ftp_<%=cid %>.setRemotePort(<%=port %>);
	ftp_<%=cid %>.connect();
    ftp_<%=cid %>.login(<%=user %>, <%=pass %>);  
    
    FTPGetter_<%=cid%> getter_<%=cid%> = new FTPGetter_<%=cid%>();
    getter_<%=cid%>.ftpClient = ftp_<%=cid %>;
    String remotedir_<%=cid %> = <%=remotedir%>;
	ftp_<%=cid %>.chdir(remotedir_<%=cid %>);
<%
}
// *** share code *** //
%>
	java.util.List<String> maskList_<%=cid %> = new java.util.ArrayList<String>();
<%
for (int i=0; i<files.size(); i++) {
   Map<String, String> line = files.get(i);
%>    
	maskList_<%=cid %>.add(<%= line.get("FILEMASK") %>);       
<%
}
%>

<%
	if(!sftp){ // *** ftp *** //
		if ("binary".equalsIgnoreCase(ElementParameterParser.getValue(node, "__MODE__"))) {
%>	
	ftp_<%=cid %>.setType(com.enterprisedt.net.ftp.FTPTransferType.BINARY);
<%
  		}else {  
%>	
	ftp_<%=cid %>.setType(com.enterprisedt.net.ftp.FTPTransferType.ASCII);
<%
 		}
 	}
%>

	String localdir_<%=cid %>  = <%=localdir%>;
	String root_<%=cid %> = getter_<%=cid %>.pwd();
	for (String maskStr_<%=cid%> : maskList_<%=cid%>) { 