<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.metadata.IMetadataTable
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.List
"
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

String filename = ElementParameterParser.getValue(
    node,
    "__FILENAME__"
);

String rowSeparator = ElementParameterParser.getValue(
    node,
    "__ROWSEPARATOR__"
);

String fieldSeparator = ElementParameterParser.getValue(
    node,
    "__FIELDSEPARATOR__"
);

boolean append = ElementParameterParser.getValue(
    node,
    "__APPEND__"
).equals("true");

boolean includeHeader = ElementParameterParser.getValue(
    node,
    "__INCLUDEHEADER__"
).equals("true");

boolean csvOption = ElementParameterParser.getValue(
    node,
    "__CSV_OPTION__"
).equals("true");

String escapeChar = ElementParameterParser.getValue(
    node,
    "__ESCAPE_CHAR__"
    );

String textEnclosure = ElementParameterParser.getValue(
    node,
    "__TEXT_ENCLOSURE__"
);

List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
    IMetadataTable metadata = metadatas.get(0);
    if (metadata!=null) {
%>

use FileHandle;
<%
        if (csvOption) {
%>
use Text::CSV_XS;
<%
        }
%>

my %desc_<%=cid %> = (
    filename => <%=filename %>,
    field_separator => <%=fieldSeparator %>,
    row_separator => <%=rowSeparator %>,
    append => <%=append %>,
    include_header => <%=includeHeader %>,
    schema => [
<%
        for (IMetadataColumn column: metadata.getListColumns()) {
%>
    	{
            name => '<%=column.getLabel() %>',
        },
<%
        }
%>
    ]
);

<%
        if (csvOption) {
%>
my $csv_<%=cid%> = Text::CSV_XS->new({
    sep_char     => <%=fieldSeparator%>,
    escape_char  => <%=escapeChar%>,
    quote_char   => <%=textEnclosure%>,
    binary       => 1,
});
<%
        }
%>

my $nb_fields_<%=cid %> = scalar @{ $desc_<%=cid %>{schema} };
my $nb_line_<%=cid %> = 0;

my $output_FH_<%=cid %> = new FileHandle;

<%
        String writeMode = ">";
        if (append) {
            writeMode = ">>";
        }
%>
open($output_FH_<%=cid %>, '<%=writeMode%>', $desc_<%=cid %>{filename})
    or die '[<%=cid%>] cannot open file "'.$desc_<%=cid %>{filename}.'"';

<%
        if (includeHeader) {
%>
if (not -s $desc_<%=cid %>{filename}) {
<%
        if (csvOption) {
%>
    my @fields = map { $_->{name} } @{ $desc_<%=cid %>{schema} };

    if (not $csv_<%=cid%>->print($output_FH_<%=cid %>, \@fields)) {
        die "[<%=cid%>] failed to write header";
    }
    print {$output_FH_<%=cid %>} <%=rowSeparator%>
        or die "[<%=cid%>] failed to write header eol";
<%
        }
        else {
%>
    print {$output_FH_<%=cid %>} (
        join(
            <%=fieldSeparator%>,
            map { $_->{name} } @{ $desc_<%=cid %>{schema} }
        ),
        <%=rowSeparator%>
    )
        or die "[<%=cid%>] cannot write header";
<%
        }
%>
    $nb_line_<%=cid %>++;
}

<%
        }
    }
}
%>
