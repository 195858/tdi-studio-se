<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.metadata.IMetadataTable
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.List
"
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
boolean stats = codeGenArgument.isStatistics();

List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
    IMetadataTable metadata = metadatas.get(0);
    if (metadata!=null) {
        String cid = metadata.getTableName();

        String filename = ElementParameterParser.getValue(
            node,
            "__FILENAME__"
        );

        String rowSeparator = ElementParameterParser.getValue(
            node,
            "__ROWSEPARATOR__"
        );

        String fieldSeparator = ElementParameterParser.getValue(
            node,
            "__FIELDSEPARATOR__"
        );

        String append = ElementParameterParser.getValue(
            node,
            "__APPEND__"
        );

        String includeHeader = ElementParameterParser.getValue(
            node,
            "__INCLUDEHEADER__"
        );
%>

use FileHandle;

my %desc_<%=cid %> = (
    filename => <%=filename %>,
    field_separator => <%=fieldSeparator %>,
    row_separator => <%=rowSeparator %>,
    append => <%=append %>,
    include_header => <%=includeHeader %>,
    schema => [
<%
        for (IMetadataColumn column: metadata.getListColumns()) {
%>
    	{
            name    => '<%=column.getLabel() %>',
            key     => <%=column.isKey() %>,
            type    => '<%=column.getType() %>',
            len     => <%=column.getLength() %>,
            null    => <%=column.isNullable() %>,
            default => '<%=column.getDefault() %>',
            comment => '<%=column.getComment() %>',
        },
<%
        }
%>
    ]
);

use constant OUTPUT_FIELD_SEPARATOR_<%=cid %> => <%=fieldSeparator %>;
use constant OUTPUT_ROW_SEPARATOR_<%=cid %> => <%=rowSeparator %>;
my $nb_fields_<%=cid %> = scalar @{ $desc_<%=cid %>{schema} };
my $nb_line_<%=cid %> = 0;

my $output_FH_<%=cid %> = new FileHandle;

my $mode = '>';
if ($desc_<%=cid %>{append}) {
    $mode = '>>';
}

open($output_FH_<%=cid %>, $mode, $desc_<%=cid %>{filename})
    or die 'cannot open file "' . $desc_<%=cid %>{filename} . '"';

my $printHeader = <%=includeHeader %> ;
if( '>>' eq $mode ){
    $printHeader = 0 if -s $desc_<%=cid %>{filename} ;
}

<%
        if (includeHeader.equals("true")) {
%>
if($printHeader){
print {$output_FH_<%=cid %>} (
    join(
        OUTPUT_FIELD_SEPARATOR_<%=cid %>,
        map { $_->{name} } @{ $desc_<%=cid %>{schema} }
    ),
    OUTPUT_ROW_SEPARATOR_<%=cid %>
)
    or die "can't write to file " . $desc_<%=cid %>{filename} . "\n";
}
$nb_line_<%=cid %>++;

<%
        }
%>

<%
    }
}
%>
