<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn 
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.IConnectionCategory
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.List
    java.util.ArrayList
    org.talend.core.model.metadata.types.JavaTypesManager
	org.talend.core.model.metadata.types.JavaType
" 
%>

<% 
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

boolean useStream = ("true").equals(ElementParameterParser.getValue(node,"__USESTREAM__"));

if(("false").equals(ElementParameterParser.getValue(node,"__CSV_OPTION__"))) {	
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    %>

    <%
    
    List<IMetadataTable> metadatas = node.getMetadataList();
    if ((metadatas!=null)&&(metadatas.size()>0)) {
        IMetadataTable metadata = metadatas.get(0);
        if (metadata!=null) {
                        
            String fieldSeparator = ElementParameterParser.getValueWithUIFieldKey(
                node,
                "__FIELDSEPARATOR__",
                "FIELDSEPARATOR"
            );
            
            String rowSeparator = ElementParameterParser.getValueWithUIFieldKey(
                node,
                "__ROWSEPARATOR__",
                "ROWSEPARATOR"
            );
            
            String encoding = ElementParameterParser.getValue(
                node,
                "__ENCODING__"
            );
            
            boolean isAppend = ("true").equals(ElementParameterParser.getValue(node,"__APPEND__"));
            
            boolean isIncludeHeader = ("true").equals(ElementParameterParser.getValue(node,"__INCLUDEHEADER__"));
    		String fileNewname = ElementParameterParser.getValue(node,"__FILENAME__");
    		
    		boolean isInRowMode = ("true").equals(ElementParameterParser.getValue(node,"__ROW_MODE__"));
    		
    		boolean split = ("true").equals(ElementParameterParser.getValue(node, "__SPLIT__"));
            String splitEvery = ElementParameterParser.getValue(node, "__SPLIT_EVERY__");
            
            boolean flushOnRow = ("true").equals(ElementParameterParser.getValue(node, "__FLUSHONROW__"));
            String flushMod = ElementParameterParser.getValue(node, "__FLUSHONROW_NUM__");
            
    		String advancedSeparatorStr = ElementParameterParser.getValue(node, "__ADVANCED_SEPARATOR__");
    		boolean advancedSeparator = (advancedSeparatorStr!=null&&!("").equals(advancedSeparatorStr))?("true").equals(advancedSeparatorStr):false;
    		String thousandsSeparator = ElementParameterParser.getValueWithJavaType(node, "__THOUSANDS_SEPARATOR__", JavaTypesManager.CHARACTER);
    		String decimalSeparator = ElementParameterParser.getValueWithJavaType(node, "__DECIMAL_SEPARATOR__", JavaTypesManager.CHARACTER); 
   		    
			String parallelize = ElementParameterParser.getValue(node,"__PARALLELIZE__");
			boolean isParallelize = (parallelize!=null&&!("").equals(parallelize))?("true").equals(parallelize):false;

        	List< ? extends IConnection> conns = node.getIncomingConnections();
        	for (IConnection conn : conns) {
        		if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
        		    %>
    				StringBuilder sb_<%=cid %> = new StringBuilder();
    						
    				<%  
        			List<IMetadataColumn> columns = metadata.getListColumns();
        			int sizeColumns = columns.size();
        			for (int i = 0; i < sizeColumns; i++) {
      			
        				IMetadataColumn column = columns.get(i);
    					JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
    					boolean isPrimitive = JavaTypesManager.isJavaPrimitiveType( javaType, column.isNullable());
    					if(!isPrimitive) {
    					    %>   				
    	    				if(<%=conn.getName() %>.<%=column.getLabel() %> != null) {
        				    <%
    				    } 
    				    %>
    					sb_<%=cid %>.append(
    			        <%
    			        String pattern = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
    			        if (javaType == JavaTypesManager.DATE && pattern != null && pattern.trim().length() != 0) {
    			            %>
    						FormatterUtils.format_Date(<%=conn.getName() %>.<%=column.getLabel() %>, <%= pattern %>)
    						<%	
    							} else if(advancedSeparator && JavaTypesManager.isNumberType(javaType, column.isNullable())) { 
							%>
        							<% if(javaType == JavaTypesManager.BIGDECIMAL) {%>
        							FormatterUtils.format_Number(String.valueOf(<%=column.getPrecision() == null? conn.getName() + "." + column.getLabel() : conn.getName() + "." + column.getLabel() + ".setScale(" + column.getPrecision() + ", java.math.RoundingMode.HALF_UP)" %>), <%= thousandsSeparator %>, <%= decimalSeparator %>)					
        							<% } else { %>
        							FormatterUtils.format_Number(String.valueOf(<%=conn.getName() %>.<%=column.getLabel() %>), <%= thousandsSeparator %>, <%= decimalSeparator %>)						
        							<% } %>
							<%
								} else if(javaType == JavaTypesManager.BIGDECIMAL){
    						%>
    						<%=column.getPrecision() == null? conn.getName() + "." + column.getLabel() : conn.getName() + "." + column.getLabel() + ".setScale(" + column.getPrecision() + ", java.math.RoundingMode.HALF_UP)" %>
    						<%
    			        } else {
    			            %>
    						<%=conn.getName() %>.<%=column.getLabel() %>
    						<%				
    			        }
    			        %>
    					);
    					<%
    					if(!isPrimitive) {
    					    %>
    					    } 
    					<%
    			        } 
    			        if(i != sizeColumns - 1) {
    			            %>					
    			            sb_<%=cid %>.append(OUT_DELIM_<%=cid %>);
    			            <%
    			        }
    		        }
    		        %>
    		        sb_<%=cid %>.append(OUT_DELIM_ROWSEP_<%=cid %>);
    		
    				
    				<%
    					if(codeGenArgument.getIsRunInMultiThread()){
    				%>
    				synchronized (multiThreadLockWrite) {
    				<%
    					}
    					if (codeGenArgument.subTreeContainsParallelIterate()) {
    				%>
    				synchronized (lockWrite) {
    		        <% 
    		        	}
    		        	if (isParallelize) {
  					%>
					Object[] pLockWrite = (Object[])globalMap.get("PARALLEL_LOCK_WRITE");
					synchronized (pLockWrite) {
					<% 
						}
    		        %>
    		        <%
    		        // add a prerequisite useStream to support output stream feature:8873
    		        if(!useStream && split){ 
    		            %>
    		            if(currentRow_<%=cid%> % splitEvery_<%=cid%>==0 && currentRow_<%=cid%>!=0){
    		                splitedFileNo_<%=cid%>++;
    		                out<%=cid %>.close(); 
    		                //close original outputStream
    		                out<%=cid %> = new <%=isInRowMode?"routines.system.BufferedOutput":"java.io.BufferedWriter"%>(new java.io.OutputStreamWriter(
    		                        new java.io.FileOutputStream(fullName_<%=cid%> + splitedFileNo_<%=cid%> + extension_<%=cid%>, <%= isAppend%>),<%= encoding%>));
    		                file<%=cid%> = new java.io.File(fullName_<%=cid%> + splitedFileNo_<%=cid%> + extension_<%=cid%>);  					
    
    		                <%
    		                if(isIncludeHeader){
    		                    %>
    		                    if(file<%=cid%>.length()==0)  
    		                    {
    		                        <%		
    		                        //List<IMetadataColumn> columns = metadata.getListColumns();
    		                        //int sizeColumns = columns.size();
    		                        for (int i = 0; i < sizeColumns; i++) {
    		                            IMetadataColumn column = columns.get(i);
    		                            %>
    		                            out<%=cid %>.write("<%=column.getLabel() %>");
    		                            <%
    		                            if(i != sizeColumns - 1) {
    		                                %>
    		                                out<%=cid %>.write(OUT_DELIM_<%=cid %>);
    		                                <%
    		                            }
    		                        }
    		                        %>
    		                        out<%=cid %>.write(OUT_DELIM_ROWSEP_<%=cid %>);
    		                    }	
    		                    <%
    		                }
    		                %>
    		                out<%=cid %>.write(sb_<%=cid %>.toString());
    		                <% 
    		                if(flushOnRow) { 
    		                    %>
        		                if(nb_line_<%=cid %>%<%=flushMod %> == 0) {
        		                out<%=cid %>.flush();
        		                }
    		                    <%
    		                }
    		                %> 			
    		            }else{
    		                out<%=cid %>.write(sb_<%=cid %>.toString());
    		                <% 
    		                if(flushOnRow) { 
    		                    %>
        		                if(nb_line_<%=cid %>%<%=flushMod %> == 0) {
        		                out<%=cid %>.flush();
        		                }
    		                    <%
    		                }
    		                %>  			
    		            }	
    		            currentRow_<%=cid%>++;				
    			
    
    		            <% 
    		        } else { 
    		            %>
    		
    		            out<%=cid %>.write(sb_<%=cid %>.toString());
    		            <% 
    		            if(flushOnRow) { 
    		                %>
        		                if(nb_line_<%=cid %>%<%=flushMod %> == 0) {
        		                out<%=cid %>.flush();
        		                }
    		                <%
    		            }
    		            %>     			
    		            <%
    		        }
    		        %>
    		        <% 
    		        	if (isParallelize) {
    				%>
    				} 
    		        <%
    		        	}
    					if (codeGenArgument.subTreeContainsParallelIterate()) {
    				%>
    				} 
    		        <%
    		        	}
    		        	if(codeGenArgument.getIsRunInMultiThread()){
    				%>
    				}
    				<%
    					}
    		        %> 			
    		        nb_line_<%=cid %>++;
    		        <%
    	        }
            }
        }
    }
    %>

<%
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}else{//the following is the tFileOutputCSV component
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    %>

    <%
    
    List<IMetadataTable> metadatas = node.getMetadataList();
    if ((metadatas!=null)&&(metadatas.size()>0)) {
        IMetadataTable metadata = metadatas.get(0);
        if (metadata!=null) {                                    
            String encoding = ElementParameterParser.getValue(node,"__ENCODING__");
    		String delim = ElementParameterParser.getValue(node, "__FIELDSEPARATOR__");
 //       	String delim = delim1.substring(1,delim1.length()-1);
        	boolean isIncludeHeader = ("true").equals(ElementParameterParser.getValue(node,"__INCLUDEHEADER__"));
        	boolean isAppend = ("true").equals(ElementParameterParser.getValue(node,"__APPEND__"));
        	String rowSeparator = ElementParameterParser.getValue(node, "__ROWSEPARATOR__");
//        	String rowSeparator = rowSeparator1.substring(1,rowSeparator1.length()-1);
        	String escapeChar1 = ElementParameterParser.getValue(node, "__ESCAPE_CHAR__");
        	
 			if(escapeChar1.equals("\"\"\"")){
 				escapeChar1 = "\"\\\"\"";
 			}
        	
        	String textEnclosure1 = ElementParameterParser.getValue(node, "__TEXT_ENCLOSURE__");
 			if(textEnclosure1.equals("\"\"\"")){
 				textEnclosure1 = "\"\\\"\"";
 			}
//        	String textEnclosure = textEnclosure1.substring(1,textEnclosure1.length()-1);
//        	if ("".equals(textEnclosure)) textEnclosure = "\0";
//        	if(("'").equals(textEnclosure)){
//    			textEnclosure = "\\'";
//    		}
        	boolean split = ("true").equals(ElementParameterParser.getValue(node, "__SPLIT__"));
        	
        	boolean isInRowMode = ("true").equals(ElementParameterParser.getValue(node,"__ROW_MODE__"));
        	
        	boolean flushOnRow = ("true").equals(ElementParameterParser.getValue(node, "__FLUSHONROW__"));
        	String flushMod = ElementParameterParser.getValue(node, "__FLUSHONROW_NUM__");
        	
    		String advancedSeparatorStr = ElementParameterParser.getValue(node, "__ADVANCED_SEPARATOR__");
    		boolean advancedSeparator = (advancedSeparatorStr!=null&&!("").equals(advancedSeparatorStr))?("true").equals(advancedSeparatorStr):false;
    		String thousandsSeparator = ElementParameterParser.getValueWithJavaType(node, "__THOUSANDS_SEPARATOR__", JavaTypesManager.CHARACTER);
    		String decimalSeparator = ElementParameterParser.getValueWithJavaType(node, "__DECIMAL_SEPARATOR__", JavaTypesManager.CHARACTER);        	
        	
        	String parallelize = ElementParameterParser.getValue(node,"__PARALLELIZE__");
			boolean isParallelize = (parallelize!=null&&!("").equals(parallelize))?("true").equals(parallelize):false;
        	
        	List< ? extends IConnection> conns = node.getIncomingConnections();
				%>
   
    		char field_Delim<%=cid %>[] = null;
     	                 
    		//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'.
    		if ( ((String)<%=delim %>).length() > 0 ){
    			field_Delim<%=cid %> = ((String)<%=delim %>).toCharArray();
    		}else { 
    			throw new IllegalArgumentException("Field Separator must be assigned a char.");
    		}
    		    
    		char row_Delim<%=cid %>[] = null;
         
    		//support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'.  
    		if ( ((String)<%=rowSeparator %>).length() > 0 ){ 
    			row_Delim<%=cid %> = ((String)<%=rowSeparator %>).toCharArray();
    		}else {
    			throw new IllegalArgumentException("Row Separator must be assigned a char.");
    		}
<%
	//=======================add to support global variable for csv option is checked----start=====
%>
            String escapeChar1_<%=cid %> = <%=escapeChar1 %>;          
	        char escapeChar_<%=cid %>[] = null;
	        
	        if(((String)escapeChar1_<%=cid %>).length() > 0 ){ 
	        	escapeChar_<%=cid %> = ((String)escapeChar1_<%=cid %>).toCharArray(); 
	  		}else { 
	            throw new IllegalArgumentException("Escape Char must be assigned a char."); 
	        }
	         
	        String textEnclosure1_<%=cid %> = <%=textEnclosure1 %>;
        	if ("".equals(textEnclosure1_<%=cid %>)) textEnclosure1_<%=cid %> = "\0";
        	if(("'").equals(textEnclosure1_<%=cid %>)){
    			textEnclosure1_<%=cid %> = "\\'";
    		} 
			char textEnclosure_<%=cid %>[] = null;
	        
	        if(((String)textEnclosure1_<%=cid %>).length() > 0 ){ 
      			textEnclosure_<%=cid %> = ((String)textEnclosure1_<%=cid %>).toCharArray(); 
			}else { 
	            throw new IllegalArgumentException("Text Enclosure must be assigned a char."); 
	        }		
<%
	//========================add to support global variable---end=================================
%>
				<%
          	if(!("\\n").equals(rowSeparator) && !("\\r").equals(rowSeparator)){
          	    %>
            CsvWriter<%=cid %>.setRecordDelimiter(row_Delim<%=cid %>[0]);
              	<%				
          	}
%>
			if(("\\\\").equals(escapeChar1_<%=cid %>)){
				CsvWriter<%=cid %>.setEscapeMode(com.csvreader.CsvWriter.ESCAPE_MODE_BACKSLASH);
			}else if(escapeChar1_<%=cid %>.equals(textEnclosure1_<%=cid %>)){
				CsvWriter<%=cid %>.setEscapeMode(com.csvreader.CsvWriter.ESCAPE_MODE_DOUBLED);
			}
      		
      		CsvWriter<%=cid %>.setTextQualifier(textEnclosure_<%=cid %>[0]); 
      		CsvWriter<%=cid %>.setForceQualifier(true);
      		<%
     
        	if(conns!=null){
        		if (conns.size()>0){
        		    IConnection conn =conns.get(0);
            		if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
        			List<IMetadataColumn> columns = metadata.getListColumns();
            			int sizeColumns = columns.size();
            			%>  	
                    	String[] row<%=cid%>=new String[<%=sizeColumns%>];		
                    	<%
            			for (int i = 0; i < sizeColumns; i++) {
                			IMetadataColumn column = columns.get(i);
                			JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
                			String pattern = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
                			if(JavaTypesManager.isJavaPrimitiveType( column.getTalendType(), column.isNullable())){
                			    %>
                			    row<%=cid%>[<%=i%>] =String.valueOf(<%=conn.getName() %>.<%=column.getLabel() %>); 
                			    <%
                			}else { 
                			    %>
                			    if(<%=conn.getName() %>.<%=column.getLabel() %> == null){
                			        row<%=cid%>[<%=i%>]="";
                			    }else{
                			        <%					
                			        if(javaType == JavaTypesManager.STRING ){
                			            %>
                			            row<%=cid%>[<%=i%>] = <%=conn.getName() %>.<%=column.getLabel() %>;
                			            <%
                			        }else if(javaType == JavaTypesManager.DATE && pattern != null){
                			            %>
                			            row<%=cid%>[<%=i%>] = FormatterUtils.format_Date(<%=conn.getName() %>.<%=column.getLabel() %>, <%= pattern %>);
                			            <%
                			        }else if(javaType == JavaTypesManager.BYTE_ARRAY){
                			            %>
                			            row<%=cid%>[<%=i%>] = java.nio.charset.Charset.defaultCharset().decode(java.nio.ByteBuffer.wrap(<%=conn.getName() %>.<%=column.getLabel() %>)).toString();
                			            <%
                			        } else if(advancedSeparator && JavaTypesManager.isNumberType(javaType, column.isNullable())) { 
        							%>
                							<% if(javaType == JavaTypesManager.BIGDECIMAL) {%>
                							row<%=cid%>[<%=i%>] = FormatterUtils.format_Number(String.valueOf(<%=column.getPrecision() == null? conn.getName() + "." + column.getLabel() : conn.getName() + "." + column.getLabel() + ".setScale(" + column.getPrecision() + ", java.math.RoundingMode.HALF_UP)" %>), <%= thousandsSeparator %>, <%= decimalSeparator %>);					
                							<% } else { %>
                							row<%=cid%>[<%=i%>] = FormatterUtils.format_Number(String.valueOf(<%=conn.getName() %>.<%=column.getLabel() %>), <%= thousandsSeparator %>, <%= decimalSeparator %>);						
                							<% } %>
        							<%
        								} else if (javaType == JavaTypesManager.BIGDECIMAL) {
										%>
										row<%=cid%>[<%=i%>] = String.valueOf(<%=column.getPrecision() == null? conn.getName() + "." + column.getLabel() : conn.getName() + "." + column.getLabel() + ".setScale(" + column.getPrecision() + ", java.math.RoundingMode.HALF_UP)" %>);
										<%
                			        }else{
                			            %>
                			            row<%=cid%>[<%=i%>] = String.valueOf(<%=conn.getName() %>.<%=column.getLabel() %>);
                			            <%
                			        }
                			        %>
                			    }
                			    <%   			
                			}
            			}
%>
<%    					if(codeGenArgument.getIsRunInMultiThread()){
%>
    			synchronized (multiThreadLockWrite) {
<%
    					}
    					if (codeGenArgument.subTreeContainsParallelIterate()) {
%>
				synchronized (lockWrite) {
<%
						}
						if (isParallelize) {
%>
				Object[] pLockWrite = (Object[])globalMap.get("PARALLEL_LOCK_WRITE");
				synchronized (pLockWrite) {
<%
						}
%>
<%
            			if(!useStream && split){
            			    %>
            			    if(currentRow_<%=cid%> % splitEvery_<%=cid%>==0 && currentRow_<%=cid%>!=0){
            			        splitedFileNo_<%=cid%>++;
            			        CsvWriter<%=cid%>.close(); 
            			        //close original outputStream
            			        <%if(isInRowMode){%>
            			        out<%=cid %> = new routines.system.BufferedOutput(new java.io.OutputStreamWriter(
									new java.io.FileOutputStream(fullName_<%=cid%> + splitedFileNo_<%=cid%> + extension_<%=cid%>, <%=isAppend%>),<%=encoding%>));
								strWriter<%=cid%> = new java.io.StringWriter();
            	                CsvWriter<%=cid%> = new com.csvreader.CsvWriter(strWriter<%=cid%>, field_Delim<%=cid %>[0]);
            	                <%}else{%>
            	                CsvWriter<%=cid%> = new com.csvreader.CsvWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(
									new java.io.FileOutputStream(fullName_<%=cid%> + splitedFileNo_<%=cid%> + extension_<%=cid%>, <%=isAppend%>),<%=encoding%>)), field_Delim<%=cid %>[0]);
            	                <%}%>
            			        //set header.
            			        <%
            			        if(isIncludeHeader && !isAppend){
            			            %>
            			            CsvWriter<%=cid%>.writeRecord(headColu<%=cid%>);
            			            <%if(isInRowMode){%>	
            			            out<%=cid%>.write(strWriter<%=cid%>.getBuffer().toString());
               						strWriter<%=cid%>.getBuffer().delete(0, strWriter<%=cid%>.getBuffer().length());
            			            <%}
            			        }
            			        if(isIncludeHeader && isAppend){
            			            %>
                                    file_<%=cid%> = new java.io.File(fullName_<%=cid%> + splitedFileNo_<%=cid%> + extension_<%=cid%>);
                        		    if(file_<%=cid%>.length() == 0) {
                        		        CsvWriter<%=cid%>.writeRecord(headColu<%=cid%>); 
                        		        <%if(isInRowMode){%>
                        		        out<%=cid%>.write(strWriter<%=cid%>.getBuffer().toString());
                						strWriter<%=cid%>.getBuffer().delete(0, strWriter<%=cid%>.getBuffer().length());
                						<%}%>
                        		    }	  
                        		    <%
            			        }
                        		%>
                        		//initialize new CsvWriter information 
        						<%
        						if(!("\\n").equals(rowSeparator) && !("\\r").equals(rowSeparator)){
        						    %>
        						    CsvWriter<%=cid %>.setRecordDelimiter(row_Delim<%=cid %>[0]);
        						    <%
        						}
        						%> 
								if(("\\\\").equals(escapeChar1_<%=cid %>)){
									CsvWriter<%=cid %>.setEscapeMode(com.csvreader.CsvWriter.ESCAPE_MODE_BACKSLASH);
								}else if(escapeChar1_<%=cid %>.equals(textEnclosure1_<%=cid %>)){
									CsvWriter<%=cid %>.setEscapeMode(com.csvreader.CsvWriter.ESCAPE_MODE_DOUBLED);
								}
					      		
					      		CsvWriter<%=cid %>.setTextQualifier(textEnclosure_<%=cid %>[0]); 
					      		CsvWriter<%=cid %>.setForceQualifier(true);         		
                        		CsvWriter<%=cid%>.writeRecord(row<%=cid%>);
                        		<%if(isInRowMode){%>
                        		out<%=cid%>.write(strWriter<%=cid%>.getBuffer().toString());
                				strWriter<%=cid%>.getBuffer().delete(0, strWriter<%=cid%>.getBuffer().length());
                        		<%}
                        		if(flushOnRow) { 
                        		    %>
            		                if(nb_line_<%=cid %>%<%=flushMod %> == 0) {
            		                <%if(isInRowMode){%>
            		                out<%=cid%>.flush();
            		                <%}else{%>
            		                CsvWriter<%=cid %>.flush();
            		                <%}%>
            		                }
                        		    <%
                    			}
                        		%> 
         				
         					}else{
         					    CsvWriter<%=cid%>.writeRecord(row<%=cid%>);	
         					    <%if(isInRowMode){%>
         					    out<%=cid%>.write(strWriter<%=cid%>.getBuffer().toString());
                				strWriter<%=cid%>.getBuffer().delete(0, strWriter<%=cid%>.getBuffer().length());
         					    <%}
         					    if(flushOnRow) { 
         					        %>
            		                if(nb_line_<%=cid %>%<%=flushMod %> == 0) {
            		                <%if(isInRowMode){%>
            		                out<%=cid%>.flush();
            		                <%}else{%>
            		                CsvWriter<%=cid %>.flush();
            		                <%}%>
            		                }
         					        <%
         					    }
         					    %>  					
         					}	
            			    currentRow_<%=cid%>++;		
             			
            			    <%
            			}else{
            			    %>
            			    CsvWriter<%=cid%>.writeRecord(row<%=cid%>);	
            			    <%if(isInRowMode){%>
            			    out<%=cid%>.write(strWriter<%=cid%>.getBuffer().toString());
                			strWriter<%=cid%>.getBuffer().delete(0, strWriter<%=cid%>.getBuffer().length());
            			    <%}
            			    if(flushOnRow) { 
            			        %>
            		                if(nb_line_<%=cid %>%<%=flushMod %> == 0) {
            		                <%if(isInRowMode){%>
            		                out<%=cid%>.flush();
            		                <%}else{%>
            		                CsvWriter<%=cid %>.flush();
            		                <%}%>
            		                }
            			        <%
                			}
            			    %>  				
            			    <%   		
            		
            			}
            			%>
<% 
						if ( isParallelize) {
%>
    			} 
<%
    		        	}
    					if (codeGenArgument.subTreeContainsParallelIterate()) {
%>
				}
<%
						}
						if(codeGenArgument.getIsRunInMultiThread()){
%>
    			}
<%
    					}
%>
            			nb_line_<%=cid %>++;
            			<%   		
            		}
        		
        		}
        	}	
    	
        }
    
    }
    %>

<%
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}
%>
