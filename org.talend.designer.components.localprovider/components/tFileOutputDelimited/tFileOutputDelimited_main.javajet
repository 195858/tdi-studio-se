<%@ jet 
	imports="
		org.talend.core.model.process.INode
		org.talend.core.model.process.ElementParameterParser  
		org.talend.core.model.metadata.IMetadataTable
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory 
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
		java.util.List
	"
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();

List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
    IMetadataTable metadata = metadatas.get(0);
    if (metadata!=null) {
        String cid = node.getUniqueName();
        
        String filename = ElementParameterParser.getValueWithUIFieldKey(
            node,
            "__FILENAME__",
            "FILENAME"
        );
        
        String prefixfileName = filename.substring(0,filename.lastIndexOf("."));
        String suffixfileName=filename.substring(filename.lastIndexOf("."),filename.length());
        
        String fieldSeparator = ElementParameterParser.getValueWithUIFieldKey(
            node,
            "__FIELDSEPARATOR__",
            "FIELDSEPARATOR"
        );
        
        String rowSeparator = ElementParameterParser.getValueWithUIFieldKey(
            node,
            "__ROWSEPARATOR__",
            "ROWSEPARATOR"
        );
        
        String encoding = ElementParameterParser.getValue(
            node,
            "__ENCODING__"
        );
        
        boolean isAppend = ElementParameterParser.getValue(
            node,
            "__APPEND__"
        ).equals("true");
        
        boolean isIncludeHeader = ElementParameterParser.getValue(
            node,
            "__INCLUDEHEADER__"
        ).equals("true");
		String fileNewname = ElementParameterParser.getValue(node,"__FILENAME__");
		
		boolean split = ElementParameterParser.getValue(node, "__SPLIT__").equals("true");
        String splitEvery = ElementParameterParser.getValue(node, "__SPLIT_EVERY__");

    	List< ? extends IConnection> conns = node.getIncomingConnections();
    	for (IConnection conn : conns) {
    		if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
%>
				StringBuilder sb_<%=cid %> = new StringBuilder();
						
<%  
    			List<IMetadataColumn> columns = metadata.getListColumns();
    			int sizeColumns = columns.size();
    			for (int i = 0; i < sizeColumns; i++) {
  			
    				IMetadataColumn column = columns.get(i);
					JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
					boolean isPrimitive = JavaTypesManager.isJavaPrimitiveType( javaType, column.isNullable());
					if(!isPrimitive) {
    				%>   				
	    				if(<%=conn.getName() %>.<%=column.getLabel() %> != null) {
    				<%
    				} 
    				%>
    						sb_<%=cid %>.append(
    				<%
    				String pattern = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
    				if (javaType == JavaTypesManager.DATE && pattern != null && pattern.trim().length() != 0) {
%>
								FormatterUtils.format_Date(<%=conn.getName() %>.<%=column.getLabel() %>, <%= pattern %>)
<%				
					} else {
%>
								<%=conn.getName() %>.<%=column.getLabel() %>
<%				
					}
%>
							);
<%
					if(!isPrimitive) {
    				%>
	    				} 
					<%
    				} 
					if(i != sizeColumns - 1) {
%>					
							sb_<%=cid %>.append(OUT_DELIM_<%=cid %>);
<%
    				}
    			}
    			%>
    			sb_<%=cid %>.append(OUT_DELIM_ROWSEP_<%=cid %>);
    			
<% if(split){ %>
		if(currentRow_<%=cid%> % splitEvery_<%=cid%>==0 && currentRow_<%=cid%>!=0){
			splitedFileNo_<%=cid%>++;
			out<%=cid %>.close(); 
			//close original outputStream
<%
 		if(filename.startsWith("\"") && filename.endsWith("\"")){
%>

		out<%=cid %> = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
        		new java.io.FileOutputStream(<%=prefixfileName %>"+splitedFileNo_<%=cid%>+"<%=suffixfileName%>, <%= isAppend%>),<%= encoding%>));
       java.io.File file<%=cid%>=new java.io.File(<%=prefixfileName %>"+splitedFileNo_<%=cid%>+"<%=suffixfileName%>);	  
<%
 		}else{
%>
		out<%=cid %> = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
        		new java.io.FileOutputStream(prefix_fn_<%=cid%>+splitedFileNo_<%=cid%>+suffix_fn_<%=cid%>, <%= isAppend%>),<%= encoding%>));
        file<%=cid%>=new java.io.File(prefix_fn_<%=cid%>+splitedFileNo_<%=cid%>+suffix_fn_<%=cid%>);	  
<%
 		}
%> 					

<%
		if(isIncludeHeader){
%>
     	  if(file<%=cid%>.length()==0)  
     	  {
<%		
    		List<IMetadataColumn> columns = metadata.getListColumns();
    		int sizeColumns = columns.size();
    		for (int i = 0; i < sizeColumns; i++) {
    			IMetadataColumn column = columns.get(i);
    		%>
    			out<%=cid %>.write("<%=column.getLabel() %>");
    		<%
    			if(i != sizeColumns - 1) {
    				%>out<%=cid %>.write(OUT_DELIM_<%=cid %>);<%
    			}
    		}%>
    		out<%=cid %>.write(OUT_DELIM_ROWSEP_<%=cid %>);
    	  }	
<%
		}
%>
			out<%=cid %>.write(sb_<%=cid %>.toString());
 		}else{
 			out<%=cid %>.write(sb_<%=cid %>.toString());
 		}	
 		currentRow_<%=cid%>++;				
					
		
<% } else { %>
    			
    			out<%=cid %>.write(sb_<%=cid %>.toString());
<%
	}
%>  			
    			nb_line_<%=cid %>++;
    <%
    		}
    	}
    }
}
%>