<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.metadata.IMetadataTable
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.List
" 
%>

<% 
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

boolean useStream = ("true").equals(ElementParameterParser.getValue(node,"__USESTREAM__"));
String outStream = ElementParameterParser.getValue(node,"__STREAMNAME__");
String fileName = ElementParameterParser.getValue(node,"__FILENAME__");

String parallelize = ElementParameterParser.getValue(node,"__PARALLELIZE__");
boolean isParallelize = (parallelize!=null&&!("").equals(parallelize))?("true").equals(parallelize):false;
			
if(!useStream){
%>
String fileName_<%=cid%> = (new java.io.File(<%=fileName%>)).getAbsolutePath().replace("\\","/");
String fullName_<%=cid%> = null;
String extension_<%=cid%> = null;
String directory_<%=cid%> = null;
if((fileName_<%=cid%>.indexOf("/") != -1)) {
    if(fileName_<%=cid%>.lastIndexOf(".") < fileName_<%=cid%>.lastIndexOf("/")) {
        fullName_<%=cid%> = fileName_<%=cid%>;
        extension_<%=cid%> = "";
    } else {
        fullName_<%=cid%> = fileName_<%=cid%>.substring(0, fileName_<%=cid%>.lastIndexOf("."));
        extension_<%=cid%> = fileName_<%=cid%>.substring(fileName_<%=cid%>.lastIndexOf("."));
    }           
    directory_<%=cid%> = fileName_<%=cid%>.substring(0, fileName_<%=cid%>.lastIndexOf("/"));            
} else {
    if(fileName_<%=cid%>.lastIndexOf(".") != -1) {
        fullName_<%=cid%> = fileName_<%=cid%>.substring(0, fileName_<%=cid%>.lastIndexOf("."));
        extension_<%=cid%> = fileName_<%=cid%>.substring(fileName_<%=cid%>.lastIndexOf("."));
    } else {
        fullName_<%=cid%> = fileName_<%=cid%>;
        extension_<%=cid%> = "";
    }
    directory_<%=cid%> = "";
}
<%
}
if(("false").equals(ElementParameterParser.getValue(node,"__CSV_OPTION__"))) {	
// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    %>

    <%
    
    List<IMetadataTable> metadatas = node.getMetadataList();
    if ((metadatas!=null)&&(metadatas.size()>0)) {
        IMetadataTable metadata = metadatas.get(0);
        if (metadata!=null) {
            String fullName = null;
            String extensionName = null;
            String directoryName = null;    
            
            String fieldSeparator = ElementParameterParser.getValueWithUIFieldKey(
                node,
                "__FIELDSEPARATOR__",
                "FIELDSEPARATOR"
            );
            
            String rowSeparator = ElementParameterParser.getValueWithUIFieldKey(
                node,
                "__ROWSEPARATOR__",
                "ROWSEPARATOR"
            );
            
            String encoding = ElementParameterParser.getValue(
                node,
                "__ENCODING__"
            );
            
            boolean isAppend = ("true").equals(ElementParameterParser.getValue(node,"__APPEND__"));
            
            boolean isIncludeHeader = ("true").equals(ElementParameterParser.getValue(node,"__INCLUDEHEADER__"));
    		String fileNewname = ElementParameterParser.getValue(node,"__FILENAME__");
    		
    		boolean isInRowMode = ("true").equals(ElementParameterParser.getValue(node,"__ROW_MODE__"));
    		
    		boolean split = ("true").equals(ElementParameterParser.getValue(node, "__SPLIT__"));
            String splitEvery = ElementParameterParser.getValue(node, "__SPLIT_EVERY__");
            
            boolean compress = ("true").equals(ElementParameterParser.getValue(node,"__COMPRESS__"));
            %>
    		int nb_line_<%=cid%> = 0;
            int splitEvery_<%=cid%> = <%=splitEvery %>;
            int splitedFileNo_<%=cid%> = 0;
            int currentRow_<%=cid%> = 0;		
    		
    		final String OUT_DELIM_<%=cid %> = <%=fieldSeparator %>;
    		
    		final String OUT_DELIM_ROWSEP_<%=cid %> = <%=rowSeparator %>;

<%
			if(!useStream){
			//**************************** the following is the part of file Path***************************************
			
    			if(("true").equals(ElementParameterParser.getValue(node,"__CREATE__"))){
%>         
                //create directory only if not exists
                if(directory_<%=cid%> != null && directory_<%=cid%>.trim().length() != 0) {
                    java.io.File dir_<%=cid%> = new java.io.File(directory_<%=cid%>);
                    if(!dir_<%=cid%>.exists()) {
                        dir_<%=cid%>.mkdirs();
                    }
                }
<%
    			}
%>
    
<% 	
    			String writerClass = null;
    			if(isInRowMode){
    				writerClass = "routines.system.BufferedOutput";
    			}else{
    				writerClass = "java.io.BufferedWriter";
    			}
    			if(!split){
    				if(compress){// compress the dest file
%>
				java.io.File file<%=cid%> = new java.io.File(fileName_<%=cid%>);
				String zipName_<%=cid %> = fullName_<%=cid%> + ".zip";
    		    //routines.system.Row
    		    java.util.zip.ZipOutputStream zipOut_<%=cid %>=new java.util.zip.ZipOutputStream(
    		    			new java.io.BufferedOutputStream(new java.io.FileOutputStream(zipName_<%=cid%>)));
    		    zipOut_<%=cid %>.putNextEntry(new java.util.zip.ZipEntry(file<%=cid%>.getName()));
    		    java.io.Writer out<%=cid %> = new <%=writerClass%>(new java.io.OutputStreamWriter(zipOut_<%=cid %>,<%=encoding%>));
<%
    				}else{
%>		
    		    //routines.system.Row
    		    java.io.Writer out<%=cid %> = new <%=writerClass%>(new java.io.OutputStreamWriter(
            		new java.io.FileOutputStream(fileName_<%=cid%>, <%=isAppend%>),<%=encoding%>));
    		    java.io.File file<%=cid%> = new java.io.File(fileName_<%=cid%>);
<% 
					}
    			} else {
%>
                java.io.Writer out<%=cid %> = new <%=writerClass%>(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fullName_<%=cid%> + splitedFileNo_<%=cid%> + extension_<%=cid%>, <%=isAppend%>),<%=encoding%>));
                java.io.File file<%=cid%> = new java.io.File(fullName_<%=cid%> + splitedFileNo_<%=cid%> + extension_<%=cid%>);
<%
    			}
    			
    			if(isIncludeHeader){
    		    %>
				<%
					if(codeGenArgument.getIsRunInMultiThread()){
				%>
				synchronized (multiThreadLockWrite) {
				<%
					}
					if (codeGenArgument.subTreeContainsParallelIterate()) {
				%>
				synchronized (lockWrite) {
		        <% 
		        	}
		        	if (isParallelize) {
				%>
				Object[] pLockWrite = (Object[])globalMap.get("PARALLEL_LOCK_WRITE");
				synchronized (pLockWrite) {
				<% 
					}
		        %>
    		    if(file<%=cid%>.length()==0)  
    		    {
    		        <%		
	    		        List<IMetadataColumn> columns = metadata.getListColumns();
	    		        int sizeColumns = columns.size();
	    		        for (int i = 0; i < sizeColumns; i++) {
	    		            IMetadataColumn column = columns.get(i);
	    		            %>
	    		            out<%=cid %>.write("<%=column.getLabel() %>");
	    		            <%
	    		            if(i != sizeColumns - 1) {
	    		                %>
	    		                out<%=cid %>.write(OUT_DELIM_<%=cid %>);
	    		                <%
	    		            }
	    		        }
    		        %>
    		        out<%=cid %>.write(OUT_DELIM_ROWSEP_<%=cid %>);
    		        out<%=cid %>.flush();
    		    }
		        <% 
		        	if (isParallelize) {
				%>
				} 
		        <%
		        	}
					if (codeGenArgument.subTreeContainsParallelIterate()) {
				%>
				} 
		        <%
		        	}
		        	if(codeGenArgument.getIsRunInMultiThread()){
				%>
				}
				<%
					}
		        %>
<%
    			}

    		}else{
    		//***********************the following is the part of output Stream**************************************
    		
    			String writerClass = null;
    			if(isInRowMode){
    				writerClass = "routines.system.BufferedOutput";
    			}else{
    				writerClass = "java.io.BufferedWriter";
    			}
    			if(compress){// compress the dest output stream
 %>
    		    //routines.system.Row
    		    java.util.zip.ZipOutputStream zipOut_<%=cid %>=new java.util.zip.ZipOutputStream(
    		    			new java.io.BufferedOutputStream(<%=outStream %>));
    		    zipOut_<%=cid %>.putNextEntry(new java.util.zip.ZipEntry("TalendOutputDelimited"));
    		    java.io.OutputStreamWriter writer_<%=cid %> = new java.io.OutputStreamWriter(zipOut_<%=cid %>,<%=encoding%>);
    		    java.io.Writer out<%=cid %> = new <%=writerClass%>(writer_<%=cid %>);
<%
    			}else{
%>		
    		    //routines.system.Row
    		    java.io.OutputStreamWriter writer_<%=cid %> = new java.io.OutputStreamWriter(<%=outStream %>,<%=encoding%>);
    		    java.io.Writer out<%=cid %> = new <%=writerClass%>(writer_<%=cid %>);
<%
				}
    			if(isIncludeHeader){
    		        List<IMetadataColumn> columns = metadata.getListColumns();
    		        int sizeColumns = columns.size();
    		        for (int i = 0; i < sizeColumns; i++) {
    		            IMetadataColumn column = columns.get(i);
    		            %>
    		            out<%=cid %>.write("<%=column.getLabel() %>");
    		            <%
    		            if(i != sizeColumns - 1) {
    		                %>
    		                out<%=cid %>.write(OUT_DELIM_<%=cid %>);
    		                <%
    		            }
    		        }
    		        %>
    		        out<%=cid %>.write(OUT_DELIM_ROWSEP_<%=cid %>);
<%
    		    }
    		}// ****************************output Stream end*************************************
        }
    }
    %>

<%
// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}else{// the following is the tFileOutputCSV component
// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    %>

    <%
    
    List<IMetadataTable> metadatas = node.getMetadataList();
    if ((metadatas!=null)&&(metadatas.size()>0)) {
        IMetadataTable metadata = metadatas.get(0);
        if (metadata!=null) {                        
            String encoding = ElementParameterParser.getValue(node,"__ENCODING__");
    		String delim = ElementParameterParser.getValue(node, "__FIELDSEPARATOR__");
        	boolean isAppend = ("true").equals(ElementParameterParser.getValue(node,"__APPEND__"));
        	boolean isIncludeHeader = ("true").equals(ElementParameterParser.getValue(node,"__INCLUDEHEADER__"));
        	boolean split = ("true").equals(ElementParameterParser.getValue(node, "__SPLIT__"));
        	boolean isInRowMode = ("true").equals(ElementParameterParser.getValue(node,"__ROW_MODE__"));
            String splitEvery = ElementParameterParser.getValue(node, "__SPLIT_EVERY__");
            
            boolean compress = ("true").equals(ElementParameterParser.getValue(node,"__COMPRESS__"));
            %>        
            int nb_line_<%=cid%> = 0;
            int splitEvery_<%=cid%> = <%=splitEvery %>;
            int splitedFileNo_<%=cid%> =0;
            int currentRow_<%=cid%> = 0;
            
            char field_Delim_<%=cid %>[] = null;
            
    		//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'.
    		if ( ((String)<%=delim %>).length() > 0 ){
    			field_Delim_<%=cid %> = ((String)<%=delim %>).toCharArray();
    		}else { 
    			throw new IllegalArgumentException("Field Separator must be assigned a char.");
    		}
		
            <%
			if(!useStream){
			//**************************** the following is the part of file Path***************************************
            	if(("true").equals(ElementParameterParser.getValue(node,"__CREATE__"))){
                %>         
                //create directory only if not exists
                if(directory_<%=cid%> != null && directory_<%=cid%>.trim().length() != 0) {
                    java.io.File dir_<%=cid%> = new java.io.File(directory_<%=cid%>);
                    if(!dir_<%=cid%>.exists()) {
                        dir_<%=cid%>.mkdirs();
                    }
                }
                <%
            	}
    	
	            if(!split){
	            	if(isInRowMode){
    					if(compress){// compress the dest file
%>
				java.io.File file<%=cid%> = new java.io.File(fileName_<%=cid%>);
				String zipName_<%=cid %> = fullName_<%=cid%> + ".zip";
    		    //routines.system.Row
    		    java.util.zip.ZipOutputStream zipOut_<%=cid %>=new java.util.zip.ZipOutputStream(
    		    			new java.io.BufferedOutputStream(new java.io.FileOutputStream(zipName_<%=cid%>)));
    		    zipOut_<%=cid %>.putNextEntry(new java.util.zip.ZipEntry(file<%=cid%>.getName()));
                java.io.Writer out<%=cid %> = new routines.system.BufferedOutput(new java.io.OutputStreamWriter(zipOut_<%=cid %>, <%=encoding%>));
				java.io.StringWriter strWriter<%=cid%> = new java.io.StringWriter();
                com.csvreader.CsvWriter CsvWriter<%=cid%> = new com.csvreader.CsvWriter(strWriter<%=cid%>, field_Delim_<%=cid %>[0]); 
<%
    					}else{
%>		
                java.io.Writer out<%=cid %> = new routines.system.BufferedOutput(new java.io.OutputStreamWriter(
                    new java.io.FileOutputStream(fileName_<%=cid%>, <%=isAppend%>), <%=encoding%>));
				java.io.StringWriter strWriter<%=cid%> = new java.io.StringWriter();
                com.csvreader.CsvWriter CsvWriter<%=cid%> = new com.csvreader.CsvWriter(strWriter<%=cid%>, field_Delim_<%=cid %>[0]);  
                
                java.io.File file_<%=cid%>=new java.io.File(fileName_<%=cid%>);
                <%
                		}
                	}else{
                		if(compress){// compress the dest file
				%>
				java.io.File file<%=cid%> = new java.io.File(fileName_<%=cid%>);
				String zipName_<%=cid %> = fullName_<%=cid%> + ".zip";
    		    //routines.system.Row
    		    java.util.zip.ZipOutputStream zipOut_<%=cid %>=new java.util.zip.ZipOutputStream(
    		    			new java.io.BufferedOutputStream(new java.io.FileOutputStream(zipName_<%=cid%>)));
    		    zipOut_<%=cid %>.putNextEntry(new java.util.zip.ZipEntry(file<%=cid%>.getName()));
				com.csvreader.CsvWriter CsvWriter<%=cid%> = new com.csvreader.CsvWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                    zipOut_<%=cid %>, <%=encoding%>)), field_Delim_<%=cid %>[0]); 
				<%
						}else{
				%>
				com.csvreader.CsvWriter CsvWriter<%=cid%> = new com.csvreader.CsvWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                    new java.io.FileOutputStream(fileName_<%=cid%>, <%=isAppend%>), <%=encoding%>)), field_Delim_<%=cid %>[0]);
                
                java.io.File file_<%=cid%>=new java.io.File(fileName_<%=cid%>);  
				<%
						}
                	}
	            }else{
	            	if(isInRowMode){
                %>
                java.io.Writer out<%=cid %> = new routines.system.BufferedOutput(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fullName_<%=cid%> + splitedFileNo_<%=cid%> + extension_<%=cid%>, <%=isAppend%>),<%=encoding%>));
                java.io.StringWriter strWriter<%=cid%> = new java.io.StringWriter();    
                  
                com.csvreader.CsvWriter CsvWriter<%=cid%> = new com.csvreader.CsvWriter(strWriter<%=cid%>, field_Delim_<%=cid %>[0]);
                <%
                	}else{
                %>
                com.csvreader.CsvWriter CsvWriter<%=cid%> = new com.csvreader.CsvWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fullName_<%=cid%> + splitedFileNo_<%=cid%> + extension_<%=cid%>, <%=isAppend%>),<%=encoding%>)), field_Delim_<%=cid %>[0]);
                <%
                	}
                %>
                java.io.File file_<%=cid%> = new java.io.File(fullName_<%=cid%> + splitedFileNo_<%=cid%> + extension_<%=cid%>);
                <%
	            }
	            List<IMetadataColumn> columns = metadata.getListColumns();
	    	    int sizeColumns = columns.size();
    	    %>
    	    String[] headColu<%=cid%> = new String[<%=sizeColumns%>];
    	    <% 		
	    	    if(isIncludeHeader)
	    	    {
    	        %>		   
			<%
				if(codeGenArgument.getIsRunInMultiThread()){
			%>
			synchronized (multiThreadLockWrite) {
			<%
				}
				if (codeGenArgument.subTreeContainsParallelIterate()) {
			%>
			synchronized (lockWrite) {
	        <% 
	        	}
	        	if (isParallelize) {
			%>
			Object[] pLockWrite = (Object[])globalMap.get("PARALLEL_LOCK_WRITE");
			synchronized (pLockWrite) {
			<% 
				}
	        %>
    	        if(file_<%=cid%>.length()==0)  
    	        {
    	            <%			
	         			for(int i = 0 ; i < sizeColumns ; i++)
	        			{
	        				IMetadataColumn column = columns.get(i);
        				%>	      	
        				headColu<%=cid%>[<%=i%>]="<%=column.getLabel() %>";
        				<%
         				}
    	            %>	 
    	            CsvWriter<%=cid%>.writeRecord(headColu<%=cid%>);
    	            CsvWriter<%=cid%>.flush();
    	            	<%if(isInRowMode){%>
    	            out<%=cid%>.write(strWriter<%=cid%>.getBuffer().toString());
    	            out<%=cid%>.flush();
                	strWriter<%=cid%>.getBuffer().delete(0, strWriter<%=cid%>.getBuffer().length()); 	
                		<%}%>
    	        }
	        <% 
	        	if (isParallelize) {
			%>
			} 
	        <%
	        	}
				if (codeGenArgument.subTreeContainsParallelIterate()) {
			%>
			} 
	        <%
	        	}
	        	if(codeGenArgument.getIsRunInMultiThread()){
			%>
			}
			<%
				}
	        %>
<%		  
	    	    }
	    	}else{
    		//***********************the following is the part of output Stream**************************************
	            if(isInRowMode){
	            	if(compress){// compress the dest output stream
%>
    		    java.util.zip.ZipOutputStream zipOut_<%=cid %>=new java.util.zip.ZipOutputStream(
    		    			new java.io.BufferedOutputStream(<%=outStream %>));
    		    zipOut_<%=cid %>.putNextEntry(new java.util.zip.ZipEntry("TalendOutputDelimited"));
				java.io.OutputStreamWriter outWriter_<%=cid %> = new java.io.OutputStreamWriter(zipOut_<%=cid %>, <%=encoding%>);
                java.io.Writer out<%=cid %> = new routines.system.BufferedOutput(outWriter_<%=cid %>);
				java.io.StringWriter strWriter<%=cid%> = new java.io.StringWriter();
                com.csvreader.CsvWriter CsvWriter<%=cid%> = new com.csvreader.CsvWriter(strWriter<%=cid%>, field_Delim_<%=cid %>[0]);  
<%
	            	}else{
%>
				java.io.OutputStreamWriter outWriter_<%=cid %> = new java.io.OutputStreamWriter(<%=outStream %>, <%=encoding%>);
                java.io.Writer out<%=cid %> = new routines.system.BufferedOutput(outWriter_<%=cid %>);
				java.io.StringWriter strWriter<%=cid%> = new java.io.StringWriter();
                com.csvreader.CsvWriter CsvWriter<%=cid%> = new com.csvreader.CsvWriter(strWriter<%=cid%>, field_Delim_<%=cid %>[0]);  
<%
					}
                }else{
                	if(compress){// compress the dest output stream
%>
    		    java.util.zip.ZipOutputStream zipOut_<%=cid %>=new java.util.zip.ZipOutputStream(
    		    			new java.io.BufferedOutputStream(<%=outStream %>));
    		    zipOut_<%=cid %>.putNextEntry(new java.util.zip.ZipEntry("TalendOutputDelimited"));
				java.io.OutputStreamWriter outWriter_<%=cid %> = new java.io.OutputStreamWriter(zipOut_<%=cid %>, <%=encoding%>);
				java.io.BufferedWriter bufferWriter_<%=cid %> = new java.io.BufferedWriter(outWriter_<%=cid %>);
				com.csvreader.CsvWriter CsvWriter<%=cid%> = new com.csvreader.CsvWriter(bufferWriter_<%=cid %>, field_Delim_<%=cid %>[0]);
<%
                	}else{
%>
				java.io.OutputStreamWriter outWriter_<%=cid %> = new java.io.OutputStreamWriter(<%=outStream %>, <%=encoding%>);
				java.io.BufferedWriter bufferWriter_<%=cid %> = new java.io.BufferedWriter(outWriter_<%=cid %>);
				com.csvreader.CsvWriter CsvWriter<%=cid%> = new com.csvreader.CsvWriter(bufferWriter_<%=cid %>, field_Delim_<%=cid %>[0]);  
<%
					}
                }
	            List<IMetadataColumn> columns = metadata.getListColumns();
	    	    int sizeColumns = columns.size();
    	    %>
    	    	String[] headColu<%=cid%> = new String[<%=sizeColumns%>];
    	    <% 		
	    	    if(isIncludeHeader)
	    	    {
	    	        for(int i = 0; i < sizeColumns; i++)
	        		{
	        			IMetadataColumn column = columns.get(i);
        			%>
       				headColu<%=cid%>[<%=i%>]="<%=column.getLabel() %>";
       				<%
	        		}
    	        %>
        		CsvWriter<%=cid%>.writeRecord(headColu<%=cid%>);	
        			<%if(isInRowMode){%>
        		out<%=cid%>.write(strWriter<%=cid%>.getBuffer().toString());
                strWriter<%=cid%>.getBuffer().delete(0, strWriter<%=cid%>.getBuffer().length());
        			<%}
	    	    }
	    	}//*****************************csv mode under output stream end********************************************************
	    }
    }
    %>


<%
// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}
%>
