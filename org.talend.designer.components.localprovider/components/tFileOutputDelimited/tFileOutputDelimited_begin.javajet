<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.metadata.IMetadataTable
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.List
" 
%>

<% 
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();
String fileName = ElementParameterParser.getValue(node,"__FILENAME__");
%>
String fileName_<%=cid%> = (new java.io.File(<%=fileName%>)).getAbsolutePath().replace("\\","/");
String fullName_<%=cid%> = null;
String extension_<%=cid%> = null;
String directory_<%=cid%> = null;
if((fileName_<%=cid%>.indexOf("/") != -1)) {
    if(fileName_<%=cid%>.lastIndexOf(".") < fileName_<%=cid%>.lastIndexOf("/")) {
        fullName_<%=cid%> = fileName_<%=cid%>;
        extension_<%=cid%> = "";
    } else {
        fullName_<%=cid%> = fileName_<%=cid%>.substring(0, fileName_<%=cid%>.lastIndexOf("."));
        extension_<%=cid%> = fileName_<%=cid%>.substring(fileName_<%=cid%>.lastIndexOf("."));
    }           
    directory_<%=cid%> = fileName_<%=cid%>.substring(0, fileName_<%=cid%>.lastIndexOf("/"));            
} else {
    if(fileName_<%=cid%>.lastIndexOf(".") != -1) {
        fullName_<%=cid%> = fileName_<%=cid%>.substring(0, fileName_<%=cid%>.lastIndexOf("."));
        extension_<%=cid%> = fileName_<%=cid%>.substring(fileName_<%=cid%>.lastIndexOf("."));
    } else {
        fullName_<%=cid%> = fileName_<%=cid%>;
        extension_<%=cid%> = "";
    }
    directory_<%=cid%> = "";
}
<%
if(ElementParameterParser.getValue(node,"__CSV_OPTION__").equals("false")) {	
// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    %>

    <%
    
    List<IMetadataTable> metadatas = node.getMetadataList();
    if ((metadatas!=null)&&(metadatas.size()>0)) {
        IMetadataTable metadata = metadatas.get(0);
        if (metadata!=null) {
            String fullName = null;
            String extensionName = null;
            String directoryName = null;    
            
            String fieldSeparator = ElementParameterParser.getValueWithUIFieldKey(
                node,
                "__FIELDSEPARATOR__",
                "FIELDSEPARATOR"
            );
            
            String rowSeparator = ElementParameterParser.getValueWithUIFieldKey(
                node,
                "__ROWSEPARATOR__",
                "ROWSEPARATOR"
            );
            
            String encoding = ElementParameterParser.getValue(
                node,
                "__ENCODING__"
            );
            
            boolean isAppend = ElementParameterParser.getValue(
                node,
                "__APPEND__"
            ).equals("true");
            
            boolean isIncludeHeader = ElementParameterParser.getValue(
                node,
                "__INCLUDEHEADER__"
            ).equals("true");
    		String fileNewname = ElementParameterParser.getValue(node,"__FILENAME__");
    		
    		boolean isInRowMode = ElementParameterParser.getValue(
                node,
                "__ROW_MODE__"
            ).equals("true");
    		
    		boolean split = ElementParameterParser.getValue(node, "__SPLIT__").equals("true");
            String splitEvery = ElementParameterParser.getValue(node, "__SPLIT_EVERY__");
            %>
    		int nb_line_<%=cid%> = 0;
            int splitEvery_<%=cid%> = <%=splitEvery %>;
            int splitedFileNo_<%=cid%> = 0;
            int currentRow_<%=cid%> = 0;		
    		
    		final String OUT_DELIM_<%=cid %> = <%=fieldSeparator %>;
    		
    		final String OUT_DELIM_ROWSEP_<%=cid %> = <%=rowSeparator %>;
    		<%
    		if(ElementParameterParser.getValue(node,"__CREATE__").equals("true")){
                %>         
                //create directory only if not exists
                if(directory_<%=cid%> != null && directory_<%=cid%>.trim().length() != 0) {
                    java.io.File dir_<%=cid%> = new java.io.File(directory_<%=cid%>);
                    if(!dir_<%=cid%>.exists()) {
                        dir_<%=cid%>.mkdirs();
                    }
                }
                <%
    		}
    		%>
    
    		<% 	
    		String writerClass = null;
    		if(isInRowMode){
    			writerClass = "routines.system.BufferedOutput";
    		}else{
    			writerClass = "java.io.BufferedWriter";
    		}
    		if(!split){
    		    %>		
    		    //routines.system.Row
    		    java.io.Writer out<%=cid %> = new <%=writerClass%>(new java.io.OutputStreamWriter(
            		new java.io.FileOutputStream(fileName_<%=cid%>, <%=isAppend%>),<%=encoding%>));
    		    java.io.File file<%=cid%> = new java.io.File(fileName_<%=cid%>);
    		    <% 
    		} else {
    		    %>
                java.io.Writer out<%=cid %> = new <%=writerClass%>(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fullName_<%=cid%> + splitedFileNo_<%=cid%> + extension_<%=cid%>, <%=isAppend%>),<%=encoding%>));
                java.io.File file<%=cid%> = new java.io.File(fullName_<%=cid%> + splitedFileNo_<%=cid%> + extension_<%=cid%>);
                <%
    		}
    		%>
            		
    		<%
    		if(isIncludeHeader){
    		    %>
    		    if(file<%=cid%>.length()==0)  
    		    {
    		        <%		
    		        List<IMetadataColumn> columns = metadata.getListColumns();
    		        int sizeColumns = columns.size();
    		        for (int i = 0; i < sizeColumns; i++) {
    		            IMetadataColumn column = columns.get(i);
    		            %>
    		            out<%=cid %>.write("<%=column.getLabel() %>");
    		            <%
    		            if(i != sizeColumns - 1) {
    		                %>
    		                out<%=cid %>.write(OUT_DELIM_<%=cid %>);
    		                <%
    		            }
    		        }
    		        %>
    		        out<%=cid %>.write(OUT_DELIM_ROWSEP_<%=cid %>);
    		    }	
    		    <%
    		}
        }
    }
    %>

<%
// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}else{// the following is the tFileOutputCSV component
// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    %>

    <%
    
    List<IMetadataTable> metadatas = node.getMetadataList();
    if ((metadatas!=null)&&(metadatas.size()>0)) {
        IMetadataTable metadata = metadatas.get(0);
        if (metadata!=null) {                        
            String encoding = ElementParameterParser.getValue(node,"__ENCODING__");
    		String delim = ElementParameterParser.getValue(node, "__FIELDSEPARATOR__");
        	boolean isAppend = ElementParameterParser.getValue(node,"__APPEND__").equals("true");
        	boolean isIncludeHeader = ElementParameterParser.getValue(node,"__INCLUDEHEADER__").equals("true");
        	boolean split = ElementParameterParser.getValue(node, "__SPLIT__").equals("true");
        	boolean isInRowMode = ElementParameterParser.getValue(node,"__ROW_MODE__").equals("true");
            String splitEvery = ElementParameterParser.getValue(node, "__SPLIT_EVERY__");
            %>        
            int nb_line_<%=cid%> = 0;
            int splitEvery_<%=cid%> = <%=splitEvery %>;
            int splitedFileNo_<%=cid%> =0;
            int currentRow_<%=cid%> = 0;
            
            char field_Delim_<%=cid %>[] = null;
            
    		//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'.
    		if ( ((String)<%=delim %>).length() > 0 ){
    			field_Delim_<%=cid %> = ((String)<%=delim %>).toCharArray();
    		}else { 
    			throw new IllegalArgumentException("Field Separator must be assigned a char.");
    		}
		
            <%
            if(ElementParameterParser.getValue(node,"__CREATE__").equals("true")){
                %>         
                //create directory only if not exists
                if(directory_<%=cid%> != null && directory_<%=cid%>.trim().length() != 0) {
                    java.io.File dir_<%=cid%> = new java.io.File(directory_<%=cid%>);
                    if(!dir_<%=cid%>.exists()) {
                        dir_<%=cid%>.mkdirs();
                    }
                }
                <%
            }
    	
            if(!split){
            	if(isInRowMode){
                %>
                java.io.Writer out<%=cid %> = new routines.system.BufferedOutput(new java.io.OutputStreamWriter(
                    new java.io.FileOutputStream(fileName_<%=cid%>, <%=isAppend%>), <%=encoding%>));
				java.io.StringWriter strWriter<%=cid%> = new java.io.StringWriter();
                com.csvreader.CsvWriter CsvWriter<%=cid%> = new com.csvreader.CsvWriter(strWriter<%=cid%>, field_Delim_<%=cid %>[0]);  
                <%
                }else{
				%>
				com.csvreader.CsvWriter CsvWriter<%=cid%> = new com.csvreader.CsvWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                    new java.io.FileOutputStream(fileName_<%=cid%>, <%=isAppend%>), <%=encoding%>)), field_Delim_<%=cid %>[0]);  
				<%
                }
                %>      
                            java.io.File file_<%=cid%>=new java.io.File(fileName_<%=cid%>);   
                <%
            }else{
            	if(isInRowMode){
                %>
                java.io.Writer out<%=cid %> = new routines.system.BufferedOutput(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fullName_<%=cid%> + splitedFileNo_<%=cid%> + extension_<%=cid%>, <%=isAppend%>),<%=encoding%>));
                java.io.StringWriter strWriter<%=cid%> = new java.io.StringWriter();    
                  
                com.csvreader.CsvWriter CsvWriter<%=cid%> = new com.csvreader.CsvWriter(strWriter<%=cid%>, field_Delim_<%=cid %>[0]);
                <%
                }else{
                %>
                com.csvreader.CsvWriter CsvWriter<%=cid%> = new com.csvreader.CsvWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fullName_<%=cid%> + splitedFileNo_<%=cid%> + extension_<%=cid%>, <%=isAppend%>),<%=encoding%>)), field_Delim_<%=cid %>[0]);
                <%
                }
                %>
                java.io.File file_<%=cid%> = new java.io.File(fullName_<%=cid%> + splitedFileNo_<%=cid%> + extension_<%=cid%>);
                <%
            }
            List<IMetadataColumn> columns = metadata.getListColumns();
    	    int sizeColumns = columns.size();
    	    %>
    	    String[] headColu<%=cid%> = new String[<%=sizeColumns%>];
    	    <% 		
    	    if(isIncludeHeader && !isAppend)
    	    {
    	        for(int i = 0; i < sizeColumns; i++)
        		{
        			IMetadataColumn column = columns.get(i);
        			%>
       				headColu<%=cid%>[<%=i%>]="<%=column.getLabel() %>";
       				<%
        		}
    	        %>
        		CsvWriter<%=cid%>.writeRecord(headColu<%=cid%>);	
        		<%if(isInRowMode){%>
        		out<%=cid%>.write(strWriter<%=cid%>.getBuffer().toString());
                strWriter<%=cid%>.getBuffer().delete(0, strWriter<%=cid%>.getBuffer().length());
        		<%}
    	    }
    	    if(isIncludeHeader && isAppend)
    	    {
     		   
    	        %>		   
    	        if(file_<%=cid%>.length()==0)  
    	        {
    	            <%			
         			for(int i = 0 ; i < sizeColumns ; i++)
        			{
        				IMetadataColumn column = columns.get(i);
        				%>	      	
        				headColu<%=cid%>[<%=i%>]="<%=column.getLabel() %>";
        				<%
         			}
    	            %>	 
    	            CsvWriter<%=cid%>.writeRecord(headColu<%=cid%>);
    	            <%if(isInRowMode){%>
    	            out<%=cid%>.write(strWriter<%=cid%>.getBuffer().toString());
                	strWriter<%=cid%>.getBuffer().delete(0, strWriter<%=cid%>.getBuffer().length()); 	
                	<%}%>
    	        }
     
    	        <%		  
    	    } 
	    }
    }
    %>


<%
// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}
%>
