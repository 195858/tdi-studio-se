<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.ElementParameterParser 
		java.util.List
	" 
%>

<% 
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();
    String cid = node.getUniqueName();
    boolean useStream = ("true").equals(ElementParameterParser.getValue(node,"__USESTREAM__"));
    boolean isInRowMode = ("true").equals(ElementParameterParser.getValue(node,"__ROW_MODE__"));
    
    String filename = ElementParameterParser.getValue(node,"__FILENAME__");
	boolean isDeleteEmptyFile = ("true").equals(ElementParameterParser.getValue(node, "__DELETE_EMPTYFILE__")); 
	boolean isAppend = ("true").equals(ElementParameterParser.getValue(node,"__APPEND__"));
	
	boolean compress = ("true").equals(ElementParameterParser.getValue(node,"__COMPRESS__"));
	
	String parallelize = ElementParameterParser.getValue(node,"__PARALLELIZE__");
	boolean isParallelize = (parallelize!=null&&!("").equals(parallelize))?("true").equals(parallelize):false;
	
	boolean split = ("true").equals(ElementParameterParser.getValue(node, "__SPLIT__"));
%>

<% 
    if(codeGenArgument.getIsRunInMultiThread()){
%>
   	synchronized (multiThreadLockWrite) {
<%
	}
	if (codeGenArgument.subTreeContainsParallelIterate()) {
%>
	synchronized (lockWrite) {
<% 
	}
	
	if (isParallelize) {
%>
	Object[] pLockWrite = (Object[])globalMap.get("PARALLEL_LOCK_WRITE");
	synchronized (pLockWrite) {
<% 
	}
%>

<%	
	if(("false").equals(ElementParameterParser.getValue(node,"__CSV_OPTION__"))) {	
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
%>

<%
	List<IMetadataTable> metadatas = node.getMetadataList();
	if ((metadatas!=null)&&(metadatas.size()>0)) {
		IMetadataTable metadata = metadatas.get(0);
		if (metadata!=null) {
			if(!useStream){
%>
	out<%=cid %>.close();
<%
			}else{
%>
	out<%=cid%>.flush();
	writer_<%=cid %>.flush();
	out<%=cid %> = null;
<%
			}
%>
	globalMap.put("<%=cid %>_NB_LINE",nb_line_<%=cid %>);
<%
		}
	}
%>

<%
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}else{//the following is the tFileOutputCSV component
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
%>

<%
	List<IMetadataTable> metadatas = node.getMetadataList();
	if ((metadatas!=null)&&(metadatas.size()>0)) {
		IMetadataTable metadata = metadatas.get(0);
		if (metadata!=null) {
			if(!useStream){
%>
    CsvWriter<%=cid%>.close();
<%
				if(isInRowMode){
%>
	out<%=cid %>.flush();
	out<%=cid %>.close();
<%
				}
			}else{
				if(isInRowMode){
%>
	CsvWriter<%=cid%>.close();
	out<%=cid %>.flush();
	outWriter_<%=cid %>.flush();
<%
				}else{
%>
	CsvWriter<%=cid%>.flush();
	bufferWriter_<%=cid %>.flush();
	outWriter_<%=cid %>.flush();
	CsvWriter<%=cid%> = null;
<%
				}
			}
%>
    globalMap.put("<%=cid %>_NB_LINE",nb_line_<%=cid %>);
<%
		}
	}
%>

<%
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }
%>
<% 
	if (isParallelize) {
%>
}
<%
	}
	if (codeGenArgument.subTreeContainsParallelIterate()) {
%>
}
<% 
	}
	if(codeGenArgument.getIsRunInMultiThread()){
%>
}
<%
}
%>

<%if(!useStream && isDeleteEmptyFile){%>
	if(isFileGenerated_<%=cid %> && nb_line_<%=cid %> == 0){
	<%if(compress && !isAppend && !split){%>
		new java.io.File(zipName_<%=cid %>).delete();
	<%}else{%>
		new java.io.File(<%=filename %>).delete();
	<%}%>
	}		
<%}%>
