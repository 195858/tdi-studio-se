<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn 
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.metadata.types.JavaType
    org.talend.core.model.metadata.types.JavaTypesManager
    org.talend.core.model.process.IConnection
    java.util.List
    java.util.Map
" 
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();

String cid = node.getUniqueName();
String rowName = null;
String origin = ElementParameterParser.getValue(node, "__ORIGIN__");

	for (INode pNode : node.getProcess().getNodesOfType("tArray")) {
		if (!pNode.getUniqueName().equals(origin + "_Array")) continue; 
		for (IConnection conn : pNode.getIncomingConnections()) {
			rowName = conn.getName();
			break;
		}
		
	}

String outRowName = "";
if ((node.getOutgoingConnections()!=null)&&(node.getOutgoingConnections().size()>0)) {
	outRowName = node.getOutgoingConnections().get(0).getName();
} else {
	outRowName = "defaultRow";
}

%>

<%
List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {//1
    IMetadataTable metadata = metadatas.get(0);
    if (metadata!=null) {//2
    
    List<Map<String, String>> splitFields = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__SPLITFIELD__");
%>
////////////////////////

	java.util.List<<%=rowName %>Struct> row_aref_<%=origin %> = (java.util.List<<%=rowName %>Struct>) globalMap.get("<%=origin %>");
	<%=rowName %>Struct[] rows_<%=cid %> = (<%=rowName %>Struct[]) row_aref_<%=origin %>.toArray(new <%=rowName %>Struct[] {});
	
	int nb_line_<%=cid %> = 0;
	for (int i_<%=cid %>=0; i_<%=cid %> < rows_<%=cid %>.length;i_<%=cid %>++ ) {

//
<%  
    //output the needed split fields
    for (int i=0; i < splitFields.size(); i++) {
		Map<String, String> line = splitFields.get(i); 
		String colname = line.get("INPUT_COLUMN");         		
    	String separator = line.get("SEPARATOR");    	
%>
 		if (rows_<%=cid %>[i_<%=cid %>].<%=colname %> == null) continue;
 		String[] tempArray_<%=colname %>_<%=cid %> = rows_<%=cid %>[i_<%=cid %>].<%=colname %> == null?new String[]{null}:rows_<%=cid %>[i_<%=cid %>].<%=colname %>.split("<%=separator %>");
        for (int k_<%=colname %>_<%=cid %> = 0; k_<%=colname %>_<%=cid %> < tempArray_<%=colname %>_<%=cid %>.length; k_<%=colname %>_<%=cid %>++) {
            <%=outRowName %>.<%=colname %> = tempArray_<%=colname %>_<%=cid %>[k_<%=colname %>_<%=cid %>];
 
<%
   }
%>
//
			
////
<% 
    //output the not need split fields
	for (IMetadataColumn column : metadata.getListColumns()) { 
	
    	boolean isSplitField = false;
    	for (int i=0; i<splitFields.size(); i++) {
    		Map<String, String> line = splitFields.get(i);
    		String colname = line.get("INPUT_COLUMN");
        	if (column.getLabel().equals(colname)) { isSplitField = true; break; }
    	}
    	
    	if (!isSplitField) {
%> 
      <%=outRowName %>.<%=column.getLabel() %> = rows_<%=cid %>[i_<%=cid %>].<%=column.getLabel() %>;
<%
    }
  }
%>
////
		nb_line_<%=cid %>++;
////////////////////////
<%
    }//2    
}//1
%>