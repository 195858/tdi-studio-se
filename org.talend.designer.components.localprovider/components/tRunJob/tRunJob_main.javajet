<%@ jet 
imports="
   org.talend.core.model.metadata.types.JavaType
  org.talend.core.model.process.EConnectionType
  org.talend.core.model.process.IConnection
  org.talend.core.model.metadata.IMetadataColumn
  org.talend.core.model.metadata.IMetadataTable
  org.talend.core.model.metadata.types.JavaTypesManager
  org.talend.core.model.process.INode 
  org.talend.core.model.process.ElementParameterParser
  org.talend.designer.codegen.config.CodeGeneratorArgument
  org.talend.designer.runprocess.ProcessorUtilities
  org.talend.designer.runprocess.ProcessorException
  org.talend.core.model.process.IProcess
  org.talend.core.model.process.IContextParameter
  org.talend.core.model.process.IConnectionCategory
  java.util.Map
  java.util.List
  java.util.ArrayList
"
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();
List<IMetadataColumn> columns = null;
List<IMetadataTable> metadatas = node.getMetadataList();
if (metadatas != null && metadatas.size() > 0) {
    IMetadataTable metadata = metadatas.get(0);
    if (metadata != null) {
        columns = metadata.getListColumns();
    }
}
List< ? extends IConnection> outConns = node.getOutgoingSortedConnections();
  
//if tRunJob is the first node, it can get the return values of the child job.
//if tRunJob is middle node of the FLOW link, it will be data_auto_propagate=true 
List< ? extends IConnection> inConns = node.getIncomingConnections(EConnectionType.FLOW_MAIN);
boolean useIndependentProcess = "true".equals(ElementParameterParser.getValue(node, "__USE_INDEPENDENT_PROCESS__"));
boolean dieOnError = ("true").equals(ElementParameterParser.getValue(node, "__DIE_ON_CHILD_ERROR__"));  
boolean isRunInMultiThread = codeGenArgument.getIsRunInMultiThread();  
boolean transmitWholeContext = ("true").equals(ElementParameterParser.getValue(node, "__TRANSMIT_WHOLE_CONTEXT__"));  
boolean printParameter = ("true").equals(ElementParameterParser.getValue(node, "__PRINT_PARAMETER__")); 

boolean originalContext = ("true").equals(ElementParameterParser.getValue(node, "__TRANSMIT_ORIGINAL_CONTEXT__")); 

IProcess currentProcess = node.getProcess();
List<Map<String, String>> contextParams = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__CONTEXTPARAMS__");
String process = ElementParameterParser.getValue(node,"__PROCESS_TYPE_PROCESS__");
String context = ElementParameterParser.getValue(node,"__PROCESS_TYPE_CONTEXT__");
String version = ElementParameterParser.getValue(node,"__PROCESS_TYPE_VERSION__");
String[] codeOptions = new String[] {"\"--father_pid=\"+pid", "\"--root_pid=\"+rootPid", "\"--father_node="+ cid + "\""};
String[] commandLineWindows = new String[] {"<command>"};
String[] commandLineUnix = new String[] {"<command>"};
//String[] commandLine = new String[] {"<command>"};
String childJob = ElementParameterParser.getValue(node,"__PROCESS__");

boolean useDynamicJob = ("true").equals(ElementParameterParser.getValue(node, "__USE_DYNAMIC_JOB__"));
String dynamicJobName = ElementParameterParser.getValue(node,"__CONTEXT_JOB__");
java.util.List<String> childJobNameList = new java.util.ArrayList<String>();
java.util.List<String[]> commandLineList = new java.util.ArrayList<String[]>();
%>  
int dynamicJobPosition_<%=cid%> = 0;
String dynamicJobName_<%=cid%>;
java.util.List<String> paraList_<%=cid %> = new java.util.ArrayList<String>();
<%
try {
	if(process!=null && !process.equals("")){
		String[] commandLine = new String[] {"<command>"};
		String[] childJobIds = process.split(";");
	    childJobNameList.clear();
	    for (int i=0;i<childJobIds.length;i++) {
	    	String childJobId = childJobIds[i];
		  	if(useIndependentProcess){ 
			    commandLine = ProcessorUtilities.getCommandLine(true, childJobId, context,org.talend.designer.runprocess.IProcessor.NO_STATISTICS,org.talend.designer.runprocess.IProcessor.NO_TRACES, codeOptions);
			    // remove the frontal 2 lines
			    if (commandLine.length > 0 && ProcessorUtilities.isExportConfig()){
					int tmpSize = commandLine.length - 2;
					String[] tmp = new String[tmpSize];
					System.arraycopy(commandLine, 2, tmp, 0, tmpSize);
					commandLine = tmp;
			    }
			   	childJobNameList.add(commandLine[5]);
		 	}else{
		        commandLine = ProcessorUtilities.getMainCommand(childJobId ,version, context,org.talend.designer.runprocess.IProcessor.NO_STATISTICS,org.talend.designer.runprocess.IProcessor.NO_TRACES, codeOptions);
		        childJobNameList.add(commandLine[0]);
		    }
		    commandLineList.add(commandLine);
	    }
	}
} catch (ProcessorException e) {
}
if(useDynamicJob){
	int position = 0;
	for(String childJobName:childJobNameList){
		String simpleName = childJobName.substring(childJobName.lastIndexOf(".")+1);
%>
		if("<%=simpleName%>".equals(<%=dynamicJobName%>)){
			dynamicJobPosition_<%=cid%> = <%=position%>;
			dynamicJobName_<%=cid%> = <%=dynamicJobName%>;
		}
<%
		position++;
	}
}else{
%>
	dynamicJobPosition_<%=cid%> = 0;
<%
}
%>
	//System.out.println(dynamicJobPosition_<%=cid%>);
<%
int position = 0;
for(String[] commandLine : commandLineList){
%>
	if(dynamicJobPosition_<%=cid%> == <%=position%>){
		<%
		for (int i = 0; i < commandLine.length; i++) {
			// commandLine[i] = commandLine[i].replace("\n", "");
			if (i == 0 && useIndependentProcess){
			%>
			  paraList_<%=cid %>.add("<%=commandLine[i]%>");
			<%
			} else if (i == 0 && !useIndependentProcess){
			    childJob = commandLine[0];
			} else if (i > 0){
			    if (commandLine[i].indexOf("\"") >= 0){
			    %>
			        paraList_<%=cid %>.add(<%=commandLine[i] %>);
			    <%}else{%>
					paraList_<%=cid %>.add("<%=commandLine[i] %>");
			    <%}
			}
		}	
		%>
	}
<%
	position++;
}
%>

//for feature:10589
<%if(useIndependentProcess){%>
	paraList_<%=cid %>.add("--stat_port=" + null);
<%}else{%>
	paraList_<%=cid %>.add("--stat_port=" + portStats);
<%}%>		
<%
if (useIndependentProcess && ProcessorUtilities.isExportConfig()){
%>
    // exchange characters if this job runs on OS is different from exported base on
    for(int i_<%=cid%> = 0; i_<%=cid%> < paraList_<%=cid %>.size(); i_<%=cid%>++){
    	String osName_<%=cid %> = System.getProperty("os.name");
    	if (osName_<%=cid %> != null && osName_<%=cid %>.toLowerCase().startsWith("win")){    
      		paraList_<%=cid %>.set(i_<%=cid%>, paraList_<%=cid %>.get(i_<%=cid%>).replace(":", ";").replace("$", "%"));
    	}else{
      		paraList_<%=cid %>.set(i_<%=cid%>, paraList_<%=cid %>.get(i_<%=cid%>).replace(";", ":").replace("%", "$"));
    	}
  	}
<%
}%>
if(resuming_logs_dir_path != null){
    paraList_<%=cid %>.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
}
String childResumePath_<%=cid %> = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
String tRunJobName_<%=cid %> = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
if("<%=cid %>".equals(tRunJobName_<%=cid %>) && childResumePath_<%=cid %> != null){
  paraList_<%=cid %>.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
}
paraList_<%=cid %>.add("--parent_part_launcher=JOB:" + jobName + "/NODE:<%=cid %>");

java.util.Map<String, Object> parentContextMap_<%=cid %> = new java.util.HashMap<String, Object>();
<%
if(transmitWholeContext){//111111
%> 
	context.synchronizeContext();
	java.util.Enumeration<?> propertyNames_<%=cid %> = context.propertyNames();
	while (propertyNames_<%=cid %>.hasMoreElements()) {
		String key_<%=cid %> = (String) propertyNames_<%=cid %>.nextElement();
		Object value_<%=cid %> = (Object) context.get(key_<%=cid %>);       
		paraList_<%=cid %>.add("--context_param " + key_<%=cid %> + "=" + value_<%=cid %>);
	}
<%
List<IContextParameter> params = currentProcess.getContextManager().getDefaultContext().getContextParameterList();
    for (IContextParameter ctxParam :params){
    	String ctxParamName = ctxParam.getName();
%>  
	    parentContextMap_<%=cid %>.put("<%=ctxParamName %>", context.<%=ctxParamName %>);
<%}
}//111111
%>

Object obj_<%=cid%> = null;

<%
for (int i=0; i<contextParams.size(); i++) {
  Map<String, String> contextParam = contextParams.get(i);
  String name = contextParam.get("PARAM_NAME_COLUMN");
  String value = contextParam.get("PARAM_VALUE_COLUMN");
%>
  obj_<%=cid%> = <%=value %>;
  paraList_<%=cid %>.add("--context_param <%=name %>=" + RuntimeUtils.tRunJobConvertContext(obj_<%=cid%>));
  parentContextMap_<%=cid %>.put("<%=name %>", obj_<%=cid%>);
<%}%>
<%if(printParameter){%>
  System.out.println("<%=cid %> in <%=currentProcess.getName() %> call <%if(useDynamicJob){%>dynamicJobName_<%=cid%><%}else{%><%=childJob %><%}%> with:\n\n" + paraList_<%=cid %> + "\n");
<%}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  
if (!useIndependentProcess){//AAAAAAAAAAAA
%>
	String[][] childReturn_<%=cid %> = new String[][]{};
  <%if(useDynamicJob){%>
	<%for(String childJobName:childJobNameList){
		String simpleName = childJobName.substring(childJobName.lastIndexOf(".")+1);
		%>
		if("<%=simpleName%>".equals(<%=dynamicJobName%>)){
			<%=childJobName%> childJob_<%=cid %> = new <%=childJobName%>();
			<%if(originalContext){%>  
			  childJob_<%=cid %>.parentContextMap = parentContextMap_<%=cid %>;
			<%}%>  
			  childReturn_<%=cid %> = childJob_<%=cid %>.runJob((String[]) paraList_<%=cid %>.toArray(new String[paraList_<%=cid %>.size()]));
			  <%
			  if (childJobName != null) {
			    if (isRunInMultiThread ){
			    %>
			      ((java.util.Map)threadLocal.get()).put("errorCode", childJob_<%=cid %>.getErrorCode());
			    <%}else {%>
			      errorCode = childJob_<%=cid %>.getErrorCode();
			    <%}%>
			            
			    if(childJob_<%=cid %>.getErrorCode() == null){
			      globalMap.put("<%=cid %>_CHILD_RETURN_CODE", childJob_<%=cid %>.getStatus() != null && ("failure").equals(childJob_<%=cid %>.getStatus()) ? 1 : 0);
			    }else{
			      globalMap.put("<%=cid %>_CHILD_RETURN_CODE", childJob_<%=cid %>.getErrorCode());
			    }  
			    globalMap.put("<%=cid %>_CHILD_EXCEPTION_STACKTRACE", childJob_<%=cid %>.getExceptionStackTrace());
			  
			    <%if (dieOnError) { %> 
			      if (childJob_<%=cid %>.getErrorCode() != null || ("failure").equals(childJob_<%=cid %>.getStatus())) {
			        throw new RuntimeException("Child job running failed");
			      }
			    <%}
			  }%>
		}
	<%}%>  	
  <%}else{%>
  	<%=childJob %> childJob_<%=cid %> = new <%=childJob %>();
  	<%if(originalContext){%>  
	  childJob_<%=cid %>.parentContextMap = parentContextMap_<%=cid %>;
	<%}%>  
	  childReturn_<%=cid %> = childJob_<%=cid %>.runJob((String[]) paraList_<%=cid %>.toArray(new String[paraList_<%=cid %>.size()]));
	  <%
	  if (childJob != null) {
	    if (isRunInMultiThread ){
	    %>
	      ((java.util.Map)threadLocal.get()).put("errorCode", childJob_<%=cid %>.getErrorCode());
	    <%}else {%>
	      errorCode = childJob_<%=cid %>.getErrorCode();
	    <%}%>
	            
	    if(childJob_<%=cid %>.getErrorCode() == null){
	      globalMap.put("<%=cid %>_CHILD_RETURN_CODE", childJob_<%=cid %>.getStatus() != null && ("failure").equals(childJob_<%=cid %>.getStatus()) ? 1 : 0);
	    }else{
	      globalMap.put("<%=cid %>_CHILD_RETURN_CODE", childJob_<%=cid %>.getErrorCode());
	    }  
	    globalMap.put("<%=cid %>_CHILD_EXCEPTION_STACKTRACE", childJob_<%=cid %>.getExceptionStackTrace());
	  
	    <%if (dieOnError) { %> 
	      if (childJob_<%=cid %>.getErrorCode() != null || ("failure").equals(childJob_<%=cid %>.getStatus())) {
	        throw new RuntimeException("Child job running failed");
	      }
	    <%}
	  }%>
  <%}%>

  <%
  String firstConnName = null; 
  if(outConns != null && outConns.size() > 0) {
    for (IConnection conn : outConns) {
      if(conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)){
      	firstConnName = conn.getName(); //get the first available flow link
      	break;
      }
    }
  }
  if(firstConnName != null) {//b
    if(inConns == null || inConns.size() == 0){//c
    %>
      for (String[] item_<%=cid %> : childReturn_<%=cid %>) { 
      <%
      int columnSize = columns.size();
      for (int i = 0; i < columnSize; i++) {//a
        IMetadataColumn column = columns.get(i);
        String label = column.getLabel();
        String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
        JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
        String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
        %>		
        if(<%=i %> < item_<%=cid %>.length){				
           <%if(javaType == JavaTypesManager.STRING || javaType == JavaTypesManager.OBJECT) {%>
             <%=firstConnName %>.<%=label %> = item_<%=cid %>[<%=i %>];
           <%} else if(javaType == JavaTypesManager.DATE) {%>
             <%=firstConnName %>.<%=label %> = ParserUtils.parseTo_Date(item_<%=cid %>[<%=i %>], <%= patternValue %>);
           <%} else if(javaType == JavaTypesManager.BYTE_ARRAY){%>							
             <%=firstConnName %>.<%=label %> = item_<%=cid %>[<%=i %>].getBytes();
           <%} else {%>
             <%=firstConnName %>.<%=label %> = ParserUtils.parseTo_<%= typeToGenerate %>(item_<%=cid %>[<%=i %>]);
           <%}%>
        }else{
  	      <%=firstConnName %>.<%=label %> = <%=JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate)%>;
        }
        <%
      }//a
    }else{//c
    //in order to match the "}" about IS_MULTIPLYING_OUTPUTS="true"
    %>
      {
    <%
    }
    
  }//b  
  
} else { //AAAAAAAAAAAA

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
  // use independent process to run subjob
%>
  Runtime runtime_<%=cid %> = Runtime.getRuntime();
  final Process ps_<%=cid %>;
  ps_<%=cid %> = runtime_<%=cid %>.exec((String[])paraList_<%=cid %>.toArray(new String[paraList_<%=cid %>.size()]));

  Thread normal_<%=cid %> = new Thread() {
    public void run() {
      try {
        java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(ps_<%=cid %>.getInputStream()));
        String line = "";
        try {
          while((line = reader.readLine()) != null) {
            System.out.println(line);
          }
        } finally {
          reader.close();
        }
      } catch(java.io.IOException ioe) {
        ioe.printStackTrace();
      }
    }
  };
  normal_<%=cid %>.start();

  final StringBuffer errorMsg_<%=cid %> = new StringBuffer();
  Thread error_<%=cid %> = new Thread() {
    public void run() {
      try {
        java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(ps_<%=cid %>.getErrorStream()));
        String line = "";
        try {
          while((line = reader.readLine()) != null) {
            errorMsg_<%=cid %>.append(line).append("\n");
          }
        } finally {
          reader.close();
        }
      } catch(java.io.IOException ioe) {
        ioe.printStackTrace();
      }
    }
  };
  error_<%=cid %>.start();

  //0 indicates normal termination	
  int result_<%=cid %> = ps_<%=cid %>.waitFor();
  normal_<%=cid %>.join(10000);
  error_<%=cid %>.join(10000);

 
  if(result_<%=cid %> != 0){
	<%if (dieOnError) { %>  
	    throw new RuntimeException("Child job return " + result_<%=cid %> + ". It doesn't terminate normally.\n" + errorMsg_<%=cid %>.toString());
	<%}else{%>
		System.err.println("Child job return " + result_<%=cid %> + ". It doesn't terminate normally.\n" + errorMsg_<%=cid %>.toString());
	<%}%>
  }


<%
  String firstConnName = null; 
  if(outConns != null && outConns.size() > 0) {
    for (IConnection conn : outConns) {
      if(conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)){
      	firstConnName = conn.getName(); //get the first available flow link
      	break;
      }
    }
  }
  if(firstConnName != null) {//b
    if(inConns == null || inConns.size() == 0){//c
    %>
      {
      	System.err.println("when tRunJob runs in an independent process, it can't extract datas from tBufferOutput of child job."); 
    <%}else{//c
    //in order to match the "}" about IS_MULTIPLYING_OUTPUTS="true"
    %>
      {
    <%
    }//c
  }//b  
%>
  
<%
}//AAAAAAAAAAAA
%>
