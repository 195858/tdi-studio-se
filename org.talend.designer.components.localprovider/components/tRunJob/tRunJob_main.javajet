<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.designer.runprocess.ProcessorUtilities
    org.talend.designer.runprocess.ProcessorException
    java.util.Map
    java.util.List
"
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
    
    List<Map<String, String>> contextParams = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__CONTEXTPARAMS__");
    String process = ElementParameterParser.getValue(node,"__PROCESS_TYPE_PROCESS__");
    String context = ElementParameterParser.getValue(node,"__PROCESS_TYPE_CONTEXT__");
    String[] codeOptions = new String[] {"--father_pid=\"+pid+\"", "--root_pid=\"+rootPid+\""};
    String[] commandLineWindows = new String[] {"<command>"};
    String[] commandLineUnix = new String[] {"<command>"};
    String[] commandLine = new String[] {"<command>"};
    try {
        // for windows
       	//commandLineWindows = ProcessorUtilities.getCommandLine("win32", true, process, context,org.talend.designer.runprocess.IProcessor.NO_STATISTICS,org.talend.designer.runprocess.IProcessor.NO_TRACES, codeOptions);
        // for linux
        //commandLineUnix = ProcessorUtilities.getCommandLine("linux", true, process, context,org.talend.designer.runprocess.IProcessor.NO_STATISTICS,org.talend.designer.runprocess.IProcessor.NO_TRACES, codeOptions);
        // for current OS
       	//commandLine = ProcessorUtilities.getCommandLine(true, process, context,org.talend.designer.runprocess.IProcessor.NO_STATISTICS,org.talend.designer.runprocess.IProcessor.NO_TRACES, codeOptions);
    	commandLine = ProcessorUtilities.getMainCommand(process, context,org.talend.designer.runprocess.IProcessor.NO_STATISTICS,org.talend.designer.runprocess.IProcessor.NO_TRACES, codeOptions);
    } catch (ProcessorException e) {
    }
    
    
StringBuffer contextStr = new StringBuffer();
for (int i=0; i<contextParams.size(); i++) {
    Map<String, String> contextParam = contextParams.get(i);
    String name = contextParam.get("PARAM_NAME_COLUMN");
    String value = contextParam.get("PARAM_VALUE_COLUMN");    
    contextStr.append(",\"--context_param ");
    contextStr.append(name);

    if(value.contains("context.getProperty")) {
        contextStr.append("=\"+");
        contextStr.append(value);
    }else{
    	contextStr.append("=\"+\"");
        contextStr.append(value);        
        contextStr.append("\"");
    } 
  }

   for (int i=0; i<commandLine.length; i++) {
      if(i==0){
      %>
        <%=commandLine[i]%>.main(new String[]{
      <%
      }else{
          if (i <= (commandLine.length -2)) {
          %>
          "<%=commandLine[i] %>",
          <%
          }else{
          %>
          "<%=commandLine[i] %>"
          <%
          }
      }
   }
   if(commandLine.length>0){
   %>   
          <%=contextStr.toString() %> 
          });
    <%
    }
    %>