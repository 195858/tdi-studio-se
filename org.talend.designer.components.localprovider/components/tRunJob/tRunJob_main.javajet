<%@ jet 
imports="
	org.talend.core.model.process.EConnectionType
	org.talend.core.model.process.IConnection
	org.talend.core.model.metadata.IMetadataColumn
	org.talend.core.model.metadata.IMetadataTable
	org.talend.core.model.metadata.types.JavaTypesManager
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.designer.runprocess.ProcessorUtilities
    org.talend.designer.runprocess.ProcessorException
    java.util.Map
    java.util.List
"
%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();

	List<IMetadataColumn> columns = null;
	List<IMetadataTable> metadatas = node.getMetadataList();
	if (metadatas != null && metadatas.size() > 0) {
	    IMetadataTable metadata = metadatas.get(0);    
	    if (metadata != null) {
	        columns = metadata.getListColumns();
	    }
	}

    List< ? extends IConnection> outConns = node.getOutgoingConnections(EConnectionType.FLOW_MAIN);
	
	boolean dieOnError = ElementParameterParser.getValue(node, "__DIE_ON_CHILD_ERROR__").equals("true");
	
	boolean isRunInMultiThread = codeGenArgument.getIsRunInMultiThread();
	
    List<Map<String, String>> contextParams = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__CONTEXTPARAMS__");
    String process = ElementParameterParser.getValue(node,"__PROCESS_TYPE_PROCESS__");
    String context = ElementParameterParser.getValue(node,"__PROCESS_TYPE_CONTEXT__");
    String[] codeOptions = new String[] {"--father_pid=\"+pid+\"", "--root_pid=\"+rootPid+\""};
    String[] commandLineWindows = new String[] {"<command>"};
    String[] commandLineUnix = new String[] {"<command>"};
    String[] commandLine = new String[] {"<command>"};
    try {
        // for windows
       	//commandLineWindows = ProcessorUtilities.getCommandLine("win32", true, process, context,org.talend.designer.runprocess.IProcessor.NO_STATISTICS,org.talend.designer.runprocess.IProcessor.NO_TRACES, codeOptions);
        // for linux
        //commandLineUnix = ProcessorUtilities.getCommandLine("linux", true, process, context,org.talend.designer.runprocess.IProcessor.NO_STATISTICS,org.talend.designer.runprocess.IProcessor.NO_TRACES, codeOptions);
        // for current OS
       	//commandLine = ProcessorUtilities.getCommandLine(true, process, context,org.talend.designer.runprocess.IProcessor.NO_STATISTICS,org.talend.designer.runprocess.IProcessor.NO_TRACES, codeOptions);
    	commandLine = ProcessorUtilities.getMainCommand(process, context,org.talend.designer.runprocess.IProcessor.NO_STATISTICS,org.talend.designer.runprocess.IProcessor.NO_TRACES, codeOptions);
    } catch (ProcessorException e) {
    }
    
    
StringBuilder contextStr = new StringBuilder();
for (int i=0; i<contextParams.size(); i++) {
    Map<String, String> contextParam = contextParams.get(i);
    String name = contextParam.get("PARAM_NAME_COLUMN");
    String value = contextParam.get("PARAM_VALUE_COLUMN");    
    contextStr.append(",\"--context_param ");
    contextStr.append(name);

    contextStr.append("=\"+");
    contextStr.append(value);
  }

   String childJob = null;

   for (int i=0; i<commandLine.length; i++) {
      if(i==0){
          childJob = commandLine[i];
      %>        
        <%=commandLine[i]%>.runJob(new String[]{
      <%
      }else{
          if (i <= (commandLine.length -2)) {
          %>
          "<%=commandLine[i] %>",
          <%
          }else{
          %>
          "<%=commandLine[i] %>"
          <%
          }
      }
   }
   if(commandLine.length>0){
   %>   
          <%=contextStr.toString() %> 
          });
    <%
    }
    %>

<%
    if (childJob!=null) {
%>  

    <%
        if(isRunInMultiThread ){
    %>
        ((java.util.Map)threadLocal.get()).put(errorCode, <%=childJob %>.errorCode);
    <%
        }else {
    %>
        errorCode = <%=childJob %>.errorCode;
    <%
        }
    %>
    
    <% 
    	if (dieOnError) {
    %> 
            if (<%=childJob %>.errorCode != null || <%=childJob %>.status.equals("failure")) {
                throw new RuntimeException("Child job running failed");
            }
    <%  
    	}
    %>
<%
    }
%>

        java.util.List <Object[]> list_<%=cid %> = <%=childJob %>.globalBuffer;        
        for (Object[] item_<%=cid %> : list_<%=cid %>) {
<% 
for (IConnection conn : outConns) {
	if(!conn.isActivate()) continue;
	String outputConnName = conn.getName(); 
    		
	for (int i = 0; i < columns.size(); i++) {//4
			IMetadataColumn column = columns.get(i);
			String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), true);			
%>
	<%=outputConnName %>.<%=column.getLabel() %> = (<%=typeToGenerate %>)item_<%=cid %>[<%=i %>];
<% 
	} 
}
%>  