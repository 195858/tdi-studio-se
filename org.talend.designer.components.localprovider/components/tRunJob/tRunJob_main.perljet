<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.utils.PerlResourcesHelper
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.designer.runprocess.ItemCacheManager
    org.talend.designer.runprocess.ProcessorUtilities
    org.talend.designer.runprocess.ProcessorException
    java.util.Map
    java.util.List
"
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

String processId = ElementParameterParser.getValue(
   node,
   "__PROCESS_TYPE_PROCESS__"
);

String context = ElementParameterParser.getValue(
   node,
   "__PROCESS_TYPE_CONTEXT__"
);

String version = ElementParameterParser.getValue(
   node,
   "__PROCESS_TYPE_VERSION__"
);

boolean transmitWholeContext = ElementParameterParser.getValue(
   node,
   "__TRANSMIT_WHOLE_CONTEXT__"
).equals("true");

boolean dieOnChildError = ElementParameterParser.getValue(
   node,
   "__DIE_ON_CHILD_ERROR__"
).equals("true");

List<Map<String, String>> contextParams =
    (List<Map<String,String>>)ElementParameterParser.getObjectValue(
        node,
        "__CONTEXTPARAMS__"
    );

String processName = ItemCacheManager.getProcessNameByProcessId(processId);

// if it's a generation to run in talend.
if (!ProcessorUtilities.isExportConfig()) {
   String[] codeOptions = new String[] {
       "--root_pid='.$_globals{root_pid}.'",
       "--father_pid='.$_globals{pid}.'"
   };
   String[] commandLine = new String[] {"<command>"};
   try {
      commandLine = ProcessorUtilities.getCommandLine(true, processId, context, version, 
      org.talend.designer.runprocess.IProcessor.NO_STATISTICS,
      org.talend.designer.runprocess.IProcessor.NO_TRACES,codeOptions);
   } catch (ProcessorException e) {
%>
	<%= e.getMessage() %>
<%
   }
%>
my @arguments = (
<%
   for (int i=0; i< commandLine.length; i++) {
%>
    '<%=commandLine[i] %>',
<%
   }
%>
);
<%
} else { // if it's a generation for an export
   
   String interpreterPath = "<perl_interpreter_path>";
   if (codeGenArgument.getInterpreterPath() != null) {
       interpreterPath = codeGenArgument.getInterpreterPath();
       interpreterPath = interpreterPath.replace("\\","/");
   }

   String libPath = "<perl_library_path>";
   if (codeGenArgument.getLibPath() != null) {
       libPath = codeGenArgument.getLibPath();
       libPath = libPath.replace("\\","/");
   }

   String runtimeFilePath = "<runtime_path>";
   if (codeGenArgument.getRuntimeFilePath() != null) {
       runtimeFilePath = codeGenArgument.getRuntimeFilePath();
       runtimeFilePath = runtimeFilePath.replace("\\","/");
   }

%>
use FindBin;
use File::Spec;

my $libPath = File::Spec->catfile(
    $FindBin::Bin,
    '<%=libPath %>'
);

$libPath =~ s/\\/\//g;

my $runtimeFilePath = File::Spec->catfile(
    $FindBin::Bin,
    '<%=runtimeFilePath %>'
);

$runtimeFilePath =~ s/\\/\//g;

my @arguments = (
    '<%=interpreterPath %>',
    '-I "' . $libPath . '"',
    '-I "' . $runtimeFilePath . '"',
    '"' . $runtimeFilePath . '<%=PerlResourcesHelper.getJobFileName(processId, version)%>"',
    '--root_pid='.$_globals{root_pid},
    '--father_pid='.$_globals{pid},
    '--context='.<%=context %>,
);

<%
}

if (transmitWholeContext) {
%>
foreach my $context_key (keys %_context) {
    push(
        @arguments,
        sprintf(
            '--context_param %s="%s"',
            $context_key,
            $_context{$context_key}
        )
    );
}
<%
}

for (int i=0; i<contextParams.size(); i++) {
    Map<String, String> contextParam = contextParams.get(i);

    String name = contextParam.get("PARAM_NAME_COLUMN");
    String value = contextParam.get("PARAM_VALUE_COLUMN");
%>
push @arguments, '--context_param <%=name%>="'.<%=value%>.'"';
<%
}
%>

{
    my $code = system(
        join(' ', @arguments)
    );

    if ($code == -1) {
        warn "[<%=cid%>] failed to execute: $!\n";
        $_globals{<%=cid%>}{CHILD_RETURN_CODE} = $code;
    }
    elsif ($code & 127) {
        warn sprintf(
            "[<%=cid%>] child died with signal %d, %s coredump\n",
            ($code & 127),
            ($code & 128) ? 'with' : 'without'
        );
   
        $_globals{<%=cid %>}{CHILD_RETURN_CODE} = ''; # TODO
    }
    else {
        $_globals{<%=cid %>}{CHILD_RETURN_CODE} = $code >> 8;
    }

    # printf(
    #     "CHILD_RETURN_CODE : %s\n",
    #     $_globals{<%=cid%>}{CHILD_RETURN_CODE}
    # );
<%
if (dieOnChildError) {
%>
    if ($_globals{<%=cid%>}{CHILD_RETURN_CODE}) {
        die "Process <%=processName %> died.\n" ;	
    }
<%
}
%>
}
