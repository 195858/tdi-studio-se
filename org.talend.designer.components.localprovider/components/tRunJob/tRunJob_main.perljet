<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.designer.runprocess.ProcessorUtilities
    org.talend.designer.runprocess.ProcessorException
    java.util.Map
    java.util.List
"
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String process = ElementParameterParser.getValue(
   node,
   "__PROCESS_TYPE_PROCESS__"
);

String context = ElementParameterParser.getValue(
   node,
   "__PROCESS_TYPE_CONTEXT__"
);

List<Map<String, String>> contextParams =
    (List<Map<String,String>>)ElementParameterParser.getObjectValue(
        node,
        "__CONTEXTPARAMS__"
    );


// if it's a generation to run in talend.
if (!ProcessorUtilities.isExportConfig()) {
   process = process.replace("'", "");
   context = context.replace("'", "");
   String[] codeOptions = new String[] {
       "--root_pid='.$_globals{root_pid}.'",
       "--father_pid='.$_globals{pid}.'"
   };
   String[] commandLine = new String[] {"<command>"};
   try {
      commandLine = ProcessorUtilities.getCommandLine(true, process, context, org.talend.designer.runprocess.IProcessor.NO_STATISTICS,org.talend.designer.runprocess.IProcessor.NO_TRACES,codeOptions);
   } catch (ProcessorException e) {
%>
	<%= e.getMessage() %>
<%
   }
%>
my @arguments = (
<%
   for (int i=0; i< commandLine.length; i++) {
%>
    '<%=commandLine[i] %>',
<%
   }
%>
);
<%
} else { // if it's a generation for an export
   String interpreterPath = "<perl_interpreter_path>";
   if (codeGenArgument.getInterpreterPath() != null) {
       interpreterPath = codeGenArgument.getInterpreterPath();
       interpreterPath = interpreterPath.replace("\\","/");
   }

   String libPath = "<perl_library_path>";
   if (codeGenArgument.getLibPath() != null) {
       libPath = codeGenArgument.getLibPath();
       libPath = libPath.replace("\\","/");
   }

   String runtimeFilePath = "<runtime_path>";
   if (codeGenArgument.getRuntimeFilePath() != null) {
       runtimeFilePath = codeGenArgument.getRuntimeFilePath();
       runtimeFilePath = runtimeFilePath.replace("\\","/");
   }

   String currentProjectName = "<project_name>";
   if (codeGenArgument.getCurrentProjectName() != null) {
       currentProjectName = codeGenArgument.getCurrentProjectName();
   }
%>
use FindBin;
use File::Spec;

my $libPath = File::Spec->catfile(
    $FindBin::Bin,
    '<%=libPath %>'
);

$libPath =~ s/\\/\//g;

my $runtimeFilePath = File::Spec->catfile(
    $FindBin::Bin,
    '<%=runtimeFilePath %>'
);

$runtimeFilePath =~ s/\\/\//g;

my @arguments = (
    '<%=interpreterPath %>',
    '-I "' . $libPath . '"',
    '-I "' . $runtimeFilePath . '"',
    '"' . $runtimeFilePath . '<%=currentProjectName %>.job_'.<%=process %>.'.pl"',
    '--root_pid='.$_globals{root_pid},
    '--father_pid='.$_globals{pid},
    '--context='.<%=context %>,
);

<%
}

for (int i=0; i<contextParams.size(); i++) {
    Map<String, String> contextParam = contextParams.get(i);

    String name = contextParam.get("PARAM_NAME_COLUMN");
    String value = contextParam.get("PARAM_VALUE_COLUMN");
%>
push @arguments, '--context_param <%=name%>='.<%=value%>;
<%
}
%>

my $error = system(
    join(' ', @arguments)
);

if($error){
    die "Process <%=process %> died.\n" ;	
}
