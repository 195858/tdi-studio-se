<%@ jet
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.process.ElementParameterParser
    java.util.List
    java.util.ArrayList
    java.util.LinkedList
    java.util.Map
  	org.talend.core.model.process.IConnection    
	org.talend.core.model.process.IConnectionCategory
    org.talend.core.model.metadata.types.JavaTypesManager
	org.talend.core.model.metadata.types.JavaType
"
skeleton="tWriteJSONFieldOut_java.skeleton"
%>

<%
//XMLTool
class XMLTool{
	public String connName = null;
	public String cid = null;
	
	public void getValue(XMLNode node){
%>
		valueMap_<%=cid%>.get("<%=node.relatedColumn.getLabel()%>")
<%
	}

	public void getValue(IMetadataColumn column){
		JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
		String defaultValue=column.getDefault();
		boolean isNotSetDefault = false;
		if(defaultValue!=null){
			isNotSetDefault = defaultValue.length()==0;
		}else{
			isNotSetDefault=true;
		}
%>
	(
<%
		if(column.isNullable()){
%>
		<%=connName%>.<%=column.getLabel()%> != null?
<%
		}
		
        if(JavaTypesManager.isJavaPrimitiveType( column.getTalendType(), column.isNullable())){
%>
            String.valueOf(<%=connName%>.<%=column.getLabel()%>)
<%
        }else if(javaType == JavaTypesManager.DATE){
            if( column.getPattern() != null && column.getPattern().trim().length() != 0 ){
%>
            FormatterUtils.format_Date(<%=connName%>.<%=column.getLabel()%>,<%=column.getPattern()%>)
<%
            }else{
%>
			<%=connName%>.<%=column.getLabel()%>
<%
           }
        }else if (javaType == JavaTypesManager.BIGDECIMAL) {
%>
			String.valueOf(<%=connName%>.<%=column.getLabel()%>.doubleValue())
<%
        }else{
%>
            <%=connName%>.<%=column.getLabel()%>.toString()
<%
		}
		if(column.isNullable()){
			%>:<% 
			if(isNotSetDefault == false){
				%><%=column.getDefault()%><%
			}else{
				%>null<%
			}
		}
%>
		)
<%
	}
}

// ------------------- *** Dom4j generation mode start *** ------------------- //
class GenerateToolByDom4j{
	String cid = null;
	XMLTool tool = null;
	public void generateCode(XMLNode node, String currEleName, String parentName){
		if(("ELEMENT").equals(node.type)){
			createElement(currEleName,node,parentName);
			setText(currEleName,node);
			int index = 0;
			for(XMLNode child:node.elements){
				if(0==(child.special & 1)){
					generateCode(child,currEleName+"_"+index++,currEleName);
				}
			}
		}
	}
	private void createElement(String currEleName, XMLNode node, String parentName){
		if(5==(node.special & 5) || ( node.parent!=null && node.elements.size()>0)){
%>
		//create element and loop  
		org.json.simple.JSONObject json_<%=currEleName%>_<%=cid%> = new org.json.simple.JSONObject();
		subTreeRootParent_<%=cid%>.add(json_<%=currEleName%>_<%=cid%>);
		org.json.simple.JSONArray <%=currEleName%>_<%=cid%> = new org.json.simple.JSONArray();
		json_<%=currEleName%>_<%=cid%>.put("<%=node.name%>",<%=currEleName%>_<%=cid%>);
		json_temp_<%=cid%>  = <%=currEleName%>_<%=cid%> ;
<%
		}else{
			if(node.parent==null){
%>
				//create json root 
				json_root_<%=cid%> = new org.json.simple.JSONObject();
				org.json.simple.JSONArray <%=currEleName%>_<%=cid%> = new org.json.simple.JSONArray();
				json_root_<%=cid%>.put("<%=node.name%>",<%=currEleName%>_<%=cid%>);
<%
					if(0==(node.special & 2)){	
%>
						subTreeRootParent_<%=cid%> = <%=currEleName%>_<%=cid%>;
<%
					}
			}
		}
		if(0!=(node.special & 2)){
%>
		subTreeRootParent_<%=cid%> = <%=currEleName%>_<%=cid%>;
<%
		}
	}
	private void setText(String currEleName, XMLNode node){
		if(node.relatedColumn!=null){
%>
			if(<%tool.getValue(node);%>!=null){
				org.json.simple.JSONObject json_<%=node.name%> = new org.json.simple.JSONObject();
				json_<%=node.name%>.put("<%=node.name%>",<%tool.getValue(node);%>);
<%
					if(node.parent.parent==null){
%>
						subTreeRootParent_<%=cid%>.add(json_<%=node.name%>);
<%
					}else{
%>
						json_temp_<%=cid%>.add(json_<%=node.name%>);
<%
					}
%>
			}
<%		
		}
	}
}
// ------------------- *** Dom4j generation mode end *** ------------------- //


// ------------------- *** Common code start *** ------------------- //
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

IMetadataTable metadata = null;
IConnection inConn = null;
for (IConnection conn : node.getIncomingConnections()) {
	if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.FLOW)) {
		inConn = conn;
		break;
	}
}
if (inConn != null) {
	metadata = inConn.getMetadataTable();
    if (metadata!=null) {
    	List< ? extends IConnection> conns = node.getIncomingConnections();
    	if(conns!=null && conns.size()>0){
    		IConnection conn = conns.get(0);
    		if(conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)){ 
    		
            	List<Map<String, String>> rootTable = 
                	(List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__ROOT__");
                List<Map<String, String>> groupTable = 
                	(List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__GROUP__");
                List<Map<String, String>> loopTable = 
                	(List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__LOOP__");
                
                IMetadataTable inputMetadataTable= conn.getMetadataTable();
                List<IMetadataColumn> inputColumns= inputMetadataTable.getListColumns();
                
                List<Map<String,String>> groupbys = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__GROUPBYS__");
				
        		                
                java.util.Map<String,IMetadataColumn> inputKeysColumns = new java.util.HashMap<String,IMetadataColumn>();
                if(inputColumns!=null){
                	for(IMetadataColumn column :inputColumns){
                		for(int i=0;i<groupbys.size();i++){
                			String columnName=groupbys.get(i).get("INPUT_COLUMN");
                			if(column.getLabel().equals(columnName)){
                				inputKeysColumns.put(columnName,column);
                				break;
                			}
                		}
                	}
                }
        		
        		
        		// init tool
                XMLTool tool = new XMLTool();
                tool.connName = conn.getName();
                tool.cid=cid;
                
                // change tables to a tree 
				Object[] treeObjs = getTree(rootTable, groupTable, loopTable, metadata.getListColumns());
            	List<XMLNode> mainList = (ArrayList<XMLNode>)treeObjs[0];
                List<XMLNode> groupList = (ArrayList<XMLNode>)treeObjs[1];
                XMLNode root = mainList.get(0);
            	XMLNode loop = (XMLNode)treeObjs[2];
                
                List<List<XMLNode>> groupbyNodeList = new ArrayList<List<XMLNode>>();
                for(XMLNode group:groupList){
                	groupbyNodeList.add(getGroupByNodeList(group));
                }
%>
	nb_line_<%=cid%>++;
	valueMap_<%=cid%>.clear();
<%
				for(IMetadataColumn column :inputColumns){
%>
	valueMap_<%=cid%>.put("<%=column.getLabel()%>",<%tool.getValue(column);%>);
<%
				}
%>
		String strTemp_<%=cid %> = "";
<%
	if(inputKeysColumns.size() !=0){
		for (IMetadataColumn column : inputColumns) {
			if(inputKeysColumns.containsKey(column.getLabel())) {
%>		strTemp_<%=cid %> = strTemp_<%=cid %> + valueMap_<%=cid %>.get("<%=column.getLabel() %>")
							+ valueMap_<%=cid %>.get("<%=column.getLabel() %>").length();
<%			}
		}
	}
%>
	if(strCompCache_<%=cid %>==null){
		strCompCache_<%=cid %>=strTemp_<%=cid %>;
	}else{
<%
// ------------------- *** Common code end *** ------------------- //

// ------------------- *** Dom4j generation mode start *** ------------------- //
		if(inputKeysColumns.size() !=0){
%>
		//the data read is different from the data read last time. 
		if(strCompCache_<%=cid %>.equals(strTemp_<%=cid %>)==false){	
<%		}
%>
		    listGroupby_<%=cid %>.add(json_root_<%=cid%>.toJSONString());
			needRoot_<%=cid %> = true;
			strCompCache_<%=cid %>=strTemp_<%=cid %>;
			if(groupbyList_<%=cid%> != null && groupbyList_<%=cid%>.size() >= 0){
				groupbyList_<%=cid%>.clear();
			}
		}
	}

<%
	//init the generate tool.
	GenerateToolByDom4j generateToolByDom4j = new GenerateToolByDom4j();
    generateToolByDom4j.cid = cid;
    generateToolByDom4j.tool = tool;
    
    //start generate code
%>
	org.json.simple.JSONArray subTreeRootParent_<%=cid%> = null;
	
	// build root xml tree 
	if (needRoot_<%=cid %>) {
		needRoot_<%=cid %>=false;
<%
	generateToolByDom4j.generateCode(root,"root","doc");
%>
		root4Group_<%=cid%> = subTreeRootParent_<%=cid%>;
	}else{
		subTreeRootParent_<%=cid%>=root4Group_<%=cid%>;
	}
	// build group xml tree 
<%
	if(groupTable.size()>0){
%>
	boolean isNewElememt = false;
<%
	}
	for(int i=0;i<groupList.size();i++){
%>
	if(isNewElememt || groupbyList_<%=cid%>.size()<=<%=i%> || groupbyList_<%=cid%>.get(<%=i%>)==null
<%
		for(int j=0;j<groupbyNodeList.get(i).size();j++){
			XMLNode attr = groupbyNodeList.get(i).get(j);
			if(attr.relatedColumn!=null){
%>
	|| ( groupbyList_<%=cid%>.get(<%=i%>).get(<%=j%>)!=null 
		? !groupbyList_<%=cid%>.get(<%=i%>).get(<%=j%>).equals(<%tool.getValue(attr);%>) 
		: <%tool.getValue(attr);%>!=null )
<%
			}
		}
%>
	){
<%
		generateToolByDom4j.generateCode(groupList.get(i),"group"+i+"_","subTreeRootParent");
%>
		if(groupbyList_<%=cid%>.size()<=<%=i%>){
        	groupbyList_<%=cid%>.add(new java.util.ArrayList<String>());
        }else{
        	groupbyList_<%=cid%>.get(<%=i%>).clear();
        }
<%
		for(int j=0;j<groupbyNodeList.get(i).size();j++){
			XMLNode attr = groupbyNodeList.get(i).get(j);
%>
		groupbyList_<%=cid%>.get(<%=i%>).add(<%tool.getValue(attr);%>);
<%
		}
%>
        isNewElememt=true;
        if(groupElementList_<%=cid%>.size()<=<%=i%>){
			groupElementList_<%=cid%>.add(group<%=i%>__<%=cid%>);
        }else{
        	groupElementList_<%=cid%>.set(<%=i%>,group<%=i%>__<%=cid%>);
        }
	}else{
		subTreeRootParent_<%=cid%>=groupElementList_<%=cid%>.get(<%=i%>);
	}
	
	// build loop xml tree
<%
}
	generateToolByDom4j.generateCode(loop,"loop","subTreeRootParent");
// ------------------- *** Dom4j generation mode end *** ------------------- //

// ------------------- *** Common code start *** ------------------- //
			}
		}
	}
}
// ------------------- *** Common code end *** ------------------- //
%>
