<%@ jet
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.metadata.IMetadataTable
    java.util.List
    java.util.Map
    java.util.ArrayList
   	org.talend.core.model.process.IConnection    
	org.talend.core.model.process.IConnectionCategory
	org.talend.core.model.utils.NodeUtil
	org.talend.core.model.process.EConnectionType
"

%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();
String cid_original = cid;
cid = cid_original.replace("tFileOutputXMLMultiSchema","tOXMLMS");

List<IMetadataTable> metadatas = NodeUtil.getIncomingMetadataTable(node, IConnectionCategory.FLOW);

if ((metadatas!=null)&&(metadatas.size()>0)) {
    List< ? extends IConnection> incomingConns = node.getIncomingConnections();
    if(incomingConns!=null && incomingConns.size()>0){

		String encoding = ElementParameterParser.getValue(node, "__ENCODING__");
		String fileName = ElementParameterParser.getValue(node, "__FILENAME__");

		List<Map<String, String>> rootTable = 
        	(List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__ROOT__");
        List<Map<String, String>> groupTable = 
        	(List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__GROUP__");
        List<Map<String, String>> loopTable = 
        	(List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__LOOP__");
%>
int nb_line_<%=cid%> = 0;

String fileName_<%=cid%> = <%=fileName%>;
<%
		if(("true").equals(ElementParameterParser.getValue(node,"__CREATE__"))){
%>
			//create directory only if not exists
			java.io.File createFile<%=cid%> = new java.io.File(fileName_<%=cid%>);
			java.io.File parentFile_<%=cid%> = createFile<%=cid%>.getParentFile();
			if(parentFile_<%=cid%> != null && !parentFile_<%=cid%>.exists()) {
				parentFile_<%=cid%>.mkdirs();
			}
<%
		}
%>
java.util.List<java.util.List<String>> groupbyList_<%=cid%> = new java.util.ArrayList<java.util.List<String>>();
java.util.Map<String,String> valueMap_<%=cid%> = new java.util.HashMap<String,String>();
boolean isXML10Char_<%=cid%> = true;

class NestXMLTool_<%=cid%>{
	public void parseAndAdd(org.dom4j.Element nestRoot, String value){
		try {
            org.dom4j.Document doc4Str = org.dom4j.DocumentHelper.parseText("<root>"+ value + "</root>");
    		nestRoot.setContent(doc4Str.getRootElement().content());
    	} catch (Exception e) {
    		e.printStackTrace();
    		nestRoot.setText(value);
        }
	}
	
	public void setText(org.dom4j.Element element, String value){
		if (value.startsWith("<![CDATA[") && value.endsWith("]]>")) {
			String text = value.substring(9, value.length()-3);
			element.addCDATA(text);
		}else{
			element.setText(value);
		}
	}
	
	public void replaceDefaultNameSpace(org.dom4j.Element nestRoot){
		if (nestRoot!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) nestRoot.elements()) {
        		if (("").equals(tmp.getQName().getNamespace().getURI()) && ("").equals(tmp.getQName().getNamespace().getPrefix())){
        			tmp.setQName(org.dom4j.DocumentHelper.createQName(tmp.getName(), nestRoot.getQName().getNamespace()));
	        	}
    	    	replaceDefaultNameSpace(tmp);
       		}
       	}
	}
	
	public void removeEmptyElement(org.dom4j.Element root){
		if (root!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) root.elements()) {
				removeEmptyElement(tmp);
			}
			if (root.content().size() == 0 
    			&& root.attributes().size() == 0 
    			&& root.declaredNamespaces().size() == 0) {
    			if(root.getParent()!=null){
                	root.getParent().remove(root);
                }
            }
		}
	}
}

NestXMLTool_<%=cid%> nestXMLTool_<%=cid%> = new NestXMLTool_<%=cid%>();

// sort group root element for judgement of group
java.util.List<org.dom4j.Element> groupElementList_<%=cid%> = new java.util.ArrayList<org.dom4j.Element>();
org.dom4j.Element root4Group_<%=cid%> = null;
org.dom4j.Document doc_<%=cid %> = org.dom4j.DocumentHelper.createDocument();

final org.dom4j.io.OutputFormat format_<%=cid%> = org.dom4j.io.OutputFormat.createPrettyPrint();
format_<%=cid %>.setEncoding(<%=encoding%>);

<%
for(IConnection inComminConn : incomingConns){
	if(inComminConn.getLineStyle().hasConnectionCategory(IConnectionCategory.FLOW)){
		String sourceName=inComminConn.getUniqueName();
%>
org.dom4j.Element root_<%=sourceName %>_<%=cid %> = null;
//used to judge branch root tags
boolean needRoot_<%=sourceName %>_<%=cid %>  = true;
<%
	}
}
	}
}
%>
