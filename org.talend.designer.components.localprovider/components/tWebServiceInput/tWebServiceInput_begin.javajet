<%@ jet 
imports="
    	org.talend.core.model.process.INode 
    	org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
        java.util.Map
        java.util.List
        org.talend.core.model.utils.TalendTextUtils
" 
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
// component id
String cid = node.getUniqueName();

if(("false").equals(ElementParameterParser.getValue(node,"__ADVANCED_USE__"))) {
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
    IMetadataTable metadata = metadatas.get(0);
    if (metadata!=null) {
     
        List<IMetadataColumn> listColumns = metadata.getListColumns(); 
        
        List<Map<String, String>> params = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node,"__PARAMS__");
        
        boolean needAuth = ("true").equals(ElementParameterParser.getValue(node,"__NEED_AUTH__"));
        String username = ElementParameterParser.getValue(node,"__AUTH_USERNAME__");
        String password = ElementParameterParser.getValue(node,"__AUTH_PASSWORD__");
        
        boolean winAuth = ("true").equals(ElementParameterParser.getValue(node,"__WIN_AUTH__"));
        String domain = ElementParameterParser.getValue(node,"__DOMAIN__");
        
        boolean useProxy = ("true").equals(ElementParameterParser.getValue(node,"__UES_PROXY__"));
        String proxuHost = ElementParameterParser.getValue(node,"__PROXY_HOST__");
        String proxyPort = ElementParameterParser.getValue(node,"__PROXY_PORT__");
        String proxuUser = ElementParameterParser.getValue(node,"__PROXY_USERNAME__");
        String proxyPassword = ElementParameterParser.getValue(node,"__PROXY_PASSWORD__");
        
        boolean needSSLtoTrustServer = ("true").equals(ElementParameterParser.getValue(node,"__NEED_SSL_TO_TRUSTSERVER__"));
        String trustStoreFile = ElementParameterParser.getValue(node,"__SSL_TRUSTSERVER_TRUSTSTORE__");
        String trustStorePassword = ElementParameterParser.getValue(node,"__SSL_TRUSTSERVER_PASSWORD__");
        
        
        String timeoutStr = ElementParameterParser.getValue(node,"__TIMEOUT__");
		String timeout = (timeoutStr!=null&&!("").equals(timeoutStr))?timeoutStr:"20";
		
        String endpoint = ElementParameterParser.getValue(node,"__ENDPOINT__");
        String method = ElementParameterParser.getValue(node,"__METHOD__");
        if(method != null && !("\"runJob\"").equals(method.trim())) {
%>
/////////////////////////////////// 
	        System.setProperty("org.apache.commons.logging.Log", "org.apache.commons.logging.impl.NoOpLog");
	        Object[] params_<%=cid %> = new Object[] {
	        <%=endpoint %>, 
	        <%=method %>,      
				<%
		        for (int i = 0; i < params.size(); i++) {
		            Map<String, String> line = params.get(i);
				%>
		    	    <%= line.get("VALUE") %>,
				<%
		        }
				%>      
	        };
			<% 
			if (needSSLtoTrustServer) {
			%>   
		        System.setProperty("java.protocol.handler.pkgs", "com.sun.net.ssl.internal.www.protocol");
		
				System.setProperty("javax.net.ssl.trustStore", <%=trustStoreFile %>);
				System.setProperty("javax.net.ssl.trustStorePassword", <%=trustStorePassword %>);
			<% 
			}
			if (needAuth&&!winAuth) {
			%>        	   
        		org.talend.DynamicInvoker.setAuth(true, <%=username %>, <%=password %>); 		
			<%
  			}
  			if (needAuth&&winAuth){
  				String domain_username = "\""+TalendTextUtils.removeQuotes(domain)+"\\\\"+TalendTextUtils.removeQuotes(username)+"\"";
				%>
				org.talend.DynamicInvoker.setWINAuth(true, <%=domain_username %>, <%=password %>); 	  		
			<%
  			}
			if (useProxy) {
			%>  
				org.talend.DynamicInvoker.setHttpProxy(true, <%=proxuHost %>, <%=proxyPort %>, <%=proxuUser %>, <%=proxyPassword%>); 
			<%
  			}
			%> 
			org.talend.DynamicInvoker.setTimeOut(<%=timeout %>);
		
	 		org.talend.DynamicInvoker.main(params_<%=cid %>);
	 		java.util.Map result = org.talend.DynamicInvoker.getResult();
	        
	        Object[] results_<%=cid %> = null;
		    int nb_line_<%=cid %> = 0;
		
	        for (Object key : result.keySet()) {
        
	           results_<%=cid %> = new Object[<%=listColumns.size()==0? 1 : listColumns.size()%>];
	            
	           Object value = result.get(key);
	           if (value instanceof Object[]){
	                Object[] objArr_<%=cid %> = (Object[])value;
	                int len_<%=cid %> = Math.min(objArr_<%=cid %>.length, results_<%=cid %>.length);
	                int k_<%=cid %> = 0;
	                for (int i_<%=cid %> = 0; i_<%=cid %> < len_<%=cid %>; i_<%=cid %>++ ) {
	                    results_<%=cid %>[k_<%=cid %>] = objArr_<%=cid %>[k_<%=cid %>];
	                }
                
		        } else if (value instanceof java.util.List) {
		        	java.util.List list_<%=cid %> = (java.util.List)value;
		            int len_<%=cid %> = Math.min(list_<%=cid %>.size(), results_<%=cid %>.length);
		            int k_<%=cid %> = 0;
		            for (java.util.Iterator iter_<%=cid %> = list_<%=cid %>.iterator(); iter_<%=cid %>.hasNext() && k_<%=cid %> < len_<%=cid %>; k_<%=cid %>++) {
		            	results_<%=cid %>[k_<%=cid %>] = iter_<%=cid %>.next();
		            }
                                
           		} else if (value instanceof java.util.Map) {                
					java.util.Map map_<%=cid %> = (java.util.Map)value;
	                java.util.Collection values_<%=cid %> = map_<%=cid %>.values();
	                int len_<%=cid %> = Math.min(values_<%=cid %>.size(), results_<%=cid %>.length);
	                int k_<%=cid %> = 0;
	                for (java.util.Iterator iter_<%=cid %> = values_<%=cid %>.iterator(); iter_<%=cid %>.hasNext() && k_<%=cid %> < len_<%=cid %>; k_<%=cid %>++) {
	                    results_<%=cid %>[k_<%=cid %>] = iter_<%=cid %>.next();
	                }

            	} else if (value instanceof org.w3c.dom.Element) {
                	results_<%=cid %>[0] = org.apache.axis.utils.XMLUtils.ElementToString((org.w3c.dom.Element)value);
                
	            }else if (value instanceof org.apache.axis.types.Schema){
	                org.apache.axis.types.Schema schema_<%=cid %> = (org.apache.axis.types.Schema) value;
	                org.apache.axis.message.MessageElement[] _any_<%=cid %> = schema_<%=cid %>.get_any();
	                for (int s_<%=cid %> = 0; s_<%=cid %> < _any_<%=cid %>.length; s_<%=cid %>++) {
	                    results_<%=cid %>[s_<%=cid %>] = _any_<%=cid %>[s_<%=cid %>].toString();
	                }	
	                
	            } else {
				    results_<%=cid %>[0] = value;
	            }
            
		<%} else { %>
	        Object[] results_<%=cid %> = null;
		    int nb_line_<%=cid %> = 0;
		    
		    org.talend.TalendJobHTTPClientConfiguration clientConfig_<%=cid%> = new org.talend.TalendJobHTTPClientConfiguration();
			clientConfig_<%=cid%>.setTimeout(<%=timeout %>);
			
	        org.talend.TalendJob talendJob_<%=cid%> = new org.talend.TalendJobProxy(<%=endpoint %>);
			talendJob_<%=cid%>.setClientConfig(clientConfig_<%=cid%>);	        
	        String[][] runJob_<%=cid%> = talendJob_<%=cid%>.runJob(new String[]{
			<%
	        for (int i = 0; i < params.size(); i++) {
	            Map<String, String> line = params.get(i);
				%>
        		<%= line.get("VALUE") %>,
			<%
        	}
			%> 
        	});
	        for (String[] item_<%=cid%> : runJob_<%=cid%>) {
				results_<%=cid %> = item_<%=cid%>;
		<%}%>            
	
        nb_line_<%=cid %>++;
	       
// for output
<%
	List< ? extends IConnection> conns = node.getOutgoingSortedConnections();
	String firstConnName = "";
	if (conns!=null) {//1
		if (conns.size()>0) {//2
		
			IConnection conn = conns.get(0); //the first connection
			firstConnName = conn.getName();			
			if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {//3

				%>

			
<%
			List<IMetadataColumn> columns=metadata.getListColumns();
			int columnSize = columns.size();
			for (int i=0;i<columnSize;i++) {//4
					IMetadataColumn column=columns.get(i);
					String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
					JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
					String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
			%>
						
			
			if(<%=i %> < results_<%=cid %>.length && results_<%=cid %>[<%=i %>]!=null){				
<%
					if(javaType == JavaTypesManager.OBJECT){//Object
%>
					<%=conn.getName() %>.<%=column.getLabel() %> = results_<%=cid %>[<%=i %>];					
<%
					}else if(javaType == JavaTypesManager.STRING) { //String 
%>
					<%=conn.getName() %>.<%=column.getLabel() %> = results_<%=cid %>[<%=i %>].toString();
<%
					} else if(javaType == JavaTypesManager.DATE) { //Date
%>					
					if(results_<%=cid %>[<%=i %>] instanceof java.util.GregorianCalendar) {
						<%=conn.getName() %>.<%=column.getLabel() %> = ((java.util.GregorianCalendar)results_<%=cid %>[<%=i%>]).getTime();
                   	}else{
						<%=conn.getName() %>.<%=column.getLabel() %> = ParserUtils.parseTo_Date(results_<%=cid %>[<%=i %>].toString(), <%= patternValue %>);
					}
<%
					} else if(javaType == JavaTypesManager.BYTE_ARRAY) { //byte[]
%>
					<%=conn.getName() %>.<%=column.getLabel() %> = results_<%=cid %>[<%=i %>].toString().getBytes();
	
<%
					} else  { //other
%>						
					<%=conn.getName() %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%= typeToGenerate %>(results_<%=cid %>[<%=i %>].toString());
<%
					}
%>
			
			} else { 
			
					<%=conn.getName() %>.<%=column.getLabel() %> = <%=JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate)%>;
			}
			
			
<%			
			} //4
		}//3
		
		
		if (conns.size()>1) {
			for (int i=1;i<conns.size();i++) {
				IConnection conn2 = conns.get(i);
				if ((conn2.getName().compareTo(firstConnName)!=0)&&(conn2.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA))) {
			    	for (IMetadataColumn column: metadata.getListColumns()) {%>
      			<%=conn2.getName() %>.<%=column.getLabel() %> = <%=firstConnName %>.<%=column.getLabel() %>;
				 <%
				 	}
				}
			}
		}
		
		
	}//2
	
}//1
%>
///////////////////////////////////       
<%
  }
}  
 %>
 
<%
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}else{//the following is the use the wsdl2java
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
%>

<%
List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
    IMetadataTable metadata = metadatas.get(0);
    if (metadata!=null) {
        String code = ElementParameterParser.getValue(node, "__CODE__");
        
        // we give a default value to prevComponentName so that no error
        // occur when the user tries to generated Java code while no input
        // component was linked to our tJavaRow.        
        String outputRowName = new String("output_row");
        
        List< ? extends IConnection> outConns = node.getOutgoingConnections();
        if (outConns != null && !outConns.isEmpty()) {
            IConnection outConn = outConns.get(0);
            outputRowName = outConn.getName();
        }

        // In case the user would make some tricky Java things, he can use
        // the arrays as a whole.

        code = code.replaceAll(
            "output_row",
            outputRowName
        );

%>
	int nb_line_<%=cid %> = 0;
	
    <%=code%>
    
    nb_line_<%=cid %>++;
<%
    }
}
%>

<%
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }
%> 
