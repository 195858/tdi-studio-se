<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn 
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.IConnectionCategory
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.Map
    java.util.List
    org.talend.core.model.metadata.types.JavaTypesManager
	org.talend.core.model.metadata.types.JavaType
" 
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();

String cid = node.getUniqueName();


//List<Map<String, String>> mapping = (List<Map<String,String>>)ElementParameterParser.getObjectValueXML(node, "__MAPPING__");
String encoding = ElementParameterParser.getValue(node, "__ENCODING__");
//String loopQuery = ElementParameterParser.getValue(node, "__LOOP_QUERY__"); 

String filename = ElementParameterParser.getValue(node, "__FILENAME__");
String rootpath = ElementParameterParser.getValue(node, "__ROOT_LOOP_QUERY__");

String advancedSeparatorStr = ElementParameterParser.getValue(node, "__ADVANCED_SEPARATOR__");
boolean advancedSeparator = (advancedSeparatorStr!=null&&!advancedSeparatorStr.equals(""))?advancedSeparatorStr.equals("true"):false;
String thousandsSeparator = ElementParameterParser.getValueWithJavaType(node, "__THOUSANDS_SEPARATOR__", JavaTypesManager.CHARACTER);
String decimalSeparator = ElementParameterParser.getValueWithJavaType(node, "__DECIMAL_SEPARATOR__", JavaTypesManager.CHARACTER);
List<Map<String, String>> schemas = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__SCHEMAS__");

String mode = ElementParameterParser.getValue(node, "__GENERATION_MODE__");

List< ? extends IConnection> connections = node.getOutgoingSortedConnections();

if(connections!=null && connections.size()>0){
%>
int nb_line_<%=cid %> = 0;
<%
// *** dom4j begin *** //
if(mode.equals("Dom4j")){
%>
class NameSpaceTool_<%=cid %> {

    public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();
    
	private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

    public void countNSMap(org.dom4j.Element el) {
        for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
            if (ns.getPrefix().trim().length() == 0) {
                xmlNameSpaceMap.put("pre"+defualtNSPath.size(), ns.getURI());
                String path = "";
                org.dom4j.Element elTmp = el;
                while (elTmp != null) {
                	if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
                        path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
                    } else {
                        path = "/" + elTmp.getName() + path;
                    }
                    elTmp = elTmp.getParent();
                }
                defualtNSPath.add(path);
            } else {
                xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
            }

        }
        for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
            countNSMap(e);
        }
    }
    
    public String addDefaultNSPrefix(String path, String loopPath) {
        if (defualtNSPath.size() > 0) {
        	String fullPath = loopPath;
        	if(!path.equals(fullPath)){
            	for (String tmp : path.split("/")) {
            		if (tmp.equals("..")) {
                        fullPath = fullPath.substring(0, fullPath.lastIndexOf("/"));
                    } else {
                        fullPath += "/" + tmp;
                    }
            	}
            }
        	int[] indexs = new int[fullPath.split("/").length - 1];
            java.util.Arrays.fill(indexs, -1);
            int length = 0;
            for (int i = 0; i < defualtNSPath.size(); i++) {
                if (defualtNSPath.get(i).length() > length && fullPath.startsWith(defualtNSPath.get(i))) {
                    java.util.Arrays.fill(indexs, defualtNSPath.get(i).split("/").length - 2, indexs.length, i);
                    length = defualtNSPath.get(i).length();
                }
            }

            StringBuilder newPath = new StringBuilder();
            String[] pathStrs = path.split("/");
            for (int i = 0; i < pathStrs.length; i++) {
                String tmp = pathStrs[i];
                if (newPath.length() > 0) {
                    newPath.append("/");
                }
                if (tmp.length() > 0 && tmp.indexOf(":") == -1 && tmp.indexOf(".") == -1 && tmp.indexOf("@") == -1) {
                    int index = indexs[i + indexs.length - pathStrs.length];
                    if (index >= 0) {
                        newPath.append("pre").append(index).append(":").append(tmp);
                    } else {
                        newPath.append(tmp);
                    }
                } else {
                    newPath.append(tmp);
                }
            }
            return newPath.toString();
        }
        return path;
    }
}

class XML_API_<%=cid %>{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && attri.getText().equals("true")){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}

org.dom4j.io.SAXReader reader_<%=cid %> = new org.dom4j.io.SAXReader();

org.dom4j.Document doc_<%=cid %>= reader_<%=cid %>.read(new java.io.File(<%=filename %>).toURI().toString());

NameSpaceTool_<%=cid %> nsTool_<%=cid %> = new NameSpaceTool_<%=cid %>();
nsTool_<%=cid %>.countNSMap(doc_<%=cid %>.getRootElement());
java.util.HashMap<String,String> xmlNameSpaceMap_<%=cid %> = nsTool_<%=cid %>.xmlNameSpaceMap;  

String rootpath_<%=cid %> = <%=rootpath %>;
if(rootpath_<%=cid %>.endsWith("/")){
	rootpath_<%=cid %> = rootpath_<%=cid %>.substring(0,rootpath_<%=cid %>.length()-1);
}

org.dom4j.XPath x_<%=cid %> = doc_<%=cid %>.createXPath(nsTool_<%=cid %>.addDefaultNSPrefix(rootpath_<%=cid %>,rootpath_<%=cid %>));  
x_<%=cid %>.setNamespaceURIs(xmlNameSpaceMap_<%=cid %>);

java.util.List<org.dom4j.tree.AbstractNode> nodeList_<%=cid %> = (java.util.List<org.dom4j.tree.AbstractNode>)x_<%=cid %>.selectNodes(doc_<%=cid %>);	
XML_API_<%=cid %> xml_api_<%=cid %> = new XML_API_<%=cid %>();
String str_<%=cid %> = "";
org.dom4j.Node node_<%=cid %> = null;

for (org.dom4j.tree.AbstractNode loop_<%=cid %>: nodeList_<%=cid %>) {
		nb_line_<%=cid%>++;

<%
	//get all the children collections of the loop node.
	for(IConnection conn : connections){
		if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)){
			String query = null;
			for(Map<String, String> schemaMap : schemas){
				if(schemaMap.get("SCHEMA").equals(conn.getName())){
					query = schemaMap.get("LOOP_PATH");
				}
			}
%>
	String query_<%=conn.getName() %> = <%=query %>;
	if(query_<%=conn.getName() %>.startsWith("/")){
		query_<%=conn.getName() %> = query_<%=conn.getName() %>.substring(1, query_<%=conn.getName() %>.length());
	}
	org.dom4j.XPath xSub<%=conn.getName() %>_<%=cid %> = loop_<%=cid %>.createXPath(nsTool_<%=cid %>.addDefaultNSPrefix(query_<%=conn.getName() %>,rootpath_<%=cid %>));
    xSub<%=conn.getName() %>_<%=cid %>.setNamespaceURIs(xmlNameSpaceMap_<%=cid %>); 
    java.util.List<org.dom4j.tree.AbstractNode> nodeList_<%=conn.getName() %>_<%=cid %> = (java.util.List<org.dom4j.tree.AbstractNode>)xSub<%=conn.getName() %>_<%=cid %>.selectNodes(loop_<%=cid %>);
    java.util.Iterator<org.dom4j.tree.AbstractNode> it_<%=conn.getName() %>_<%=cid %> = nodeList_<%=conn.getName() %>_<%=cid %>.iterator();
<% 
		}
	}
%>
	while(
<%
	boolean b_dom_while = true;
	for(IConnection conn : connections){
		if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)){
%>
<%=b_dom_while?"": " || "%>it_<%=conn.getName() %>_<%=cid %>.hasNext()
<%
			b_dom_while = false;
		}
	}
%>){

<%
// ***dom4j end and sax begin*** //
}else if(mode.equals("SAX")){
%>
class XML_API_<%=cid%>{
	public boolean isDefNull(String[] node) throws javax.xml.transform.TransformerException {
        if(node[0] != null && node[1]!=null && node[1].equals("true")){
        	return true;
        }
        return false;
    }

    public boolean isMissing(String[] node) throws javax.xml.transform.TransformerException {
        return node[0] == null ? true : false;
    }

    public boolean isEmpty(String[] node) throws javax.xml.transform.TransformerException {
        if(node[0]!=null ){
        	return node[0].length() == 0;
        }
        return false;
    }
}
XML_API_<%=cid%> xml_api_<%=cid%> = new XML_API_<%=cid%>();

<%
	//get all the children collections of the loop node.
	StringBuilder builderLoops = new StringBuilder();
	StringBuilder builderQueries = new StringBuilder();
	boolean isFirstArr = true;
	for(IConnection conn : connections){
		if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)){
			String loopPath = null;
			String strQuery = null;
			for(Map<String, String> schemaMap : schemas){
				if(schemaMap.get("SCHEMA").equals(conn.getName())){
					loopPath = schemaMap.get("LOOP_PATH");
					strQuery = (String)schemaMap.get("MAPPING");
				}
			}
			
			if(isFirstArr == false){
				builderQueries.append(",");
				builderLoops.append(",");
			}
			builderLoops.append(loopPath);
			
			String[] arrQuery = strQuery.split(",");
			builderQueries.append("{");
			for(int i = 0; i < arrQuery.length; i++){
				if(arrQuery[i]!=null && !arrQuery[i].equals("")){
					if(i == 0){
						builderQueries.append(arrQuery[i]);
					}else{
						builderQueries.append("," + arrQuery[i]);
					}
					
					if(arrQuery[i].indexOf("@")<0){
						builderQueries.append("," + arrQuery[i] + "+\"/@xsi:nil\"");
					}
				}
			}
			builderQueries.append("}");
			
			isFirstArr = false;
		}
	}
%>

String[] arrLoop_<%=cid%> = new String[]{<%=builderLoops.toString() %>};
String[][] arrQuery_<%=cid %> =new String[][]{<%=builderQueries.toString() %>};
String str_<%=cid %> = "";
String[] node_<%=cid%> = null;
org.talend.xml.sax.SAXLooper looper_<%=cid%> = new org.talend.xml.sax.SAXLooper(<%=rootpath%>,arrLoop_<%=cid %>,arrQuery_<%=cid %>);

looper_<%=cid%>.parse(new java.io.File(<%=filename %>).toURI().toString());
java.util.List<java.util.Map<String, java.util.List<java.util.Map<String, String>>>> rootlist_<%=cid %> = looper_<%=cid %>.getAllResultList();

for (java.util.Map<String, java.util.List<java.util.Map<String, String>>> map_<%=cid %> : rootlist_<%=cid %>){

<%
	for(IConnection conn : connections){
		if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)){
			String loopPath = null;
			for(Map<String, String> schemaMap : schemas){
				if(schemaMap.get("SCHEMA").equals(conn.getName())){
					loopPath = schemaMap.get("LOOP_PATH");
				}
			}
%>
	java.util.List<java.util.Map<String, String>> tmpList_<%=conn.getName()%>_<%=cid %> = map_<%=cid %>.get(<%=loopPath %>);
	java.util.Iterator<java.util.Map<String, String>> it_<%=conn.getName() %>_<%=cid %> = tmpList_<%=conn.getName()%>_<%=cid %>.iterator();
<%
		}
	}
%>
	while (
<%
	boolean b_sax_while = true;
	for(IConnection conn : connections){
		if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)){
%>
<%=b_sax_while?"": " || "%>it_<%=conn.getName() %>_<%=cid %>.hasNext()
<%
			b_sax_while = false;
		}
	}
%>) {

<%
}
// *** sax end *** //
%>


<%
	for(IConnection conn : connections){
		if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)){
			boolean hasEmptyRow = false;
			Map<String, String> mapping = null;
			String tmpQuery = null;
			for(Map<String, String> schemaMap : schemas){
				if(schemaMap.get("SCHEMA").equals(conn.getName())){
					hasEmptyRow = schemaMap.get("CREATE_EMPTY_ROW").equals("true");
					mapping = schemaMap;
					tmpQuery = schemaMap.get("LOOP_PATH");
				}
			}
			IMetadataTable metadata = conn.getMetadataTable();
			if(metadata!=null){
%>
	<%=conn.getName() %> = null;
<%
				if(hasEmptyRow){
%>
	<%=conn.getName() %> = new <%=conn.getName() %>Struct();
	if(it_<%=conn.getName() %>_<%=cid %>.hasNext()){
<% 
				}else{
%>
	if(it_<%=conn.getName() %>_<%=cid %>.hasNext()){	
		<%=conn.getName() %>=new <%=conn.getName() %>Struct();	
<% 
				}
				if(mode.equals("Dom4j")){
%>		
		String tmpQuery_<%=conn.getName() %> = <%=tmpQuery %>;
		if(tmpQuery_<%=conn.getName() %>.startsWith("/")){
			tmpQuery_<%=conn.getName() %> = tmpQuery_<%=conn.getName() %>.substring(1, tmpQuery_<%=conn.getName() %>.length());
		}
		String subLoop_<%=conn.getName() %> = rootpath_<%=cid %> + "/" + tmpQuery_<%=conn.getName() %>;

		org.dom4j.tree.AbstractNode temp_<%=conn.getName() %>_<%=cid %> = it_<%=conn.getName() %>_<%=cid %>.next();
<% 
				}else if(mode.equals("SAX")){
%>
		java.util.Map<String, String> row_<%=conn.getName() %>_<%=cid %> = it_<%=conn.getName() %>_<%=cid %>.next();
<%
				}
				List<IMetadataColumn> columns = metadata.getListColumns();
				String[] arrXpath = ((String)mapping.get("MAPPING")).split(",");
				for (int i=0;i < arrXpath.length;i++) {
					String query = arrXpath[i];
					if(mode.equals("Dom4j")){
%>
		org.dom4j.XPath xTmp<%=conn.getName() + i %>_<%=cid %> = temp_<%=conn.getName() %>_<%=cid %>.createXPath(nsTool_<%=cid %>.addDefaultNSPrefix(<%=query %>, subLoop_<%=conn.getName() %>));
	    xTmp<%=conn.getName() + i %>_<%=cid %>.setNamespaceURIs(xmlNameSpaceMap_<%=cid %>); 
	    node_<%=cid %> = xTmp<%=conn.getName() + i %>_<%=cid %>.selectSingleNode(temp_<%=conn.getName() %>_<%=cid %>);
	    str_<%=cid %> = xTmp<%=conn.getName() + i %>_<%=cid %>.valueOf(temp_<%=conn.getName() %>_<%=cid %>);
<%
					}else if(mode.equals("SAX")){
%>
	str_<%=cid %> = row_<%=conn.getName() %>_<%=cid %>.get(<%=query %>);
<%
						if(query!=null && query.indexOf("@")<0){
%>
	node_<%=cid %> = new String[]{str_<%=cid %>,row_<%=conn.getName() %>_<%=cid %>.get(<%=query %>+"/@xsi:nil")};
<%
						}else{
%>
	node_<%=cid %> = new String[]{str_<%=cid %>,null};
<%
						}
					}
 					int j = 0;
					for(IMetadataColumn column:columns) {
						if (i == j) {
							String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
							JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
							String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
							
							boolean isNotSetDefault = false;
							String defaultValue=column.getDefault();
							if(defaultValue!=null){
								isNotSetDefault = defaultValue.length()==0;
							}else{
								isNotSetDefault=true;
							}
							
							if(javaType == JavaTypesManager.STRING){
								if(column.isNullable()){
%>
									if(xml_api_<%=cid %>.isDefNull(node_<%=cid %>)){
											<%=conn.getName() %>.<%=column.getLabel() %> =null;
									}else if(xml_api_<%=cid %>.isEmpty(node_<%=cid %>)){
										<%=conn.getName() %>.<%=column.getLabel() %> ="";
									}else if(xml_api_<%=cid %>.isMissing(node_<%=cid %> )){ 
										<%=conn.getName() %>.<%=column.getLabel() %> =<%=isNotSetDefault?null:column.getDefault() %>;
									}else{
<% 
								}else{ // column.isNullable()
%>
									if(xml_api_<%=cid %>.isEmpty(node_<%=cid %>)){
										<%=conn.getName() %>.<%=column.getLabel() %> ="";
									}else if(xml_api_<%=cid %>.isMissing(node_<%=cid %> )){ 
										<%=conn.getName() %>.<%=column.getLabel() %> =<%=isNotSetDefault?JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate):column.getDefault() %>;
									}else{
<% 
								}
							}else{ // other type
								if(column.isNullable()){
%>	
										if(xml_api_<%=cid %>.isDefNull(node_<%=cid %>)){
											<%=conn.getName() %>.<%=column.getLabel() %> =null;
										}else if(xml_api_<%=cid %>.isEmpty(node_<%=cid %>) || xml_api_<%=cid %>.isMissing(node_<%=cid %>)){
											<%=conn.getName() %>.<%=column.getLabel() %>=<%=isNotSetDefault?null:column.getDefault()%>;
										}else{
<%
							  	}else{ // column.isNullable()
%>
										if(xml_api_<%=cid %>.isMissing(node_<%=cid %>) || xml_api_<%=cid %>.isEmpty(node_<%=cid %>)){
											<%=conn.getName() %>.<%=column.getLabel() %> =<%=isNotSetDefault?JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate):column.getDefault() %>;
										}else{
<%
								}
							}
							if (javaType == JavaTypesManager.STRING || javaType == JavaTypesManager.OBJECT) {
%>
		<%=conn.getName() %>.<%=column.getLabel() %> = str_<%=cid %>;
<% 
							} else if (javaType == JavaTypesManager.DATE) {
%>
		<%=conn.getName() %>.<%=column.getLabel() %> = ParserUtils.parseTo_Date(str_<%=cid %>, <%= patternValue %>);
<%  
							} else if(javaType == JavaTypesManager.BYTE_ARRAY){ 
%>							
		<%=conn.getName() %>.<%=column.getLabel() %> = str_<%=cid %>.getBytes(<%=encoding %>);
<%
							} else if(advancedSeparator && JavaTypesManager.isNumberType(javaType)) { 
%>
		<%=conn.getName() %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%= typeToGenerate %>(ParserUtils.parseTo_Number(str_<%=cid %>, <%= thousandsSeparator %>, <%= decimalSeparator %>));
<%
							} else {
%>
		<%=conn.getName() %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%= typeToGenerate %>(str_<%=cid %>);
<%
							}
%>
	}
<%
							break;//jump out of the for loop
						}
						j++;
					}				//for(IMetadataColumn column:columns)
				}				//for (int i=0;i<mapping.size();i++)
//===========================modify by wliu=================================
%>
	}
<% 
			}	//if(metadata!=null)	
		}//if(conn) 
	}	//for(IConnection)
}	//if(conns!=null)
//===============================end========================================
%>
			
