<%@ jet 
imports="
    org.talend.core.model.process.INode
    org.talend.core.model.process.ElementParameterParser
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.List
    java.util.Map
" 
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode) codeGenArgument.getArgument();
String cid = node.getUniqueName();
String dbhost = ElementParameterParser.getValue(node, "__HOST__");
String dbport = ElementParameterParser.getValue(node, "__PORT__");
String dbname = ElementParameterParser.getValue(node, "__DBNAME__");
String dbproperties = ElementParameterParser.getValue(node, "__PROPERTIES__");
String dbuser = ElementParameterParser.getValue(node, "__USER__");
String dbpwd  = ElementParameterParser.getValue(node, "__PASS__");
String spName = ElementParameterParser.getValue(node, "__SP_NAME__");
boolean isFunction = ElementParameterParser.getValue(node, "__IS_FUNCTION__").equals("true");
List<Map<String, String>> spArgs = (List<Map<String,String>>) ElementParameterParser.getObjectValue(node, "__SP_ARGS__");

String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");
if(useExistingConn.equals("true")){
	String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
	String conn = "conn_" + connection;
%>
java.sql.Connection connection_<%=cid%> = (java.sql.Connection)globalMap.get("<%=conn%>");
<%
}
else{ 
%>
java.lang.Class.forName("net.sourceforge.jtds.jdbc.Driver");
String connectionString_<%=cid %> = "jdbc:jtds:sqlserver://" + <%=dbhost%> + ":" + <%=dbport%> + "//" + <%=dbname%> + ";appName=" + projectName + ";" + <%=dbproperties%>;        
java.sql.Connection connection_<%=cid%> = java.sql.DriverManager.getConnection(connectionString_<%=cid%>, <%=dbuser%>, <%=dbpwd%>);
<%
}
boolean hasOutput = false;
StringBuilder parameters =new StringBuilder();
for (int i = 0; i < spArgs.size(); i++) {
	if(spArgs.get(i).get("TYPE").equals("RECORDSET") 
		|| spArgs.get(i).get("TYPE").equals("INOUT")
		|| spArgs.get(i).get("TYPE").equals("OUT")){
		hasOutput=true;
	}
    if(!spArgs.get(i).get("TYPE").equals("RECORDSET")){
        if (parameters.length()==0) {
           	parameters.append("?");
        } else {
            parameters.append(",?");
        }
    }
}
%>
//java.sql.Statement stmt_<%=cid%> = connection_<%=cid%>.createStatement();

//stmt_<%=cid%>.execute("SET NOCOUNT ON");

java.sql.CallableStatement statement_<%=cid%> = connection_<%=cid%>.prepareCall("{<%=isFunction ? "? = " : ""%>call <%=spName%>(<%=parameters.toString()%>)}"
<%
if(hasOutput){
%>
	,java.sql.ResultSet.TYPE_SCROLL_INSENSITIVE, java.sql.ResultSet.CONCUR_READ_ONLY
<%
}
%>
);

java.sql.Date tmpDate_<%=cid%>;
String tmpString_<%=cid%>;