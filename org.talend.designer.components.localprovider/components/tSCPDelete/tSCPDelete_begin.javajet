<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser
    org.talend.designer.codegen.config.CodeGeneratorArgument
"
%>

<%
        CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
        INode node = (INode)codeGenArgument.getArgument();
        String cid = node.getUniqueName();

        String host = ElementParameterParser.getValue(
            node,
            "__HOST__"
        );

        String port = ElementParameterParser.getValue(
            node,
            "__PORT__"
        );

        String user = ElementParameterParser.getValue(
            node,
            "__USERNAME__"
        );

        String authMethod = ElementParameterParser.getValue(
            node,
            "__AUTH_METHOD__"
        );

        String privatekey = ElementParameterParser.getValue(
            node,
            "__PRIVATEKEY__"
        );

        String password = ElementParameterParser.getValue(
            node,
            "__PASSWORD__"
        );
        
        String passphrase = ElementParameterParser.getValue(
            node,
            "__PASSPHRASE__"
        );
%>
	int nb_file_<%=cid%> = 0;

    /* Create a connection instance */
    ch.ethz.ssh2.Connection conn_<%=cid %>=null;
	<%
	String useExistingConn = ElementParameterParser.getValue(node, "__USE_EXISTING_CONNECTION__");
	
	if(("true").equals(useExistingConn)){
		String connection = ElementParameterParser.getValue(node, "__CONNECTION__");
		String conn= "conn_" + connection;
	%>
	
	conn_<%=cid %> = (ch.ethz.ssh2.Connection)globalMap.get("<%=conn %>");
    String hostname_<%=cid%> = <%=host%>;
    String username_<%=cid%> = <%=user%>;
	
<%}else{%>

    String hostname_<%=cid%> = <%=host%>;
    String username_<%=cid%> = <%=user%>;
    
<%
        if(("").equals(port)){
%>
              conn_<%=cid%> = new ch.ethz.ssh2.Connection(hostname_<%=cid%>);
<%
        } else {
%>
              conn_<%=cid%> = new ch.ethz.ssh2.Connection(hostname_<%=cid%>,<%=port%>);
<%
        }
%>
              /* Now connect */
        conn_<%=cid%>.connect();
<%        
        if (("PUBLICKEY").equals(authMethod)) {
%>
        java.io.File keyfile_<%=cid%> = new java.io.File(<%=privatekey%>); 
            boolean isAuthenticated_<%=cid%> = conn_<%=cid%>.authenticateWithPublicKey(username_<%=cid%>, keyfile_<%=cid%>, <%=passphrase%>);
              if (isAuthenticated_<%=cid%> == false)
                      throw new RuntimeException("Authentication failed.");
<%
        }
        if (("PASSWORD").equals(authMethod)) {
%>
        boolean isAuthenticated_<%=cid%> = conn_<%=cid%>.authenticateWithPassword(username_<%=cid%>, <%=password%>);
        if (isAuthenticated_<%=cid%> == false)
            throw new RuntimeException("Authentication failed.");
<%
        }
        if (("KEYBOARDINTERACTIVE").equals(authMethod)) {
%>
        boolean isAuthenticated_<%=cid%> = conn_<%=cid%>.authenticateWithKeyboardInteractive(username_<%=cid%>, 
            new ch.ethz.ssh2.InteractiveCallback() {
        
        		public String[] replyToChallenge(String name,
        				String instruction, int numPrompts,
        				String[] prompt, boolean[] echo)
        				throws java.lang.Exception {
        			// TODO Auto-generated method stub
        			String[] reply = new String[numPrompts];
        			for (int i = 0; i < reply.length; i++) {
        				reply[i] = <%=password%>;
        			}
        
        			return reply;
        		}
        	}	
        );
        if (isAuthenticated_<%=cid%> == false)
            throw new RuntimeException("Authentication failed.");
<%
        }
	}//if(isExistingConn)        
%>     
