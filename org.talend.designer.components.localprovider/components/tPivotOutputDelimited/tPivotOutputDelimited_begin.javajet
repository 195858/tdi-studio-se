<%@ jet 
imports="
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.process.INode
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.ElementParameterParser  
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.core.model.metadata.MetadataTalendType
    org.talend.core.model.metadata.types.JavaTypesManager
    org.talend.core.model.metadata.types.JavaType 
    org.talend.core.model.metadata.MappingTypeRetriever
    org.talend.core.model.metadata.MetadataTalendType
    java.util.List
    java.util.ArrayList
    java.util.Map
    java.util.HashMap
    java.util.LinkedList
"
skeleton="../templates/db_output_bulk.skeleton"
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
    IMetadataTable metadata = metadatas.get(0);
    if (metadata!=null) {
        List<Map<String, String>> groupbys = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__GROUPBYS__");

        String filename = ElementParameterParser.getValue(node,"__FILENAME__");

        String rowSeparator = ElementParameterParser.getValue(node,"__ROWSEPARATOR__");

        boolean csvOption = ElementParameterParser.getValue(node,"__CSV_OPTION__").equals("true");
        
        String escapeChar = ElementParameterParser.getValue(node,"__ESCAPE_CHAR__");
        
        String textEnclosure = ElementParameterParser.getValue(node,"__TEXT_ENCLOSURE__");
        
        textEnclosure = textEnclosure.substring(1,textEnclosure.length()-1);
        
        String encoding = ElementParameterParser.getValue(node,"__ENCODING__");
        
        String delim1 = ElementParameterParser.getValue(node, "__FIELDSEPARATOR__");
        
        String delim = delim1.substring(1,delim1.length()-1);
        
        if(delim.equals("'")) delim = "\\'";
        
            delim = delim1.substring(1,delim1.length()-1);

        int column_number = 0;
        
        List<? extends IConnection> incomingConnections = node.getIncomingConnections();
        
        List<IMetadataColumn> columnList = getColumnList(node);
%>




int nb_line_<%=cid%> = 0;

String fileName_<%=cid%> = <%=filename%>;


<% if(ElementParameterParser.getValue(node,"__CSV_OPTION__").equals("false")) { %>
    
    java.io.BufferedWriter out<%=cid %> = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
            new java.io.FileOutputStream(fileName_<%=cid%>, true),<%=encoding%>));

<%}else{%>
    
    com.csvreader.CsvWriter CsvWriter<%=cid%> = new com.csvreader.CsvWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(
            new java.io.FileOutputStream(fileName_<%=cid%>, true), <%=encoding%>)), '<%=delim%>');  
    
<%              if(!rowSeparator.equals("\\n") && !rowSeparator.equals("\\r")){%>
    CsvWriter<%=cid %>.setRecordDelimiter('<%=rowSeparator.substring(1,rowSeparator.length()-1)  %>');
<%              }
%>
    CsvWriter<%=cid %>.setTextQualifier('<%=textEnclosure %>');                

<%
if(escapeChar.equals("\\\\")){
%>
    CsvWriter<%=cid %>.setEscapeMode(com.csvreader.CsvWriter.ESCAPE_MODE_BACKSLASH);
<%
}else if(escapeChar.equals(textEnclosure)){
%>
    CsvWriter<%=cid %>.setEscapeMode(com.csvreader.CsvWriter.ESCAPE_MODE_DOUBLED);
<%
}else{
    
}
%>       


<%}%>


java.io.File file<%=cid%> = new java.io.File(fileName_<%=cid%>);

boolean pivot_Exists = false;

StringBuilder pivot_Key = new StringBuilder();

String pivot_Keys = new String("");

String[] pivot_Keys_Split = null;

boolean group_Exists = false;

StringBuilder group_Key = new StringBuilder();

String gKvalue = new String("");

String group_Keys = new String("");

String[] group_Keys_Split = null;

StringBuilder aggValues = new StringBuilder();

java.util.Map<String,String> aggregation = new java.util.HashMap<String,String>();

<%
    }
}
%>
