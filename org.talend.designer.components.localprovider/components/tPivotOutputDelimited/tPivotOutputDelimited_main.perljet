<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.process.ElementParameterParser
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.process.IConnection
    java.util.List
    java.util.Map
"
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

List<Map<String, String>> operations = 
    (List<Map<String,String>>)ElementParameterParser.getObjectValue(
        node, 
        "__OPERATIONS__"
    );

List<Map<String, String>> groupbys = 
    ( List<Map<String,String>>)ElementParameterParser.getObjectValue(
        node, 
        "__GROUPBYS__"
    );

	
List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
    IMetadataTable metadata = metadatas.get(0);
        if (metadata!=null) {
                
            String pivotColumn = 
                ElementParameterParser.getValue(
                    node, 
                    "__PIVOT_COLUMN__"
            );

            String aggColumn = 
                ElementParameterParser.getValue(
                    node, 
                    "__AGGREGATION_COLUMN__"
            );

            String aggFunction = 
                ElementParameterParser.getValue(
                    node, 
                    "__AGGREGATION_FUNCTION__"
                );
                
            List<? extends IConnection> incomingConnections = 
                node.getIncomingConnections();
                if (incomingConnections != null && !incomingConnections.isEmpty()) {
                    IMetadataTable inMetadata = 
                        incomingConnections.get(0).getMetadataTable();
                    
                    String inConnName = inMetadata.getTableName();
                    


%>

    $<%=cid%>_pivot->{ $<%=cid%>->[<%=inConnName %>__<%=pivotColumn %>] } ||= 
        scalar keys %$<%=cid%>_pivot;
        
    my $<%=cid%>_row_key = join(
        OUTPUT_FIELD_SEPARATOR_<%=cid %>,
<%
        for (int i=0; i<groupbys.size(); i++) {
            Map<String, String> groupby = groupbys.get(i);
%>
        $<%=cid%>->[<%=inConnName %>__<%=groupby.get("INPUT_COLUMN") %>],
<%
        }
%>
    );

    $<%=cid%>_row_keys->{ $<%=cid%>_row_key } ||= scalar keys %$<%=cid%>_row_keys;
    
    # Initializes a new row if needed
    $<%=cid%>_cross_table->[ $<%=cid%>_row_keys->{ $<%=cid%>_row_key } ] ||= [];
    
    my $<%=cid%>_curr_row = 
        $<%=cid%>_cross_table->[ $<%=cid%>_row_keys->{ $<%=cid%>_row_key } ];

    my $<%=cid%>_curr_val = $<%=cid%>->[<%=inConnName %>__<%=aggColumn%>];

    my $<%=cid%>_pivot_col_indx = 
        $<%=cid%>_pivot->{ $<%=cid%>->[<%=inConnName %>__<%=pivotColumn %>] };
    
    # Pivot is here
<%  
if( aggFunction.equals("sum") ){
%>
    $<%=cid%>_curr_row->[$<%=cid%>_pivot_col_indx] +=
         $<%=cid%>_curr_val;
<%
}
else if( aggFunction.equals("count") ){
%>
    $<%=cid%>_curr_row->[$<%=cid%>_pivot_col_indx]++;
<%
}
else if( aggFunction.equals("max") ){
%>
    $<%=cid%>_curr_row->[$<%=cid%>_pivot_col_indx] ||=
         $<%=cid%>_curr_val;
    $<%=cid%>_curr_row->[$<%=cid%>_pivot_col_indx] =
         $<%=cid%>_curr_val if( $<%=cid%>_curr_val > $<%=cid%>_curr_row->[$<%=cid%>_pivot_col_indx]);
<%
}
else if( aggFunction.equals("min") ){
%>
    $<%=cid%>_curr_row->[$<%=cid%>_pivot_col_indx] ||=
         $<%=cid%>_curr_val;
    $<%=cid%>_curr_row->[$<%=cid%>_pivot_col_indx] =
         $<%=cid%>_curr_val if( $<%=cid%>_curr_val < $<%=cid%>_curr_row->[$<%=cid%>_pivot_col_indx]);
<%
}
else if( aggFunction.equals("first") ){
%>
    $<%=cid%>_curr_row->[$<%=cid%>_pivot_col_indx] ||=
         $<%=cid%>_curr_val;
<%
}
else if( aggFunction.equals("last") ){
%>
    $<%=cid%>_curr_row->[$<%=cid%>_pivot_col_indx] =
         $<%=cid%>_curr_val;
<%
}
%>    
    $nb_line_<%=cid%>++;

    
<%
        }
    }
}
%>
