<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.designer.codegen.config.CodeGeneratorArgument
	org.talend.core.model.metadata.IMetadataTable
	org.talend.core.model.metadata.IMetadataColumn
    org.talend.core.model.metadata.MetadataTalendType    
    org.talend.core.model.metadata.MappingTypeRetriever	
    java.util.List
    java.util.ArrayList
    java.util.Map
    java.util.HashMap
" 
skeleton="../templates/db_output_bulk.skeleton"
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();
String encoding = ElementParameterParser.getValue(node, "__ENCODING__");
String charset = "utf8";
if(encoding.equals("\"GBK\"")){
	charset = "gbk";
}else if(encoding.equals("\"GB2312\"")){
	charset = "gb2312";
}else if(encoding.equals("\"ISO-8859-1\"")){
	charset = "latin1";
}else if(encoding.equals("\"ISO-8859-2\"")){
	charset = "latin2";
}else if(encoding.equals("\"ISO-8859-15\"")){
	charset = "latin1";//?not sure if this is true for iso-8859-15
}else if(encoding.equals("\"Big5\"")){
	charset = "big5";
}else if(encoding.equals("\"UCS-2\"")){
	charset = "ucs2";
}
String host = ElementParameterParser.getValue(node, "__HOST__");
String port = ElementParameterParser.getValue(node, "__PORT__");
String dbName = ElementParameterParser.getValue(node, "__DBNAME__");
String tableName = ElementParameterParser.getValue(node, "__TABLE__");
String userName = ElementParameterParser.getValue(node, "__USER__");
String password = ElementParameterParser.getValue(node, "__PASS__");
List<IMetadataColumn> columnList = getColumnList(node);
%>
String tableName_<%=cid%> = <%=tableName%>;
Class.forName("com.mysql.jdbc.Driver").newInstance();
java.sql.Connection con_<%=cid%> = java.sql.DriverManager.getConnection("jdbc:MySQL://" + <%=host%> + ":" + <%=port%> + "/" + <%=dbName%>, <%=userName%>, <%=password%>);
<%
String tableAction = ElementParameterParser.getValue(node,"__TABLE_ACTION__");
String dbmsId = ElementParameterParser.getValue(node,"__MAPPING__");
if(columnList != null && columnList.size() > 0) {
    List<Column> stmtStructure = getManager(dbmsId, cid).createColumnList(columnList, null);
    Manager manager = getManager(dbmsId, cid);
    if(tableAction.equals("DROP_CREATE")) {
        %>
        java.sql.Statement stmtDrop_<%=cid%> = con_<%=cid%>.createStatement();
        stmtDrop_<%=cid%>.execute("<%=manager.getDropTableSQL()%>");
        java.sql.Statement stmtCreate_<%=cid%> = con_<%=cid%>.createStatement();
        stmtCreate_<%=cid%>.execute("<%=manager.getCreateTableSQL(stmtStructure)%>");
        <%
    } else if(tableAction.equals("CREATE")) {
        %>
        java.sql.Statement stmtCreate_<%=cid%> = con_<%=cid%>.createStatement();
        stmtCreate_<%=cid%>.execute("<%=manager.getCreateTableSQL(stmtStructure)%>");
        <%
    } else if(tableAction.equals("CREATE_IF_NOT_EXISTS")) {
        %>
        java.sql.DatabaseMetaData dbMetaData_<%=cid%> = con_<%=cid%>.getMetaData();
        java.sql.ResultSet rsTable_<%=cid%> = dbMetaData_<%=cid%>.getTables(null, null, null, new String[]{"TABLE"});
        boolean whetherExist_<%=cid%> = false;
        while(rsTable_<%=cid%>.next()) {
            String table_<%=cid%> = rsTable_<%=cid%>.getString("TABLE_NAME");
            if(table_<%=cid%>.equalsIgnoreCase(<%=tableName%>)) {
                whetherExist_<%=cid%> = true;
                break;
            }
        }
        if(!whetherExist_<%=cid%>) {
            java.sql.Statement stmtCreate_<%=cid%> = con_<%=cid%>.createStatement();
            stmtCreate_<%=cid%>.execute("<%=manager.getCreateTableSQL(stmtStructure)%>");            
        }
        <%
    } else if(tableAction.equals("CLEAR")) {
        %>
        java.sql.Statement stmtClear_<%=cid%> = con_<%=cid%>.createStatement();
        stmtClear_<%=cid%>.executeUpdate("<%=manager.getTruncateTableSQL()%>");
        <%
    }    
}
%> 

String lines_separator_<%=cid %> = <%=ElementParameterParser.getValue(node, "__LINES_TERMINATED_BY__") %>;
String field_separator_<%=cid %> = <%=ElementParameterParser.getValue(node, "__FIELDS_TERMINATED_BY__") %>;
String escaped_str_<%=cid %> = <%=ElementParameterParser.getValue(node, "__ESCAPED_BY__") %>;
String enclosed_str_<%=cid %> = <%=ElementParameterParser.getValue(node, "__ENCLOSED_BY__") %>;
String file_<%=cid %> = <%=ElementParameterParser.getValue(node, "__FILENAME__") %>;
String replace_<%=cid%> = null;
<%
String isUpdate = ElementParameterParser.getValue(node, "__IS_UPDATE__");
if(isUpdate.equals("true"))
{
	%>
	replace_<%=cid%> = "REPLACE";
	<%
}
else
{
	%>
	replace_<%=cid%> = "";
	<%
}
StringBuilder loadingCols = new StringBuilder();
if(columnList != null && columnList.size() > 0) {
    loadingCols.append("(");
    int sizeColumns = columnList.size();
    for (int i = 0; i < sizeColumns; i++) {
        IMetadataColumn column = columnList.get(i);
        loadingCols.append("`" + column.getOriginalDbColumnName() + "`");
        if(i != sizeColumns - 1) {
            loadingCols.append(",");
        }
    }
    loadingCols.append(")");
}
%>

java.sql.Statement stmt_<%=cid %>=con_<%=cid %>.createStatement();
stmt_<%=cid %>.execute("SET character_set_database=<%=charset %>");
stmt_<%=cid %>.execute(
    "LOAD DATA LOCAL INFILE '" + file_<%=cid %> + "' " 
    + replace_<%=cid%> 
    + " INTO TABLE " + tableName_<%=cid %>
    + " FIELDS TERMINATED BY '" + field_separator_<%=cid %>.replaceAll("\\\\", "\\\\\\\\") + "'"
    + " ENCLOSED BY '" + enclosed_str_<%=cid %>.replaceAll("\\\\", "\\\\\\\\") + "'"
    + " ESCAPED BY '" + escaped_str_<%=cid %>.replaceAll("\\\\", "\\\\\\\\") + "'"
    + " LINES TERMINATED BY '" + lines_separator_<%=cid %>.replaceAll("\\\\", "\\\\\\\\") + "' <%=loadingCols.toString()%>"            
);
stmt_<%=cid %>.close();
con_<%=cid %>.close();