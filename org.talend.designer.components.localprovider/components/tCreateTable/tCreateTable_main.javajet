<%@ jet 
imports="
	org.talend.designer.codegen.config.CodeGeneratorArgument
	org.talend.core.model.process.INode
	org.talend.core.model.process.ElementParameterParser
	org.talend.core.model.process.IConnection
	org.talend.core.model.metadata.IMetadataColumn
	org.talend.core.model.metadata.IMetadataTable
	org.talend.core.model.metadata.types.JavaTypesManager
	org.talend.core.model.metadata.types.JavaType 
	org.talend.core.database.EDatabaseTypeName
	org.talend.core.model.metadata.MetadataTalendType
	org.talend.core.model.metadata.types.TypesManager
	java.util.List
	java.util.ArrayList
	java.util.Map
	java.util.Random
"
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();	
	String cid = node.getUniqueName();
	String tableName = ElementParameterParser.getValue(node,"__TABLE__");
	String dbType = ElementParameterParser.getValue(node,"__DBTYPE__");
	String host = ElementParameterParser.getValue(node,"__HOST__");
	String port = ElementParameterParser.getValue(node,"__PORT__");
	String dbname = ElementParameterParser.getValue(node,"__DBNAME__");
	String user = ElementParameterParser.getValue(node,"__USER__");
	String pass = ElementParameterParser.getValue(node,"__PASS__");
	
	
	List<Map<String, String>> tableColumns =
            (List<Map<String,String>>)ElementParameterParser.getObjectValue(node,"__TABLECOLUMNS__");
	List<IMetadataColumn> columnList = null;
	List<IMetadataTable> metadatas = node.getMetadataList();
	
	if(metadatas != null && metadatas.size()>0){
		IMetadataTable metadata = metadatas.get(0);
		if(metadata != null){
			columnList = metadata.getListColumns();
		}
	}

//inner class
class Transfer{
	public String dbDriver(String dbType){
		if(dbType.equals("MSSQL")){
			return "net.sourceforge.jtds.jdbc.Driver";
		}else if(dbType.equals("MySQL")){//depends on useExisting connection
			return "org.gjt.mm.mysql.Driver";
		}else if(dbType.equals("Oracle")){
			return "oracle.jdbc.driver.OracleDriver";
		}else if(dbType.equals("Postgre")){
			return "org.postgresql.Driver";
		}
		return null;
	}
	
	
	public String url(String dbType,String host,String port, String dbname, String oraType){
		if(dbType.equals("MSSQL")){
		//return "\"jdbc:db2://\"+"+host+"+\":\"+"+port+"+\"/\"+"+dbname;
		return "\"jdbc:jtds:sqlserver://\"+"+host+"+\":\"+"+port+"+\"//\"+"+dbname;
		}else if(dbType.equals("MySQL")){
			return "\"jdbc:mysql://\"+"+host+"+\":\"+"+port+"+\"/\"+"+dbname+ "+\"?noDatetimeStringSync=true\"";
		}else if(dbType.equals("Oracle")){//depends on SID/Service
			if(oraType.equals("Oracle SID")){
				return "\"jdbc:oracle:thin:@\"+"+host+"+\":\"+" + port + "+\":\"+" + dbname;
			}else{
				return "\"dbc:oracle:thin:@(description=(address=(protocol=tcp)(host=\"+" + host + "+\")(port=\"+" + port + "+\"))(connect_data=(service_name=\"+" + dbname +"+\")))\"";			
			}

		}else if(dbType.equals("Postgre")){
			return "\"jdbc:postgresql://\"+"+host+"+\":\"+"+port+"+\"/\"+"+dbname;
		}
		return null;
	}
	
	
	public String dbID(String dbType, INode node){
		if(dbType.equals("MSSQL")){
			return "Microsoft SQL Server";
		}else if(dbType.equals("MySQL")){
			return "MySQL";
		}else if(dbType.equals("Oracle")){
			String oraType = ElementParameterParser.getValue(node,"__ORACLETYPE__");
			if(oraType.equals("Oracle SID")){
				return "Oracle with SID";
			}else{
				return "Oracle with service name";			
			}
		}else if(dbType.equals("Postgre")){
			return "PostgreSQL";
		}
		return null;
	}
	
	
	public String sql(String dbType,String tableName,INode node,List<Map<String, String>> tableColumns){
	String sql="create table \"+"+tableName+"+\"(";
	//final String product = EDatabaseTypeName.getTypeFromDisplayName(getConnection().getDatabaseType()).getProduct();
	//final String mapping = MetadataTalendType.getDefaultDbmsFromProduct(product).getId();
	//final String dbType = TypesManager.getDBTypeFromTalendType(mapping, talendType);

		List<IMetadataTable> metadatas = node.getMetadataList();
		if ((metadatas!=null)&&(metadatas.size()>0)) {
			IMetadataTable metadata = metadatas.get(0);
			if (metadata!=null) {
				List<IMetadataColumn> columnList = metadata.getListColumns();
				int colNum=1;	
				List PKey=new ArrayList();						
			 	for(IMetadataColumn column:columnList){	
			 		//column name(done)
			 		sql=sql+column.getLabel()+" ";
			 		
			 		//primary key(shouldn't be here)
					if(column.isKey()==true){PKey.add(column.getLabel());}
			 		
			 		//column type(incomplete)
			 		String product = EDatabaseTypeName.getTypeFromDisplayName(dbID(dbType,node)).getProduct();
	 				String mapping = MetadataTalendType.getDefaultDbmsFromProduct(product).getId();
					String dbColumnType = TypesManager.getDBTypeFromTalendType(mapping, column.getTalendType());		 		
System.out.println("column mapping = "+mapping);
			 		sql=sql+dbColumnType;
			 		
			 		//column DataDefine(incomplete)
			 		
			 		if(column.getTalendType().equals("id_String")){
			 			if(column.getLength().equals(-1)){
			 			sql=sql+"(100)";
			 			}else{
			 			sql=sql+"("+column.getLength()+") ";
			 			}
			 		}
			 		sql=sql+" ";
			 		//default value(done)
			 		if(!(column.getDefault().equals(""))){
			 		sql=sql+"default ";
				 		if((column.getTalendType().equals("id_String"))||(column.getTalendType().equals("id_Date"))){
				 			sql=sql+"'"+column.getDefault()+"' ";
				 		}else{
				 			sql=sql+column.getDefault()+" ";
				 		}
			 		}
			 		
			 		//nullable(done)
			 		if(column.isNullable()==false){
			 			sql=sql+"not null ";
			 		}
			 		
			 		
			 		//ifthere should be a ','
			 		colNum=colNum+1;
			 		if(!((colNum>columnList.size())&&(PKey.isEmpty()))){sql=sql+",";}
			 	}
			 	
			 	//primary key
			 	if(!(PKey.isEmpty())){
			 	Random a = new Random();
			 	sql=sql+"constraint C"+String.valueOf(a.nextLong())+" primary key (";
			 	for(int i=0;i<PKey.size();i++){
			 		sql=sql+(String)PKey.get(i);
			 		if(i<PKey.size()-1){sql=sql+",";}
			 	}
			 	sql=sql+")";
			 	}
		 	}
	 	}		
	sql=sql+")";
		return sql;
	}

}
       Transfer tr=new Transfer();
%>

		String url<%=cid%>=null;
		java.sql.Connection con<%=cid%>=null;
		java.sql.Statement stmt<%=cid%>=null;
		String sql<%=cid%>=null;

<%
	String useExistingConn = ElementParameterParser.getValue(node,"__EXISTINGCONNECTION__");
	String oraType = ElementParameterParser.getValue(node,"__ORACLETYPE__");
	if((dbType.equals("MySQL"))&&(useExistingConn.equals("true")))
	{
		String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
		String conn = "conn_" + connection;%>
		con<%=cid%> = (java.sql.Connection)globalMap.get("<%=conn%>");
<%  }else{%>
		Class.forName("<%=tr.dbDriver(dbType)%>");// cancel the quote mark later!!!
		url<%=cid%>=<%=tr.url(dbType,host,port,dbname,oraType)%>;
		con<%=cid%>=java.sql.DriverManager.getConnection(url<%=cid%>,<%=user%>,<%=pass%>);
<%	} %>
		stmt<%=cid%>=con<%=cid%>.createStatement();
		sql<%=cid%>="<%=tr.sql(dbType,tableName,node,tableColumns)%>";
		stmt<%=cid%>.execute("sql");




		

		