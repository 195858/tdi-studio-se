<%@ jet 
imports="
	org.talend.designer.codegen.config.CodeGeneratorArgument
	org.talend.core.model.process.INode
	org.talend.core.model.process.ElementParameterParser
	org.talend.core.model.process.IConnection
	org.talend.core.model.metadata.IMetadataColumn
	org.talend.core.model.metadata.IMetadataTable
	org.talend.core.database.EDatabaseTypeName
	org.talend.core.model.metadata.MetadataTalendType
	org.talend.core.model.metadata.types.TypesManager
	org.talend.core.model.metadata.Dbms
	org.talend.core.model.metadata.MetadataTalendType
	org.talend.core.model.metadata.MappingTypeRetriever
	java.util.List
	java.util.ArrayList
	java.util.Map
"
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();	
	String cid = node.getUniqueName();
	String tableName = ElementParameterParser.getValue(node,"__TABLE__");
	String dbType = ElementParameterParser.getValue(node,"__DBTYPE__");
	String host = ElementParameterParser.getValue(node,"__HOST__");
	String port = ElementParameterParser.getValue(node,"__PORT__");
	String dbname = ElementParameterParser.getValue(node,"__DBNAME__");
	String user = ElementParameterParser.getValue(node,"__USER__");
	String pass = ElementParameterParser.getValue(node,"__PASS__");
	String frameworkType=ElementParameterParser.getValue(node,"__JAVADBFRAME__");
	final String dbmsId= ElementParameterParser.getValue(node,"__MAPPING__");
	Dbms dbms=MetadataTalendType.getDbms(dbmsId);
	
	List<IMetadataColumn> columnList = null;
	List<IMetadataTable> metadatas = node.getMetadataList();
	
	if(metadatas != null && metadatas.size()>0){
		IMetadataTable metadata = metadatas.get(0);
		if(metadata != null){
			columnList = metadata.getListColumns();
		}
	}

//inner class
class Transfer{
	public String dbDriver(INode node){
		String dbType = ElementParameterParser.getValue(node,"__DBTYPE__");
		if(dbType.equals("MSSQL")){
			return "net.sourceforge.jtds.jdbc.Driver";
		}else if(dbType.equals("MySQL")){
			return "org.gjt.mm.mysql.Driver";
		}else if(dbType.equals("Oracle")){
			return "oracle.jdbc.driver.OracleDriver";
		}else if(dbType.equals("Postgre")){
			return "org.postgresql.Driver";
		}else if(dbType.equals("Access")){
			return "sun.jdbc.odbc.JdbcOdbcDriver";
		}else if(dbType.equals("DB2")){
			return "com.ibm.db2.jcc.DB2Driver";
		}else if(dbType.equals("Firebird")){
			return "org.firebirdsql.jdbc.FBDriver";
		}else if(dbType.equals("Informix")){
			return "com.informix.jdbc.IfxDriver";
		}else if(dbType.equals("Ingres")){
			return "com.ingres.jdbc.IngresDriver";
		}else if(dbType.equals("JavaDB")){
			String frameworkType=ElementParameterParser.getValue(node,"__JAVADBFRAME__");
			if(frameworkType.equals("Embeded")){
				return "org.apache.derby.jdbc.EmbeddedDriver";
			}else if(frameworkType.equals("JCCJDBC")){
				return "com.ibm.db2.jcc.DB2Driver";
			}else if(frameworkType.equals("DERBYCLIENT")){
				return "org.apache.derby.jdbc.ClientDriver";
			}
		}else if(dbType.equals("SQLite")){
			return "org.sqlite.JDBC";
		}else if(dbType.equals("Sybase")){
			return "com.sybase.jdbc3.jdbc.SybDriver";
		}else if(dbType.equals("ODBC")){
			return "sun.jdbc.odbc.JdbcOdbcDriver";
		}else if(dbType.equals("HSQLdb")){
			return "org.hsqldb.jdbcDriver";
		}else if(dbType.equals("Interbase")){
			return "interbase.interclient.Driver";
		}
		return null;
	}
	
	
	public String url(INode node){	
		//String tableName = ElementParameterParser.getValue(node,"__TABLE__");
		String dbType = ElementParameterParser.getValue(node,"__DBTYPE__");
		String host = ElementParameterParser.getValue(node,"__HOST__");
		String port = ElementParameterParser.getValue(node,"__PORT__");
		String dbname = ElementParameterParser.getValue(node,"__DBNAME__");
		String user = ElementParameterParser.getValue(node,"__USER__");
		String pass = ElementParameterParser.getValue(node,"__PASS__");
		String oraType = ElementParameterParser.getValue(node,"__ORACLETYPE__");

		if(dbType.equals("MSSQL")){
			return "\"jdbc:jtds:sqlserver://\"+"+host+"+\":\"+"+port+"+\"//\"+"+dbname;
		}else if(dbType.equals("MySQL")){
			return "\"jdbc:mysql://\"+"+host+"+\":\"+"+port+"+\"/\"+"+dbname+ "+\"?noDatetimeStringSync=true\"";
		}else if(dbType.equals("Oracle")){//depends on SID/Service
					if(oraType.equals("Oracle SID")){
						return "\"jdbc:oracle:thin:@\"+"+host+"+\":\"+" + port + "+\":\"+" + dbname;
					}else{
						return "\"dbc:oracle:thin:@(description=(address=(protocol=tcp)(host=\"+" + host + "+\")(port=\"+" + port + "+\"))(connect_data=(service_name=\"+" + dbname +"+\")))\"";			
					}
		}else if(dbType.equals("Postgre")){
			return "\"jdbc:postgresql://\"+"+host+"+\":\"+"+port+"+\"/\"+"+dbname;
		}else if(dbType.equals("Access")){
		String accessDbname = ElementParameterParser.getValue(node,"__ACCESSDBNAME__");
			return "\"jdbc:odbc:Driver={Microsoft Access Driver (*.mdb)};DBQ=\"+"+accessDbname;
		}else if(dbType.equals("DB2")){
			return "\"jdbc:db2://\"+"+host+"+\":\"+"+port+"+\"/\"+"+dbname;
		}else if(dbType.equals("Firebird")){			
			String firebirdDB=ElementParameterParser.getValue(node,"__FIREBIRDDBNAME__");
			return "\"jdbc:firebirdsql:\"+"+host+"+\":\"+"+firebirdDB;
		}else if(dbType.equals("Informix")){
			String server=ElementParameterParser.getValue(node,"__INFORMIXSERVER__");			
			return "\"jdbc:informix-sqli://\"+"+host+ "+\":\"+"+port+"+\"/\"+"+dbname+"+\":informixserver=\"+"+server;
		}else if(dbType.equals("Ingres")){
			return "\"jdbc:ingres://\"+"+host+"+\":\"+"+port+"+\"/\"+"+dbname;
		}else if(dbType.equals("JavaDB")){
			String frameworkType=ElementParameterParser.getValue(node,"__JAVADBFRAME__");
			if(frameworkType.equals("Embeded")){
				return "\"jdbc:derby:\"+" + dbname;
			}else if(frameworkType.equals("JCCJDBC")){
				return "\"+jdbc:derby:net://\"+"+host+"+\":\"+"+port+"+\"/\"+"+dbname;
			}else if(frameworkType.equals("DERBYCLIENT")){
				return "\"+jdbc:derby://\"+"+host+"+\":\"+"+port+"+\"/\"+"+dbname;
			}
		}else if(dbType.equals("SQLite")){		
			String sqliteDB=ElementParameterParser.getValue(node,"__SQLITEDBNAME__");
			return "\"jdbc:sqlite:/\"+" +sqliteDB.toLowerCase();
		}else if(dbType.equals("Sybase")){
			return "\"jdbc:sybase:Tds:\"+"+host+"+\":\"+"+port+"+\"/\"+"+dbname;
		}else if(dbType.equals("ODBC")){
			return "\"jdbc:odbc:\" + " + dbname;
		}else if(dbType.equals("HSQLdb")){
			String runningMode=ElementParameterParser.getValue(node,"__HSQLMODE__");
			String tls=ElementParameterParser.getValue(node,"__TLS__");
			String dbalias=ElementParameterParser.getValue(node,"__HSQLDATABASEALIAS__");
			if(runningMode.equals("SERVER")){
				if(tls.equals("true")){
					return "\"jdbc:hsqldb:hsqls://\"+" + host + "+\":\"+" + port + "+\"/\"+" + dbalias;
				}else{
					return "\"jdbc:hsqldb:hsql://\"+" + host + "+\":\"+" + port + "+\"/\"+" + dbalias;
				}
			}else if(runningMode.equals("WEBSERVER")){
				if(tls.equals("true")){
					return "\"jdbc:hsqldb:https://\"+" + host + "+\":\"+" + port + "+\"/\"+" + dbalias;
				}else{
					return  "\"jdbc:hsqldb:http://\"+" + host + "+\":\"+" + port + "+\"/\"+" + dbalias;
				}
			}else if(runningMode.equals("PROCESS")){
				String dbpath=ElementParameterParser.getValue(node,"__HSQLDATABASEPATH__");
				String hdbname=ElementParameterParser.getValue(node,"__HSQLDATABASE__");
				return "\"jdbc:hsqldb:file:\"+" + dbpath + "+\"/\"+" + hdbname + "+\";ifexists=true\"";
			}
		}else if(dbType.equals("Interbase")){
			return "\"jdbc:interbase://\"+"+host+"+\"/\"+"+dbname;
		}
		return null;
	}
	
	public String protectChar(String dbType, String tableName){
		if(dbType.equals("DB2")||dbType.equals("Ingres")||dbType.equals("MSSQL")||dbType.equals("Oracle")||dbType.equals("Postgre")||dbType.equals("SQLite")||dbType.equals("Firebird")||dbType.equals("JavaDB")||dbType.equals("HSQLdb")||dbType.equals("Interbase")||dbType.equals("Informix")){
			return "\\\"\"+"+tableName+"+\"\\\"";
		}else if(dbType.equals("Access")){
			return "[\"+"+tableName+"+\"]";
		}else if(dbType.equals("MySQL")){
			return "`\"+"+tableName+"+\"`";
		}else if(dbType.equals("Sybase")){
			return "\"+"+tableName+"+\"";
		}
		return "\"+"+tableName+"+\"";
	}
	
	
	public String sql(String dbType,String tableName,INode node){
	String sql="create table "+protectChar(dbType, tableName)+" (";
		List<IMetadataTable> metadatas = node.getMetadataList();
		List PKey=new ArrayList();	
		if ((metadatas!=null)&&(metadatas.size()>0)) {
			IMetadataTable metadata = metadatas.get(0);
			if (metadata!=null) {
				List<IMetadataColumn> columnList = metadata.getListColumns();
				int colNum=1;									
			 	for(IMetadataColumn column:columnList){	
			 	//column name
			 	   if(dbType.equals("MySQL")){
			 			sql=sql+"`"+column.getOriginalDbColumnName()+"` ";
			 		}else{
			 			sql=sql+"\\\""+column.getOriginalDbColumnName()+"\\\" ";
			 		}
			 	//primary key
					if(column.isKey()==true){PKey.add(column.getOriginalDbColumnName());}
			 	//column type
				 		sql=sql+column.getType();
			 	//column DataDefine
			 	
			 	MappingTypeRetriever mtr=MetadataTalendType.getMappingTypeRetriever(dbmsId);		 	
			 
			 
			 
			 	
					if(column.getLength()==null) {column.setLength(0);};
					if(column.getPrecision()==null) {column.setPrecision(0);};
			 		if(column.getLength()!=0&&column.getPrecision()==0){     //only Length
			 				if(!mtr.isLengthIgnored(dbmsId,column.getType()))	//and Length is not ignored
			 					sql=sql+"("+column.getLength()+")";		 				
			 		}else if(column.getLength()!=0&&column.getLength()!=0){		//Length and Precision not null
			 				if(mtr.isPrecisionIgnored(dbmsId,column.getType())&&!mtr.isLengthIgnored(dbmsId,column.getType()))
			 					sql=sql+"("+column.getLength()+")";				//only Precision is ignored
			 				else if(!mtr.isPrecisionIgnored(dbmsId,column.getType())&&!mtr.isLengthIgnored(dbmsId,column.getType())){
			 					// Precision and Length are not ignored	
			 					if(mtr.isPreBeforeLength(dbmsId,column.getType()))
								 	sql=sql+"("+column.getPrecision()+","+column.getLength()+")"; 
								else
								 	sql=sql+"("+column.getLength()+","+column.getPrecision()+")"; 				
			 				}
			 				else
			 					sql=sql;					 				 			
			 		}		 	
			 		sql=sql+" ";
			 	//default_value
					sql=sql+fillValue(column.getDefault(),column.getTalendType());
			 	//nullable
			 		if(column.isNullable()==false){
			 			sql=sql+"not null ";
			 		}
			 	//if_there_should_be_a ','
			 		colNum=colNum+1;
			 		if(!((colNum>columnList.size())&&(PKey.isEmpty()))){sql=sql+",";}
			 	}
			 	//primary key
				 	if(!(PKey.isEmpty())){
					 	sql=sql+" primary key (";
					 	for(int i=0;i<PKey.size();i++){
					 	
						 	if(dbType.equals("MySQL")){
				 				sql=sql+"`"+(String)PKey.get(i)+"` ";
					 		}else{
					 			sql=sql+"\\\""+(String)PKey.get(i)+"\\\" ";
					 		}
					 		if(i<PKey.size()-1){sql=sql+",";}
					 	}
					 	sql=sql+")";
				 	}
		 	}
	 	}		
		sql=sql+")";
		return sql;
	}
	
    public boolean isLackDBType(INode node) {

        List<IMetadataTable> metadatas = node.getMetadataList();
        List PKey = new ArrayList();
        if ((metadatas != null) && (metadatas.size() > 0)) {
            IMetadataTable metadata = metadatas.get(0);
            if (metadata != null) {
                List<IMetadataColumn> columnList = metadata.getListColumns();
                for (IMetadataColumn column : columnList) {
                    if (column.getType() == null || column.getType().trim().length() == 0) {
                        return true;
                    }
                }
            }
        }
        return false;
    }	
    
    
    public String fillValue(String value, String colType) {
	  if((value.startsWith("\"")||value.startsWith("'") )&& (value.endsWith("\"")||value.endsWith("'"))){
			return "default '"+value.substring(1,value.length()-1)+"' ";
	   	}else if(value.equalsIgnoreCase("null")){
	   		return "default null ";
	   	}else if(value.equals("")){
	   		return " ";
	   	}else{
			return "default "+value+" ";
		}
	}
    
    
}
       Transfer tr=new Transfer();
%>

<% 
  if (tr.isLackDBType(node)){
%>		
		boolean isLackDBType = <%=tr.isLackDBType(node) %>;
		if(isLackDBType)
		{
		 	throw new Exception("To create a table, the DB Type in the schema must be set");
		}
<%
  }
%>
		String url<%=cid%>=null;
		java.sql.Connection con<%=cid%>=null;
		java.sql.Statement stmt<%=cid%>=null;
		String sql<%=cid%>=null;
		
<%
	String useExistingConn = ElementParameterParser.getValue(node,"__EXISTINGCONNECTION__");
	String oraType = ElementParameterParser.getValue(node,"__ORACLETYPE__");
	if((dbType.equals("MySQL"))&&(useExistingConn.equals("true")))
	{
		String connection = ElementParameterParser.getValue(node,"__CONNECTION_MYSQL__");
		String conn = "conn_" + connection;
%>
		Class.forName("<%=tr.dbDriver(node)%>");
		con<%=cid%> = (java.sql.Connection)globalMap.get("<%=conn%>");
<%		
	}else if((dbType.equals("Oracle"))&&(useExistingConn.equals("true"))){
		
		String connection = ElementParameterParser.getValue(node,"__CONNECTION_ORACLE__");
		String conn = "conn_" + connection;
%>
		con<%=cid%> = (java.sql.Connection)globalMap.get("<%=conn%>");
<%
	}else if((dbType.equals("Postgre"))&&(useExistingConn.equals("true"))){
		String connection = ElementParameterParser.getValue(node,"__CONNECTION_POSTGRE__");
		String conn = "conn_" + connection;
%>
		con<%=cid%> = (java.sql.Connection)globalMap.get("<%=conn%>");				
<%  }else if((dbType.equals("Access"))||(dbType.equals("SQLite"))){%>
		Class.forName("<%=tr.dbDriver(node)%>");
		url<%=cid%> = <%=tr.url(node)%>;
		con<%=cid%> = java.sql.DriverManager.getConnection(url<%=cid %>);
<%	}else if(dbType.equals("JavaDB")){%>
		url<%=cid%> = <%=tr.url(node)%>;
<%		if(frameworkType.equals("Embeded")){%>
			System.setProperty("derby.system.home",<%=ElementParameterParser.getValue(node,"__DBPATH__")%>);
<%		}else{
		String connectionFlag = ElementParameterParser.getValue(node, "__JAVADBNETSERVER__");
    	if(connectionFlag.equals("false")){%>
       		org.apache.derby.drda.NetworkServerControl serverControl_<%=cid%>;
        	serverControl_<%=cid%> = new org.apache.derby.drda.NetworkServerControl(java.net.InetAddress.getByName(<%=host%>),Integer.parseInt(<%=port%>));
			serverControl_<%=cid%>.start(new java.io.PrintWriter(System.out,true));
        	boolean isServerUp_<%=cid%> = false;
        	int timeOut_<%=cid%> = 5;
        	while(!isServerUp_<%=cid%> && timeOut_<%=cid%> > 0)
        	{	try
        		{	timeOut_<%=cid%>--;
            		serverControl_<%=cid%>.ping();
            		isServerUp_<%=cid%> = true;
        		}catch(Exception e) {
    				Thread.currentThread().sleep(3000);
    			}    				
        	}
        	if(!isServerUp_<%=cid%>)
        	{	System.exit(1);	}
<%			}
		}%>
		java.util.Properties properties<%=cid%>=new java.util.Properties();
		Class.forName("<%=tr.dbDriver(node)%>");
		properties<%=cid%>.put("user",<%=user%>);
		properties<%=cid%>.put("password",<%=pass%>);
		con<%=cid%>=java.sql.DriverManager.getConnection(url<%=cid%>,properties<%=cid%>);
<%	}else{%>
		Class.forName("<%=tr.dbDriver(node)%>");
		url<%=cid%>=<%=tr.url(node)%>;
		con<%=cid%>=java.sql.DriverManager.getConnection(url<%=cid%>,<%=user%>,<%=pass%>);
<%	} %>

		stmt<%=cid%> = con<%=cid%>.createStatement();
	
	
	
	
	
	
 
<%//  special action / Main action
	String specialAction=ElementParameterParser.getValue(node,"__SPECIALACTION__");
	if(specialAction.equals("DropAndCreate")){%>//drop and then create
		try{
			stmt<%=cid%>.execute("drop table "+"<%=tr.protectChar(dbType, tableName)%>");	
		}catch(Exception e){	
		}		
		sql<%=cid%>="<%=tr.sql(dbType,tableName,node)%>";
		stmt<%=cid%>.execute(sql<%=cid%>);	
<%	}else if(specialAction.equals("CreateOnly")){%>		
        java.sql.DatabaseMetaData dbMetaData_<%=cid%> = con<%=cid%>.getMetaData();
        java.sql.ResultSet rs_<%=cid%> = dbMetaData_<%=cid%>.getTables(null, null, null, new String[]{"TABLE"});
        boolean flag_<%=cid%> = false;
        while(rs_<%=cid%>.next())
        {
        	String table_<%=cid%> = rs_<%=cid%>.getString("TABLE_NAME");
			if(table_<%=cid%>.equalsIgnoreCase(<%=tableName%>))
			{
				flag_<%=cid%> = true;
				break;
			}
        }
        rs_<%=cid%>.close();
        if(!flag_<%=cid%>)
        {
           sql<%=cid%>="<%=tr.sql(dbType,tableName,node)%>";
           stmt<%=cid%>.execute(sql<%=cid%>);         	
        }  				
<%}else{%>// just create
		sql<%=cid%>="<%=tr.sql(dbType,tableName,node)%>";
		stmt<%=cid%>.execute(sql<%=cid%>);
<%}







//close
	if(dbType.equals("HSQLdb")){
%>
		java.sql.Statement stmtClose<%=cid%>=con<%=cid%>.createStatement();
		stmtClose<%=cid%>.execute("SHUTDOWN");
<%	}%>

<%
	if(!dbType.equals("MySQL") && !dbType.equals("Oracle") && !dbType.equals("Postgre"))
	{
		%>
		con<%=cid%>.close();
		<%			
	}
	else
	{
		if(!useExistingConn.equals("true"))
		{
			%>
			con<%=cid%>.close();
			<%
		}
	}
%>


		

		