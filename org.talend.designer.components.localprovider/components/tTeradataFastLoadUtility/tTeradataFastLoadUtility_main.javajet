<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.metadata.MappingTypeRetriever
    org.talend.core.model.metadata.MetadataTalendType
    java.util.List
    java.lang.StringBuilder
    java.util.Map
" 
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

String dbname= ElementParameterParser.getValue(node, "__DBNAME__");
String dbuser= ElementParameterParser.getValue(node, "__USER__");
String dbpwd= ElementParameterParser.getValue(node, "__PASS__");
String table= ElementParameterParser.getValue(node, "__TABLE__");

String scriptPath= ElementParameterParser.getValue(node, "__SCRIPT_PATH__");
String execution= ElementParameterParser.getValue(node, "__EXECUTION__");
String loadFile= ElementParameterParser.getValue(node, "__LOAD_FILE__");
String separator= ElementParameterParser.getValue(node, "__FIELD_SEPARATOR__");
String errorFile= ElementParameterParser.getValue(node, "__ERROR_FILE__");

if(!scriptPath.endsWith("/\"")){
	scriptPath = scriptPath+	"+\"/\"";
}
if(loadFile.indexOf("/") !=0 && ("Windows").equals(execution)){
	loadFile = loadFile.replaceAll("/", "\\\\\\\\");
}

String dbmsId = "teradata_id";

List<IMetadataColumn> columnList = null;
List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
	IMetadataTable metadata = metadatas.get(0);
	if (metadata!=null) {
		columnList = metadata.getListColumns();
	}
}
%>
String tableFullName_<%=cid%> = <%=dbname%> + "." + <%=table%>;
java.io.FileWriter fw_<%=cid %> = new java.io.FileWriter(<%=scriptPath%>+<%=table%>+".script");

<%//build script---------------------------------------------------------%>

StringBuilder script_<%=cid%> = new StringBuilder();
fw_<%=cid %>.write(".SESSIONS 8;\r\n");
fw_<%=cid %>.write(".SET RECORD VARTEXT \""+<%=separator%>+"\";\r\n");
fw_<%=cid %>.write(".LOGON "+<%=dbuser%>+","+<%=dbpwd%>+";\r\n");
fw_<%=cid %>.write("DEFINE \r\n");
<%//Layout---------------------------------------------------------------%>
<%
if(columnList!=null){
	int counter = 1;
	for(IMetadataColumn column:columnList){	
		if( columnList.size() != counter){	%>
		fw_<%=cid %>.write("<%=column.getOriginalDbColumnName()%>"+" (VARCHAR(255)),\r\n");
	<%
		} else {
	%>
			fw_<%=cid %>.write("<%=column.getOriginalDbColumnName()%>"+" (VARCHAR(255))\r\n");
	<% 	}
		counter++;
	}
}
%>
fw_<%=cid %>.write("FILE="+<%=loadFile%>+";\r\n");
fw_<%=cid %>.write("BEGIN LOADING "+ <%=dbname%> + "." + <%=table%>+" ERRORFILES "+ <%=dbname%> + "." + <%=table%>+"_ERR1, "+ <%=dbname%> + "." + <%=table%>+"_ERR2 CHECKPOINT 1000000;\r\n");
<%//SQL statements-------------------------------------------------------%>
<%
StringBuilder insertColSQL = new StringBuilder();
StringBuilder insertValueSQL = new StringBuilder();
if(columnList!=null){
	String columnName = "";
 	for(IMetadataColumn column:columnList){	
 		columnName= column.getOriginalDbColumnName();
 		if(insertColSQL.length()>0){
 			insertColSQL.append(",");
 		}
 		insertColSQL.append(columnName);
 		
 		if(insertValueSQL.length()>0){
 			insertValueSQL.append(",");
 		}
 		insertValueSQL.append(":").append(columnName);
	}
}
%>
<%//Import file----------------------------------------------------------%>
fw_<%=cid %>.write(".END LOADING;\r\n");
fw_<%=cid %>.write(".LOGOFF;\r\n");

<%//write script to file-------------------------------------------------%>
fw_<%=cid %>.close();

<%//run fastload command----------------------------------------------------%>
String sb_<%=cid%>= new String("<%=(("Windows").equals(execution))?"cmd /c ":""%>fastload < "+<%=scriptPath%>+<%=table%>+".script > "+<%=errorFile%>+" 2>&1");
final Process process_<%=cid %> = Runtime.getRuntime().exec(sb_<%=cid%>); 
Thread normal_<%=cid %> = new Thread() {
    public void run() {
    	try {
    		java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(process_<%=cid %>.getInputStream()));
    		String line = "";
    		try {
    			while((line = reader.readLine()) != null) {
    			   System.out.println(line);
    	        }
    	    } finally {
    	         reader.close();
    	    }
        }catch(java.io.IOException ioe) {
    		ioe.printStackTrace();
    	}
    }
};
normal_<%=cid %>.start();

Thread error_<%=cid %> = new Thread() {
	public void run() {
		try {
			java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(process_<%=cid %>.getErrorStream()));
			String line = "";
			try {
				while((line = reader.readLine()) != null) {
					System.err.println(line);
				}
			} finally {
				reader.close();
			}
		} catch(java.io.IOException ioe) {
		   ioe.printStackTrace();
		}
	}
};
error_<%=cid %>.start();

process_<%=cid %>.waitFor();

normal_<%=cid %>.interrupt();

error_<%=cid %>.interrupt();
