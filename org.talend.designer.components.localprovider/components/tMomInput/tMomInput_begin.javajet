<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn 
    org.talend.core.model.process.IConnection
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.process.IConnectionCategory
    java.util.List
" 
class="MomInput"
%>

<%

	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	String serverType=ElementParameterParser.getValue(node, "__SERVER__");
	String host=ElementParameterParser.getValue(node, "__SERVERADDRESS__");
	String port=ElementParameterParser.getValue(node, "__SERVERPORT__");
	String kListen=ElementParameterParser.getValue(node, "__KEEPLISTENING__");
	
	IMetadataTable metadata=null;
	List<IMetadataTable> metadatas = node.getMetadataList();
		if ((metadatas!=null)&&(metadatas.size()>0)) {
		metadata = metadatas.get(0);
		}




if(serverType.equals("JBoss")){ // server judgement
	String msgType = ElementParameterParser.getValue(node, "__MSGTYPE__");
	String from=ElementParameterParser.getValue(node, "__FROM__");
	
	

%>

class HelloInput implements javax.jms.MessageListener {
	javax.jms.<%=msgType%>Connection connection<%=cid%>;
	javax.jms.<%=msgType%>Session session<%=cid%>;
	javax.jms.<%=msgType%> topic<%=cid%>;
	java.util.Queue<String> msgQueue<%=cid%>=null;	
	public HelloInput(String factoryJNDI, String topicJNDI) throws javax.jms.JMSException, javax.naming.NamingException{
		msgQueue<%=cid%>=new java.util.LinkedList<String>();
		java.util.Hashtable props<%=cid%>=new java.util.Hashtable();
		props<%=cid%>.put(javax.naming.Context.INITIAL_CONTEXT_FACTORY,"org.jnp.interfaces.NamingContextFactory");
		props<%=cid%>.put(javax.naming.Context.PROVIDER_URL, <%=host%>+":"+<%=port%>);
		props<%=cid%>.put("java.naming.rmi.security.manager", "yes");
		props<%=cid%>.put(javax.naming.Context.URL_PKG_PREFIXES, "org.jboss.naming");
		props<%=cid%>.put("java.naming.factory.url.pkgs","org.jboss.naming:org.jnp.interfaces");	
		javax.naming.Context context<%=cid%>=new javax.naming.InitialContext(props<%=cid%>);
		javax.jms.<%=msgType%>ConnectionFactory factory<%=cid%>=(javax.jms.<%=msgType%>ConnectionFactory)context<%=cid%>.lookup(factoryJNDI);	
		connection<%=cid%>=factory<%=cid%>.create<%=msgType%>Connection();
		session<%=cid%>=connection<%=cid%>.create<%=msgType%>Session(false, javax.jms.Session.AUTO_ACKNOWLEDGE);
		topic<%=cid%>=(javax.jms.<%=msgType%>)context<%=cid%>.lookup(topicJNDI);


<%	
	if(msgType.equals("Queue")){
%>
		javax.jms.<%=msgType%>Receiver receiver<%=cid%>=session<%=cid%>.createReceiver(topic<%=cid%>);
		receiver<%=cid%>.setMessageListener(this);
<%
}else{
%>
		javax.jms.<%=msgType%>Subscriber subscriber<%=cid%>=session<%=cid%>.createSubscriber(topic<%=cid%>);
		subscriber<%=cid%>.setMessageListener(this);
<%
}
%>	
		connection<%=cid%>.start();
	}
	
	public void onMessage(javax.jms.Message m){
	try {
			String msg<%=cid%>=((javax.jms.TextMessage)m).getText();
			msgQueue<%=cid%>.add(msg<%=cid%>);
		} catch (javax.jms.JMSException e) {
			System.err.println("Could not get text message:" + e);
			e.printStackTrace();
		}
	}
	public void close() throws javax.jms.JMSException{
		session<%=cid%>.close();
		connection<%=cid%>.close();
	}	
}

	
		
		HelloInput input<%=cid%>=null;
		try {
		//begin part
			input<%=cid%>=new HelloInput("<%if(msgType.equals("Topic")){%>TopicConnectionFactory<%}else{%>ConnectionFactory<%}%>",<%=from%>);			
		} catch (java.lang.Exception e) {
			System.err.println("An exception occurred while testing HelloSubscriber:" + e);
			e.printStackTrace();
		}
	System.out.println("Ready to receive message");
	System.out.println("Waiting...");	
		
	Boolean flag<%=cid%>=true;
	while(flag<%=cid%>){
					while(!(input<%=cid%>.msgQueue<%=cid%>.size()==0)){
						String msg<%=cid%>=(String)input<%=cid%>.msgQueue<%=cid%>.poll();
	
<%
List< ? extends IConnection> conns = node.getOutgoingSortedConnections();
List<IMetadataColumn> columnList = metadata.getListColumns();
for(IConnection conn:conns){
	if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.MAIN)) {
 	String firstConnName = conn.getName();
%>

		<%=firstConnName%>.from=<%=from%>;	
		<%=firstConnName%>.message=msg<%=cid%>;	
			
<%
}
}
}  //server judgement   /***WebSphere MQ*****/
else{
	String channel=ElementParameterParser.getValue(node, "__CHANNEL__");
	String qm=ElementParameterParser.getValue(node, "__QM__");
	String queue = ElementParameterParser.getValue(node, "__QUEUE__");
	String msgId=ElementParameterParser.getValue(node, "__MSG_ID__");
%>
	java.util.Hashtable properties<%=cid%>=new java.util.Hashtable();
	properties<%=cid%>.put("hostname", <%=host%>);
	properties<%=cid%>.put("port", Integer.valueOf(<%=port%>));
	properties<%=cid%>.put("channel", <%=channel%>);
	properties<%=cid%>.put("CCSID", new Integer(1208));
	properties<%=cid%>.put("transport","MQSeries");
	
	com.ibm.mq.MQQueueManager qMgr<%=cid%>=null;
	com.ibm.mq.MQQueue remoteQ<%=cid%>=null;
	String msgId_<%=cid%> = <%=msgId%>;
	if(msgId_<%=cid%>.length()>24){
		msgId_<%=cid%> = msgId_<%=cid%>.substring(0,24);
	}
	try{

	int openOptions<%=cid%>=com.ibm.mq.MQC.MQOO_INPUT_SHARED | com.ibm.mq.MQC.MQOO_FAIL_IF_QUIESCING | com.ibm.mq.MQC.MQOO_INQUIRE;

	com.ibm.mq.MQGetMessageOptions gmo<%=cid%>=new com.ibm.mq.MQGetMessageOptions();
	gmo<%=cid%>.options=gmo<%=cid%>.options+com.ibm.mq.MQC.MQGMO_SYNCPOINT;
	gmo<%=cid%>.options=gmo<%=cid%>.options+com.ibm.mq.MQC.<%if(kListen.equals("false")){%>MQGMO_NO_WAIT<%}else{%>MQGMO_WAIT<%}%>;
	gmo<%=cid%>.options=gmo<%=cid%>.options+com.ibm.mq.MQC.MQGMO_FAIL_IF_QUIESCING;
	gmo<%=cid%>.waitInterval=com.ibm.mq.MQC.MQWI_UNLIMITED;
	com.ibm.mq.MQException.log = null;
	boolean flag<%=cid%>=true;

	System.out.println("Ready to receive message");
	System.out.println("Waiting...");
	while(flag<%=cid%>){
		qMgr<%=cid%>=new com.ibm.mq.MQQueueManager(<%=qm%>,properties<%=cid%>);
		remoteQ<%=cid%>=qMgr<%=cid%>.accessQueue(<%=queue%>,openOptions<%=cid%>);
<%
	if(kListen.equals("false")){
%>
		if(Integer.valueOf(remoteQ<%=cid%>.getCurrentDepth()).equals(0)) 
			break;
<%
	}
%>
		com.ibm.mq.MQMessage inMessage<%=cid%>=new com.ibm.mq.MQMessage();
		inMessage<%=cid%>.messageId = msgId_<%=cid%>.getBytes("UTF8");
<%
	if(kListen.equals("false")){
%>		
		try{
			remoteQ<%=cid%>.get(inMessage<%=cid%>,gmo<%=cid%>);
		}catch (com.ibm.mq.MQException me_<%=cid%>) {   
            if (me_<%=cid%>.reasonCode == com.ibm.mq.MQException.MQRC_NO_MSG_AVAILABLE) {
            	break;   
            }else{
            	throw me_<%=cid%>;
            }   
     	}
<%
	}else{
%>
		remoteQ<%=cid%>.get(inMessage<%=cid%>,gmo<%=cid%>);
<%
	}
%>
		String message<%=cid%>=inMessage<%=cid%>.readString(inMessage<%=cid%>.getMessageLength());
<%
List< ? extends IConnection> conns = node.getOutgoingSortedConnections();
List<IMetadataColumn> columnList = metadata.getListColumns();
for(IConnection conn:conns){
	if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.MAIN)) {
 	String firstConnName = conn.getName();
%>
		<%=firstConnName%>.from=<%=queue%>;	
		<%=firstConnName%>.message=message<%=cid%>;			
<%
}
}
}
%>


		