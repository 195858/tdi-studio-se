<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn 
    org.talend.core.model.process.IConnection
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.process.IConnectionCategory
    java.util.List
" 
class="MomInput"
%>

<%

	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	String serverType=ElementParameterParser.getValue(node, "__SERVER__");
	String host=ElementParameterParser.getValue(node, "__SERVERADDRESS__");
	String port=ElementParameterParser.getValue(node, "__SERVERPORT__");
	String kListen=ElementParameterParser.getValue(node, "__KEEPLISTENING__");
	
	IMetadataTable metadata=null;
	List<IMetadataTable> metadatas = node.getMetadataList();
	if ((metadatas!=null)&&(metadatas.size()>0)) {
	metadata = metadatas.get(0);
	}

	if(serverType.equals("JBoss")){ // server judgement
		String msgType = ElementParameterParser.getValue(node, "__MSGTYPE__");
		String from=ElementParameterParser.getValue(node, "__FROM__");
		String msgId=ElementParameterParser.getValue(node, "__MSG_ID__");
		String useMsgId=ElementParameterParser.getValue(node, "__IS_USE_MESSAGE_ID__");
%>

class HelloInput implements javax.jms.MessageListener {
	javax.jms.<%=msgType%>Connection connection<%=cid%>;
	javax.jms.<%=msgType%>Session session<%=cid%>;
	javax.jms.<%=msgType%> topic<%=cid%>;
	java.util.Queue<String> msgQueue<%=cid%>=null;	
	public HelloInput(String factoryJNDI, String topicJNDI) throws javax.jms.JMSException, javax.naming.NamingException{
		msgQueue<%=cid%>=new java.util.LinkedList<String>();
		java.util.Hashtable props<%=cid%>=new java.util.Hashtable();
		props<%=cid%>.put(javax.naming.Context.INITIAL_CONTEXT_FACTORY,"org.jnp.interfaces.NamingContextFactory");
		props<%=cid%>.put(javax.naming.Context.PROVIDER_URL, <%=host%>+":"+<%=port%>);
		props<%=cid%>.put("java.naming.rmi.security.manager", "yes");
		props<%=cid%>.put(javax.naming.Context.URL_PKG_PREFIXES, "org.jboss.naming");
		props<%=cid%>.put("java.naming.factory.url.pkgs","org.jboss.naming:org.jnp.interfaces");	
		javax.naming.Context context<%=cid%>=new javax.naming.InitialContext(props<%=cid%>);
		javax.jms.<%=msgType%>ConnectionFactory factory<%=cid%>=(javax.jms.<%=msgType%>ConnectionFactory)context<%=cid%>.lookup(factoryJNDI);	
		connection<%=cid%>=factory<%=cid%>.create<%=msgType%>Connection();
		session<%=cid%>=connection<%=cid%>.create<%=msgType%>Session(false, javax.jms.Session.AUTO_ACKNOWLEDGE);
		topic<%=cid%>=(javax.jms.<%=msgType%>)context<%=cid%>.lookup(topicJNDI);


<%
		if(msgType.equals("Queue")){
%>
		javax.jms.<%=msgType%>Receiver receiver<%=cid%>=session<%=cid%>.createReceiver(topic<%=cid%>);
		receiver<%=cid%>.setMessageListener(this);
<%
		}else{
%>
		javax.jms.<%=msgType%>Subscriber subscriber<%=cid%>=session<%=cid%>.createSubscriber(topic<%=cid%>);
		subscriber<%=cid%>.setMessageListener(this);
<%
		}
%>	
		connection<%=cid%>.start();
	}
	
	public void onMessage(javax.jms.Message m){
		try {
<%
		if(useMsgId.equals("true")){
%>
			String msg<%=cid%>=((javax.jms.MapMessage)m).getString(<%=msgId%>);
			if(msg<%=cid%> != null){
				msgQueue<%=cid%>.add(msg<%=cid%>);
			}
<%
		}else{
%>
			String msg<%=cid%>=((javax.jms.TextMessage)m).getText();
			msgQueue<%=cid%>.add(msg<%=cid%>);
<%
		}
%>
		} catch (javax.jms.JMSException e) {
			System.err.println("Could not get text message:" + e);
			e.printStackTrace();
		}
	}
	public void close() throws javax.jms.JMSException{
		session<%=cid%>.close();
		connection<%=cid%>.close();
	}	
}

		HelloInput input<%=cid%>=null;
		try {
		//begin part
			input<%=cid%>=new HelloInput("<%if(msgType.equals("Topic")){%>TopicConnectionFactory<%}else{%>ConnectionFactory<%}%>",<%=from%>);			
		} catch (java.lang.Exception e) {
			System.err.println("An exception occurred while testing HelloSubscriber:" + e);
			e.printStackTrace();
		}
		System.out.println("Ready to receive message");
		System.out.println("Waiting...");	
			
		Boolean flag<%=cid%>=true;
		while(flag<%=cid%>){
			while(!(input<%=cid%>.msgQueue<%=cid%>.size()==0)){
				String msg<%=cid%>=(String)input<%=cid%>.msgQueue<%=cid%>.poll();
	
<%
		List< ? extends IConnection> conns = node.getOutgoingSortedConnections();
		List<IMetadataColumn> columnList = metadata.getListColumns();
		for(IConnection conn:conns){
			if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.MAIN)) {
		 		String firstConnName = conn.getName();
%>

				<%=firstConnName%>.from=<%=from%>;	
				<%=firstConnName%>.message=msg<%=cid%>;	
<%
				if(useMsgId.equals("true")){
%>		
				<%=firstConnName%>.messageid=<%=msgId%>;
			
<%
				}
			}
		}
	}else if(serverType.equals("ActiveMQ")){
		boolean startServer = ElementParameterParser.getValue(node, "__STARTSERVER__").equals("true");
		boolean topic = ElementParameterParser.getValue(node, "__MSGTYPE__").equals("Topic");
		String from = ElementParameterParser.getValue(node, "__FROM__");
		boolean useMax = ElementParameterParser.getValue(node,"__USEMAX__").equals("true");
		String maxiumMessages = ElementParameterParser.getValue(node,"__MAXMSG__");
		String receiveTimeOut = ElementParameterParser.getValue(node,"__TIMEOUT__");
		String msgId=ElementParameterParser.getValue(node, "__MSG_ID__");
		String useMsgId=ElementParameterParser.getValue(node, "__IS_USE_MESSAGE_ID__");
		
		if(maxiumMessages.equals("")|| maxiumMessages == null){
			maxiumMessages = "0";
		}
		if(receiveTimeOut.equals("")|| receiveTimeOut == null){
			receiveTimeOut = "0L";
		}
%>
String url_<%=cid %> = "tcp://"+<%=host%>+":"+<%=port%>;
long timeout_<%=cid %> =<%=receiveTimeOut %>;
<%
		if(startServer){
%>
org.apache.activemq.broker.BrokerService broker_<%=cid %> = new org.apache.activemq.broker.BrokerService();
broker_<%=cid %>.setUseJmx(true);
broker_<%=cid %>.addConnector(url_<%=cid %>);
broker_<%=cid %>.start();
<%
		}
%>
System.out.println("Connecting to URL: " + url_<%=cid %>);
System.out.println("Consuming " + (<%=topic%> ? "topic" : "queue") + ": " + <%=from%>);

org.apache.activemq.ActiveMQConnectionFactory factory_<%=cid %> = 
new org.apache.activemq.ActiveMQConnectionFactory
(org.apache.activemq.ActiveMQConnection.DEFAULT_USER, org.apache.activemq.ActiveMQConnection.DEFAULT_PASSWORD, url_<%=cid %>);

javax.jms.Connection connection_<%=cid %> = factory_<%=cid %>.createConnection();
connection_<%=cid %>.start();
javax.jms.Session session_<%=cid %> = connection_<%=cid %>.createSession(false, javax.jms.Session.AUTO_ACKNOWLEDGE);
javax.jms.Destination des_<%=cid %> = null;
if (<%=topic%>) {
	des_<%=cid %> = session_<%=cid %>.createTopic(<%=from%>);
} else {
	des_<%=cid %> = session_<%=cid %>.createQueue(<%=from%>);
}
javax.jms.MessageProducer replyProducer_<%=cid %> = session_<%=cid %>.createProducer(null);
replyProducer_<%=cid %>.setDeliveryMode(javax.jms.DeliveryMode.NON_PERSISTENT);

javax.jms.MessageConsumer consumer_<%=cid %> = null;
consumer_<%=cid %> = session_<%=cid %>.createConsumer(des_<%=cid %>);
String msg_<%=cid %>  = "";
 
 
<%
		if(kListen.equals("true")){
%>
System.out.println("We will consume messages while they continue to be delivered ");
javax.jms.Message message;
while ((message = consumer_<%=cid %>.receive()) != null) {
<%
			if(useMsgId.equals("true")){
%>
	if (message instanceof javax.jms.MapMessage) {
		javax.jms.MapMessage txtMsg = (javax.jms.MapMessage) message;
		msg_<%=cid %> = txtMsg.getString(<%=msgId%>);
		if(msg_<%=cid %> !=null){

<%
			}else{
%>
	if (message instanceof javax.jms.TextMessage) {
		javax.jms.TextMessage txtMsg = (javax.jms.TextMessage) message;
		msg_<%=cid %> = txtMsg.getText();
<%
			}
			List< ? extends IConnection> connss = node.getOutgoingSortedConnections();
			List<IMetadataColumn> columnLists = metadata.getListColumns();
			for(IConnection conn:connss){
				if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.MAIN)) {
			 		String firstConnName = conn.getName();
%>
		<%=firstConnName%>.from=<%=from%>;	
		<%=firstConnName%>.message=msg_<%=cid %>;	
<%
					if(useMsgId.equals("true")){
%>		
		<%=firstConnName%>.messageid=<%=msgId%>;

<%
					}
				}
			}
			if(useMsgId.equals("true")){
%>
			}
<%
			}
%> 
	}         
<%
		}else if (useMax) {
%>
	int maxMsg_<%=cid %> = <%=maxiumMessages %>;
	System.out.println("We are about to wait until we consume: " + maxMsg_<%=cid %> + " message(s) then we will shutdown");
	for (int i_<%=cid %> = 0; i_<%=cid %> < maxMsg_<%=cid %> ;) {
        javax.jms.Message message = consumer_<%=cid %>.receive();
        if (message != null) {
            i_<%=cid %>++;
<%
			if(useMsgId.equals("true")){
%>
			if (message instanceof javax.jms.MapMessage) {
				javax.jms.MapMessage txtMsg = (javax.jms.MapMessage) message;
				msg_<%=cid %> = txtMsg.getString(<%=msgId%>);
				if(msg_<%=cid %> !=null){
<%
			}else{
%>
            if (message instanceof javax.jms.TextMessage) {
		        javax.jms.TextMessage txtMsg = (javax.jms.TextMessage) message;
		        msg_<%=cid %> = txtMsg.getText();
<%
			}
			List< ? extends IConnection> connss = node.getOutgoingSortedConnections();
			List<IMetadataColumn> columnLists = metadata.getListColumns();
			for(IConnection conn:connss){
				if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.MAIN)) {
			 	String firstConnName = conn.getName();
%>
			<%=firstConnName%>.from=<%=from%>;	
			<%=firstConnName%>.message=msg_<%=cid %>;	
<%
					if(useMsgId.equals("true")){
%>		
			<%=firstConnName%>.messageid=<%=msgId%>;
<%
					}
				}
			}
			if(useMsgId.equals("true")){
%>
			}
<%
			}
%>
		}
	}
       
<%
		}else {
%>
    System.out.println("We will wait for messages within: " + <%=receiveTimeOut%>*1000 + " ms, and then we will shutdown");
    javax.jms.Message message;
    while ((message = consumer_<%=cid %>.receive(<%=receiveTimeOut%>*1000)) != null) {
<%
			if(useMsgId.equals("true")){
%>
		if (message instanceof javax.jms.MapMessage) {
			javax.jms.MapMessage txtMsg = (javax.jms.MapMessage) message;
			msg_<%=cid %> = txtMsg.getString(<%=msgId%>);
			if(msg_<%=cid %> !=null){
<%
			}else{
%>
		if (message instanceof javax.jms.TextMessage) {
			javax.jms.TextMessage txtMsg = (javax.jms.TextMessage) message;
			msg_<%=cid %> = txtMsg.getText();
<%
			}
			List< ? extends IConnection> connss = node.getOutgoingSortedConnections();
			List<IMetadataColumn> columnLists = metadata.getListColumns();
			for(IConnection conn:connss){
				if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.MAIN)) {
			 		String firstConnName = conn.getName();
%>
			<%=firstConnName%>.from=<%=from%>;	
			<%=firstConnName%>.message=msg_<%=cid %>;	
<%
					if(useMsgId.equals("true")){
%>		
			<%=firstConnName%>.messageid=<%=msgId%>;
			
<%
					}
				}
			}
			if(useMsgId.equals("true")){
%>
			}
<%
			}
%>          
         } 
<%
		}
%>

    
<%
	}  //server judgement   /***WebSphere MQ*****/
else{
	String channel=ElementParameterParser.getValue(node, "__CHANNEL__");
	String qm=ElementParameterParser.getValue(node, "__QM__");
	String queue = ElementParameterParser.getValue(node, "__QUEUE__");
	String msgId=ElementParameterParser.getValue(node, "__MSG_ID__");
	String useMsgId=ElementParameterParser.getValue(node, "__IS_USE_MESSAGE_ID__");
%>
	java.util.Hashtable properties<%=cid%>=new java.util.Hashtable();
	properties<%=cid%>.put("hostname", <%=host%>);
	properties<%=cid%>.put("port", Integer.valueOf(<%=port%>));
	properties<%=cid%>.put("channel", <%=channel%>);
	properties<%=cid%>.put("CCSID", new Integer(1208));
	properties<%=cid%>.put("transport","MQSeries");
	
	com.ibm.mq.MQQueueManager qMgr<%=cid%>=null;
	com.ibm.mq.MQQueue remoteQ<%=cid%>=null;
<%
	if(useMsgId.equals("true")){
%>
	String msgId_<%=cid%> = <%=msgId%>;
    if (msgId_<%=cid%> != null & !msgId_<%=cid%>.equals("")) {
		String padding_<%=cid%> = new String();
       	int padlen_<%=cid%> = 24;
 
       	int len_<%=cid%> = Math.abs(padlen_<%=cid%>) - msgId_<%=cid%>.toString().length();
       	if (len_<%=cid%> > 0) {
        	for (int i = 0 ; i < len_<%=cid%> ; i++) {
           		padding_<%=cid%> = padding_<%=cid%> + " ";
         	}
        	msgId_<%=cid%> = msgId_<%=cid%> + padding_<%=cid%>;
        }
	}
<%
	}
%>
	try{

	int openOptions<%=cid%>=com.ibm.mq.MQC.MQOO_INPUT_SHARED | com.ibm.mq.MQC.MQOO_FAIL_IF_QUIESCING | com.ibm.mq.MQC.MQOO_INQUIRE;

	com.ibm.mq.MQGetMessageOptions gmo<%=cid%>=new com.ibm.mq.MQGetMessageOptions();
	gmo<%=cid%>.options=gmo<%=cid%>.options+com.ibm.mq.MQC.MQGMO_SYNCPOINT;
	gmo<%=cid%>.options=gmo<%=cid%>.options+com.ibm.mq.MQC.<%if(kListen.equals("false")){%>MQGMO_NO_WAIT<%}else{%>MQGMO_WAIT<%}%>;
	gmo<%=cid%>.options=gmo<%=cid%>.options+com.ibm.mq.MQC.MQGMO_FAIL_IF_QUIESCING;
	gmo<%=cid%>.waitInterval=com.ibm.mq.MQC.MQWI_UNLIMITED;
	com.ibm.mq.MQException.log = null;
	boolean flag<%=cid%>=true;

	qMgr<%=cid%>=new com.ibm.mq.MQQueueManager(<%=qm%>,properties<%=cid%>);
	remoteQ<%=cid%>=qMgr<%=cid%>.accessQueue(<%=queue%>,openOptions<%=cid%>);

	<%if(kListen.equals("false")) {
	%>
	if(Integer.valueOf(remoteQ<%=cid%>.getCurrentDepth()).equals(0))
	{
		flag<%=cid%>= false;
	} 	
	<%}%>	
	System.out.println("Ready to receive message");
	System.out.println("Waiting...");	
	while(flag<%=cid%>){
<%
	if(kListen.equals("false")){
%>
		if(Integer.valueOf(remoteQ<%=cid%>.getCurrentDepth()).equals(1))
		{
			flag<%=cid%>= false;
		} 			
<%
	}
%>
		com.ibm.mq.MQMessage inMessage<%=cid%>=new com.ibm.mq.MQMessage();
<%
	if(useMsgId.equals("true")){
%>
		inMessage<%=cid%>.messageId = msgId_<%=cid%>.getBytes("ISO-8859-15");
<%
	}
	if(kListen.equals("false") && useMsgId.equals("true")){
%>		
		try{
			remoteQ<%=cid%>.get(inMessage<%=cid%>,gmo<%=cid%>);
		}catch (com.ibm.mq.MQException me_<%=cid%>) {   
            if (me_<%=cid%>.reasonCode == com.ibm.mq.MQException.MQRC_NO_MSG_AVAILABLE) {
            	break;   
            }else{
            	throw me_<%=cid%>;
            }   
     	}
<%
	}else{
%>
		remoteQ<%=cid%>.get(inMessage<%=cid%>,gmo<%=cid%>);
<%
	}
%>
		String message<%=cid%>=inMessage<%=cid%>.readString(inMessage<%=cid%>.getMessageLength());
<%
	List< ? extends IConnection> conns = node.getOutgoingSortedConnections();
	List<IMetadataColumn> columnList = metadata.getListColumns();
	for(IConnection conn:conns){
		if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.MAIN)) {
 			String firstConnName = conn.getName();
%>
		<%=firstConnName%>.from=<%=queue%>;	
		<%=firstConnName%>.message=message<%=cid%>;			
<%
			if(useMsgId.equals("true")){
%>
		<%=firstConnName%>.messageid=new String(inMessage<%=cid%>.messageId,"ISO-8859-15");	
<%
			}
		}
	}
}
%>


		