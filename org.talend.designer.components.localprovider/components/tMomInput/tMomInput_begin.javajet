<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn 
    org.talend.core.model.process.IConnection
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.process.IConnectionCategory
    java.util.List
    org.talend.core.model.metadata.types.JavaTypesManager
    org.talend.core.model.metadata.types.JavaType
    java.util.Map
    
" 
class="MomInput"
%>

<%

	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	String serverType=ElementParameterParser.getValue(node, "__SERVER__");
	String host=ElementParameterParser.getValue(node, "__SERVERADDRESS__");
	String port=ElementParameterParser.getValue(node, "__SERVERPORT__");
	String kListen=ElementParameterParser.getValue(node, "__KEEPLISTENING__");
	
	IMetadataTable metadata=null;
	List<IMetadataTable> metadatas = node.getMetadataList();
	if ((metadatas!=null)&&(metadatas.size()>0)) {
	metadata = metadatas.get(0);
	}

	if(serverType.equals("JBoss")){ // server judgement
		String msgType = ElementParameterParser.getValue(node, "__MSGTYPE__");
		String from=ElementParameterParser.getValue(node, "__FROM__");
		String msgId=ElementParameterParser.getValue(node, "__MSG_ID__");
		String useMsgId=ElementParameterParser.getValue(node, "__IS_USE_MESSAGE_ID__");
%>

class HelloInput implements javax.jms.MessageListener {
	javax.jms.<%=msgType%>Connection connection<%=cid%>;
	javax.jms.<%=msgType%>Session session<%=cid%>;
	javax.jms.<%=msgType%> topic<%=cid%>;
	java.util.Queue<String> msgQueue<%=cid%>=null;	
	public HelloInput(String factoryJNDI, String topicJNDI) throws javax.jms.JMSException, javax.naming.NamingException{
		msgQueue<%=cid%>=new java.util.LinkedList<String>();
		java.util.Hashtable props<%=cid%>=new java.util.Hashtable();
		props<%=cid%>.put(javax.naming.Context.INITIAL_CONTEXT_FACTORY,"org.jnp.interfaces.NamingContextFactory");
		props<%=cid%>.put(javax.naming.Context.PROVIDER_URL, <%=host%>+":"+<%=port%>);
		props<%=cid%>.put("java.naming.rmi.security.manager", "yes");
		props<%=cid%>.put(javax.naming.Context.URL_PKG_PREFIXES, "org.jboss.naming");
		props<%=cid%>.put("java.naming.factory.url.pkgs","org.jboss.naming:org.jnp.interfaces");	
		javax.naming.Context context<%=cid%>=new javax.naming.InitialContext(props<%=cid%>);
		javax.jms.<%=msgType%>ConnectionFactory factory<%=cid%>=(javax.jms.<%=msgType%>ConnectionFactory)context<%=cid%>.lookup(factoryJNDI);	
		connection<%=cid%>=factory<%=cid%>.create<%=msgType%>Connection();
		session<%=cid%>=connection<%=cid%>.create<%=msgType%>Session(false, javax.jms.Session.AUTO_ACKNOWLEDGE);
		topic<%=cid%>=(javax.jms.<%=msgType%>)context<%=cid%>.lookup(topicJNDI);


<%
		if(msgType.equals("Queue")){
%>
		javax.jms.<%=msgType%>Receiver receiver<%=cid%>=session<%=cid%>.createReceiver(topic<%=cid%>);
		receiver<%=cid%>.setMessageListener(this);
<%
		}else{
%>
		javax.jms.<%=msgType%>Subscriber subscriber<%=cid%>=session<%=cid%>.createSubscriber(topic<%=cid%>);
		subscriber<%=cid%>.setMessageListener(this);
<%
		}
%>	
		connection<%=cid%>.start();
	}
	
	public void onMessage(javax.jms.Message m){
		try {
<%
		if(useMsgId.equals("true")){
%>
			String msg<%=cid%>=((javax.jms.MapMessage)m).getString(<%=msgId%>);
			if(msg<%=cid%> != null){
				msgQueue<%=cid%>.add(msg<%=cid%>);
			}
<%
		}else{
%>
			String msg<%=cid%>=((javax.jms.TextMessage)m).getText();
			msgQueue<%=cid%>.add(msg<%=cid%>);
<%
		}
%>
		} catch (javax.jms.JMSException e) {
			System.err.println("Could not get text message:" + e);
			e.printStackTrace();
		}
	}
	public void close() throws javax.jms.JMSException{
		session<%=cid%>.close();
		connection<%=cid%>.close();
	}	
}

		HelloInput input<%=cid%>=null;
		try {
		//begin part
			input<%=cid%>=new HelloInput("<%if(msgType.equals("Topic")){%>TopicConnectionFactory<%}else{%>ConnectionFactory<%}%>",<%=from%>);			
		} catch (java.lang.Exception e) {
			System.err.println("An exception occurred while testing HelloSubscriber:" + e);
			e.printStackTrace();
		}
		System.out.println("Ready to receive message");
		System.out.println("Waiting...");	
			
		Boolean flag<%=cid%>=true;
		while(flag<%=cid%>){
			while(!(input<%=cid%>.msgQueue<%=cid%>.size()==0)){
				String msg<%=cid%>=(String)input<%=cid%>.msgQueue<%=cid%>.poll();
	
<%
		List< ? extends IConnection> conns = node.getOutgoingSortedConnections();
		List<IMetadataColumn> columnList = metadata.getListColumns();
		for(IConnection conn:conns){
			if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.MAIN)) {
		 		String firstConnName = conn.getName();
%>

				<%=firstConnName%>.from=<%=from%>;	
				<%=firstConnName%>.message=msg<%=cid%>;	
<%
				if(useMsgId.equals("true")){
%>		
				<%=firstConnName%>.messageid=<%=msgId%>;
			
<%
				}
			}
		}
	}else if(serverType.equals("ActiveMQ")){
		boolean startServer = ElementParameterParser.getValue(node, "__STARTSERVER__").equals("true");
		boolean topic = ElementParameterParser.getValue(node, "__MSGTYPE__").equals("Topic");
		String from = ElementParameterParser.getValue(node, "__FROM__");
		String maxiumMessages = ElementParameterParser.getValue(node,"__MAXMSG__");
		String receiveTimeOut = ElementParameterParser.getValue(node,"__TIMEOUT__");
		String msgId=ElementParameterParser.getValue(node, "__MSG_ID__");
		String useMsgId=ElementParameterParser.getValue(node, "__IS_USE_MESSAGE_ID__");
		String isMapMessage= ElementParameterParser.getValue(node, "__IS_MAPMESSAGE__");
		String isUseMessageId = ElementParameterParser.getValue(node, "__IS_USE_MESSAGE_ID__"); 		
		String filterColumn = ElementParameterParser.getValue(node, "__FILTER_COLUMN__");
		String filterValue = ElementParameterParser.getValue(node, "__FILTER_VALUE__");
		Boolean useMax = ElementParameterParser.getValue(node, "__USEMAX__").equals("true");
		
		if(maxiumMessages.equals("")|| maxiumMessages == null){
			maxiumMessages = "0";
		}
		if(receiveTimeOut.equals("")|| receiveTimeOut == null){
			receiveTimeOut = "0L";
		}
%>
		String url_<%=cid %> = "tcp://"+<%=host%>+":"+<%=port%>;
		long timeout_<%=cid %> =<%=receiveTimeOut %>;
<%
		if(startServer){
%>
		org.apache.activemq.broker.BrokerService broker_<%=cid%> = new org.apache.activemq.broker.BrokerService();
		broker_<%=cid %>.setUseJmx(true);
		broker_<%=cid %>.addConnector(url_<%=cid%>);
		broker_<%=cid %>.start();
<%
		}
%>
		System.out.println("Connecting to URL: " + url_<%=cid %>);
		System.out.println("Consuming " + (<%=topic%> ? "topic" : "queue") + ": " + <%=from%>);

		org.apache.activemq.ActiveMQConnectionFactory factory_<%=cid %> = 
				new org.apache.activemq.ActiveMQConnectionFactory
						(org.apache.activemq.ActiveMQConnection.DEFAULT_USER, org.apache.activemq.ActiveMQConnection.DEFAULT_PASSWORD, url_<%=cid %>);

		javax.jms.Connection connection_<%=cid %> = factory_<%=cid %>.createConnection();		
		javax.jms.Session session_<%=cid %> = connection_<%=cid %>.createSession(false, javax.jms.Session.AUTO_ACKNOWLEDGE);
		javax.jms.Destination des_<%=cid %> = null;
		if (<%=topic%>) {			
			des_<%=cid %> = session_<%=cid %>.createTopic(<%=from%>);
		} else {
			des_<%=cid %> = session_<%=cid %>.createQueue(<%=from%>);
		}		
		
		javax.jms.MessageProducer replyProducer_<%=cid %> = session_<%=cid %>.createProducer(null);
		replyProducer_<%=cid %>.setDeliveryMode(javax.jms.DeliveryMode.NON_PERSISTENT);

		javax.jms.MessageConsumer consumer_<%=cid %> = null;
		consumer_<%=cid %> = session_<%=cid %>.createConsumer(des_<%=cid %>);
		connection_<%=cid %>.start();

 		javax.jms.Message message_<%=cid%>;
 
<%
		if(kListen.equals("true")){
%>
		System.out.println("We will consume messages while they continue to be delivered ");
		while ((message_<%=cid%>=consumer_<%=cid %>.receive()) != null) {
<%
}		else if (useMax) {
%>
	int maxMsg_<%=cid %> = <%=maxiumMessages%>;
	for (int i_<%=cid %> = 0; i_<%=cid %> < maxMsg_<%=cid %>; i_<%=cid %>++) {
		message_<%=cid%> = (javax.jms.Message) consumer_<%=cid %>.receive();
<%
}
		else {
%>
		 while ((message_<%=cid%> =consumer_<%=cid %>.receive(<%=receiveTimeOut%>*1000)) != null) {
<%
}
%>		

<% 	if ("true".equals(isMapMessage)) {
			List< ? extends IConnection> connss = node.getOutgoingSortedConnections();
			List<IMetadataColumn> columnLists = metadata.getListColumns();
			for(IConnection conn:connss){
				if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.MAIN)) {
					for (IMetadataColumn column: metadata.getListColumns()) {
						String type = JavaTypesManager.getTypeToGenerate(column.getTalendType(), true);
						JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
%>
	<%if ( "true".equals(isUseMessageId) && filterColumn.equals(column.getLabel())) {
	%>
		if (!((org.apache.activemq.command.ActiveMQMapMessage)message_<%=cid%>).get<%=type%>("<%=column.getLabel()%>").contains(<%=filterValue%>)) {
			continue;
		}
	<%
	}	
	%>
		<%=conn.getName() %>.<%=column.getLabel()%> = 
		<%if (javaType == JavaTypesManager.BOOLEAN || 
					javaType == JavaTypesManager.BYTE || 
					javaType == JavaTypesManager.DOUBLE || 
					javaType == JavaTypesManager.FLOAT || 
					javaType == JavaTypesManager.LONG || 
					javaType == JavaTypesManager.SHORT || 
					javaType == JavaTypesManager.STRING) {
		%>
			 ((org.apache.activemq.command.ActiveMQMapMessage)message_<%=cid%>).get<%=type%>("<%=column.getLabel()%>");
		<%
		}else if (javaType == JavaTypesManager.BYTE_ARRAY) {
		%>
			((org.apache.activemq.command.ActiveMQMapMessage)message_<%=cid%>).getBytes( "<%=column.getLabel()%>");	
		<%			
		} else if (javaType == JavaTypesManager.CHARACTER) {
		%>
			((org.apache.activemq.command.ActiveMQMapMessage)message_<%=cid%>).getChar("<%=column.getLabel()%>");		
		<%
		} else if (javaType == JavaTypesManager.DATE) {
		%>
			(java.util.Date)message_<%=cid%>.getObject( "<%=column.getLabel()%>");
		<%
		} else if (javaType==JavaTypesManager.INTEGER) {
		%>
			((org.apache.activemq.command.ActiveMQMapMessage)message_<%=cid%>).getInt( "<%=column.getLabel()%>") ;
		<%
		} else {
		%>
			(<%=type%>)message_<%=cid%>.getObject("<%=column.getLabel()%>");
		<%
		}%>	
<%
	} // end of for
	} // end of data
	}// end of conns
%>	
	
<%
} else { // text message
			List< ? extends IConnection> conns = node.getOutgoingConnections();
			if((conns!=null)&&(conns.size()>0)) {
				IConnection conn = conns.get(0);
				if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)){
				
				
%>

	<%if ( "true".equals(isUseMessageId) && filterColumn.equals("message")) {
	%>
		if (!((org.apache.activemq.command.ActiveMQTextMessage) message_<%=cid%>).getText().contains(<%=filterValue%>) ) {
			continue;
		}
	<%
	}	
	%>

	<%if ( "true".equals(isUseMessageId) && filterColumn.equals("from")) {
	%>
		if (!<%=from%>.contains(<%=filterValue%>) ) {
			continue;
		}
	<%
	}	
	%>

			<%=conn.getName()%>.message =((org.apache.activemq.command.ActiveMQTextMessage) message_<%=cid%>).getText();
			<%=conn.getName()%>.from = <%=from%>;	 
<%
		}
	}
}
%>

    
<%
	}  //server judgement   /***WebSphere MQ*****/
else{
	String channel=ElementParameterParser.getValue(node, "__CHANNEL__");
	String qm=ElementParameterParser.getValue(node, "__QM__");
	String queue = ElementParameterParser.getValue(node, "__QUEUE__");
	String msgId=ElementParameterParser.getValue(node, "__MSG_ID__");
	String useMsgId=ElementParameterParser.getValue(node, "__IS_USE_MESSAGE_ID__");
	String msgType=ElementParameterParser.getValue(node,"__MSGTYPE__");	
	String isMapMessage= ElementParameterParser.getValue(node, "__IS_MAPMESSAGE__");
	String isUseMessageId = ElementParameterParser.getValue(node, "__IS_USE_MESSAGE_ID__"); 		
	String filterColumn = ElementParameterParser.getValue(node, "__FILTER_COLUMN__");
	String filterValue = ElementParameterParser.getValue(node, "__FILTER_VALUE__");
	
		
	String receiveTimeOut=ElementParameterParser.getValue(node, "__TIMEOUT__");
	String maximumMessages = ElementParameterParser.getValue(node, "__MAXMSG__");
	Boolean useMax = ElementParameterParser.getValue(node, "__USEMAX__").equals("true");
	
%>

	com.ibm.mq.jms.MQConnection connection_<%=cid%> = null;
	com.ibm.mq.jms.MQSession session_<%=cid%> = null;
    com.ibm.mq.jms.MQDestination destination_<%=cid%> = null;
    com.ibm.mq.jms.MQMessageConsumer consumer_<%=cid%> = null;

	com.ibm.mq.jms.MQConnectionFactory cf_<%=cid%> = new com.ibm.mq.jms.MQConnectionFactory();
        cf_<%=cid%>.setHostName(<%=host%>);
	    cf_<%=cid%>.setPort(Integer.valueOf(<%=port%>));
        cf_<%=cid%>.setChannel(<%=channel%>);
        cf_<%=cid%>.setQueueManager(<%=qm%>);
        cf_<%=cid%>.setTransportType(com.ibm.mq.jms.JMSC.MQJMS_TP_CLIENT_MQ_TCPIP);
	
        connection_<%=cid%> = (com.ibm.mq.jms.MQConnection) cf_<%=cid%>.createConnection();
        session_<%=cid%> = (com.ibm.mq.jms.MQSession) connection_<%=cid%>.createSession(false, com.ibm.mq.jms.MQSession.AUTO_ACKNOWLEDGE);


<%
        if (msgType.equals("TOPIC")) {
%>
    	       destination_<%=cid%> = (com.ibm.mq.jms.MQTopic) session_<%=cid%>.createTopic(<%=queue%>);
<%
    } else {
%>
    	       destination_<%=cid%> = (com.ibm.mq.jms.MQQueue) session_<%=cid%>.createQueue(<%=queue%>);
<%
    }
%>
	
	     consumer_<%=cid%> = (com.ibm.mq.jms.MQMessageConsumer) session_<%=cid%>.createConsumer(destination_<%=cid%>);
		 connection_<%=cid%>.start();
		 
         com.ibm.jms.JMSMessage message_<%=cid%> = null;

<%
	if("true".equals(kListen)) {
%>
	while ((message_<%=cid%> = (com.ibm.jms.JMSMessage) consumer_<%=cid %>.receive()) !=null ) {

<%
} 	else if	(useMax) {
%>
	int maxMsg_<%=cid %> = <%=maximumMessages %>;
	for (int i_<%=cid %> = 0; i_<%=cid %> < maxMsg_<%=cid %>; i_<%=cid %>++) {
		message_<%=cid%> = (com.ibm.jms.JMSMessage) consumer_<%=cid %>.receive();	
<%
}	else {
%>
	while ((message_<%=cid%> = (com.ibm.jms.JMSMessage) consumer_<%=cid %>.receive(<%=receiveTimeOut%>*1000)) != null) {
<%
}
%>	

<% 	if ("true".equals(isMapMessage)) {
%>
<%
	List< ? extends IConnection> conns = node.getOutgoingConnections();
	if((conns!=null)&&(conns.size()>0)) {
		IConnection conn = conns.get(0);
		if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)){
	
	for (IMetadataColumn column: metadata.getListColumns()) {
		String type = JavaTypesManager.getTypeToGenerate(column.getTalendType(), true);
		JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
%>		

	<%if ( "true".equals(isUseMessageId) && filterColumn.equals(column.getLabel())) {
	%>
		if (!((com.ibm.jms.JMSMapMessage)message_<%=cid%>).get<%=type%>("<%=column.getLabel()%>").contains(<%=filterValue%>)) {
			continue;
		}
	<%
	}	
	%>

		<%=conn.getName() %>.<%=column.getLabel()%> = 

		<%if (javaType == JavaTypesManager.BOOLEAN || 
					javaType == JavaTypesManager.BYTE || 
					javaType == JavaTypesManager.DOUBLE || 
					javaType == JavaTypesManager.FLOAT || 
					javaType == JavaTypesManager.LONG || 
					javaType == JavaTypesManager.SHORT || 
					javaType == JavaTypesManager.STRING) {
		%>
			 ((com.ibm.jms.JMSMapMessage)message_<%=cid%>).get<%=type%>("<%=column.getLabel()%>");
		<%
		}else if (javaType == JavaTypesManager.BYTE_ARRAY) {
		%>
			((com.ibm.jms.JMSMapMessage)message_<%=cid%>).getBytes( "<%=column.getLabel()%>");	
		<%			
		} else if (javaType == JavaTypesManager.CHARACTER) {
		%>
			((com.ibm.jms.JMSMapMessage)message_<%=cid%>).getChar("<%=column.getLabel()%>");		
		<%
		} else if (javaType == JavaTypesManager.DATE) {
		%>
			(java.util.Date)message_<%=cid%>.getObject( "<%=column.getLabel()%>");
		<%
		} else if (javaType==JavaTypesManager.INTEGER) {
		%>
			((com.ibm.jms.JMSMapMessage)message_<%=cid%>).getInt( "<%=column.getLabel()%>") ;
		<%
		} else {
		%>
			(<%=type%>)message_<%=cid%>.getObject("<%=column.getLabel()%>");
		<%
		}%>	
	

<%
	} // end of for
	} // end of data
	}// end of conns
%>

<%
} else { // text message

List< ? extends IConnection> conns = node.getOutgoingConnections();
	if((conns!=null)&&(conns.size()>0)) {
		IConnection conn = conns.get(0);
		if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)){
%>

	<%if ( "true".equals(isUseMessageId) && filterColumn.equals("message")) {
	%>
		if (!((com.ibm.jms.JMSTextMessage) message_<%=cid%>).getText().contains(<%=filterValue%>) ) {
			continue;
		}
	<%
	}	
	%>

	<%if ( "true".equals(isUseMessageId) && filterColumn.equals("from")) {
	%>
		if (!<%=queue%>.contains(<%=filterValue%>) ) {
			continue;
		}
	<%
	}	
	%>
	<%=conn.getName()%>.message = ((com.ibm.jms.JMSTextMessage)message_<%=cid%>).getText();
	<%=conn.getName()%>.from = <%=queue%>;	 
<%
		}
	}
}
%>

<%
} // end of Web sphere
%>


		