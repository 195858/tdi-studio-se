<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.List
    java.util.Map
    java.util.Set
    java.util.ArrayList
" 
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();

String cid = node.getUniqueName();

List<Map<String, Object>> list = (List<Map<String, Object>>) ElementParameterParser.getObjectValue(node,
                        "SQLPATTERN_CODE");


for(Map<String, Object> map : list){
	Set<String> keySet = map.keySet();
	for(String key : keySet){
		String SQLPattern = (String)map.get(key);
		StringBuilder sqlPatternBuilder = new StringBuilder(SQLPattern);
        // replace < % with \n< %
        int position = 0;
        int index = -1;
        while (position < sqlPatternBuilder.length()) {
            index = sqlPatternBuilder.indexOf("<", position);
            if (index < 0) {
                break;
            }
            if (index + 1 >= sqlPatternBuilder.length()) {
                break;
            }
            if (sqlPatternBuilder.charAt(index + 1) == '%') {
                if ((index + 2 >= sqlPatternBuilder.length()) || (sqlPatternBuilder.charAt(index + 2) != '=')) {
                    sqlPatternBuilder.insert(index, "\n");
                    position = index + 2;
                    continue;
                }
            }
            position = index + 1;
        }

        // System.out.println("1");
        String tempSQLPattern = sqlPatternBuilder.toString();
        tempSQLPattern = tempSQLPattern.replaceAll("\r\n", "\n");
        String[] lines = tempSQLPattern.split("(\\n)");
        List<String> lineList = new ArrayList<String>();
        StringBuilder codeStringBuilder = new StringBuilder();
        for (String line : lines) {
            while (line.startsWith(" ") || line.startsWith("\t") || line.startsWith("\f")) {
                line = line.substring(1);
            }
            while (line.endsWith(" ") || line.endsWith("\t") || line.endsWith("\f")) {
                line = line.substring(0, line.length() - 1);
            }
            if (line.length() > 0) {
                lineList.add(line);
            }
        }
        // System.out.println("2");
        boolean jetScriptStarted = false;
        StringBuilder sqlQueryBuilder = new StringBuilder("\"");
        int i = 0;
        String line = null;
        do {
            if (i >= lineList.size()) {
                break;
            }
            if (line == null || line.length() == 0) {
                line = lineList.get(i++);
            }
            if (line.startsWith("--") || line.startsWith("#")) {
                line = null;
                continue;
            }

            if (line.length() >= 2 && line.charAt(0) == '<' && line.charAt(1) == '%') {
                jetScriptStarted = true;
                line = line.substring(2).trim();
            }

            if (jetScriptStarted) {
                int endTag = -1;
                position = 0;
                while (position < line.length()) {
                    index = line.indexOf("%", position);
                    if (index < 0) {
                        break;
                    }
                    if (index + 1 >= line.length()) {
                        break;
                    }
                    if (line.charAt(index + 1) == '>') {
                        endTag = index;
                        break;
                    }
                    position = index + 1;
                }

                // System.out.println("3");

                if (endTag < 0) {
                    codeStringBuilder.append(line).append("\n");
                    line = null;
                } else {
                    codeStringBuilder.append(line.substring(0, endTag)).append("\n");
                    line = line.substring(endTag + 2);
                    jetScriptStarted = false;
                }
            } else {
                // repalce all " with \" for sql sentence.
                StringBuilder lineBuilder = new StringBuilder(line);
                index = 0;
                position = 0;
                OUTLOOP: while (position < lineBuilder.length()) {
                    index = lineBuilder.indexOf("\"", position);
                    if (index < 0) {
                        break;
                    }
                    if (index > 0 && lineBuilder.charAt(index - 1) == '\\') {
                        position = index + 1;
                        continue;
                    }
                    char last = 0;
                    for (int j = index - 1; j >= 0; j--) {
                        char currChar = lineBuilder.charAt(j);
                        if (currChar == '%' && last == '>') {
                            break;
                        }
                        if (currChar == '<' && last == '%') {// in region of < %= % >, skip it
                            position = index + 1;
                            continue OUTLOOP;
                        }
                        last = currChar;
                    }
                    lineBuilder.insert(index, "\\");
                    position = index + 2;
                }
                // System.out.println("4");
                lineBuilder.toString();

                // Caution: here, we assume all the assign script("< %=value % >") always doesn't span more than one
                // lines; or it may generate error code.
                // replace All "< %=" with "\" + "
                position = 0;
                index = 0;
                while (position < lineBuilder.length()) {
                    index = lineBuilder.indexOf("%=", position);
                    if (index < 0) {
                        break;
                    }
                    if ((index > 0) && (lineBuilder.charAt(index - 1) == '<')) {
                        // matchs
                        lineBuilder.replace(index - 1, index + 2, "\" + ");
                        position = index + 3;
                        continue;
                    }
                    position = index + 2;
                }
                // System.out.println("5");
                // replace All "% >" with " + \""
                position = 0;
                index = 0;
                while (position < lineBuilder.length()) {
                    index = lineBuilder.indexOf("%", position);
                    if (index < 0) {
                        break;
                    }
                    if ((index + 1 < lineBuilder.length()) && (lineBuilder.charAt(index + 1) == '>')) {
                        // matchs
                        lineBuilder.replace(index, index + 2, " + \"");
                        position = index + 4;
                        continue;
                    }
                    position = index + 1;
                }
                // System.out.println("6");
                line = lineBuilder.toString();

                sqlQueryBuilder.append(line);
                // Caution: here, we assume that all the SQL query are end with ";" which will follows a new
                // line("\n" or "\r\n").
                if (line.endsWith(";")) {// end of SQL QUERY found
                    sqlQueryBuilder.append("\"");
                    codeStringBuilder.append("stmt_").append(cid).append(".addBatch(").append(sqlQueryBuilder.toString()).append(
                            ");\n");
                    sqlQueryBuilder.delete(0, sqlQueryBuilder.length()).append("\"");
                }else{
                	sqlQueryBuilder.append(" ");
                }
                line = null;
            }

        } while (true);
%>
//execute sqlPattern: <%=key %>
stmt_<%=cid %>.clearBatch();
<%=codeStringBuilder.toString() %>
stmt_<%=cid %>.executeBatch();
<%
	}
}
%>
stmt_<%=cid%>.close();

