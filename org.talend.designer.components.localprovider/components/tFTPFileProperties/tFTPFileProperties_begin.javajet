<%@ jet 
imports="
    org.talend.core.model.process.INode
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.metadata.IMetadataTable
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.IConnectionCategory
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.List
    org.talend.core.model.metadata.types.JavaTypesManager
    org.talend.core.model.metadata.types.JavaType
" 
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

String host = ElementParameterParser.getValue(node,"__HOST__");
String port = ElementParameterParser.getValue(node,"__PORT__");
String username = ElementParameterParser.getValue(node,"__USERNAME__");
String password = ElementParameterParser.getValue(node,"__PASSWORD__");
String filename = ElementParameterParser.getValue(node, "__FILENAME__");
String remoteDir = ElementParameterParser.getValue(node, "__REMOTEDIR__");
String encoding = ElementParameterParser.getValue(node, "__ENCODING__");

String user = ElementParameterParser.getValue(node, "__USERNAME__");
String pass = ElementParameterParser.getValue(node, "__PASSWORD__");
String authMethod = ElementParameterParser.getValue(node,"__AUTH_METHOD__");
String privateKey = ElementParameterParser.getValue(node,"__PRIVATEKEY__");
String passPhrase = ElementParameterParser.getValue(node,"__PASSPHRASE__");	

boolean useProxy = ("true").equals(ElementParameterParser.getValue(node,"__USE_PROXY__"));
String proxyHost = ElementParameterParser.getValue(node,"__PROXY_HOST__");
String proxyPort = ElementParameterParser.getValue(node,"__PROXY_PORT__");
String proxyUser = ElementParameterParser.getValue(node,"__PROXY_USERNAME__");
String proxyPassword = ElementParameterParser.getValue(node,"__PROXY_PASSWORD__");
String connectMode = ElementParameterParser.getValue(node,"__CONNECT_MODE__");
String connection = ElementParameterParser.getValue(node, "__CONNECTION__");
String conn= "conn_" + connection;
String useExistingConn = ElementParameterParser.getValue(node, "__USE_EXISTING_CONNECTION__");
boolean sftp = false;
if(("true").equals(useExistingConn)){
	List<? extends INode> nodeList = node.getProcess().getGeneratingNodes();
	for(INode n : nodeList){
		if(n.getUniqueName().equals(connection)){
			sftp = ("true").equals(ElementParameterParser.getValue(n, "__SFTP__"));
		}
	}
}else{
	sftp = ("true").equals(ElementParameterParser.getValue(node, "__SFTP__"));
}
boolean MD5 = new Boolean(ElementParameterParser.getValue(node, "__MD5__"));
if(useProxy){
%>
    java.util.Properties props_<%=cid%> = System.getProperties();
    props_<%=cid%>.put("socksProxyPort", <%=proxyPort %>);
    props_<%=cid%>.put("socksProxyHost", <%=proxyHost %>);
    props_<%=cid%>.put("java.net.socks.username", <%=proxyUser %>);
    props_<%=cid%>.put("java.net.socks.password", <%=proxyPassword %>);        
<%
}
String outputConnName = null;
List< ? extends IConnection> conns = node.getOutgoingSortedConnections();
if (conns!=null) {
	if (conns.size()>0) {
		for (int i=0;i<conns.size();i++) {
			IConnection connTemp = conns.get(i);
			if (connTemp.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
				outputConnName = connTemp.getName();
				break;
			}
		}
	}
}

if (outputConnName != null){
%>

<%
//The following part support the socks proxy for FTP and SFTP (Socks V4 or V5, they are all OK). 
//And it can not work with the FTP proxy directly, only support the socks proxy.
%>

<%if(sftp){%>

<%
	if(("false").equals(useExistingConn)){
%>
	    class MyUserInfo_<%=cid%> implements com.jcraft.jsch.UserInfo, com.jcraft.jsch.UIKeyboardInteractive {
	    
	    	String passphrase_<%=cid %> = <%=passPhrase %>;
	        public String getPassphrase() { return passphrase_<%=cid %>; }
	        
	        public String getPassword() { return null; } 
	        
	        public boolean promptPassword(String arg0) { return true; } 
	        
	        public boolean promptPassphrase(String arg0) { return true; } 
	        
	        public boolean promptYesNo(String arg0) { return true; } 
	        
	        public void showMessage(String arg0) { } 
	        
	        public String[] promptKeyboardInteractive(String destination, String name, String instruction, String[] prompt,
	                boolean[] echo) {
	           String[] password_<%=cid%> = {<%=pass%>};
	           return password_<%=cid%>;
	        }
	    }; 
	    
	    final com.jcraft.jsch.UserInfo defaultUserInfo_<%=cid%> = new MyUserInfo_<%=cid%>();
    
	    com.jcraft.jsch.JSch jsch_<%=cid%>=new com.jcraft.jsch.JSch(); 
	    
	    <%if(("PUBLICKEY").equals(authMethod)){%>
	    jsch_<%=cid%>.addIdentity(<%=privateKey %>, defaultUserInfo_<%=cid%>.getPassphrase());
	    <%}%>
	    
	    com.jcraft.jsch.Session session_<%=cid%>=jsch_<%=cid%>.getSession(<%=user%>, <%=host%>, <%=port%>);
	    
	    <%if(("PASSWORD").equals(authMethod)){%> 
		session_<%=cid%>.setPassword(<%=pass%>); 
	    <%}%>
	    
	    session_<%=cid%>.setUserInfo(defaultUserInfo_<%=cid%>); 
	    session_<%=cid%>.connect();

<%
	}else{
%>		
		com.jcraft.jsch.ChannelSftp c_<%=cid%> = (com.jcraft.jsch.ChannelSftp)globalMap.get("<%=conn %>");
<%
	}
%> 
    
    c_<%=cid%>.setFilenameEncoding(<%=encoding%>);
	String remoteDir_<%=cid %> = <%=remoteDir %>.replaceAll("\\\\","/");
	<%=outputConnName %> = new <%=outputConnName %>Struct();
	String remoteFile_<%=cid %> = <%=remoteDir %> + "/" + <%=filename%>;
	
	com.jcraft.jsch.SftpATTRS lstat_<%=cid %> = c_<%=cid %>.lstat(remoteFile_<%=cid %>);
	
	if(lstat_<%=cid %> != null){
	    <%=outputConnName %>.abs_path = (remoteFile_<%=cid %>).replaceAll("//","/");
	    <%=outputConnName %>.dirname = <%=remoteDir %>;
	    <%=outputConnName %>.basename = <%=filename%>;
	
	    <%=outputConnName %>.size = lstat_<%=cid %>.getSize();
	    <%=outputConnName %>.mtime = (long)lstat_<%=cid %>.getMTime();
	    <%=outputConnName %>.mtime_string = lstat_<%=cid %>.getMtimeString();
		<%if(MD5){%>
			// Calculation of the Message Digest MD5
			java.io.InputStream is_<%=cid %> = c_<%=cid%>.get(remoteFile_<%=cid %>);
			byte[] buffer_<%=cid %> = new byte[8192];
			int read_<%=cid %> = 0;
			java.security.MessageDigest dgs_<%=cid %> = java.security.MessageDigest.getInstance("MD5");
			while( (read_<%=cid %> = is_<%=cid %>.read(buffer_<%=cid %>)) > 0) {
				dgs_<%=cid %>.update(buffer_<%=cid %>, 0, read_<%=cid %>);
			}
			<%=outputConnName %>.md5 =new java.math.BigInteger(1, dgs_<%=cid %>.digest()).toString(16);
			is_<%=cid %>.close();
		<%}%>	    
	}    
    	
<%}else{%>


	com.enterprisedt.net.ftp.FTPClient ftp_<%=cid %> =null;
	
	<%
	if(("true").equals(useExistingConn)){
	%>
	
	ftp_<%=cid %> = (com.enterprisedt.net.ftp.FTPClient)globalMap.get("<%=conn %>");
	
	<%}else{%>		
	ftp_<%=cid %> = new com.enterprisedt.net.ftp.FTPClient();
	ftp_<%=cid %>.setRemoteHost(<%=host %>);
	ftp_<%=cid %>.setRemotePort(<%=port %>);
<%
	if(("ACTIVE").equals(connectMode)){
%>
		ftp_<%=cid %>.setConnectMode(com.enterprisedt.net.ftp.FTPConnectMode.ACTIVE);
<%
	}else{
%>
		ftp_<%=cid %>.setConnectMode(com.enterprisedt.net.ftp.FTPConnectMode.PASV);
<%
	}
%>
	ftp_<%=cid %>.setControlEncoding(<%=encoding%>);
	ftp_<%=cid %>.connect();
	ftp_<%=cid %>.login(<%=username %>, <%=password %>);
	<%} %>	
	
	String remoteDir_<%=cid %> = <%=remoteDir %>.replaceAll("\\\\","/");
	<%=outputConnName %> = new <%=outputConnName %>Struct();
	String remoteFile_<%=cid %> = <%=remoteDir %> + "/" + <%=filename%>;
	if(ftp_<%=cid %>.exists(remoteFile_<%=cid %>)){
	    <%=outputConnName %>.abs_path = (remoteFile_<%=cid %>).replaceAll("//","/");
	    <%=outputConnName %>.dirname = <%=remoteDir %>;
	    <%=outputConnName %>.basename = <%=filename%>;
	
	    <%=outputConnName %>.size = ftp_<%=cid %>.size(remoteFile_<%=cid %>);
	    <%=outputConnName %>.mtime = ftp_<%=cid %>.modtime(remoteFile_<%=cid %>).getTime();
	    <%=outputConnName %>.mtime_string =ftp_<%=cid %>.modtime(remoteFile_<%=cid %>).toString();
		<%if(MD5){%>
			// Calculation of the Message Digest MD5
			java.security.MessageDigest dgs_<%=cid %> = java.security.MessageDigest.getInstance("MD5");
			dgs_<%=cid %>.update(ftp_<%=cid %>.get(remoteFile_<%=cid %>));
			<%=outputConnName %>.md5 =new java.math.BigInteger(1, dgs_<%=cid %>.digest()).toString(16);
		<%}%>
	}
<%}%>

<%
}
%>
