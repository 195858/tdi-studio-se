<%@ jet 
imports="
	org.talend.designer.codegen.config.CodeGeneratorArgument
	org.talend.core.model.process.INode
	org.talend.core.model.process.ElementParameterParser
	org.talend.core.model.metadata.IMetadataTable
	org.talend.core.model.metadata.IMetadataColumn
	org.talend.core.model.metadata.MetadataTalendType
	org.talend.core.model.metadata.types.JavaTypesManager
	org.talend.core.model.metadata.types.JavaType
	java.util.List
	java.util.ArrayList
	java.util.Map
	java.util.HashMap
	java.util.LinkedList
"
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode) codeGenArgument.getArgument();
String cid = node.getUniqueName();

List<Map<String, String>> addCols =
	(List<Map<String,String>>) ElementParameterParser.getObjectValue(node, "__ADD_COLS__");

String driverJar = ElementParameterParser.getValue(node, "__DRIVER_JAR__");
String driverClass = ElementParameterParser.getValue(node, "__DRIVER_CLASS__");
String jdbcUrl = ElementParameterParser.getValue(node, "__URL__");
String dbuser = ElementParameterParser.getValue(node, "__USER__");
String dbpwd = ElementParameterParser.getValue(node, "__PASS__");
String dbencoding = ElementParameterParser.getValue(node, "__ENCODING__");
String tableName = ElementParameterParser.getValue(node, "__TABLE__");
String dataAction = ElementParameterParser.getValue(node, "__DATA_ACTION__");
String clearTable = ElementParameterParser.getValue(node, "__CLEAR_TABLE__");
String commitEvery = ElementParameterParser.getValue(node, "__COMMIT_EVERY__");

List<IMetadataTable> metadatas = node.getMetadataList();
IMetadataTable metadata = null;
if (metadatas != null && metadatas.size() > 0) {
	metadata = metadatas.get(0);
}

if (metadata != null) {
	List<IMetadataColumn> columnList = metadata.getListColumns();
	
	// Check that a key is defined for UPDATE / DELETE requests
	if (!dataAction.equals("INSERT")) {
		int keyCount = 0;
		for (IMetadataColumn column : columnList) {
			if (column.isKey()) {
				keyCount++;
			}
		}
		%>
		int keyCount_<%=cid%> = <%=keyCount%>;
		if (keyCount_<%=cid%> < 1) {
			throw new Exception("For update or delete, schema must have a key");
		}
		<%
	}
	
	%>
	
	int nb_line_<%=cid%> = 0;
	int nb_line_update_<%=cid%> = 0;
	int nb_line_inserted_<%=cid%> = 0;
	int nb_line_deleted_<%=cid%> = 0;
	
	int deletedCount_<%=cid%>=0;
	int updatedCount_<%=cid%>=0;
	int insertedCount_<%=cid%>=0;

	boolean whetherReject_<%=cid%> = false;
	
	java.lang.Class.forName(<%=driverClass%>);
	String connectionString_<%=cid%> = <%=jdbcUrl%>;
	java.sql.Connection connection_<%=cid%> = java.sql.DriverManager.getConnection(connectionString_<%=cid %>, <%=dbuser%>, <%=dbpwd%>);
	<%
	
	// Clear table
	if (clearTable.equals("true")) {
		%>
		java.sql.Statement statementClear_<%=cid%> = connection_<%=cid%>.createStatement();
		deletedCount_<%=cid%> = deletedCount_<%=cid%> + statementClear_<%=cid%>.executeUpdate("delete from " + <%=tableName%>);
		<%
	}
	
	// Declare statements
	if (dataAction.equals("INSERT_OR_UPDATE") || dataAction.equals("UPDATE_OR_INSERT")) {
		%>
		java.sql.PreparedStatement statementInsert_<%=cid%> = null;
		java.sql.PreparedStatement statementUpdate_<%=cid%> = null;
		java.sql.PreparedStatement statement_<%=cid%> = null;
		<%
	} else {
		%>
		java.sql.PreparedStatement statement_<%=cid%> = null;
		<%
	}
	
	if (columnList != null && columnList.size() > 0) {
		class Column {
			IMetadataColumn column;
			String name;
			String sqlStmt;
			String value;
			boolean addCol;
			List<Column> replacement = new ArrayList<Column>();
			
			public Column(String colName, String sqlStmt, boolean addCol) {
				this.column = null;
				this.name = colName;
				this.sqlStmt = sqlStmt;
				this.value = "?";
				this.addCol = addCol;
			}
			
			public Column(IMetadataColumn column) {
				this.column = column;
				this.name = column.getLabel();
				this.sqlStmt = "=?";
				this.value = "?";
				this.addCol = false;
			}
			
			public boolean isReplaced() {
				return replacement.size() > 0;
			}
			
			public void replace(Column column) {
				this.replacement.add(column);
			}
			
			public List<Column> getReplacement() {
				return this.replacement;
			}
			
			public void setColumn(IMetadataColumn column) {
				this.column = column;
			}
			
			public IMetadataColumn getColumn() {
				return this.column;
			}
			
			public void setName(String name) {
				this.name = name;
			}
			
			public String getName() {
				return this.name;
			}
			
			public void setIsAddCol(boolean isadd) {
				this.addCol = isadd;
			}
			
			public boolean isAddCol() {
				return this.addCol;
			}
			
			public void setSqlStmt(String sql) {
				this.sqlStmt = sql;
			}
			
			public String getSqlStmt() {
				return this.sqlStmt;
			}
			
			public void setValue(String value) {
				this.value = value;
			}
			
			public String getValue() {
				return this.value;
			}
		}
		
		StringBuffer insertColName = new StringBuffer();
		StringBuffer insertValueStmt = new StringBuffer();
		StringBuffer updateSetStmt = new StringBuffer();
		StringBuffer updateWhereStmt = new StringBuffer();
		List<Column> stmtStructure =  new LinkedList<Column>();
		
		for (IMetadataColumn column : columnList) {
			stmtStructure.add(new Column(column));
		}
		
		for (IMetadataColumn column : columnList) {
			if (addCols != null && addCols.size() > 0) {
				for (Map<String, String> addCol : addCols) {
					if (addCol.get("REFCOL").equals(column.getLabel())) {
						int stmtIndex = 0;
						
						for (Column stmtStr : stmtStructure) {
							if (stmtStr.getName().equals(addCol.get("REFCOL"))) {
								break;
							}
							stmtIndex++;
						}
						
						if (addCol.get("POS").equals("AFTER")) {
							Column insertAfter = new Column("\"+"+addCol.get("NAME")+"+\"", "\"+"+addCol.get("SQL")+"+\"", true);
							stmtStructure.add(stmtIndex+1, insertAfter);
						} else if (addCol.get("POS").equals("BEFORE")) {
							Column insertBefore = new Column("\"+"+addCol.get("NAME")+"+\"", "\"+"+addCol.get("SQL")+"+\"", true);
							stmtStructure.add(stmtIndex, insertBefore);
						} else if (addCol.get("POS").equals("REPLACE")){
							Column replacementCol = new Column("\"+"+addCol.get("NAME")+"+\"", "\"+"+addCol.get("SQL")+"+\"", true);
							Column replacedCol = (Column) stmtStructure.get(stmtIndex);
							replacedCol.replace(replacementCol);
						}
					}
				}
			}
		}
		
		int counterOuter = 0;
		boolean firstKey = true;
		boolean firstNoneKey = true;
		
		for (Column colStmt : stmtStructure) {
			String suffix = ",";
			
			if (colStmt.isReplaced()) {
				List<Column> replacedColumns = colStmt.getReplacement();
				int counterReplace = 0;
				if (counterOuter == stmtStructure.size() - 1 &&
					counterReplace == replacedColumns.size() - 1) {
					suffix = "";
				}
				for (Column replacement : replacedColumns) {
					insertColName.append(replacement.getName() + suffix);
					insertValueStmt.append(replacement.getSqlStmt() + suffix);
					if (!colStmt.getColumn().isKey()) {
						if (!firstNoneKey) {
							updateSetStmt.append(",");
						} else {
							firstNoneKey = false;
						}
						updateSetStmt.append(replacement.getName());
						updateSetStmt.append("=" + replacement.getSqlStmt());
					} else {
						if (!firstKey) {
							updateWhereStmt.append(" AND ");
						} else {
							firstKey = false;
						}
						updateWhereStmt.append(replacement.getName());
						updateWhereStmt.append("=" + replacement.getSqlStmt());
					}
					counterReplace++;
				}
			} else {
				if (counterOuter == stmtStructure.size() - 1){
					suffix = "";
				}
				if (colStmt.isAddCol()) {
					insertColName.append(colStmt.getName() + suffix);
					insertValueStmt.append(colStmt.getSqlStmt() + suffix);
					updateSetStmt.append(colStmt.getName());
					updateSetStmt.append("=" + colStmt.getSqlStmt() + suffix);
				} else {
					insertColName.append(colStmt.getName() + suffix);
					insertValueStmt.append(colStmt.getValue() + suffix);
					if (!colStmt.getColumn().isKey()) {
						if (!firstNoneKey) {
							updateSetStmt.append(",");
						} else {
							firstNoneKey = false;
						}
						updateSetStmt.append(colStmt.getName());
						updateSetStmt.append(colStmt.getSqlStmt());
					} else {
						if (!firstKey) {
							updateWhereStmt.append(" AND ");
						} else {
							firstKey = false;
						}
						updateWhereStmt.append(colStmt.getName());
						updateWhereStmt.append(colStmt.getSqlStmt());
					}
				}
			}
			counterOuter++;
		}
		
		// Build SQL statements
		if (dataAction.equals("INSERT")) {
			%>
			statement_<%=cid%> = connection_<%=cid%>.prepareStatement("INSERT INTO " + <%=tableName%> + " (<%=insertColName.toString()%>) VALUES (<%=insertValueStmt.toString()%>)");
			<%
		} else if (dataAction.equals("UPDATE")) {
			%>
			statement_<%=cid%> = connection_<%=cid%>.prepareStatement("UPDATE " + <%=tableName%> + " SET <%=updateSetStmt.toString()%> WHERE <%=updateWhereStmt.toString()%>");
			<%
		} else if (dataAction.equals("INSERT_OR_UPDATE")) {
			%>
			statement_<%=cid%> = connection_<%=cid%>.prepareStatement("SELECT COUNT(1) FROM " + <%=tableName%> + " WHERE <%=updateWhereStmt.toString()%>");
			statementInsert_<%=cid%> = connection_<%=cid%>.prepareStatement("INSERT INTO " + <%=tableName%> + " (<%=insertColName.toString()%>) VALUES (<%=insertValueStmt.toString()%>)");
			statementUpdate_<%=cid%> = connection_<%=cid%>.prepareStatement("UPDATE " + <%=tableName%> + " SET <%=updateSetStmt.toString()%> WHERE <%=updateWhereStmt.toString()%>");
			<%
		} else if (dataAction.equals("UPDATE_OR_INSERT")) {
			%>
			statementUpdate_<%=cid%> = connection_<%=cid%>.prepareStatement("UPDATE " + <%=tableName%> + " SET <%=updateSetStmt.toString()%> WHERE <%=updateWhereStmt.toString()%>");
			statementInsert_<%=cid%> = connection_<%=cid%>.prepareStatement("INSERT INTO " + <%=tableName%> + " (<%=insertColName.toString()%>) VALUES (<%=insertValueStmt.toString()%>)");
			<%
		} else if (dataAction.equals("DELETE")) {
			%>
			statement_<%=cid%> = connection_<%=cid%>.prepareStatement("DELETE  FROM " + <%=tableName%> + " WHERE <%=updateWhereStmt.toString()%>");
			<%
		}
		
		// Commit every
		if (!commitEvery.equals("") && !commitEvery.equals("0")) {
			%>
			int commitEvery_<%=cid%> = <%=commitEvery%>;
			int commitCounter_<%=cid%> = 0;
			connection_<%=cid%>.setAutoCommit(false);
			<%
		}

	}
}
%>

