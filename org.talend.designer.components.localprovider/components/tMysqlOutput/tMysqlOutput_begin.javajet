<%@ jet 
imports="
    	org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.INode
		org.talend.core.model.process.ElementParameterParser  
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.core.model.metadata.MetadataTalendType
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType 
	    org.talend.core.model.metadata.MappingTypeRetriever
	    org.talend.core.model.metadata.MetadataTalendType	    
		java.util.List
		java.util.ArrayList
		java.util.Map
		java.util.HashMap
		java.util.LinkedList
" 
skeleton="../templates/db_output_bulk.skeleton"
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	
	String cid = node.getUniqueName();
	
	String dbtypeDefinition = ElementParameterParser.getValue(node, "__TYPE__");
    
    List<Map<String, String>> addCols =
            (List<Map<String,String>>)ElementParameterParser.getObjectValue(
                node,"__ADD_COLS__" );
    
    
    String dbname= ElementParameterParser.getValue(node, "__DBNAME__");
    
    String dbproperties = ElementParameterParser.getValue(node, "__PROPERTIES__");
    
    String dbhost = ElementParameterParser.getValue(node, "__HOST__");
    
	String dbport = ElementParameterParser.getValue(node, "__PORT__");
	
	String dbuser= ElementParameterParser.getValue(node, "__USER__");
	
	String dbpwd= ElementParameterParser.getValue(node, "__PASS__");
	
	String tableName = ElementParameterParser.getValue(node,"__TABLE__");
	
	String dbmsId = ElementParameterParser.getValue(node,"__MAPPING__");
	
	String dataAction = ElementParameterParser.getValue(node,"__DATA_ACTION__");
	
	String tableAction = ElementParameterParser.getValue(node,"__TABLE_ACTION__");
	
	String commitEvery = ElementParameterParser.getValue(node, "__COMMIT_EVERY__");

	boolean extendedInsert = ElementParameterParser.getValue(node, "__EXTENDINSERT__").equals("true");
	    
	int numPerInsert = Integer.parseInt(ElementParameterParser.getValue(node, "__NB_ROWS_PER_INSERT__"));
%>

<%
List<IMetadataColumn> columnList = getColumnList(node);
%>

<%
if(!dataAction.equals("INSERT"))
{
    int keyCount = 0;
    for(IMetadataColumn column:columnList)
    {
    	if(column.isKey())
    	{
    		keyCount++;
    	}
    }
    %>
    int keyCount_<%=cid%> = <%=keyCount%>;
    if(keyCount_<%=cid%> < 1)
    {
    	throw new RuntimeException("For update or delete, Schema must have a key");
    }
<%
}
%> 

int nb_line_<%=cid%> = 0;
int nb_line_update_<%=cid%> = 0;
int nb_line_inserted_<%=cid%> = 0;
int nb_line_deleted_<%=cid%> = 0;

int deletedCount_<%=cid%>=0;
int updatedCount_<%=cid%>=0;
int insertedCount_<%=cid%>=0;

String tableName_<%=cid%> = <%=tableName%>;
boolean whetherReject_<%=cid%> = false;

java.util.Calendar calendar_<%=cid %> = java.util.Calendar.getInstance();
calendar_<%=cid %>.set(1, 0, 1, 0, 0, 0);
long year1_<%=cid %> = calendar_<%=cid %>.getTime().getTime();
calendar_<%=cid %>.set(10000, 0, 1, 0, 0, 0);
long year10000_<%=cid %> = calendar_<%=cid %>.getTime().getTime();
long date_<%=cid %>;

java.sql.Connection conn_<%=cid%> = null;
<%
String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");
if(useExistingConn.equals("true"))
{
	commitEvery = "0";
	String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
	String conn = "conn_" + connection;;
	%>
	conn_<%=cid%> = (java.sql.Connection)globalMap.get("<%=conn%>");
	<%
}
else
{
	String javaDbDriver   = "org.gjt.mm.mysql.Driver";
	%>
	java.lang.Class.forName("<%=javaDbDriver %>");
	<%
	if(dbproperties == null || dbproperties.equals("\"\"") || dbproperties.equals("")) {
	    %>
	    String url_<%=cid%> = "jdbc:mysql://" + <%=dbhost%> + ":" + <%=dbport%> + "/" + <%=dbname%>;
	    <%
	} else {
	    %>
	    String url_<%=cid%> = "jdbc:mysql://" + <%=dbhost%> + ":" + <%=dbport%> + "/" + <%=dbname%> + "?" + <%=dbproperties%>;
	    <%
	}	
	%>
	String dbUser_<%=cid %> = <%=dbuser%>;
	String dbPwd_<%=cid %> = <%=dbpwd%>;
	conn_<%=cid%> = java.sql.DriverManager.getConnection(url_<%=cid %>, dbUser_<%=cid%>, dbPwd_<%=cid%>);
	<%
}	

if(columnList != null && columnList.size()>0){    
    List<Column> stmtStructure = getManager(dbmsId, cid).createColumnList(columnList, addCols);
    if(!tableAction.equals("NONE")) {
        Manager manager = getManager(dbmsId, cid);
        if(tableAction.equals("DROP_CREATE")) {
            %>
            java.sql.Statement stmtDrop_<%=cid%> = conn_<%=cid%>.createStatement();
            stmtDrop_<%=cid%>.execute("<%=manager.getDropTableSQL()%>");
            java.sql.Statement stmtCreate_<%=cid%> = conn_<%=cid%>.createStatement();
            stmtCreate_<%=cid%>.execute("<%=manager.getCreateTableSQL(stmtStructure)%>");
            <%
        } else if(tableAction.equals("CREATE")) {
            %>
            java.sql.Statement stmtCreate_<%=cid%> = conn_<%=cid%>.createStatement();
            stmtCreate_<%=cid%>.execute("<%=manager.getCreateTableSQL(stmtStructure)%>");
            <%
        } else if(tableAction.equals("CREATE_IF_NOT_EXISTS")) {
            %>
            java.sql.DatabaseMetaData dbMetaData_<%=cid%> = conn_<%=cid%>.getMetaData();
            java.sql.ResultSet rsTable_<%=cid%> = dbMetaData_<%=cid%>.getTables(null, null, null, new String[]{"TABLE"});
            boolean whetherExist_<%=cid%> = false;
            while(rsTable_<%=cid%>.next()) {
                String table_<%=cid%> = rsTable_<%=cid%>.getString("TABLE_NAME");
                if(table_<%=cid%>.equalsIgnoreCase(<%=tableName%>)) {
                    whetherExist_<%=cid%> = true;
                    break;
                }
            }
            if(!whetherExist_<%=cid%>) {
                java.sql.Statement stmtCreate_<%=cid%> = conn_<%=cid%>.createStatement();
                stmtCreate_<%=cid%>.execute("<%=manager.getCreateTableSQL(stmtStructure)%>");            
            }
            <%
        } else if(tableAction.equals("CLEAR")) {
            %>
            java.sql.Statement stmtClearCount_<%=cid%> = conn_<%=cid%>.createStatement();
            java.sql.ResultSet rsClearCount_<%=cid%> = stmtClearCount_<%=cid%>.executeQuery("<%=manager.getSelectionSQL()%>");
            java.sql.Statement stmtClear_<%=cid%> = conn_<%=cid%>.createStatement();
            stmtClear_<%=cid%>.executeUpdate("<%=manager.getTruncateTableSQL()%>");
            while(rsClearCount_<%=cid%>.next()) {
                deletedCount_<%=cid%> += rsClearCount_<%=cid%>.getInt(1);
            }
            <%
        }
    }
    Map<String, StringBuilder> actionSQLMap = getManager(dbmsId, cid).createActionSQL(stmtStructure);
    StringBuilder insertColName = actionSQLMap.get(INSERT_COLUMN_NAME);   
    StringBuilder insertValueStmt = actionSQLMap.get(INSERT_VALUE_STMT);    
    StringBuilder updateSetStmt = actionSQLMap.get(UPDATE_SET_STMT);    
    StringBuilder updateWhereStmt = actionSQLMap.get(UPDATE_WHERE_STMT);
    
	if(dataAction.equals("INSERT")){
	    if(!extendedInsert){
	        %>      	    
	        java.sql.PreparedStatement pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement("INSERT INTO `"+<%=tableName%>+"` (<%=insertColName.toString()%>) VALUES (<%=insertValueStmt.toString()%>)");	        
	        <%
	    }else{//extended-insert mode(begin)
	            %>	            
	            class BufferLine{
	            <% 
	            for(IMetadataColumn column:columnList){
	                String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
	            %>
	                    <%=typeToGenerate%> <%=column.getLabel()%>;                
                <%   
                    }            
                %>   
	            
	                public BufferLine(
	            <% 
	            int count =0;
	            for(IMetadataColumn column:columnList){
	                String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
	            %>
                        <%=typeToGenerate%> <%=column.getLabel()%>               
	            <%   
	            count++;
	            if(count!=columnList.size()){%>
	                ,
	            <%}
	                 }            
	            %> 
	                ){
	            <% for(IMetadataColumn column:columnList){%>
                        this.<%=column.getLabel()%> = <%=column.getLabel()%>;              
                <%   
                     }            
                %>   	                
	                }
	            }
	            
	            java.util.List<BufferLine> exInsertColValueList<%=cid%> = new java.util.ArrayList();
	            BufferLine exInsertColValue<%=cid%> = null; 
	            
	            <%
	            StringBuilder extendInsertValueStmt = new StringBuilder();
                for(int i=0;i<numPerInsert;i++){
                     extendInsertValueStmt.append("("+insertValueStmt.toString()+")");
                     if (i!=numPerInsert-1) extendInsertValueStmt.append(",");
                }
                %>
	            java.sql.PreparedStatement pstmt_<%=cid %> = 
	                conn_<%=cid%>.prepareStatement("INSERT INTO `"+<%=tableName%>+"` (<%=insertColName.toString()%>) VALUES <%=extendInsertValueStmt.toString()%>");
	            
	            String insertColName<%=cid%> = "<%=insertColName.toString()%>";
	            String insertColValue<%=cid%> =  "<%=insertValueStmt.toString()%>"; 
	            int rowCount<%=cid%> = 0;	            
	    <%
	    }//extended-insert mode(end)
	}else if (dataAction.equals("UPDATE")){
	    %>
	
	    java.sql.PreparedStatement pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement("UPDATE `" + <%=tableName%> + "` SET <%=updateSetStmt.toString()%> WHERE <%=updateWhereStmt.toString()%>");

	    <%		
	}else if (dataAction.equals("INSERT_OR_UPDATE")){
	    %>
	    java.sql.PreparedStatement pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement("SELECT COUNT(1) FROM `" + <%=tableName%> + "` WHERE <%=updateWhereStmt.toString()%>");	

	    java.sql.PreparedStatement pstmtInsert_<%=cid %> = conn_<%=cid%>.prepareStatement("INSERT INTO `" + <%=tableName%> + "` (<%=insertColName.toString()%>) VALUES (<%=insertValueStmt.toString()%>)");

	    java.sql.PreparedStatement pstmtUpdate_<%=cid %> = conn_<%=cid%>.prepareStatement("UPDATE `" + <%=tableName%> + "` SET <%=updateSetStmt.toString()%> WHERE <%=updateWhereStmt.toString()%>");
		
	    <%
	}else if (dataAction.equals("UPDATE_OR_INSERT")){
	    %>
	    java.sql.PreparedStatement pstmtUpdate_<%=cid %> = conn_<%=cid%>.prepareStatement("UPDATE `" + <%=tableName%> + "` SET <%=updateSetStmt.toString()%> WHERE <%=updateWhereStmt.toString()%>");


	    java.sql.PreparedStatement pstmtInsert_<%=cid %> = conn_<%=cid%>.prepareStatement("INSERT INTO `" + <%=tableName%> + "` (<%=insertColName.toString()%>) VALUES (<%=insertValueStmt.toString()%>)");
				
	    <%
			
	}else if (dataAction.equals("DELETE")){
	    %>
	
	    java.sql.PreparedStatement pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement("DELETE  FROM `" + <%=tableName%> + "` WHERE <%=updateWhereStmt.toString()%>");

	    <%		
	}

	if(!commitEvery.equals("")&&!commitEvery.equals("0")){
	    %>

	    int commitEvery_<%=cid%> = <%=commitEvery%>;

	    int commitCounter_<%=cid%> = 0;

        if(conn_<%=cid%>.getAutoCommit())
        {
        	conn_<%=cid%>.setAutoCommit(false);
        }
	<%
	}
}
%>