<%@ jet 
imports="
	org.talend.designer.codegen.config.CodeGeneratorArgument
	org.talend.core.model.process.INode
	org.talend.core.model.process.ElementParameterParser
	org.talend.core.model.process.IConnection
	org.talend.core.model.metadata.IMetadataColumn
	org.talend.core.model.metadata.IMetadataTable
	org.talend.core.model.metadata.types.JavaTypesManager
	org.talend.core.model.metadata.types.JavaType 
	org.talend.core.model.process.IConnectionCategory   
	java.util.List
	java.util.ArrayList
	java.util.Map
	java.util.HashMap
" 
%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	
	String cid = node.getUniqueName();
	
	String dataAction = ElementParameterParser.getValue(node,"__DATA_ACTION__");
	
	String commitEvery = ElementParameterParser.getValue(node, "__COMMIT_EVERY__");
	
	String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");
	
	boolean extendedInsert = ElementParameterParser.getValue(node, "__EXTENDINSERT__").equals("true");
	
	String tableName = ElementParameterParser.getValue(node,"__TABLE__");
	
	int numPerInsert = Integer.parseInt(ElementParameterParser.getValue(node, "__NB_ROWS_PER_INSERT__"));
    
	String incomingConnName = null;
    List<IMetadataColumn> columnList = null;
    
    List< ? extends IConnection> conns = node.getIncomingConnections();
    if(conns!=null && conns.size()>0){
        IConnection conn = conns.get(0);
        incomingConnName = conn.getName();
    }
    
    List<IMetadataTable> metadatas = node.getMetadataList();
    
    if(metadatas != null && metadatas.size()>0){
        IMetadataTable metadata = metadatas.get(0);
        if(metadata != null){
            columnList = metadata.getListColumns();
        }
    }
	
	
	
	if(extendedInsert){
	    class ExtendInsertOperation{
	        public String generateType(String typeToGenerate){
	            if(typeToGenerate.equals("byte[]")){
	                typeToGenerate = "Bytes";
	            }else if(typeToGenerate.equals("java.util.Date")){
	                typeToGenerate = "Date";
	            }else if(typeToGenerate.equals("Integer")){
	                typeToGenerate = "Int";
	            }else if(typeToGenerate.equals("List")){  
	                typeToGenerate = "Object";                 
	            }else{
	                typeToGenerate=typeToGenerate.substring(0,1).toUpperCase()+typeToGenerate.substring(1);
	            }
	            return typeToGenerate;
	        }
	        
	        public void generateSetStmt(String typeToGenerate,IMetadataColumn column,String cid){
	            boolean isObject = false;                               
	            String prefix = "pstmt_";                             
	            %>

	        <%if(typeToGenerate.equals("Character")){
	        isObject = true;
	        %>
	    if(bufferL<%=cid%>.<%=column.getLabel()%>==null){
	        <%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.CHAR);
	        <%
	        }else if(typeToGenerate.equals("Date")){
	        isObject = true;
	        %>
	    if(bufferL<%=cid%>.<%=column.getLabel()%>==null){
	        <%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.DATE);
	        <%
	        }else if(typeToGenerate.equals("byte[]")){
	        isObject = true;
	        %>
	    if(bufferL<%=cid%>.<%=column.getLabel()%>==null){
	        <%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.ARRAY);         
	        <%
	        }else if(typeToGenerate.equals("Long")||typeToGenerate.equals("Byte")||typeToGenerate.equals("Integer")||typeToGenerate.equals("Short")){
	        isObject = true;
	        %>
	    if(bufferL<%=cid%>.<%=column.getLabel()%>==null){
	        <%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.INTEGER);
	        <%
	        }else if(typeToGenerate.equals("String")){
	        isObject = true;
	        %>
	    if(bufferL<%=cid%>.<%=column.getLabel()%>==null){
	        <%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.VARCHAR);
	        <%
	        }else if(typeToGenerate.equals("Object")){
	        isObject = true;
	        %>
	    if(bufferL<%=cid%>.<%=column.getLabel()%>==null){
	        <%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.OTHER);
	        <%
	        }else if(typeToGenerate.equals("Boolean")){
	        isObject = true;
	        %>
	    if(bufferL<%=cid%>.<%=column.getLabel()%>==null){
	        <%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.BOOLEAN);   
	        <%
	        }else if(typeToGenerate.equals("Double")){
	        isObject = true;
	        %>
	    if(bufferL<%=cid%>.<%=column.getLabel()%>==null){
	        <%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.DOUBLE);    
	        <%
	        }else if(typeToGenerate.equals("Float")){
	        isObject = true;
	        %>
	    if(bufferL<%=cid%>.<%=column.getLabel()%>==null){
	        <%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.FLOAT); 
	        <%
	        }
	    if(isObject){
	        %>

	    }else{

	        <%
	    }
	        typeToGenerate = generateType(typeToGenerate);
	        
	        if(typeToGenerate.equals("Char")||typeToGenerate.equals("Character")){
	        %>
	        <%if(isObject){%>
	        if(bufferL<%=cid%>.<%=column.getLabel()%>==null){
	        <%}else{%>
	        if(String.valueOf(bufferL<%=cid%>.<%=column.getLabel()%>).toLowerCase().equals("null")){
	        <%}%>
	            <%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.CHAR);
	            
	        }else if(bufferL<%=cid%>.<%=column.getLabel()%> == '\0'){
	        
	            <%=prefix+cid%>.setString(count<%=cid%>,"");
	            
	        }else{
	            
	            <%=prefix+cid%>.setString(count<%=cid%>,String.valueOf(bufferL<%=cid%>.<%=column.getLabel()%>));
	        }
	        <%
	        }else if(typeToGenerate.equals("Date")){
	        %>
	        if(bufferL<%=cid%>.<%=column.getLabel()%>!=null){
	            // timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
	            date_<%=cid %> = bufferL<%=cid%>.<%=column.getLabel()%>.getTime();
	            if (date_<%=cid %> < year1_<%=cid %> || date_<%=cid %> >= year10000_<%=cid %>) {
	                <%=prefix+cid%>.setString(count<%=cid%>, "0000-00-00 00:00:00");
	            } else {
	                <%=prefix+cid%>.setTimestamp(count<%=cid%>, new java.sql.Timestamp(date_<%=cid %>));
	            }
	        }else{
	        
	            <%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.DATE);
	            
	        }
	        <%
	        }else{
	        %>
	        <%=prefix+cid%>.set<%=typeToGenerate%>(count<%=cid%>,bufferL<%=cid%>.<%=column.getLabel()%>);
	        <%
	        }
	    if(isObject){
	        %>
	            
	    }
	        
	    <%
	    }
	        }
	    }
	ExtendInsertOperation eiOperation = new ExtendInsertOperation();
%>
  

    if(rowCount<%=cid%>!=0){

        StringBuilder extendInsertValueStmt = new StringBuilder();
        for(int i=0;i<rowCount<%=cid%>;i++){
             extendInsertValueStmt.append("("+insertColValue<%=cid%>+")");
             if (i!=rowCount<%=cid%>-1) extendInsertValueStmt.append(",");
        }
        
        pstmt_<%=cid %> = 
            conn_<%=cid%>.prepareStatement("INSERT INTO `"+<%=tableName%>+"` ("+insertColName<%=cid%>+") VALUES "+extendInsertValueStmt.toString());
        
        int row2Count<%=cid%> = 0;
        int count<%=cid%> = 0;
        
        for(BufferLine bufferL<%=cid%>:exInsertColValueList<%=cid%>){
            
          count<%=cid%> = row2Count<%=cid%>*<%=columnList.size()%>+1;         
          
    <%   
         for(IMetadataColumn column:columnList){
             String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
                     
             eiOperation.generateSetStmt(typeToGenerate,column,cid);
    %>
         count<%=cid%>++;
    <%
         }
    %>
    
           row2Count<%=cid%>++;
        }
        
        insertedCount_<%=cid%> = insertedCount_<%=cid%> + pstmt_<%=cid %>.executeUpdate();

    }


<%
	}
	
    if(dataAction.equals("INSERT_OR_UPDATE")) {
        %>
        if(pstmtUpdate_<%=cid%> != null){

            pstmtUpdate_<%=cid %>.close();
            
        } 
        if(pstmtInsert_<%=cid %> != null){

            pstmtInsert_<%=cid %>.close();
            
        }
        if(pstmt_<%=cid %> != null) {

            pstmt_<%=cid %>.close();
            
        }        
        <%
    } else if(dataAction.equals("UPDATE_OR_INSERT")) {
        %>
        if(pstmtUpdate_<%=cid%> != null){

            pstmtUpdate_<%=cid %>.close();
            
        } 
        if(pstmtInsert_<%=cid %> != null){

            pstmtInsert_<%=cid %>.close();
            
        }        
        <%
    } else {
        %>
        if(pstmt_<%=cid %> != null) {

            pstmt_<%=cid %>.close();
            
        }        
        <%
    }   
    %>

    <%
	if(!useExistingConn.equals("true"))
	{
		if(!commitEvery.equals("") && !commitEvery.equals("0"))
		{
    		%>
    		conn_<%=cid%>.commit();
    		<%
		}
	
		commitEvery = "0";
    	%>	
    	conn_<%=cid%> .close();
    	<%
	}
    %>

	nb_line_deleted_<%=cid%>=nb_line_deleted_<%=cid%>+ deletedCount_<%=cid%>;
	nb_line_update_<%=cid%>=nb_line_update_<%=cid%> + updatedCount_<%=cid%>;
	nb_line_inserted_<%=cid%>=nb_line_inserted_<%=cid%> + insertedCount_<%=cid%>;

    globalMap.put("<%=cid %>_NB_LINE",nb_line_<%=cid%>);
    globalMap.put("<%=cid %>_NB_LINE_UPDATED",nb_line_update_<%=cid%>);
    globalMap.put("<%=cid %>_NB_LINE_INSERTED",nb_line_inserted_<%=cid%>);
    globalMap.put("<%=cid %>_NB_LINE_DELETED",nb_line_deleted_<%=cid%>);