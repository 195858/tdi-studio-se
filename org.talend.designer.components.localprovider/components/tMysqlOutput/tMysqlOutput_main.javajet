<%@ jet 
imports="
	org.talend.designer.codegen.config.CodeGeneratorArgument
	org.talend.core.model.process.INode
	org.talend.core.model.process.ElementParameterParser
	org.talend.core.model.process.IConnection
	org.talend.core.model.metadata.IMetadataColumn
	org.talend.core.model.metadata.IMetadataTable
	org.talend.core.model.metadata.types.JavaTypesManager
	org.talend.core.model.metadata.types.JavaType 
    org.talend.core.model.process.IConnectionCategory
    org.talend.core.model.metadata.MappingTypeRetriever
    org.talend.core.model.metadata.MetadataTalendType    
	java.util.List
	java.util.ArrayList
	java.util.Map
	java.util.HashMap
	java.util.LinkedList
"
skeleton="../templates/db_output_bulk.skeleton"
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	
	String cid = node.getUniqueName();
	
	String dataAction = ElementParameterParser.getValue(node,"__DATA_ACTION__");
    String dieOnError = ElementParameterParser.getValue(node, "__DIE_ON_ERROR__");
	String tableName = ElementParameterParser.getValue(node,"__TABLE__");
	String dbmsId = ElementParameterParser.getValue(node,"__MAPPING__");
	List<Map<String, String>> addCols =
            (List<Map<String,String>>)ElementParameterParser.getObjectValue(node,"__ADD_COLS__");
	
    boolean useFieldOptions = ElementParameterParser.getValue(node, "__USE_FIELD_OPTIONS__").equals("true");
    
    List<Map<String, String>> fieldOptions = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__FIELD_OPTIONS__");
    
    String commitEvery = ElementParameterParser.getValue(node, "__COMMIT_EVERY__");
    
    String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");
    
    boolean extendedInsert = ElementParameterParser.getValue(node, "__EXTENDINSERT__").equals("true");
    
    int numPerInsert = Integer.parseInt(ElementParameterParser.getValue(node, "__NB_ROWS_PER_INSERT__"));
    boolean isEnableDebug = ElementParameterParser.getValue(node,"__ENABLE_DEBUG_MODE__").equals("true");
	String incomingConnName = null;
	List<IMetadataColumn> columnList = getColumnList(node);
	
	List< ? extends IConnection> conns = node.getIncomingConnections();
	if(conns!=null && conns.size()>0){
		IConnection conn = conns.get(0);
		incomingConnName = conn.getName();
	}
		
	String rejectConnName = null;
	List<? extends IConnection> rejectConns = node.getOutgoingConnections("REJECT");
	if(rejectConns != null && rejectConns.size() > 0) {
	    IConnection rejectConn = rejectConns.get(0);
	    rejectConnName = rejectConn.getName();
	}
	List<IMetadataColumn> rejectColumnList = null;
	IMetadataTable metadataTable = node.getMetadataFromConnector("REJECT");
	if(metadataTable != null) {
	    rejectColumnList = metadataTable.getListColumns();	    
	}
	
	List<? extends IConnection> outgoingConns = node.getOutgoingSortedConnections();
    for(IConnection conn : outgoingConns) {
        if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
            %>        
            <%=conn.getName() %> = null;            
            <%      
        }
    }
	
	List<Column> stmtStructure = getManager(dbmsId, cid).createColumnList(columnList, useFieldOptions, fieldOptions, addCols);
	
    ////////////////////////////////////////////////////////////
    List<Column> colStruct =  new ArrayList();
    for(Column colStmt : stmtStructure){
    	if(!colStmt.isReplaced() && !colStmt.isAddCol()){
    		colStruct.add(colStmt);
    	}
    }

    class ExtendInsertOperation{
        public String generateType(String typeToGenerate){
            if(typeToGenerate.equals("byte[]")){
                typeToGenerate = "Bytes";
            }else if(typeToGenerate.equals("java.util.Date")){
                typeToGenerate = "Date";
            }else if(typeToGenerate.equals("Integer")){
                typeToGenerate = "Int";
            }else if(typeToGenerate.equals("List")){  
                typeToGenerate = "Object";                 
            }else{
                typeToGenerate=typeToGenerate.substring(0,1).toUpperCase()+typeToGenerate.substring(1);
            }
            return typeToGenerate;
        }
        
        public void generateSetStmt(String typeToGenerate, Column column, String incomingConnName, String cid){
            boolean isObject = false;                               
            String prefix = "pstmt_";                             
            %>
    
            <%
            if(typeToGenerate.equals("Character")){
                isObject = true;
                %>
                if(<%=incomingConnName%>.<%=column.getName()%>==null){
                    <%=prefix+cid%>.setNull(counter<%=cid%>,java.sql.Types.CHAR);
                    <%
            }else if(typeToGenerate.equals("Date")){
                isObject = true;
                %>
                if(<%=incomingConnName%>.<%=column.getName()%>==null){
                    <%=prefix+cid%>.setNull(counter<%=cid%>,java.sql.Types.DATE);
                    <%
            }else if(typeToGenerate.equals("byte[]")){
                isObject = true;
                %>
                if(<%=incomingConnName%>.<%=column.getName()%>==null){
                    <%=prefix+cid%>.setNull(counter<%=cid%>,java.sql.Types.ARRAY);         
                    <%
            }else if(typeToGenerate.equals("Long")||typeToGenerate.equals("Byte")||typeToGenerate.equals("Integer")||typeToGenerate.equals("Short")){
                isObject = true;
                %>
                if(<%=incomingConnName%>.<%=column.getName()%>==null){
                    <%=prefix+cid%>.setNull(counter<%=cid%>,java.sql.Types.INTEGER);
                    <%
            }else if(typeToGenerate.equals("String")){
                isObject = true;
                %>
                if(<%=incomingConnName%>.<%=column.getName()%>==null){
                    <%=prefix+cid%>.setNull(counter<%=cid%>,java.sql.Types.VARCHAR);
                    <%
            }else if(typeToGenerate.equals("Object")){
                isObject = true;
                %>
                if(<%=incomingConnName%>.<%=column.getName()%>==null){
                    <%=prefix+cid%>.setNull(counter<%=cid%>,java.sql.Types.OTHER);
                    <%
            }else if(typeToGenerate.equals("Boolean")){
                isObject = true;
                %>
                if(<%=incomingConnName%>.<%=column.getName()%>==null){
                    <%=prefix+cid%>.setNull(counter<%=cid%>,java.sql.Types.BOOLEAN);   
                    <%
            }else if(typeToGenerate.equals("Double")){
                isObject = true;
                %>
                if(<%=incomingConnName%>.<%=column.getName()%>==null){
                    <%=prefix+cid%>.setNull(counter<%=cid%>,java.sql.Types.DOUBLE);    
                    <%
            }else if(typeToGenerate.equals("Float")){
                isObject = true;
                %>
                if(<%=incomingConnName%>.<%=column.getName()%>==null){
                    <%=prefix+cid%>.setNull(counter<%=cid%>,java.sql.Types.FLOAT); 
                    <%
            }
            if(isObject){
                %>
                }else{
                <%
            }
            typeToGenerate = generateType(typeToGenerate);
        
            if(typeToGenerate.equals("Char")||typeToGenerate.equals("Character")){
                %>
                <%
                if(isObject) {
                    %>
                    if(<%=incomingConnName%>.<%=column.getName()%>==null){
                    <%
                } else {
                    %>
                    if(String.valueOf(<%=incomingConnName%>.<%=column.getName()%>).toLowerCase().equals("null")){
                    <%
                }
                %>
                <%=prefix+cid%>.setNull(counter<%=cid%>,java.sql.Types.CHAR);
            
                }else if(<%=incomingConnName%>.<%=column.getName()%> == '\0'){
        
                    <%=prefix+cid%>.setString(counter<%=cid%>,"");
            
                }else{
            
                    <%=prefix+cid%>.setString(counter<%=cid%>,String.valueOf(<%=incomingConnName%>.<%=column.getName()%>));
                }
                <%
            }else if(typeToGenerate.equals("Date")){
                %>
                if(<%=incomingConnName%>.<%=column.getName()%>!=null){
                    // timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
                    date_<%=cid %> = <%=incomingConnName%>.<%=column.getName()%>.getTime();
                    if (date_<%=cid %> < year1_<%=cid %> || date_<%=cid %> >= year10000_<%=cid %>) {
                        <%=prefix+cid%>.setString(counter<%=cid%>, "0000-00-00 00:00:00");
                    } else {
                        <%=prefix+cid%>.setTimestamp(counter<%=cid%>, new java.sql.Timestamp(date_<%=cid %>));
                    }
                }else{
        
                    <%=prefix+cid%>.setNull(counter<%=cid%>,java.sql.Types.DATE);
            
                }
                <%
            }else{
                %>
                <%=prefix+cid%>.set<%=typeToGenerate%>(counter<%=cid%>,<%=incomingConnName%>.<%=column.getName()%>);
                <%
            }
            if(isObject){
                %>
            
                }
        
            <%
            }
        }
    }


    if(incomingConnName != null && columnList != null){
        %>
        whetherReject_<%=cid%> = false;
        <%	
        if(dataAction.equals("INSERT")) {
            if(extendedInsert) {//extended-insert mode(begin)
                ExtendInsertOperation eiOperation = new ExtendInsertOperation(); 
                int insertableCount = 0;
                for(Column column : colStruct) {
                    if(column.isInsertable()) {
                        insertableCount++;
                    }
                }
                %>                
                int counter<%=cid%> = rowCount<%=cid%> * <%=insertableCount%> + 1;
                <%   
                for(Column column : colStruct) {
                    if(column.isInsertable()) {
                        String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
                        eiOperation.generateSetStmt(typeToGenerate,column,incomingConnName,cid);
                        %>
                        counter<%=cid%>++;
                        <%
                    }
                }
                %>
             
                exInsertColValue<%=cid%> = new BufferLine_<%=cid%>(
                <% 
                int count =0;
                for(Column column : colStruct) {
                    if(column.isInsertable()) {
                        if(count != 0) {
                            %>
                            ,
                            <%
                        }                        
                        %>
                        <%=incomingConnName%>.<%=column.getName()%>              
                        <%                        
                        count++;                    
                    }   
                } 
                %>  
                ); 
               
                exInsertColValueList<%=cid%>.add(exInsertColValue<%=cid%>);
    
                rowCount<%=cid%>++;
         
                if(rowCount<%=cid%> == <%=numPerInsert%>){ 
                    insertedCount_<%=cid%> = insertedCount_<%=cid%> + pstmt_<%=cid %>.executeUpdate();
                    exInsertColValueList<%=cid%>.clear();
                    rowCount<%=cid%> = 0;
                }    
                <% 
            } else {//extended-insert mode(end)
                if(isEnableDebug) {
                    %>
                    query_<%=cid%> = new String(insert_<%=cid%>);
                    <%
                }
                int counter = 1;
    	
                for(Column column : colStruct) {
                    if(column.isInsertable()) {
                        String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
                        %>
                        <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, column, counter, incomingConnName, cid, NORMAL_TYPE)%>
                        <%
                        if(isEnableDebug) {
                            %>
                            query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_")%>;
                            <%
                        }                        
                        counter++;                        
                    }		

                }
                if(isEnableDebug) {
                    %>
                    globalMap.put("<%=cid %>_QUERY", query_<%=cid%>);
                    <%
                }                
                %>
                try {
                    insertedCount_<%=cid%> = insertedCount_<%=cid%> + pstmt_<%=cid %>.executeUpdate();
                    nb_line_<%=cid%>++;
                } catch(Exception e) {
                    whetherReject_<%=cid%> = true;
                    <%
                    if (dieOnError.equals("true")) {
                        %>
                        throw(e);
                        <%
                    } else {
                        if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {%>
                            <%=rejectConnName %> = new <%=rejectConnName %>Struct();
                            <%
                            for(IMetadataColumn column : columnList) {
                                %>
                                <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                                <%
                            }
                            %>
                            <%=rejectConnName%>.errorMessage = e.getMessage();
                            <%
                        } else {
                            %>
                            System.err.print(e.getMessage());
                            <%
                        }
                    } 
                    %>
                }
                <%
            }
    	} else if(dataAction.equals("UPDATE")) {
            if(isEnableDebug) {
                %>
                query_<%=cid%> = new String(update_<%=cid%>);
                <%
            }    		
    	    int counterCol = 1;    		
    		for(Column column : colStruct) {
    			if(column.isUpdatable()) {
    			    String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
    			    %>
    			    <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, column, counterCol, incomingConnName, cid, NORMAL_TYPE)%>
    			    <%
                    if(isEnableDebug) {
                        %>
                        query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_")%>;
                        <%
                    }    			    
                    counterCol++;    			    
    			}
    		}
    
    		for(Column column:colStruct){
    			if(column.isUpdateKey()) {
    			    String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
    			    %>
    			    <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, column, counterCol, incomingConnName, cid, NORMAL_TYPE)%>
    			    <%
                    if(isEnableDebug) {
                        %>
                        query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_")%>;
                        <%
                    }    			    
    			    counterCol++;
    			}
    		}
            if(isEnableDebug) {
                %>
                globalMap.put("<%=cid %>_QUERY", query_<%=cid%>);
                <%
            }    
    		%>
            try {
                updatedCount_<%=cid%> = updatedCount_<%=cid%> + pstmt_<%=cid %>.executeUpdate();
                nb_line_<%=cid%>++;
            } catch(Exception e) {
                whetherReject_<%=cid%> = true;
                <%
                if (dieOnError.equals("true")) {
                    %>
                    throw(e);
                    <%
                } else {
                    if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {%>
                        <%=rejectConnName %> = new <%=rejectConnName %>Struct();
                    <%
                        for(IMetadataColumn column : columnList) {
                            %>
                            <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                            <%
                        }
                        %>
                        <%=rejectConnName%>.errorMessage = e.getMessage();
                        <%
                    } else {
                        %>
                        System.err.print(e.getMessage());
                        <%
                    }
                } 
                %>
            }
            <%
    	} else if (dataAction.equals("INSERT_OR_UPDATE")) {
    	    %>
    
    	    <%
    		int columnIndex = 1;
    		for(Column column : colStruct) {
    			if(column.isUpdateKey()) {
    			    String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
    			    %>
    			    <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, column, columnIndex, incomingConnName, cid, NORMAL_TYPE)%>
    			    <%
    			    columnIndex++;
    			}
    		}
    		%>
    
    		java.sql.ResultSet rs_<%=cid%> = pstmt_<%=cid %>.executeQuery();
    		int checkCount_<%=cid%> = -1;
    		while(rs_<%=cid%>.next()) {
    			checkCount_<%=cid%> = rs_<%=cid%>.getInt(1);
    		}
    		if(checkCount_<%=cid%> > 0) {
    			<%
                if(isEnableDebug) {
                    %>
                    query_<%=cid%> = new String(update_<%=cid%>);
                    <%
                }    			
    			int counterCol = 1;
    			for(Column column : colStruct) {
    				if(column.isUpdatable()) {
    				    String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
    				    %>
    				    <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, column, counterCol, incomingConnName, cid, UPDATE_TYPE)%>
    				    <%
                        if(isEnableDebug) {
                            %>
                            query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_")%>;
                            <%
                        }    				    
    				    counterCol++;
    				}
    			}
    			for(Column column : colStruct) {
    				if(column.isUpdateKey()) {
    				    String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
    				    %>
    				    <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, column, counterCol, incomingConnName, cid, UPDATE_TYPE)%>
    				    <%
                        if(isEnableDebug) {
                            %>
                            query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_")%>;
                            <%
                        }    				    
    				    counterCol++;				    
    				}
    			}
                if(isEnableDebug) {
                    %>
                    globalMap.put("<%=cid %>_QUERY", query_<%=cid%>);
                    <%
                }    			
    			%>
                try {
                    updatedCount_<%=cid%> = updatedCount_<%=cid%> + pstmtUpdate_<%=cid %>.executeUpdate();
                } catch(Exception e) {
                    whetherReject_<%=cid%> = true;
                    <%
                    if (dieOnError.equals("true")) {
                        %>
                        throw(e);
                        <%
                    } else {
                        if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {%>
                        <%=rejectConnName %> = new <%=rejectConnName %>Struct();
                        <%
                            for(IMetadataColumn column : columnList) {
                                %>
                                <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                                <%
                            }
                            %>
                            <%=rejectConnName%>.errorMessage = e.getMessage();
                            <%
                        } else {
                            %>
                            System.err.print(e.getMessage());
                            <%
                        }
                    } 
                    %>
                }
    		} else {
    			<%
                if(isEnableDebug) {
                    %>
                    query_<%=cid%> = new String(insert_<%=cid%>);
                    <%
                }    			
    			int counterInsert = 1;
    			for(Column columnInsert : colStruct)
    			{
    				if(columnInsert.isInsertable()) {
    				    String typeToGenerate = JavaTypesManager.getTypeToGenerate(columnInsert.getColumn().getTalendType(), columnInsert.getColumn().isNullable());
    				    %>
    				    <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, columnInsert, counterInsert, incomingConnName, cid, INSERT_TYPE)%>
    				    <%
                        if(isEnableDebug) {
                            %>
                            query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, columnInsert, incomingConnName, cid, "query_")%>;
                            <%
                        }    				    
    				    counterInsert++;
    				}
    			}
                if(isEnableDebug) {
                    %>
                    globalMap.put("<%=cid %>_QUERY", query_<%=cid%>);
                    <%
                }    			
    			%>
                try {
                    insertedCount_<%=cid%> = insertedCount_<%=cid%> + pstmtInsert_<%=cid %>.executeUpdate();
                } catch(Exception e) {
                    whetherReject_<%=cid%> = true;
                    <%
                    if (dieOnError.equals("true")) {
                        %>
                        throw(e);
                        <%
                    } else {
                        if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {%>
                        <%=rejectConnName %> = new <%=rejectConnName %>Struct();
                        <%
                            for(IMetadataColumn column : columnList) {
                                %>
                                <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                                <%
                            }
                            %>
                            <%=rejectConnName%>.errorMessage = e.getMessage();
                            <%
                        } else {
                            %>
                            System.err.print(e.getMessage());
                            <%
                        }
                    } 
                    %>
                }
    		}
    		nb_line_<%=cid%>++;
    		<%
    	} else if (dataAction.equals("UPDATE_OR_INSERT")) {
            if(isEnableDebug) {
                %>
                query_<%=cid%> = new String(update_<%=cid%>);
                <%
            }    	    
    	    %>
    	    int updateFlag_<%=cid%>=0;
    	    <%
    		int counterColUpdate = 1;
    		for(Column columnUpdate : colStruct) {
    			if(columnUpdate.isUpdatable()) {
    			    String typeToGenerate = JavaTypesManager.getTypeToGenerate(columnUpdate.getColumn().getTalendType(), columnUpdate.getColumn().isNullable());
    			    %>
    			    <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, columnUpdate, counterColUpdate, incomingConnName, cid, UPDATE_TYPE)%>
    			    <%
                    if(isEnableDebug) {
                        %>
                        query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, columnUpdate, incomingConnName, cid, "query_")%>;
                        <%
                    }    			    
    			    counterColUpdate++;
    			}
    		}
    
    		for(Column columnUpdate : colStruct) {
    			if(columnUpdate.isUpdateKey()) {
    			    String typeToGenerate = JavaTypesManager.getTypeToGenerate(columnUpdate.getColumn().getTalendType(), columnUpdate.getColumn().isNullable());
    			    %>
    			    <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, columnUpdate, counterColUpdate, incomingConnName, cid, UPDATE_TYPE)%>
    			    <%
                    if(isEnableDebug) {
                        %>
                        query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, columnUpdate, incomingConnName, cid, "query_")%>;
                        <%
                    }    			    
    			    counterColUpdate++;
    			}
    		}
            if(isEnableDebug) {
                %>
                globalMap.put("<%=cid %>_QUERY", query_<%=cid%>);
                <%
            }    		
    		%>
    	
            try {
                updateFlag_<%=cid%>=pstmtUpdate_<%=cid %>.executeUpdate();
                updatedCount_<%=cid%> = updatedCount_<%=cid%>+updateFlag_<%=cid%>;
                
            } catch(Exception e) {
                whetherReject_<%=cid%> = true;
                <%
                if (dieOnError.equals("true")) {
                    %>
                    throw(e);
                    <%
                } else {
                    if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {%>
                        <%=rejectConnName %> = new <%=rejectConnName %>Struct();
                    <%
                        for(IMetadataColumn column : columnList) {
                            %>
                            <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                            <%
                        }
                        %>
                        <%=rejectConnName%>.errorMessage = e.getMessage();
                        <%
                    } else {
                        %>
                        System.err.print(e.getMessage());
                        <%
                    }
                } 
                %>
            }
            if(updateFlag_<%=cid%> == 0) {
        		<%
                if(isEnableDebug) {
                    %>
                    query_<%=cid%> = new String(insert_<%=cid%>);
                    <%
                }        		
        		int counter = 1;
        		
        		for(Column column : colStruct) {
        			if(column.isInsertable()) {
        			    String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
        			    %>
        			    <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, column, counter, incomingConnName, cid, INSERT_TYPE)%>
        			    <%
                        if(isEnableDebug) {
                            %>
                            query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_")%>;
                            <%
                        }        			    
        			    counter++;
        			}
        		}
                if(isEnableDebug) {
                    %>
                    globalMap.put("<%=cid %>_QUERY", query_<%=cid%>);
                    <%
                }        		
        		%>
                try {
                    insertedCount_<%=cid%> = insertedCount_<%=cid%> + pstmtInsert_<%=cid %>.executeUpdate();
                } catch(Exception e) {
                    whetherReject_<%=cid%> = true;
                    <%
                    if (dieOnError.equals("true")) {
                        %>
                        throw(e);
                        <%
                    } else {
                        if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
                            for(IMetadataColumn column : columnList) {
                                %>
                                <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                                <%
                            }
                            %>
                            <%=rejectConnName%>.errorMessage = e.getMessage();
                            <%
                        } else {
                            %>
                            System.err.print(e.getMessage());
                            <%
                        }
                    } 
                    %>
                }
            }
            nb_line_<%=cid%>++;
            <%
    	
    	} else if (dataAction.equals("DELETE")) {
            if(isEnableDebug) {
                %>
                query_<%=cid%> = new String(delete_<%=cid%>);
                <%
            }    		
    	    int keyCounter = 1;
    		for(Column column : colStruct) {
    			if(column.isDeleteKey()) {
    			    String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
    			    %>
    			    <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, column, keyCounter, incomingConnName, cid, NORMAL_TYPE)%>
    			    <%
                    if(isEnableDebug) {
                        %>
                        query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_")%>;
                        <%
                    }    			    
    			    keyCounter++;
    			}
    		}
            if(isEnableDebug) {
                %>
                globalMap.put("<%=cid %>_QUERY", query_<%=cid%>);
                <%
            }    		
        	%>
            try {
        	    deletedCount_<%=cid%> = deletedCount_<%=cid%> + pstmt_<%=cid %>.executeUpdate();
            } catch(Exception e) {
                whetherReject_<%=cid%> = true;
                <%
                if (dieOnError.equals("true")) {
                    %>
                    throw(e);
                    <%
                } else {
                    if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
                        %>
                        <%=rejectConnName %> = new <%=rejectConnName %>Struct();
                        <%
                        for(IMetadataColumn column : columnList) {
                            %>
                            <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                            <%
                        }
                        %>
                        <%=rejectConnName%>.errorMessage = e.getMessage();
                        <%
                    } else {
                        %>
                        System.err.print(e.getMessage());
                        <%
                    }
                }
                %>
            }
            nb_line_<%=cid%>++;
        	<%
    	} else if(dataAction.equals("REPLACE")) {
            if(isEnableDebug) {
                %>
                query_<%=cid%> = new String(replace_<%=cid%>);
                <%
            }    	    
    	    int counter = 1;
            for(Column column : colStruct) {
                if(column.isInsertable()) {
                    String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
                    %>
                    <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, column, counter, incomingConnName, cid, NORMAL_TYPE)%>
                    <%
                    if(isEnableDebug) {
                        %>
                        query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_")%>;
                        <%
                    }                    
                    counter++;                        
                }       

            }
            if(isEnableDebug) {
                %>
                globalMap.put("<%=cid %>_QUERY", query_<%=cid%>);
                <%
            }            
            %>
            int replaceCount_<%=cid%> = 0;
            try {
                replaceCount_<%=cid%> = pstmt_<%=cid %>.executeUpdate();
            } catch(Exception e) {
                whetherReject_<%=cid%> = true;
                <%
                if (dieOnError.equals("true")) {
                    %>
                    throw(e);
                    <%
                } else {
                    if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
                        %>
                        <%=rejectConnName %> = new <%=rejectConnName %>Struct();
                        <%
                        for(IMetadataColumn column : columnList) {
                            %>
                            <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                            <%
                        }
                        %>
                        <%=rejectConnName%>.errorMessage = e.getMessage();
                        <%
                    } else {
                        %>
                        System.err.print(e.getMessage());
                        <%
                    }
                }
                %>                
            }
            if(replaceCount_<%=cid%> == 1) {
                insertedCount_<%=cid%> += replaceCount_<%=cid%>;
            } else {
                insertedCount_<%=cid%> += 1;
                deletedCount_<%=cid%> += replaceCount_<%=cid%> - 1;
            }
            <%
    	} else if(dataAction.equals("INSERT_ON_DUPLICATE_KEY_UPDATE")) {
            if(isEnableDebug) {
                %>
                query_<%=cid%> = new String(insertIgnore_<%=cid%>);
                <%
            }    	    
    	    int counter = 1;
            for(Column column : colStruct) {
                if(column.isInsertable()) {
                    String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
                    %>
                    <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, column, counter, incomingConnName, cid, NORMAL_TYPE)%>
                    <%
                    if(isEnableDebug) {
                        %>
                        query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_")%>;
                        <%
                    }                    
                    counter++;                        
                }       

            }
            for(Column column : colStruct) {
                if(column.isUpdatable()) {
                    String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
                    %>
                    <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, column, counter, incomingConnName, cid, NORMAL_TYPE)%>
                    <%
                    if(isEnableDebug) {
                        %>
                        query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_")%>;
                        <%
                    }                    
                    counter++;                   
                }
            }
            if(isEnableDebug) {
                %>
                globalMap.put("<%=cid %>_QUERY", query_<%=cid%>);
                <%
            }            
            %>
            int count_<%=cid%> = 0;
            try {
                count_<%=cid%> = pstmt_<%=cid %>.executeUpdate();
            } catch(Exception e) {
                whetherReject_<%=cid%> = true;
                <%
                if (dieOnError.equals("true")) {
                    %>
                    throw(e);
                    <%
                } else {
                    if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
                        %>
                        <%=rejectConnName %> = new <%=rejectConnName %>Struct();
                        <%
                        for(IMetadataColumn column : columnList) {
                            %>
                            <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                            <%
                        }
                        %>
                        <%=rejectConnName%>.errorMessage = e.getMessage();
                        <%
                    } else {
                        %>
                        System.err.print(e.getMessage());
                        <%
                    }
                }
                %>                
            }
            if(count_<%=cid%> == 1) {
                insertedCount_<%=cid%> += count_<%=cid%>;
            } else {
                insertedCount_<%=cid%> += 1;
                updatedCount_<%=cid%> += count_<%=cid%> - 1;
            }
            <%
    	}
    	
        if(outgoingConns != null && outgoingConns.size() > 0) {
            %>
            if(!whetherReject_<%=cid%>) {
            <%
                for(IConnection outgoingConn : outgoingConns) {
                    if(rejectConnName == null || (rejectConnName != null && !outgoingConn.getName().equals(rejectConnName))) {
                        if(outgoingConn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
                            
                            %>
                            <%=outgoingConn.getName()%> = new <%=outgoingConn.getName()%>Struct();
                            <%
                            for(IMetadataColumn column : columnList) {
                                %>
                                <%=outgoingConn.getName()%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                                <%                  
                            }
                        }
                    }
                }
            %>
            }
            <%
        }	
    	
    	////////////commit every////////////
    	if(!useExistingConn.equals("true")) {
    		if(!commitEvery.equals("") && !commitEvery.equals("0")) {
    		    %>
        	    commitCounter_<%=cid%>++;
       
                if(commitEvery_<%=cid%> <= commitCounter_<%=cid%>) {
                
                	conn_<%=cid%>.commit();
                	
                	commitCounter_<%=cid%>=0;
                
                }	
    
                <%
    		}
    	}
    }
    %>