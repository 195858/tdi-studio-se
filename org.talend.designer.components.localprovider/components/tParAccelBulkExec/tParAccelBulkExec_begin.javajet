<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.core.model.metadata.MetadataTalendType    
    org.talend.core.model.metadata.MappingTypeRetriever    
    java.util.List
    java.util.ArrayList    
    java.util.Map
    java.util.HashMap
" 
skeleton="../templates/db_output_bulk.skeleton"
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();
String table = ElementParameterParser.getValue(node, "__TABLE__");
String dbSchema = ElementParameterParser.getValue(node, "__SCHEMA_DB__");
String dataAction = ElementParameterParser.getValue(node,"__DATA_ACTION__");
String parallel = ElementParameterParser.getValue(node, "__COPY_MODE__");
String fileType = ElementParameterParser.getValue(node, "__FILETYPE__");
String fieldTerminator = ElementParameterParser.getValue(node, "__FIELDS_TERMINATED_BY__");
String maxErrors = ElementParameterParser.getValue(node, "__MAX_ERRORS__");
String dateFormat = ElementParameterParser.getValue(node, "__DATE_FORMAT__");
String timeFormat = ElementParameterParser.getValue(node, "__TIME_FORMAT__");
String addlOptions = ElementParameterParser.getValue(node, "__ADDL_OPTIONS__");
String fieldLayout = ElementParameterParser.getValue(node, "__FIELD_LAYOUT__");
String fixedWidth = ElementParameterParser.getValue(node, "__FIXED_WIDTH__");
String methodFixedWidth = ElementParameterParser.getValue(node, "__METHOD_FIXED_WIDTH__");

boolean removeQuotes = ElementParameterParser.getValue(node, "__REMOVE_QUOTES__").equals("true");
boolean explicitIDs = ElementParameterParser.getValue(node, "__EXPLICIT_IDS__").equals("true");

String logLevel= ElementParameterParser.getValue(node, "__LOG_LEVEL__");
String logFile= ElementParameterParser.getValue(node, "__LOG_FILE__");

StringBuilder tableName = new StringBuilder();
StringBuilder tmpTableName = new StringBuilder();
%>
String tableName_<%=cid%> = null;
<%
if(dbSchema == null || dbSchema.equals("") || dbSchema.equals("\"\"")) {
    tableName.append("\\\"\" + " + table + " + \"\\\"");
    %>
    tableName_<%=cid%> = <%=table%>;
    <%
} else {
    tableName.append("\\\"\" + " + dbSchema + " + \"\\\".\\\"\" + " + table + " + \"\\\"");
    %>
    tableName_<%=cid%> = <%=dbSchema%> + "\".\"" + <%=table%>;
    <%
}
if(dataAction.equals("UPDATE")) {
    tmpTableName = tableName;
    tableName = new StringBuilder("\\\"tmp_" + cid + "\\\"");
}
String file = ElementParameterParser.getValue(node, "__FILENAME__");

List<IMetadataColumn> columnList = getColumnList(node);
StringBuilder copyColumns = new StringBuilder("");
if(columnList != null && columnList.size() > 0) {
    copyColumns.append(" (");
    int count = 0;
    for(IMetadataColumn column : columnList) {
        copyColumns.append("\\\"" + column.getOriginalDbColumnName() + "\\\"");
        if(count != columnList.size() - 1) {
            copyColumns.append(",");
        }
        count++;
    }
    copyColumns.append(") ");
}
StringBuilder notNullColumns = new StringBuilder(" ");
List<Map<String, String>> notNullCols =
    (List<Map<String,String>>)ElementParameterParser.getObjectValue(
        node,"__FORCENOTNULL__" );
if(notNullCols != null && notNullCols.size() > 0) {
    notNullColumns.append("FORCE NOT NULL ");
    int notNullCount = 0;
    for(Map<String, String> notNullCol : notNullCols) {
        if(notNullCol.get("FORCENOTNULL").equals("true")) {
            notNullColumns.append("\\\"" + notNullCol.get("SCHEMA_COLUMN") + "\\\",");
            notNullCount++;
        }
    }
    if(notNullCount == 0) {
        notNullColumns = new StringBuilder(" ");
    }
}
%>
	String xpxSQL_<%=cid%>="";
	String bulkSQL_<%=cid%>="";
<%
	String gzipped = fileType.equals("GZIP") ? "GZIP " : "";
	if(parallel.equals("PARALLEL")){
%>
	xpxSQL_<%=cid%> += "xpx 'localize " + "<%=tableName.toString()%> " + <%=file%> + " <%=gzipped%>'";
	bulkSQL_<%=cid%> += "COPY " + "<%=tableName.toString()%>" + 
		" FROM 'local' WITH PARALLEL <%=gzipped%> ";
<%
	} else {
%>
	bulkSQL_<%=cid%> += "COPY " + "<%=tableName.toString()%>" + "<%=copyColumns.toString()%>FROM '" +
		<%=file%> + "' WITH <%=gzipped%> ";
<%
	}
	if (fieldLayout.equals("DELIMITED")) {
%>
	bulkSQL_<%=cid%> += "DELIMITER '" + <%=fieldTerminator%> + "' ";
<%
	}
	else {
		if(methodFixedWidth.equals("true")){
		%>
			bulkSQL_<%=cid%> += "FIXEDWIDTH '" + <%=fixedWidth%> + "' ";
		<%
		} else {
		%>
		bulkSQL_<%=cid%> += "FIXEDWIDTH '";
		<%
		if(columnList!=null){
			int counter = 1;
			for(IMetadataColumn column:columnList){	
				if( columnList.size() != counter){
				%>
					bulkSQL_<%=cid%> += "<%=column.getOriginalDbColumnName()%>:<%=column.getLength()%>,";
				<%	} else { %>
					bulkSQL_<%=cid%> += "<%=column.getOriginalDbColumnName()%>:<%=column.getLength()%>";
				<% 	}
				counter++;
			}
		}
%>
		bulkSQL_<%=cid%> += "' ";
<%		
		}
	}
	if (removeQuotes) {
%>
	bulkSQL_<%=cid%> += "REMOVEQUOTES ";
<%
	}
	if (explicitIDs) {
%>
	bulkSQL_<%=cid%> += "EXPLICIT_IDS ";
<%
	}
/*
	int maxerr = 0;
	try {
		if (!(maxErrors.equals("") || maxErrors.equals("\"\"") || maxErrors.equals("\"0\""))) {
			maxerr = maxErrors.substring(0, 0).equals("\"")
				? Integer.parseInt(maxErrors.substring(1, maxErrors.length() - 2))
				: Integer.parseInt(maxErrors);
		}
	}
	catch (Exception e) { }
*/
	if (!(maxErrors.equals("") || maxErrors.equals("\"\"") || maxErrors.equals("\"0\""))) {
%>
	bulkSQL_<%=cid%> += "MAXERROR " + <%=maxErrors%> + " ";
<%
	}
	if (dateFormat.length() > 0) {
%>
	bulkSQL_<%=cid%> += "DATEFORMAT '" + <%=dateFormat%> + "' ";
<%
	}
	if (timeFormat.length() > 0) {
%>
	bulkSQL_<%=cid%> += "TIMEFORMAT '" + <%=timeFormat%> + "' ";
<%
	}
	if (!(addlOptions.equals("") || addlOptions.equals("\"\""))) {
%>
	bulkSQL_<%=cid%> += <%=addlOptions%> + " ";
<%
	}

String host = ElementParameterParser.getValue(node, "__HOST__");
String port = ElementParameterParser.getValue(node, "__PORT__");
String dbName = ElementParameterParser.getValue(node, "__DBNAME__");
String userName = ElementParameterParser.getValue(node, "__USER__");
String password = ElementParameterParser.getValue(node, "__PASS__");
%> 
if (<%= logLevel %> > 0) {
	java.io.Writer output_<%=cid %> = new java.io.FileWriter(<%= logFile %>, true);
	java.sql.DriverManager.setLogWriter(new java.io.PrintWriter(output_<%=cid %>,true));
}	
com.paraccel.Driver.setLogLevel(<%= logLevel %>);

java.lang.Class.forName("com.paraccel.Driver").newInstance();
java.sql.Connection con_<%=cid %> = java.sql.DriverManager.getConnection("jdbc:paraccel://" + <%=host%> + ":" + <%=port%> + "/" + <%=dbName%>+"?prepareThreshold=100&loglevel="+<%= logLevel %>+"&protocolVersion=3", <%=userName%>, <%=password%>);

<%
String tableAction = ElementParameterParser.getValue(node,"__TABLE_ACTION__");
String dbmsId = ElementParameterParser.getValue(node,"__MAPPING__");
List<Column> stmtStructure = null;
Manager manager = null;
if(columnList != null && columnList.size() > 0) {
    stmtStructure = getManager(dbmsId, cid).createColumnList(columnList, null);
    manager = getManager(dbmsId, cid);
    if(tableAction.equals("DROP_CREATE")) {
        %>
        java.sql.Statement stmtDrop_<%=cid%> = con_<%=cid%>.createStatement();
        stmtDrop_<%=cid%>.execute("<%=manager.getDropTableSQL()%>");
        java.sql.Statement stmtCreate_<%=cid%> = con_<%=cid%>.createStatement();
        stmtCreate_<%=cid%>.execute("<%=manager.getCreateTableSQL(stmtStructure)%>");
        <%
    } else if(tableAction.equals("CREATE")) {
        %>
        java.sql.Statement stmtCreate_<%=cid%> = con_<%=cid%>.createStatement();
        stmtCreate_<%=cid%>.execute("<%=manager.getCreateTableSQL(stmtStructure)%>");
        <%
    } else if(tableAction.equals("CREATE_IF_NOT_EXISTS")) {
        %>
        java.sql.DatabaseMetaData dbMetaData_<%=cid%> = con_<%=cid%>.getMetaData();
        java.sql.ResultSet rsTable_<%=cid%> = dbMetaData_<%=cid%>.getTables(null, null, null, new String[]{"TABLE"});
        boolean whetherExist_<%=cid%> = false;
        while(rsTable_<%=cid%>.next()) {
            String table_<%=cid%> = rsTable_<%=cid%>.getString("TABLE_NAME");
            if(table_<%=cid%>.equalsIgnoreCase(<%=table%>)) {
                whetherExist_<%=cid%> = true;
                break;
            }
        }
        if(!whetherExist_<%=cid%>) {
            java.sql.Statement stmtCreate_<%=cid%> = con_<%=cid%>.createStatement();
            stmtCreate_<%=cid%>.execute("<%=manager.getCreateTableSQL(stmtStructure)%>");            
        }
        <%
    } else if(tableAction.equals("CLEAR")) {
        %>
        java.sql.Statement stmtClear_<%=cid%> = con_<%=cid%>.createStatement();
        stmtClear_<%=cid%>.executeUpdate("<%=manager.getTruncateTableSQL()%>");
        <%
    }    
}
    %>
    java.sql.Statement stmtBulk_<%=cid %> = con_<%=cid %>.createStatement();
    //stmt.execute("SET client_encoding to 'UNICODE'");
<%
	if(parallel.equals("PARALLEL")){
%>
    java.sql.Statement stmtXPX_<%=cid %> = con_<%=cid %>.createStatement();
    stmtXPX_<%=cid %>.execute(xpxSQL_<%=cid%>);
    stmtXPX_<%=cid %>.close();    
<%
	}
%>
    stmtBulk_<%=cid %>.execute(bulkSQL_<%=cid%>);
    stmtBulk_<%=cid %>.close();    
    <%
%>
con_<%=cid %>.close();