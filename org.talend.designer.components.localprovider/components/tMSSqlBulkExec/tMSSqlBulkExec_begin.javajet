<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.MetadataTalendType    
    org.talend.core.model.metadata.MappingTypeRetriever     
    java.util.List
    java.util.ArrayList
    java.util.Map
    java.util.HashMap
" 
skeleton="../templates/db_output_bulk.skeleton"
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

String action = ElementParameterParser.getValue(node, "__ACTION__");
String outputAction = ElementParameterParser.getValue(node, "__OUTPUT__");

String field_separator = ElementParameterParser.getValue(node, "__FIELDS_TERMINATED_BY__");
String row_separator = ElementParameterParser.getValue(node, "__ROW_TERMINATED_BY__");
String first_row = ElementParameterParser.getValue(node, "__FIRST_ROW__");
String file = ElementParameterParser.getValue(node, "__REMOTE_FILENAME__");
String dbhost = ElementParameterParser.getValue(node, "__HOST__");
String dbport = ElementParameterParser.getValue(node, "__PORT__");
String dbname = ElementParameterParser.getValue(node, "__DBNAME__");
String dbschema = ElementParameterParser.getValue(node, "__DB_SCHEMA__");
String dbproperties = ElementParameterParser.getValue(node, "__PROPERTIES__");
String dbuser = ElementParameterParser.getValue(node, "__USER__");
String dbpwd = ElementParameterParser.getValue(node, "__PASS__");
String table = ElementParameterParser.getValue(node, "__TABLE__");
String codePage = ElementParameterParser.getValue(node, "__CODE_PAGE__");
String data_file_type = ElementParameterParser.getValue(node, "__DATA_FILE_TYPE__");
boolean convertToUppercase = false; // not active this function
%>int deletedCount_<%=cid%>=0;<%
if(("EXPORT").equals(action)) {
    String bcp_utility = ElementParameterParser.getValue(node, "__BCP_UTILITY__");
    String server = ElementParameterParser.getValue(node, "__SERVER__");
    String query_statement = ElementParameterParser.getValue(node, "__QUERY__");
           query_statement = query_statement.replaceAll("\n"," ");
           query_statement = query_statement.replaceAll("\r"," ");           
    String output_file_name = ElementParameterParser.getValue(node, "__OUTPUT_FILE_NAME__");
    String row_terminated_export = ElementParameterParser.getValue(node, "__ROW_TERMINATED_EXPORT__");

    String char_type =  "char type error!";
    if(("char").equals(data_file_type)){
        char_type = "-c";
    }else if(("native").equals(data_file_type)){
        char_type = "-n";
    }else{
        char_type = "-w";
    }
    StringBuilder command =  new StringBuilder();
    command.append(bcp_utility.replaceAll("\"",""));
    command.append(" ");
    command.append(query_statement.replaceAll("\"","\\\\\""));
    command.append(" queryout ");
    command.append(output_file_name.replaceAll("\"","\\\\\""));
    command.append(" ");
    command.append(char_type);
    if(!("").equals(server)&&!("\"\"").equals(server)&&!(server==null)){
        command.append(" -S");
        command.append(server.replaceAll("\"",""));
    }
    if((("").equals(dbuser)||("\"\"").equals(dbuser)||dbuser==null)&&(("").equals(dbpwd)||dbpwd==null||("\"\"").equals(dbpwd))){
        command.append(" -T");
    }else{
        command.append(" -U");
        command.append(dbuser.replaceAll("\"",""));
        command.append(" -P");
        command.append(dbpwd.replaceAll("\"",""));
    }
    command.append(" -t");
    command.append(field_separator.replaceAll("\"",""));
    command.append(" -r");
    command.append(row_terminated_export.replaceAll("\"",""));

    %>
    
    Runtime runtime_<%=cid%> = Runtime.getRuntime();
    final Process ps<%=cid %> = runtime_<%=cid%>.exec("<%=command.toString()%>");
    Thread normal_<%=cid%> = new Thread() {
        public void run() {
            try {
                java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(ps<%=cid %>.getInputStream()));
                String line = "";
                try {
                    while((line = reader.readLine()) != null) {
                        <%
                        if (("OUTPUT_TO_CONSOLE").equals(outputAction)) {
                            %>
                            System.out.println(line);
                            <%
                        } else if (("RETRIEVE_OUTPUT").equals(outputAction)) {
                            %>
                            globalMap.put("<%=cid %>_OUTPUT",(String)globalMap.get("<%=cid %>_OUTPUT")+"\n"+line);
                            <%
                        }
                        %>
                    }
                } finally {
                    reader.close();
                }
            } catch(java.io.IOException ioe) {
                ioe.printStackTrace();
            }
        }
    };
    normal_<%=cid%>.start();
    Thread error_<%=cid%> = new Thread() {
        public void run() {
            try {
                java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(ps<%=cid %>.getErrorStream()));
                String line = "";
                try {
                    while((line = reader.readLine()) != null) {
                        <%
                        if (("OUTPUT_TO_CONSOLE").equals(outputAction)) {
                            %>
                            System.err.println(line);
                            <%
                        } else if (("RETRIEVE_OUTPUT").equals(outputAction)) {
                            %>
                            globalMap.put("<%=cid %>_OUTPUT",(String)globalMap.get("<%=cid %>_OUTPUT")+"\n"+line);
                            <%
                        }
                        %>
                    }
                } finally {
                    reader.close();
                }
            } catch(java.io.IOException ioe) {
                ioe.printStackTrace();
            }
        }
    };
    error_<%=cid%>.start();
    ps<%=cid %>.waitFor();
    normal_<%=cid%>.interrupt();
    error_<%=cid%>.interrupt();
    <%    
} else {
    List<IMetadataColumn> columnList = getColumnList(node);    
    %>
    String dbschema_<%=cid%> = "";
    <%@ include file="../templates/tMSSql/_tMSSqlConnection.javajet"%>
    String tableName_<%=cid%> = null;    
    if(dbschema_<%=cid%> == null || dbschema_<%=cid%>.trim().length() == 0) {
        tableName_<%=cid%> = <%=table%>;
    } else {
        tableName_<%=cid%> = dbschema_<%=cid%> + "].[" + <%=table%>;
    }
    <%
    String tableAction = ElementParameterParser.getValue(node,"__TABLE_ACTION__");
    String dbmsId = ElementParameterParser.getValue(node,"__MAPPING__");
    Manager manager = null;
    List<Column> stmtStructure = null;
    if(columnList != null && columnList.size() > 0) {
    	stmtStructure = getManager(dbmsId, cid).createColumnList(columnList, false, null, null);
    }
	if((columnList != null && columnList.size() > 0) || "CLEAR".equals(tableAction)){
    %>    
    <%@ include file="../templates/_tableActionForBulk.javajet"%>
    <%
    if(("INSERT").equals(action)) {
        %>
        java.sql.Statement stmtBulkInsert_<%=cid %> = conn_<%=cid %>.createStatement();
        stmtBulkInsert_<%=cid %>.execute("BULK INSERT [" + tableName_<%=cid%> + "] FROM '" + <%=file%> + "' WITH ( CODEPAGE='" + <%=codePage%> + "',DATAFILETYPE='<%=data_file_type%>',FIELDTERMINATOR='" + <%=field_separator%> + "',FIRSTROW =" + <%=first_row%> + ",ROWTERMINATOR='" + <%=row_separator%>+"')");
        stmtBulkInsert_<%=cid %>.close();        
        <%
    } else if(("UPDATE").equals(action)) {
        if(columnList != null && columnList.size() > 0) {
            int keyCount = 0;
            for(IMetadataColumn column : columnList) {
                if(column.isKey()) {
                    keyCount++;
                }
            }
            %>
            int keyCount_<%=cid%> = <%=keyCount%>;
            if(keyCount_<%=cid%> == 0) {
                throw new RuntimeException("For bulk update, Schema must have a key at least."); 
            }
            String tmpTableName_<%=cid%> = tableName_<%=cid%>;
            tableName_<%=cid%> = "tmp_<%=cid%>" + "_" + pid;
            java.sql.Statement stmtCreateTmp_<%=cid%> = conn_<%=cid%>.createStatement();
            stmtCreateTmp_<%=cid%>.execute("<%=manager.getCreateTableSQL(stmtStructure)%>)");
            stmtCreateTmp_<%=cid%>.close();
            java.sql.Statement stmtTmpBulk_<%=cid%> = conn_<%=cid%>.createStatement();
            stmtTmpBulk_<%=cid%>.execute("BULK INSERT [" + tableName_<%=cid%> + "] FROM '" + <%=file%> + "' WITH ( CODEPAGE='" + <%=codePage%> + "',DATAFILETYPE='<%=data_file_type%>',FIELDTERMINATOR='" + <%=field_separator%> + "',FIRSTROW =" + <%=first_row%> + ",ROWTERMINATOR='" + <%=row_separator%>+"')");
            stmtTmpBulk_<%=cid%>.close();
            tableName_<%=cid%> = tmpTableName_<%=cid%>;
            tmpTableName_<%=cid%> = "tmp_<%=cid%>" + "_" + pid;
            java.sql.Statement stmtUpdateBulk_<%=cid%> = conn_<%=cid%>.createStatement();
            stmtUpdateBulk_<%=cid%>.executeUpdate("<%=manager.getUpdateBulkSQL(columnList)%>");
            stmtUpdateBulk_<%=cid%>.close();
            tableName_<%=cid%> = "tmp_<%=cid%>" + "_" +pid;
            java.sql.Statement stmtTmpDrop_<%=cid%> = conn_<%=cid%>.createStatement();
            stmtTmpDrop_<%=cid%>.execute("<%=manager.getDropTableSQL()%>");
            stmtTmpDrop_<%=cid%>.close();
            <%
        }
    }
}        
    
    
    if(!useExistingConnection) {
        %>
        if(conn_<%=cid %> != null && !conn_<%=cid %>.isClosed()) {
            conn_<%=cid %>.close();
        }
        <%
    }
}
%>
