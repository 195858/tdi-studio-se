<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.core.model.metadata.MetadataTalendType    
    org.talend.core.model.metadata.MappingTypeRetriever     
    java.util.List
    java.util.ArrayList    
" 
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

String action = ElementParameterParser.getValue(node, "__ACTION__");
String outputAction = ElementParameterParser.getValue(node, "__OUTPUT__");

String field_separator = ElementParameterParser.getValue(node, "__FIELDS_TERMINATED_BY__");
String row_separator = ElementParameterParser.getValue(node, "__ROW_TERMINATED_BY__");
String first_row = ElementParameterParser.getValue(node, "__FIRST_ROW__");
String file = ElementParameterParser.getValue(node, "__REMOTE_FILENAME__");
String host = ElementParameterParser.getValue(node, "__HOST__");
String port = ElementParameterParser.getValue(node, "__PORT__");
String db = ElementParameterParser.getValue(node, "__DBNAME__");
String user = ElementParameterParser.getValue(node, "__USER__");
String pas = ElementParameterParser.getValue(node, "__PASS__");
String table = ElementParameterParser.getValue(node, "__TABLE__");
String data_file_type = ElementParameterParser.getValue(node, "__DATA_FILE_TYPE__");

if(action.equals("INSERT")){
    class MSSQLManager {
        public String getCreateTableSQL(String tableName, List<IMetadataColumn> listColumn, String dbmsId) {
            MappingTypeRetriever mappingType = MetadataTalendType.getMappingTypeRetriever(dbmsId);
            StringBuilder createTableSQL = new StringBuilder();
            String newTableName = null;            
            if(tableName == null || tableName.equals("") || tableName.equals("\"\"")) {                
                newTableName = "";                
            } else {                
                newTableName = tableName.substring(1, tableName.length() - 1);                
            }            
            createTableSQL.append("CREATE TABLE [" + newTableName + "](");
            List<String> pkList = new ArrayList<String>();
            int count = 0;
            String ending = ",";
            for(IMetadataColumn metadataColumn : listColumn) {
                if(metadataColumn.isKey()) {
                    pkList.add("[" + metadataColumn.getOriginalDbColumnName() + "]");
                }
                createTableSQL.append("[" + metadataColumn.getOriginalDbColumnName() + "] ");
                String dataType = null;
                if(metadataColumn.getType() == null || metadataColumn.getType().trim().length() == 0) {
                    dataType = mappingType.getDefaultSelectedDbType(metadataColumn.getTalendType());
                } else {
                    dataType = metadataColumn.getType();
                }
                createTableSQL.append(dataType);
                Integer length = metadataColumn.getLength() == null ? 0 : metadataColumn.getLength();
                Integer precision = metadataColumn.getPrecision() == null ? 0 : metadataColumn.getPrecision();
                boolean lengthIgnored = mappingType.isLengthIgnored(dbmsId, dataType);
                boolean precisionIgnored = mappingType.isPrecisionIgnored(dbmsId, dataType);
                String prefix = "";
                String suffix = "";
                String comma = "";
                if(mappingType.isPreBeforeLength(dbmsId, dataType)) {
                    if(!precisionIgnored) {
                        prefix = "(";
                        suffix = ") ";
                        createTableSQL.append(prefix + precision);
                    }
                    if(!lengthIgnored) {
                        prefix = (prefix.equals("") ? "(" : prefix);
                        suffix = (suffix.equals("") ? ") " : suffix);
                        if(precisionIgnored) {
                            createTableSQL.append(prefix);
                            comma = "";
                        } else {
                            comma = ",";
                        }
                        createTableSQL.append(comma + length);
                    }
                    createTableSQL.append(suffix);
                } else {
                    if(!lengthIgnored) {
                        prefix = "(";
                        suffix = ") ";
                        createTableSQL.append(prefix + length);
                    }
                    if(!precisionIgnored) {
                        prefix = (prefix.equals("") ? "(" : prefix);
                        suffix = (suffix.equals("") ? ") " : suffix);
                        if(lengthIgnored) {
                            createTableSQL.append(prefix);
                            comma = "";                        
                        } else {
                            comma = ",";
                        }
                        createTableSQL.append(comma + precision);
                    }
                    createTableSQL.append(suffix);
                }
                createTableSQL.append(getDefaultValueSQL(metadataColumn.getDefault()));
                if(!metadataColumn.isNullable()) {
                    createTableSQL.append("not null");
                }
                if(count == listColumn.size() - 1 && pkList.size() == 0) {
                    ending = "";
                }
                createTableSQL.append(ending);
                count++;
            }
            if(pkList.size() > 0) {                
                createTableSQL.append("primary key(");                
                int i = 0;                
                for(String pk : pkList) {                    
                    createTableSQL.append(pk);                    
                    if(i != pkList.size() - 1) {                        
                        createTableSQL.append(",");                        
                    }                    
                    i++;                    
                }                
                createTableSQL.append(")");                
            }
            createTableSQL.append(")");
            return createTableSQL.toString();
        }
        private String getDefaultValueSQL(String defaultValue) {
            if(defaultValue == null || defaultValue.equals("\"\"") || defaultValue.equals("")) {
                return " ";
            } else if((defaultValue.startsWith("\"") || defaultValue.startsWith("'")) && (defaultValue.endsWith("\"") || defaultValue.endsWith("'"))) {
                return "default '" + defaultValue.substring(1,defaultValue.length() - 1) + "' ";
            } else if(defaultValue.equalsIgnoreCase("null")) {
                return "default null ";
            } else {
                return "default " + defaultValue + " ";
            }            
        }        
    }
    List<IMetadataColumn> columnList = null;
    List<IMetadataTable> metadatas = node.getMetadataList();
    if(metadatas !=null && metadatas.size()>0){
        IMetadataTable metadata = metadatas.get(0);
        if(metadata != null){
            columnList = metadata.getListColumns();
        }
    }    
    %>
    java.lang.Class.forName("net.sourceforge.jtds.jdbc.Driver").newInstance();
    String url_<%=cid %> = "jdbc:jtds:sqlserver://" + <%=host%> + ":" + <%=port%> + "//" + <%=db%>;
    java.sql.Connection conn_<%=cid %> = java.sql.DriverManager.getConnection(url_<%=cid %>, <%=user%>, <%=pas%>);
    <%
    String tableAction = ElementParameterParser.getValue(node,"__TABLE_ACTION__");
    String dbmsId = ElementParameterParser.getValue(node,"__MAPPING__");
    if(columnList != null && columnList.size() > 0) {
        MSSQLManager builder = new MSSQLManager();
        if(tableAction.equals("DROP_CREATE")) {
            %>
            java.sql.Statement stmtDrop_<%=cid%> = conn_<%=cid%>.createStatement();
            stmtDrop_<%=cid%>.execute("drop table [" + <%=table%> + "]");
            java.sql.Statement stmtCreate_<%=cid%> = conn_<%=cid%>.createStatement();
            stmtCreate_<%=cid%>.execute("<%=builder.getCreateTableSQL(table, columnList, dbmsId)%>");
            <%
        } else if(tableAction.equals("CREATE")) {
            %>
            java.sql.Statement stmtCreate_<%=cid%> = conn_<%=cid%>.createStatement();
            stmtCreate_<%=cid%>.execute("<%=builder.getCreateTableSQL(table, columnList, dbmsId)%>");
            <%
        } else if(tableAction.equals("CREATE_IF_NOT_EXISTS")) {
            %>
            java.sql.DatabaseMetaData dbMetaData_<%=cid%> = conn_<%=cid%>.getMetaData();
            java.sql.ResultSet rsTable_<%=cid%> = dbMetaData_<%=cid%>.getTables(null, null, null, new String[]{"TABLE"});
            boolean whetherExist_<%=cid%> = false;
            while(rsTable_<%=cid%>.next()) {
                String table_<%=cid%> = rsTable_<%=cid%>.getString("TABLE_NAME");
                if(table_<%=cid%>.equalsIgnoreCase(<%=table%>)) {
                    whetherExist_<%=cid%> = true;
                    break;
                }
            }
            if(!whetherExist_<%=cid%>) {
                java.sql.Statement stmtCreate_<%=cid%> = conn_<%=cid%>.createStatement();
                stmtCreate_<%=cid%>.execute("<%=builder.getCreateTableSQL(table, columnList, dbmsId)%>");            
            }
            <%
        } else if(tableAction.equals("CLEAR")) {
            %>
            java.sql.Statement stmtClear_<%=cid%> = conn_<%=cid%>.createStatement();
            stmtClear_<%=cid%>.executeUpdate("truncate table [" + <%=table%>+"]");
            <%
        }        
    }
    %>
    java.sql.Statement stmt_<%=cid %> = conn_<%=cid %>.createStatement();
    stmt_<%=cid %>.execute("BULK INSERT " + <%=db%> + ".." + <%=table%> + " FROM '" + <%=file%> + "' WITH ( DATAFILETYPE='<%=data_file_type%>',FIELDTERMINATOR='" + <%=field_separator%> + "',FIRSTROW =" + <%=first_row%> + ",ROWTERMINATOR='" + <%=row_separator%>+"')");
    stmt_<%=cid %>.close();
    conn_<%=cid %>.close();
    <%
}else if(action.equals("EXPORT")){

String bcp_utility = ElementParameterParser.getValue(node, "__BCP_UTILITY__");
String server = ElementParameterParser.getValue(node, "__SERVER__");
String query_statement = ElementParameterParser.getValue(node, "__QUERY__");
	   query_statement = query_statement.replaceAll("\n"," ");
	   query_statement = query_statement.replaceAll("\r"," ");
	   
String output_file_name = ElementParameterParser.getValue(node, "__OUTPUT_FILE_NAME__");
String row_terminated_export = ElementParameterParser.getValue(node, "__ROW_TERMINATED_EXPORT__");

String char_type =  "char type error!";
if(data_file_type.equals("char")){
	char_type = "-c";
}else if(data_file_type.equals("native")){
	char_type = "-n";
}else{
	char_type = "-w";
}

StringBuffer command =  new StringBuffer();
command.append(bcp_utility.replaceAll("\"",""));
command.append(" ");
command.append(query_statement.replaceAll("\"","\\\\\""));
command.append(" queryout ");
command.append(output_file_name.replaceAll("\"","\\\\\""));
command.append(" ");
command.append(char_type);
if(!server.equals("")&&!server.equals("\"\"")&&!(server==null)){
	command.append(" -S");
	command.append(server.replaceAll("\"",""));
}
if((user.equals("")||user.equals("\"\"")||user==null)&&(pas.equals("")||pas==null||pas.equals("\"\""))){
	command.append(" -T");
}else{
	command.append(" -U");
	command.append(user.replaceAll("\"",""));
	command.append(" -P");
	command.append(pas.replaceAll("\"",""));
}
command.append(" -t");
command.append(field_separator.replaceAll("\"",""));
command.append(" -r");
command.append(row_terminated_export.replaceAll("\"",""));

%>
Runtime runtime_<%=cid%> = Runtime.getRuntime();
final Process ps<%=cid %> = runtime_<%=cid%>.exec("<%=command.toString()%>");
Thread normal_<%=cid%> = new Thread() {
	public void run() {
		try {
			java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(ps<%=cid %>.getInputStream()));
			String line = "";
			try {
				while((line = reader.readLine()) != null) {
<%
	if (outputAction.equals("OUTPUT_TO_CONSOLE")) {
%>
					System.out.println(line);
<%
	} else if (outputAction.equals("RETRIEVE_OUTPUT")) {
%>
					globalMap.put("<%=cid %>_OUTPUT",(String)globalMap.get("<%=cid %>_OUTPUT")+"\n"+line);
<%
	}
%>
				}
			} finally {
				reader.close();
			}
		} catch(java.io.IOException ioe) {
			ioe.printStackTrace();
		}
	}
};
normal_<%=cid%>.start();

Thread error_<%=cid%> = new Thread() {
	public void run() {
		try {
			java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(ps<%=cid %>.getErrorStream()));
			String line = "";
			try {
				while((line = reader.readLine()) != null) {
<%
	if (outputAction.equals("OUTPUT_TO_CONSOLE")) {
%>
					System.err.println(line);
<%
	} else if (outputAction.equals("RETRIEVE_OUTPUT")) {
%>
					globalMap.put("<%=cid %>_OUTPUT",(String)globalMap.get("<%=cid %>_OUTPUT")+"\n"+line);
<%
	}
%>
				}
			} finally {
				reader.close();
			}
		} catch(java.io.IOException ioe) {
			ioe.printStackTrace();
		}
	}
};
error_<%=cid%>.start();

ps<%=cid %>.waitFor();
normal_<%=cid%>.interrupt();
error_<%=cid%>.interrupt();

<%
}
%>







