<%@ jet 
imports="
    	org.talend.core.model.process.INode 
    	org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.core.model.metadata.builder.database.ExtractMetaDataUtils
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
		
		java.util.List
		"
%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	
    String javaDbDriver   = "org.sqlite.JDBC";    
    
	String dbname = ElementParameterParser.getValue(node, "__DBNAME__");
	String dbencoding = ElementParameterParser.getValue(node, "__ENCODING__");
	String dbquery = ElementParameterParser.getValue(node, "__QUERY__");
		   dbquery = dbquery.replaceAll("\n"," ");
		   dbquery = dbquery.replaceAll("\r"," ");
		   
	String dbjnilib = ElementParameterParser.getValue(node, "__JNI_LIB__");	
    
	List<IMetadataTable> metadatas = node.getMetadataList();
	if ((metadatas!=null)&&(metadatas.size()>0)) {
		IMetadataTable metadata = metadatas.get(0);
		if (metadata!=null) {
%>
// Reset the "sys_paths" field of the ClassLoader to null.
Class clazz_<%=cid%> = ClassLoader.class;
java.lang.reflect.Field field_<%=cid%> = clazz_<%=cid%>.getDeclaredField("sys_paths");
boolean accessible_<%=cid%> = field_<%=cid%>.isAccessible();
if (!accessible_<%=cid%>)
	field_<%=cid%>.setAccessible(true);
	Object original_<%=cid%> = field_<%=cid%>.get(clazz_<%=cid%>);
// Reset it to null so that whenever "System.loadLibrary" is called, it will be reconstructed with the changed
// value.
	field_<%=cid%>.set(clazz_<%=cid%>, null);
try {
// Change the value and load the library.
	System.setProperty("java.library.path", <%=dbjnilib%>);
	System.loadLibrary("sqlitejdbc");
} finally {
// Revert back the changes.
	field_<%=cid%>.set(clazz_<%=cid%>, original_<%=cid%>);
	field_<%=cid%>.setAccessible(accessible_<%=cid%>);
}

int nb_line_<%=cid%> = 0;
java.lang.Class.forName("<%=javaDbDriver %>");

String url_<%=cid %> = "jdbc:sqlite:"+<%= dbname%>;

java.sql.Connection conn_<%=cid%> = java.sql.DriverManager.getConnection(url_<%=cid %>);

java.sql.Statement stmt_<%=cid %> = conn_<%=cid%>.createStatement();
java.sql.ResultSet rs_<%=cid %> = stmt_<%=cid %>.executeQuery(<%=dbquery%>);
java.sql.ResultSetMetaData rsmd_<%=cid %> = rs_<%=cid %>.getMetaData();
int colQtyInRs_<%=cid%> = rsmd_<%=cid %>.getColumnCount();

globalMap.put("<%=cid %>_QUERY",<%=dbquery%>);


<%
List< ? extends IConnection> conns = node.getOutgoingSortedConnections();
List<IMetadataColumn> columnList = metadata.getListColumns();
%>
while (rs_<%=cid %>.next()) {
nb_line_<%=cid%>++;

<%
if(conns != null && conns.size()>0){
 	IConnection conn = conns.get(0);
 	String firstConnName = conn.getName();
 	int currentColNo = 1;
 	for(IMetadataColumn column:columnList){
 	
 	String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
 	String defVal = JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate);
 	
 	if(conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)){
 	%> 	
 		if(colQtyInRs_<%=cid%><<%=currentColNo%>){
 		
 			<%=firstConnName%>.<%=column.getLabel()%>=<%=defVal%>;
 			
 		}else{
 	  	  <%
 	  	  if(typeToGenerate.equals("byte[]")){
 	  	   	typeToGenerate = "Bytes";
 	   	  }else if(typeToGenerate.equals("java.util.Date")){
 	   	  	typeToGenerate = "Timestamp";
 	   	  }else if(typeToGenerate.equals("Integer")){
 	   	  	typeToGenerate = "Int";
 	   	  }else{
			typeToGenerate=typeToGenerate.substring(0,1).toUpperCase()+typeToGenerate.substring(1);
		  }
		  
			  if(typeToGenerate.equals("Char")||typeToGenerate.equals("Character")){
			  %>
			  	if(rs_<%=cid %>.getString(<%=currentColNo%>)!=null&&(rs_<%=cid %>.getString(<%=currentColNo%>)).length()>0){
			  	
			  		<%=firstConnName%>.<%=column.getLabel()%>=rs_<%=cid %>.getString(<%=currentColNo%>).charAt(0);
			  		
			  	}else{			  	
			  	    <%if(typeToGenerate.equals("Character")){%>
			  	    
			  	   	if((rs_<%=cid %>.getString(<%=currentColNo%>))==null){
			  	   	
			  			<%=firstConnName%>.<%=column.getLabel()%>=null;
			  			
			  		}else{
			  		
			  			<%=firstConnName%>.<%=column.getLabel()%>='\0';
			  			
			  		}
			  		<%}else{%>
			  		
			  		if((rs_<%=cid %>.getString(<%=currentColNo%>)).equals("")){
			  		
			  			<%=firstConnName%>.<%=column.getLabel()%> = '\0';
			  			
			  		}else{
			  		
			  			throw new RuntimeException(
							"Value is empty for column : '<%=column.getLabel()%>', value is invalid or this column should be nullable or have a default value.");
							
					}
			  		
			  		<%}%>
			  	}			
			  <%
			  }else if(typeToGenerate.equals("Timestamp")){
			 %>
			 if(rs_<%=cid %>.getTimestamp(<%=currentColNo%>)!=null){
			 	<%=firstConnName%>.<%=column.getLabel()%>=new java.util.Date(rs_<%=cid %>.getTimestamp(<%=currentColNo%>).getTime());
			 }else{
			 	<%=firstConnName%>.<%=column.getLabel()%> =  null;
			 }
			 <% 	
			 }else{
 	   		%>
 			<%=firstConnName%>.<%=column.getLabel()%>=rs_<%=cid %>.get<%=typeToGenerate%>(<%=currentColNo%>);
 			<%
 			  }
 			%>
 		}
 		
   	 <%  
   	 	currentColNo++;
    	}
 	}
 	if(conns.size()>1){
 		for(int connNO = 1; connNO < conns.size(); connNO++){
 		  IConnection conn2 = conns.get(connNO);
 		  if((conn2.getName().compareTo(firstConnName)!=0)&&(conn2.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA))){
 		  	for(IMetadataColumn column:columnList){
 		  %>
 		   	<%=conn2.getName()%>.<%=column.getLabel()%>=<%=firstConnName%>.<%=column.getLabel()%>;
 		  <% 
 		  	}
 		  }
 		}
 	}
}
		}
	}
%>

