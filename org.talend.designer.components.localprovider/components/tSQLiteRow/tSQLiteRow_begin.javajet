<%@ jet 
imports="
			org.talend.core.model.process.INode 
			org.talend.core.model.process.ElementParameterParser 
			org.talend.designer.codegen.config.CodeGeneratorArgument		
		" 
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	String dbname= ElementParameterParser.getValue(node, "__DBNAME__");
	String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");
	String dbencoding= ElementParameterParser.getValue(node, "__ENCODING__");
    String commitEvery = ElementParameterParser.getValue(node, "__COMMIT_EVERY__");
    String javaDbDriver   = "org.sqlite.JDBC";  
%>
java.sql.Connection conn_<%=cid%> = null;
<%
if(("true").equals(useExistingConn)) {
    String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
    String conn = "conn_" + connection;
    %>
    conn_<%=cid%> = (java.sql.Connection)globalMap.get("<%=conn%>");
    <%
} else {
    %>
    java.lang.Class.forName("<%=javaDbDriver %>");
    String url_<%=cid %> = "jdbc:sqlite:" + "/" + <%=dbname%>.toLowerCase();
    conn_<%=cid%> = java.sql.DriverManager.getConnection(url_<%=cid %>);
    <%
}
%>

<%
if(!("true").equals(useExistingConn)) {
    if(!("").equals(commitEvery) && !("0").equals(commitEvery)) {
        %>
        conn_<%=cid%>.setAutoCommit(false);
        int commitEvery_<%=cid%> = <%=commitEvery%>;    
        int commitCounter_<%=cid%> = 0;
        <%
    }
}
%>
java.sql.Statement stmt_<%=cid %> = conn_<%=cid %>.createStatement();
String query_<%=cid %> = "";
boolean whetherReject_<%=cid%> = false;
