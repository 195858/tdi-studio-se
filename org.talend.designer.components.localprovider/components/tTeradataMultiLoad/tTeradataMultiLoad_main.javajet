<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.metadata.MappingTypeRetriever
    org.talend.core.model.metadata.MetadataTalendType
    java.util.List
    java.lang.StringBuilder
    java.util.Map
" 
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

String dbname= ElementParameterParser.getValue(node, "__DBNAME__");
String dbuser= ElementParameterParser.getValue(node, "__USER__");
String dbpwd= ElementParameterParser.getValue(node, "__PASS__");
String table= ElementParameterParser.getValue(node, "__TABLE__");

String scriptPath= ElementParameterParser.getValue(node, "__SCRIPT_PATH__");
String execution= ElementParameterParser.getValue(node, "__EXECUTION__");
String action= ElementParameterParser.getValue(node, "__ACTION__");
String where= ElementParameterParser.getValue(node, "__WHERE__");
String loadFile= ElementParameterParser.getValue(node, "__LOAD_FILE__");
String separator= ElementParameterParser.getValue(node, "__FIELD_SEPARATOR__");
String errorFile= ElementParameterParser.getValue(node, "__ERROR_FILE__");
String beginLoad= ElementParameterParser.getValue(node, "__BEGINLOAD_ADVANCEDPARAM__");
boolean returnCodeDie= ElementParameterParser.getValue(node, "__RETURN_CODE_DIE__").equals("true");
String returnCode= ElementParameterParser.getValue(node, "__RETURN_CODE__");
boolean specifyLogTable= ElementParameterParser.getValue(node, "__SPECIFY_LOG_TABLE__").equals("true");
String logTable= ElementParameterParser.getValue(node, "__LOG_TABLE_TABLE__");

String defineCharset = ElementParameterParser.getValue(node, "__DEFINE_CHARSET__");
String charset = ElementParameterParser.getValue(node, "__CHARSET__");

if(!scriptPath.endsWith("/\"")){
	scriptPath = scriptPath+	"+\"/\"";
}
if(loadFile.indexOf("/") !=0 && ("Windows").equals(execution)){
	loadFile = loadFile.replaceAll("/", "\\\\\\\\");
}

String dbmsId = "teradata_id";

List<IMetadataColumn> columnList = null;
List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
	IMetadataTable metadata = metadatas.get(0);
	if (metadata!=null) {
		columnList = metadata.getListColumns();
	}
}
%>
String tableFullName_<%=cid%> = <%=dbname%> + "." + <%=table%>;
java.io.FileWriter fw_<%=cid %> = new java.io.FileWriter(<%=scriptPath%>+<%=table%>+".script");

<%//build script---------------------------------------------------------%>

StringBuilder script_<%=cid%> = new StringBuilder();
<%
if(!specifyLogTable) {
%>
	fw_<%=cid %>.write(".LOGTABLE "+<%=dbname%>+"."+<%=table%>+"_lt;\r\n");
<%
} else {
%>
	fw_<%=cid %>.write(".LOGTABLE "+<%=logTable%>+";\r\n");
<%
}
%>
fw_<%=cid %>.write(".LOGON "+<%=dbuser%>+","+<%=dbpwd%>+";\r\n");

<%//Layout---------------------------------------------------------------%>
fw_<%=cid %>.write(".BEGIN IMPORT MLOAD TABLES "+tableFullName_<%=cid%>+" "+<%=beginLoad%>+";\r\n");
fw_<%=cid %>.write(".LAYOUT customer_layout;\r\n");
<%
if(columnList!=null){
	for(IMetadataColumn column:columnList){	
%>
fw_<%=cid %>.write(".FIELD "+"<%=column.getOriginalDbColumnName()%>"+" * VARCHAR(<%=column.getLength() == null ? 0 : column.getLength()%>);\r\n");
<%
	}
}
%>
fw_<%=cid %>.write(".DML LABEL DML_LABEL;\r\n");

<%//SQL statements-------------------------------------------------------%>
<%
StringBuilder updateSetSQL = new StringBuilder();
StringBuilder updateWhereSQL = new StringBuilder();
StringBuilder insertColSQL = new StringBuilder();
StringBuilder insertValueSQL = new StringBuilder();
if(columnList!=null){
	String columnName = "";
 	for(IMetadataColumn column:columnList){	
 		columnName= column.getOriginalDbColumnName();
 		if(insertColSQL.length()>0){
 			insertColSQL.append(",");
 		}
 		insertColSQL.append(columnName);
 		
 		if(insertValueSQL.length()>0){
 			insertValueSQL.append(",");
 		}
 		insertValueSQL.append(":").append(columnName);
 		
 		if(column.isKey()){
 			if(updateWhereSQL.length()>0){
     			updateWhereSQL.append(" AND ");
     		}
     		updateWhereSQL.append(columnName).append("=:").append(columnName);
 		}else{
     		if(updateSetSQL.length()>0){
     			updateSetSQL.append(",");
     		}
     		updateSetSQL.append(columnName).append("=:").append(columnName);
 		}
	}
}
if(("Update").equals(action) || ("InsertOrUpdate").equals(action)){
%>
fw_<%=cid %>.write("UPDATE "+tableFullName_<%=cid%>+" SET "+"<%=updateSetSQL.toString()%>"
	+" WHERE "+"<%=updateWhereSQL%>"+";\r\n");
<%
}
if(("Insert").equals(action) || ("InsertOrUpdate").equals(action)){
%>
fw_<%=cid %>.write("INSERT INTO "+tableFullName_<%=cid%>+"("
	+"<%=insertColSQL%>"+") VAlUES("+"<%=insertValueSQL.toString()%>"+");\r\n");
<%
}
if(("Delete").equals(action)){
%>
fw_<%=cid %>.write("DELETE FROM "+tableFullName_<%=cid%>+" "+<%=where%>+" ;\r\n");
<%
}
%>


<%//Import file----------------------------------------------------------%>
fw_<%=cid %>.write(".IMPORT INFILE "+<%=loadFile%>);
fw_<%=cid %>.write(" FORMAT VARText '"+<%=separator%>+"' LAYOUT customer_layout APPLY DML_LABEL;\r\n");
fw_<%=cid %>.write(".END MLOAD;\r\n");
fw_<%=cid %>.write(".LOGOFF;\r\n");

<%//write script to file-------------------------------------------------%>
fw_<%=cid %>.close();

<%//run mload command----------------------------------------------------%>
<%if("true".equals(defineCharset)) {
	if(!("".equals(charset))) {%>
String sb_<%=cid%>= new String("<%=(("Windows").equals(execution))?"cmd /c ":""%>mload -c "+<%=charset%>+" < "+<%=scriptPath%>+<%=table%>+".script > "+<%=errorFile%>+" 2>&1");
<%}} else {%>	
String sb_<%=cid%>= new String("<%=(("Windows").equals(execution))?"cmd /c ":""%>mload < "+<%=scriptPath%>+<%=table%>+".script > "+<%=errorFile%>+" 2>&1");
<%}%>
final Process process_<%=cid %> = Runtime.getRuntime().exec(sb_<%=cid%>); 
Thread normal_<%=cid %> = new Thread() {
    public void run() {
    	try {
    		java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(process_<%=cid %>.getInputStream()));
    		String line = "";
    		try {
    			while((line = reader.readLine()) != null) {
    			   System.out.println(line);
    	        }
    	    } finally {
    	         reader.close();
    	    }
        }catch(java.io.IOException ioe) {
    		ioe.printStackTrace();
    	}
    }
};
normal_<%=cid %>.start();

Thread error_<%=cid %> = new Thread() {
	public void run() {
		try {
			java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(process_<%=cid %>.getErrorStream()));
			String line = "";
			try {
				while((line = reader.readLine()) != null) {
					System.err.println(line);
				}
			} finally {
				reader.close();
			}
		} catch(java.io.IOException ioe) {
		   ioe.printStackTrace();
		}
	}
};
error_<%=cid %>.start();

process_<%=cid %>.waitFor();

normal_<%=cid %>.interrupt();

error_<%=cid %>.interrupt();

globalMap.put("<%=cid %>_EXIT_VALUE", process_<%=cid %>.exitValue());

<%
if(returnCodeDie) {
%>
	if(process_<%=cid %>.exitValue()>=<%=returnCode%>) {
		throw new RuntimeException("Multiload returned exit code "+process_<%=cid %>.exitValue());
	}
<%	
}
%>
