<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.metadata.MappingTypeRetriever
    org.talend.core.model.metadata.MetadataTalendType
    java.util.List
    java.lang.StringBuffer
    java.util.Map
" 
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

String dbhost = ElementParameterParser.getValue(node, "__HOST__");
String dbport = ElementParameterParser.getValue(node, "__PORT__");
String dbname= ElementParameterParser.getValue(node, "__DBNAME__");
String dbuser= ElementParameterParser.getValue(node, "__USER__");
String dbpwd= ElementParameterParser.getValue(node, "__PASS__");
String table= ElementParameterParser.getValue(node, "__TABLE__");

String mloadPath= ElementParameterParser.getValue(node, "__MLOAD_PATH__");
String action= ElementParameterParser.getValue(node, "__ACTION__");
String loadFile= ElementParameterParser.getValue(node, "__LOAD_FILE__");
String separator= ElementParameterParser.getValue(node, "__FIELD_SEPARATOR__");
String errorFile= ElementParameterParser.getValue(node, "__ERROR_FILE__");

String dbmsId = "teradata_id";

List<IMetadataColumn> columnList = null;
List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
	IMetadataTable metadata = metadatas.get(0);
	if (metadata!=null) {
		columnList = metadata.getListColumns();
	}
}
%>
String tableFullName_<%=cid%> = <%=dbname%> + "." + <%=table%>;
java.io.FileWriter fw_<%=cid %> = new java.io.FileWriter(<%=mloadPath%>+"mload.script");

<%//build script---------------------------------------------------------%>

StringBuffer script_<%=cid%> = new StringBuffer();
fw_<%=cid %>.write(".LOGTABLE inslogtable;\r\n");
fw_<%=cid %>.write(".LOGON "+<%=dbuser%>+","+<%=dbpwd%>+";\r\n");

<%//drop table-----------------------------------------------------------%>

<%
if(action.equals("Insert")){
%>
fw_<%=cid %>.write("DROP TABLE "+tableFullName_<%=cid%>+";\r\n");
<%
}
%>
fw_<%=cid %>.write("DROP TABLE "+<%=dbname%>+".et_"+<%=table%>+";\r\n");
fw_<%=cid %>.write("DROP TABLE "+<%=dbname%>+".ut_"+<%=table%>+";\r\n");
fw_<%=cid %>.write("DROP TABLE "+<%=dbname%>+".uv_"+<%=table%>+";\r\n");
fw_<%=cid %>.write("DROP TABLE "+<%=dbname%>+".wt_"+<%=table%>+";\r\n");

<%//create table---------------------------------------------------------%>
<%
if(action.equals("Insert")){
%>
fw_<%=cid %>.write("CREATE MULTISET TABLE "+tableFullName_<%=cid%>+",\r\n");
fw_<%=cid %>.write("FALLBACK,\r\n");
fw_<%=cid %>.write("NO BEFORE JOURNAL,\r\n");
fw_<%=cid %>.write("NO AFTER JOURNAL,\r\n");
fw_<%=cid %>.write("CHECKSUM = DEFAULT\r\n");
fw_<%=cid %>.write("(");
<%
	String keySQL = "";	
	StringBuffer tableColumnSQL = new StringBuffer();
	if(columnList!=null){
     	for(IMetadataColumn column:columnList){	
    		tableColumnSQL.append(column.getOriginalDbColumnName()).append(" ");
    		tableColumnSQL.append(column.getType());
    		if(column.isKey()==true){
    			keySQL += keySQL.length()>0?",":""+ column.getOriginalDbColumnName();
    		}
    		MappingTypeRetriever mtr=MetadataTalendType.getMappingTypeRetriever(dbmsId);
    		if(column.getLength()==null) {
    			column.setLength(0);
    		}
			if(column.getPrecision()==null) {
				column.setPrecision(0);
			}
			if(column.getLength()!=0 && !mtr.isLengthIgnored(dbmsId,column.getType()) ){ //need Length
				tableColumnSQL.append("(");
				if(column.getPrecision()!=0 && !mtr.isPrecisionIgnored(dbmsId,column.getType())){ //need Precision
					if(mtr.isPreBeforeLength(dbmsId,column.getType())){ //Precision first
						tableColumnSQL.append(column.getPrecision()).append(",").append(column.getLength());
					}else{
						tableColumnSQL.append(column.getLength()).append(",").append(column.getPrecision());
					}
				}else{
					tableColumnSQL.append(column.getLength());
				}
				tableColumnSQL.append(") ");
			}
			//default_value
			String defaultValue = column.getDefault();
			if(defaultValue!=null && defaultValue.length()>0 && !defaultValue.equals("\"\"")){
				if(defaultValue.equalsIgnoreCase("null")){
					tableColumnSQL.append("default null ");
				}else if( ( defaultValue.startsWith("\"")||defaultValue.startsWith("'") )
					&& (defaultValue.endsWith("\"")||defaultValue.endsWith("'"))){
					tableColumnSQL.append("default '").append(defaultValue.substring(1,defaultValue.length()-1)).append("' ");
				}else{
					tableColumnSQL.append("default ").append(defaultValue).append(" ");
				}
			}
			//nullable
			if(column.isNullable()==false){
	 			tableColumnSQL.append("not null ");
	 		}
	 		
	 		tableColumnSQL.append(",");
    	}
	}
%>
fw_<%=cid %>.write("<%=tableColumnSQL.toString()%>");
fw_<%=cid %>.write(")\r\n");
<%
	if(keySQL.length()>0){
		keySQL = "\"PRIMARY INDEX ( " + keySQL + " );\"\r\n";
%>
fw_<%=cid %>.write(<%=keySQL%>);
<%
	}
}
%>

<%//Layout---------------------------------------------------------------%>
fw_<%=cid %>.write(".BEGIN IMPORT MLOAD TABLES "+tableFullName_<%=cid%>+"SESSIONS 8;\r\n");
fw_<%=cid %>.write(".LAYOUT customer_layout;\r\n");
<%
if(columnList!=null){
	for(IMetadataColumn column:columnList){	
%>
fw_<%=cid %>.write(".FIELD "+"<%=column.getOriginalDbColumnName()%>"+" * "+"<%=column.getType()%>");
<%
		MappingTypeRetriever mtr=MetadataTalendType.getMappingTypeRetriever(dbmsId);
		if(column.getLength()!=null && column.getLength()!=0 && !mtr.isLengthIgnored(dbmsId,column.getType()) ){
%>
fw_<%=cid %>.write("("+"<%=column.getLength()%>"+");\r\n");
<%
		}
	}
}
%>
fw_<%=cid %>.write(".DML LABEL DML_LABEL;\r\n");

<%//SQL statements-------------------------------------------------------%>
<%
StringBuffer updateSetSQL = new StringBuffer();
StringBuffer updateWhereSQL = new StringBuffer();
StringBuffer insertColSQL = new StringBuffer();
StringBuffer insertValueSQL = new StringBuffer();
if(columnList!=null){
	String columnName = "";
 	for(IMetadataColumn column:columnList){	
 		columnName= column.getOriginalDbColumnName();
 		if(insertColSQL.length()>0){
 			insertColSQL.append(",");
 		}
 		insertColSQL.append(columnName);
 		
 		if(insertValueSQL.length()>0){
 			insertValueSQL.append(",");
 		}
 		insertValueSQL.append(":").append(columnName);
 		
 		if(column.isKey()){
 			if(updateWhereSQL.length()>0){
     			updateWhereSQL.append(" AND ");
     		}
     		updateWhereSQL.append(columnName).append("=:").append(columnName);
 		}else{
     		if(updateSetSQL.length()>0){
     			updateSetSQL.append(",");
     		}
     		updateSetSQL.append(columnName).append("=:").append(columnName);
 		}
	}
}
if(action.equals("Update") || action.equals("InsertOrUpdate")){
%>
fw_<%=cid %>.write("UPDATE "+tableFullName_<%=cid%>+" SET "+"<%=updateSetSQL.toString()%>"
	+" WHERE "+"<%=updateWhereSQL%>"+";\r\n");
<%
}
if(action.equals("Insert") || action.equals("InsertOrUpdate")){
%>
fw_<%=cid %>.write("INSERT INTO "+tableFullName_<%=cid%>+"("
	+"<%=insertColSQL%>"+") VAlUES("+"<%=insertValueSQL.toString()%>"+");\r\n");
<%
}
%>

<%//Import file----------------------------------------------------------%>
fw_<%=cid %>.write("IMPORT INFILE "+<%=loadFile%>);
fw_<%=cid %>.write(" FORMAT VARText "+<%=separator%>+" LAYOUT customer_layout APPLY DML_LABEL;\r\n");
fw_<%=cid %>.write(".END MLOAD;\r\n");
fw_<%=cid %>.write(".LOGOFF;\r\n");

<%//write script to file-------------------------------------------------%>
fw_<%=cid %>.close();

<%//run mload command----------------------------------------------------%>
String[] sb_<%=cid%>= new String[]{ <%=mloadPath%>, "mload", "< mload.script", "> "+<%=errorFile%> };
final Process process_<%=cid %> = Runtime.getRuntime().exec(sb_<%=cid%>); 
Thread normal_<%=cid %> = new Thread() {
    public void run() {
    	try {
    		java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(process_<%=cid %>.getInputStream()));
    		String line = "";
    		try {
    			while((line = reader.readLine()) != null) {
    			   System.out.println(line);
    	        }
    	    } finally {
    	         reader.close();
    	    }
        }catch(java.io.IOException ioe) {
    		ioe.printStackTrace();
    	}
    }
};
normal_<%=cid %>.start();

Thread error_<%=cid %> = new Thread() {
	public void run() {
		try {
			java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(process_<%=cid %>.getErrorStream()));
			String line = "";
			try {
				while((line = reader.readLine()) != null) {
					System.err.println(line);
				}
			} finally {
				reader.close();
			}
		} catch(java.io.IOException ioe) {
		   ioe.printStackTrace();
		}
	}
};
error_<%=cid %>.start();

process_<%=cid %>.waitFor();

normal_<%=cid %>.interrupt();

error_<%=cid %>.interrupt();
