<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.core.model.process.ElementParameterParser
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.process.IConnection
    org.talend.core.model.metadata.types.JavaTypesManager
	org.talend.core.model.metadata.types.JavaType
    java.util.List
    java.util.Map
"
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

String advancedSeparatorStr = ElementParameterParser.getValue(node, "__ADVANCED_SEPARATOR__");
boolean advancedSeparator = (advancedSeparatorStr!=null&&!("").equals(advancedSeparatorStr))?("true").equals(advancedSeparatorStr):false;
String thousandsSeparator = ElementParameterParser.getValueWithJavaType(node, "__THOUSANDS_SEPARATOR__", JavaTypesManager.CHARACTER);
String decimalSeparator = ElementParameterParser.getValueWithJavaType(node, "__DECIMAL_SEPARATOR__", JavaTypesManager.CHARACTER); 
   		    
List<Map<String, String>> groupbys = 
    ( List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__GROUPBYS__");
	
List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
    IMetadataTable metadata = metadatas.get(0);
        if (metadata!=null) {
                
            String pivotColumn = ElementParameterParser.getValue(node, "__PIVOT_COLUMN__");

            String aggColumn = ElementParameterParser.getValue(node, "__AGGREGATION_COLUMN__");

            String aggFunction = ElementParameterParser.getValue(node, "__AGGREGATION_FUNCTION__");
                
            String fieldSeparator = ElementParameterParser.getValue(node, "__FIELDSEPARATOR__");
            
            String rowSeparator = ElementParameterParser.getValue(node,"__ROWSEPARATOR__");

            //String fieldSeparator = delim1.substring(1,delim1.length()-1);
            
            List<? extends IConnection> incomingConnections = node.getIncomingConnections();
            
                if (incomingConnections != null && !incomingConnections.isEmpty()) {
                    
                    IMetadataTable inMetadata = incomingConnections.get(0).getMetadataTable();
                    
                    String inConnName = incomingConnections.get(0).getName();
                    
                    List<IMetadataColumn> columnList = metadata.getListColumns();
                    
                    JavaType javaType = null;
                    
                    String columnType = null;
                    
                    String columnTypeValue = null;
                    
                    String columnTypeFunName = null;
             		
             		for(IMetadataColumn column:columnList){
             			
             			if(column.getLabel().equals(aggColumn)){
             			
             				javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
             			
							columnType = column.getTalendType().substring(3);
							
							columnTypeValue = JavaTypesManager.getShortNameFromJavaType(JavaTypesManager.getJavaTypeFromId(column.getTalendType()));
							
							columnTypeFunName = columnTypeValue.substring(0,1).toUpperCase()+columnTypeValue.substring(1);

							break;
						}
             		}
%>                   
    //pivot key  
    pivot_Keys_Split<%=cid%> = pivot_Keys<%=cid%>.split(<%=fieldSeparator%>);
    
    pivot_Exists<%=cid%> = false;
    
    int pivotNum<%=cid%> = 0;
    
    for(int i = 0;i<pivot_Keys_Split<%=cid%>.length;i++){
        
        if(pivot_Keys_Split<%=cid%>[i].equals(<%=inConnName%>.<%=pivotColumn%>)){
            
            pivot_Exists<%=cid%> = true;
            
            pivotNum<%=cid%> = i + 1;
            
            break;
            
        }
        
    }
    
    if(!pivot_Exists<%=cid%>){
        
        pivot_Key<%=cid%>.delete(0, pivot_Key<%=cid%>.length());
        
        pivot_Keys<%=cid%> = pivot_Keys<%=cid%> + pivot_Key<%=cid%>.append(<%=inConnName%>.<%=pivotColumn%>).toString() + <%=fieldSeparator%>;
        
        pivot_Keys_Split<%=cid%> = pivot_Keys<%=cid%>.split(<%=fieldSeparator%>);
        
        pivotNum<%=cid%> = pivot_Keys_Split<%=cid%>.length;
        
    }

    
    //group key

    group_Keys_Split<%=cid%> = group_Keys<%=cid%>.split(<%=rowSeparator%>);
    
    group_Exists<%=cid%> = false;
    
    gKvalue<%=cid%> = "";
    
    group_Key<%=cid%>.delete(0,group_Key<%=cid%>.length());
        
    <%
    for (int i=0; i<groupbys.size(); i++) {
       
      Map<String, String> groupby = groupbys.get(i);
    %>

        gKvalue<%=cid%> = gKvalue<%=cid%> + group_Key<%=cid%>.append(<%=inConnName%>.<%=groupby.get("INPUT_COLUMN")%>).toString()<%if(i!=groupbys.size()-1){%>+<%=fieldSeparator%><%}%>; 
        
        group_Key<%=cid%>.delete(0,group_Key<%=cid%>.length());
    <%

     }
    
    %>
    
    for(int i = 0;i<group_Keys_Split<%=cid%>.length;i++){
    
        if(group_Keys_Split<%=cid%>[i].equals(gKvalue<%=cid%>)){
            
            group_Exists<%=cid%> = true;
            
            break;
            
        }
        
    }

    if(!group_Exists<%=cid%>){
        
        group_Key<%=cid%>.delete(0, group_Key<%=cid%>.length());
        
        group_Keys<%=cid%> = group_Keys<%=cid%> + gKvalue<%=cid%> + <%=rowSeparator%>;
        
        group_Keys_Split<%=cid%> = group_Keys<%=cid%>.split(<%=rowSeparator%>);
    
        aggValues<%=cid%>.delete(0, aggValues<%=cid%>.length());
        
        for(int i = 0; i<pivotNum<%=cid%>-1; i++)
            
            aggValues<%=cid%>.append(<%=fieldSeparator%>);
        
<%if( ("count").equals(aggFunction)){%>

        aggregation<%=cid%>.put(gKvalue<%=cid%>,aggValues<%=cid%>.append(1).append(<%=fieldSeparator%>).toString());

<%}else{
	if(advancedSeparator && JavaTypesManager.isNumberType(javaType)){%>
        
        aggregation<%=cid%>.put(gKvalue<%=cid%>,aggValues<%=cid%>.append(FormatterUtils.format_Number(String.valueOf(<%=inConnName%>.<%=aggColumn%>),<%=thousandsSeparator%>,<%=decimalSeparator%>)).append(<%=fieldSeparator%>).toString());
  
  <%}else{%>
		
        aggregation<%=cid%>.put(gKvalue<%=cid%>,aggValues<%=cid%>.append(<%=inConnName%>.<%=aggColumn%>).append(<%=fieldSeparator%>).toString());

<%
	}
  }%>
    }else{

        String aggStr<%=cid%> = (String)aggregation<%=cid%>.get(gKvalue<%=cid%>);
        
        String[] aggStrSpli<%=cid%> = aggStr<%=cid%>.split(<%=fieldSeparator%>);
        
        if(aggStrSpli<%=cid%>.length < pivotNum<%=cid%>){
            

    		for(int i = 0 ; i<pivotNum<%=cid%> - aggStrSpli<%=cid%>.length-1; i++){
                    
                aggStr<%=cid%> = aggStr<%=cid%> + <%=fieldSeparator%>;
            
            }    
               
            aggValues<%=cid%>.delete(0,aggValues<%=cid%>.length());
            
<%if( ("count").equals(aggFunction)){%>

            aggStr<%=cid%> = aggStr<%=cid%> + aggValues<%=cid%>.append(1).toString() + <%=fieldSeparator%>;

<%}else{
	if(advancedSeparator && JavaTypesManager.isNumberType(javaType)){%>
            
            aggStr<%=cid%> = aggStr<%=cid%> + aggValues<%=cid%>.append(FormatterUtils.format_Number(String.valueOf(<%=inConnName%>.<%=aggColumn%>),<%=thousandsSeparator%>,<%=decimalSeparator%>)).toString() + <%=fieldSeparator%>;

  <%}else{%>
	
            aggStr<%=cid%> = aggStr<%=cid%> + aggValues<%=cid%>.append(<%=inConnName%>.<%=aggColumn%>).toString() + <%=fieldSeparator%>;
	
<%	}
  }%>
  
            aggregation<%=cid%>.remove(gKvalue<%=cid%>);
            
            aggregation<%=cid%>.put(gKvalue<%=cid%>,aggStr<%=cid%>);

        }else{
            
            //step1: get the index of the pivot
            int pivotIndex<%=cid%> = 0 ;
            
            for(int i = 0; i<pivot_Keys_Split<%=cid%>.length; i++){
                
                if(pivot_Keys_Split<%=cid%>[i].equals(<%=inConnName%>.<%=pivotColumn%>)){
                    
                    pivotIndex<%=cid%> = i;
                    
                    break;
                    
                }
                
            }
            
            //step2: process the splitted data according to function
            
            String[] aggStrSplit<%=cid%> = aggStr<%=cid%>.split(<%=fieldSeparator%>);
            
            aggValues<%=cid%>.delete(0,aggValues<%=cid%>.length());
        
            <%  
            if( ("sum").equals(aggFunction) ){
            %>

                <%=columnTypeValue%> sum<%=cid%> ;
                
                if (("").equals(aggStrSplit<%=cid%>[pivotIndex<%=cid%>])){
                	
                	<%if(("BigDecimal").equals(columnType)){%>
					
					  sum<%=cid%> = <%=columnType%>.parse<%=columnTypeFunName%>(<%=inConnName%>.<%=aggColumn%> + "");
                    
                      aggStrSplit<%=cid%>[pivotIndex<%=cid%>] = String.valueOf(sum<%=cid%>);  
					  
					<%}else{%>

					  sum<%=cid%> = <%=columnType%>.parse<%=columnTypeFunName%>(<%=inConnName%>.<%=aggColumn%> + "");
                    
                      aggStrSplit<%=cid%>[pivotIndex<%=cid%>] = String.valueOf(sum<%=cid%>);                      
                      
					<%}%>
                    
                }else{
               		<%if(("BigDecimal").equals(columnType) || ("Double").equals(columnType)||("Float").equals(columnType)){
               			if(advancedSeparator){%>
               			
							java.math.BigDecimal sourceBD_<%=cid%> = new java.math.BigDecimal(FormatterUtils.unformat_Number(aggStrSplit<%=cid%>[pivotIndex<%=cid%>],<%=thousandsSeparator%>,<%=decimalSeparator%>));
							java.math.BigDecimal targetBD_<%=cid%> = new java.math.BigDecimal(aggValues<%=cid%>.append(<%=inConnName%>.<%=aggColumn%>).toString());
					  		aggStrSplit<%=cid%>[pivotIndex<%=cid%>] = FormatterUtils.format_Number(sourceBD_<%=cid%>.add(targetBD_<%=cid%>).toString(),<%=thousandsSeparator%>,<%=decimalSeparator%>);
					  
						<%}else{%>

					  		aggStrSplit<%=cid%>[pivotIndex<%=cid%>] = (new java.math.BigDecimal(aggStrSplit<%=cid%>[pivotIndex<%=cid%>])).add(new java.math.BigDecimal(aggValues<%=cid%>.append(<%=inConnName%>.<%=aggColumn%>).toString())).toString();
					  
						<%}
					}else{%>
					
					  sum<%=cid%> = (<%=columnTypeValue%>)(<%=columnType%>.parse<%=columnTypeFunName%>(aggStrSplit<%=cid%>[pivotIndex<%=cid%>]) + <%=columnType%>.parse<%=columnTypeFunName%>(aggValues<%=cid%>.append(<%=inConnName%>.<%=aggColumn%>).toString()));
                	
                	  aggStrSplit<%=cid%>[pivotIndex<%=cid%>] = String.valueOf(sum<%=cid%>);
                	  
					<%}%>
				
				}
            
            <%
            }else if( ("count").equals(aggFunction) ){
            %>
                int count<%=cid%> = 1;
                
                if (!("").equals(aggStrSplit<%=cid%>[pivotIndex<%=cid%>]))
            
                    count<%=cid%> = Integer.parseInt(aggStrSplit<%=cid%>[pivotIndex<%=cid%>]) + 1;
                    
                aggStrSplit<%=cid%>[pivotIndex<%=cid%>] = String.valueOf(count<%=cid%>);
            
            <%
            }else if( ("max").equals(aggFunction) ){
               	if(advancedSeparator){%>
               		
               		String unformatedSourceStr_<%=cid%> = FormatterUtils.unformat_Number(aggValues<%=cid%>.append(<%=inConnName%>.<%=aggColumn%>).toString(),<%=thousandsSeparator%>,<%=decimalSeparator%>);
            		String unformatedTargetStr_<%=cid%> = FormatterUtils.unformat_Number(aggStrSplit<%=cid%>[pivotIndex<%=cid%>],<%=thousandsSeparator%>,<%=decimalSeparator%>);
	                if(Float.parseFloat(unformatedSourceStr_<%=cid%>)>Float.parseFloat(unformatedTargetStr_<%=cid%>))
	                    aggStrSplit<%=cid%>[pivotIndex<%=cid%>] = FormatterUtils.format_Number(aggValues<%=cid%>.toString(),<%=thousandsSeparator%>,<%=decimalSeparator%>);
	                    
	            <%}else{%>
	            
	                if(Float.parseFloat(aggValues<%=cid%>.append(<%=inConnName%>.<%=aggColumn%>).toString())>Float.parseFloat(aggStrSplit<%=cid%>[pivotIndex<%=cid%>]))
	                    aggStrSplit<%=cid%>[pivotIndex<%=cid%>] = aggValues<%=cid%>.toString();
            
            <%
            	}
            }else if( ("min").equals(aggFunction) ){
               	if(advancedSeparator){%>
                
               		String unformatedSourceStr_<%=cid%> = FormatterUtils.unformat_Number(aggValues<%=cid%>.append(<%=inConnName%>.<%=aggColumn%>).toString(),<%=thousandsSeparator%>,<%=decimalSeparator%>);
            		String unformatedTargetStr_<%=cid%> = FormatterUtils.unformat_Number(aggStrSplit<%=cid%>[pivotIndex<%=cid%>],<%=thousandsSeparator%>,<%=decimalSeparator%>);
	                if(Float.parseFloat(unformatedSourceStr_<%=cid%>)<Float.parseFloat(unformatedTargetStr_<%=cid%>))
	                    aggStrSplit<%=cid%>[pivotIndex<%=cid%>] = FormatterUtils.format_Number(aggValues<%=cid%>.toString(),<%=thousandsSeparator%>,<%=decimalSeparator%>);
                    
                <%}else{%>
                
	                if(Float.parseFloat(aggValues<%=cid%>.append(<%=inConnName%>.<%=aggColumn%>).toString())<Float.parseFloat(aggStrSplit<%=cid%>[pivotIndex<%=cid%>]))
	                    aggStrSplit<%=cid%>[pivotIndex<%=cid%>] = aggValues<%=cid%>.toString();
            
            <%
            	}
            }else if( ("first").equals(aggFunction) ){
            %>
            
                if (("").equals(aggStrSplit<%=cid%>[pivotIndex<%=cid%>]))
                
                <%if(advancedSeparator){%>

                    aggStrSplit<%=cid%>[pivotIndex<%=cid%>] = aggValues<%=cid%>.append(FormatterUtils.format_Number(String.valueOf(<%=inConnName%>.<%=aggColumn%>),<%=thousandsSeparator%>,<%=decimalSeparator%>)).toString();
                    
                <%}else{%>
                
                    aggStrSplit<%=cid%>[pivotIndex<%=cid%>] = aggValues<%=cid%>.append(String.valueOf(<%=inConnName%>.<%=aggColumn%>)).toString();
            
            <%
            	}
            }else if( ("last").equals(aggFunction) ){
            	if(advancedSeparator){%>
    
                    aggStrSplit<%=cid%>[pivotIndex<%=cid%>] = aggValues<%=cid%>.append(FormatterUtils.format_Number(String.valueOf(<%=inConnName%>.<%=aggColumn%>),<%=thousandsSeparator%>,<%=decimalSeparator%>)).toString();
                
            <%}else{%>
                    aggStrSplit<%=cid%>[pivotIndex<%=cid%>] = aggValues<%=cid%>.append(String.valueOf(<%=inConnName%>.<%=aggColumn%>)).toString();
            	
            	<%}
            }
            %> 
            
            //step3: write new data back to string
            
            aggValues<%=cid%>.delete(0, aggValues<%=cid%>.length());
            
            for(int i = 0; i<aggStrSplit<%=cid%>.length; i++){
                
                aggValues<%=cid%>.append(aggStrSplit<%=cid%>[i]);
                aggValues<%=cid%>.append(<%=fieldSeparator%>);
                
            }
            
            aggregation<%=cid%>.remove(gKvalue<%=cid%>);
          
            aggregation<%=cid%>.put(gKvalue<%=cid%>,aggValues<%=cid%>.toString());            
            
        }
        
        } 

    nb_line_<%=cid%>++;
   
<%
        }
    }
}
%>
