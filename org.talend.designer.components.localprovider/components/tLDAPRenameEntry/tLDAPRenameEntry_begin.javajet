<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn 
    org.talend.core.model.process.IConnection
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.process.IConnectionCategory
    java.util.List
" 
class="LDAPInput"
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	String host=ElementParameterParser.getValue(node, "__HOST__");
	String port=ElementParameterParser.getValue(node, "__PORT__");
	String baseDN=ElementParameterParser.getValue(node, "__BASEDN__");
	String protocol=ElementParameterParser.getValue(node, "__PROTOCOL__");
	String advanced=ElementParameterParser.getValue(node, "__ADVANCEDCA__");
	String storepath=ElementParameterParser.getValue(node, "__STORECA__");
	String storepwd = ElementParameterParser.getValue(node, "__STORECAPWD__");
	String user =ElementParameterParser.getValue(node, "__USER__");
	String passwd =ElementParameterParser.getValue(node, "__PASSWD__");
	String referrals=ElementParameterParser.getValue(node, "__REFERRALS__");
	String aliases=ElementParameterParser.getValue(node, "__ALIASES__");
%>
	boolean whetherReject_<%=cid%> = false;
	java.util.Hashtable env_<%=cid%> = new java.util.Hashtable();
	env_<%=cid%>.put(javax.naming.Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.ldap.LdapCtxFactory");
    env_<%=cid%>.put(javax.naming.Context.SECURITY_AUTHENTICATION, "simple");// "none","simple","strong"
    env_<%=cid%>.put(javax.naming.Context.SECURITY_PRINCIPAL, <%=user%>);
    env_<%=cid%>.put(javax.naming.Context.SECURITY_CREDENTIALS, <%=passwd%>);
	env_<%=cid%>.put(javax.naming.Context.REFERRAL, "<%=referrals%>");
	env_<%=cid%>.put("java.naming.ldap.derefAliases","<%=aliases%>");
<%
	if(baseDN == null || baseDN.length()<=2){
%>
	env_<%=cid%>.put(javax.naming.Context.PROVIDER_URL, "ldap://"+<%=host%>+":"+<%=port%>);
<%
	}else{
%>
	env_<%=cid%>.put(javax.naming.Context.PROVIDER_URL, "ldap://"+<%=host%>+":"+<%=port%>+"/"+<%=baseDN%>);
<%
	}
    if(("LDAPS").equals(protocol)){
%>
	env_<%=cid%>.put(javax.naming.Context.SECURITY_PROTOCOL, "ssl");
	env_<%=cid%>.put("java.naming.ldap.factory.socket", "talend.ssl.AdvancedSocketFactory");
<%
		if(("true").equals(advanced)){
%>
	talend.ssl.AdvancedSocketFactory.setCertStorePath(<%=storepath%>);
		  <%if(storepwd !=null && storepwd.length() !=0 ){%>
	talend.ssl.AdvancedSocketFactory.setCertStorePassword(<%=storepwd %>);
<%
			}
		}
    }else if(("TLS").equals(protocol)){
    	if(("true").equals(advanced)){
%>
	talend.ssl.AdvancedSocketFactory.setCertStorePath(<%=storepath%>);
<%
		}
    }
%>
    javax.naming.ldap.InitialLdapContext ctx_<%=cid%> = new javax.naming.ldap.InitialLdapContext(env_<%=cid%>, null);
<%
	if(("TLS").equals(protocol)){
%>
	javax.naming.ldap.StartTlsRequest tldsReq_<%=cid%> = new javax.naming.ldap.StartTlsRequest();
    javax.naming.ldap.StartTlsResponse tls_<%=cid%> =(javax.naming.ldap.StartTlsResponse)ctx_<%=cid%>.extendedOperation(tldsReq_<%=cid%>);
    javax.net.ssl.SSLSession session_<%=cid%> = tls_<%=cid%>.negotiate((javax.net.ssl.SSLSocketFactory)talend.ssl.AdvancedSocketFactory.getDefault());
<%
	}
%>

class LDAPRenameEntryUtil_<%=cid%> {
	
	private java.util.Map<String, javax.naming.directory.Attributes> childs = new java.util.HashMap();
	private java.util.List<String> paths = new java.util.ArrayList();
	
	public void renameWithChilds(String oldName, String newName, javax.naming.ldap.InitialLdapContext ldapCtx) throws Exception {
		this.list(oldName, ldapCtx);
		
		this.destroySubcontext(paths, ldapCtx);
		
		try {
			ldapCtx.rename(oldName, newName);
		} catch (Exception e) {
			this.createSubcontext(paths, paths, childs, ldapCtx);
			
			throw e;
		}
		
		java.util.List<String> newPaths = new java.util.ArrayList();
		for (String childName : paths) {
			newPaths.add(childName.replaceAll(oldName, newName));
		}
		
		this.createSubcontext(newPaths, paths, childs, ldapCtx);
	}
	public void list(String rootName, javax.naming.ldap.InitialLdapContext ldapCtx) throws Exception {
		javax.naming.NamingEnumeration nern =ldapCtx.list(rootName);
		while(nern.hasMore()){
			javax.naming.NameClassPair nameCP= (javax.naming.NameClassPair)nern.next();
			childs.put(nameCP.getName()+","+rootName, ldapCtx.getAttributes(nameCP.getName()+","+rootName));
			list(nameCP.getName()+","+rootName, ldapCtx);
			paths.add(nameCP.getName()+","+rootName);
		} 
	}
	
	public void destroySubcontext(java.util.List<String> paths, javax.naming.ldap.InitialLdapContext ldapCtx)throws Exception {
		for (String childName : paths) {
			ldapCtx.destroySubcontext(childName);
		}
	}
		
	public void createSubcontext(java.util.List<String> newPaths, java.util.List<String> oldPaths,
							 java.util.Map<String, javax.naming.directory.Attributes> childs, 
							javax.naming.ldap.InitialLdapContext ldapCtx)throws Exception {
		for (int i=newPaths.size(); i>0; i-- ) {
			ldapCtx.createSubcontext(newPaths.get(i-1), childs.get(oldPaths.get(i-1)));
		}
	}
	
}




