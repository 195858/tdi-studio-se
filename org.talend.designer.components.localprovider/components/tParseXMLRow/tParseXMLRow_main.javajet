<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn 
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.IConnectionCategory
    org.talend.core.model.process.EConnectionType
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.Map
    java.util.List
    org.talend.core.model.metadata.types.JavaTypesManager
	org.talend.core.model.metadata.types.JavaType
" 
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();

String cid = node.getUniqueName();
String xmlField = ElementParameterParser.getValue(node, "__XMLFIELD__");

List<Map<String, String>> mapping = (List<Map<String,String>>)ElementParameterParser.getObjectValueXML(node, "__MAPPING__");
String loopQuery = ElementParameterParser.getValue(node, "__LOOP_QUERY__"); 
String limit = ElementParameterParser.getValue(node, "__LIMIT__");
if (limit.equals("")) {
	limit = "-1";
}

//get XML field content
String inputConnName = "";
if (node.getIncomingConnections()!=null) {
	for (IConnection incomingConn : node.getIncomingConnections()) {
		if (incomingConn.getLineStyle().equals(EConnectionType.FLOW_MAIN)) {
			inputConnName = incomingConn.getName();
			IMetadataTable inputMetadataTable = incomingConn.getMetadataTable();
			for (IMetadataColumn inputCol : inputMetadataTable.getListColumns()) {
				if(inputCol.getLabel().equals(xmlField))
				{
%>
	String xmlStr_<%=cid%> = <%=inputConnName%>.<%=xmlField%>;
<%
				}
			}
		}
	}
}

List< ? extends IConnection> outputConns = node.getOutgoingSortedConnections();
String outputConnName = "";
if (outputConns!=null && outputConns.size()>0) {
	IConnection outputConn = outputConns.get(0);
	outputConnName = outputConn.getName();  
    IMetadataTable outputMetadata = outputConn.getMetadataTable();
    if (outputMetadata!=null) {
    	List<IMetadataColumn> columns= outputMetadata.getListColumns();
%>

    org.dom4j.io.SAXReader reader_<%=cid%> = new org.dom4j.io.SAXReader();
    org.dom4j.Document doc_<%=cid%>= reader_<%=cid%>.read(new java.io.StringReader(xmlStr_<%=cid%>));
    String ns_<%=cid%> = doc_<%=cid%>.getRootElement().getNamespaceURI();
    java.util.HashMap xmlNameSpaceMap_<%=cid%> = new java.util.HashMap();  
    xmlNameSpaceMap_<%=cid%>.put("ns",ns_<%=cid%>);
    
    org.dom4j.XPath x_<%=cid%> = doc_<%=cid%>.createXPath(<%=loopQuery.replace("/", "/ns:") %>);  
    x_<%=cid%>.setNamespaceURIs(xmlNameSpaceMap_<%=cid%>); 
    
    java.util.List<org.dom4j.tree.AbstractNode> nodeList_<%=cid%> = (java.util.List<org.dom4j.tree.AbstractNode>)x_<%=cid%>.selectNodes(doc_<%=cid%>);	
    
    String str_<%=cid %> = "";
    for (org.dom4j.tree.AbstractNode temp_<%=cid%>: nodeList_<%=cid%>) {
    	nb_line_<%=cid%>++;	
<%
		if (limit.compareTo("-1")!=0) {
%>
    	if (nb_line_<%=cid%>><%=Integer.parseInt(limit)%>) {
    		break;
    	}
<%
		}
		//get the mapping column 
		for (int i=0;i<mapping.size();i++) { 
			for(IMetadataColumn column:columns) {
				if (mapping.get(i).get("SCHEMA_COLUMN")!=null) {
					if (column.getLabel().compareTo(mapping.get(i).get("SCHEMA_COLUMN"))==0) {
        				String query = mapping.get(i).get("QUERY");
        				if(query.trim().length()>0 && query.startsWith("\"")){
        					if(query.startsWith("\"") && query.endsWith("\"")){
        						query = query.substring(1, query.length() - 1);
        					}
        					if (!query.startsWith("@")) {
        	                    if (query.indexOf("@") < 0 && query.indexOf("/") < 0) {
        	                        query = "ns:" + query;
        	                    } else {
        	                        String[] s = query.split("/");
        	                        java.lang.StringBuffer result = new java.lang.StringBuffer();
        	                        for (String tmp : s) {
        	                            if (result.length() > 0) {
        	                                result.append("/");
        	                            }
        	                            if (tmp.length() > 0 && !tmp.startsWith(".") && !tmp.startsWith("@")) {
        	                                result.append("ns:").append(tmp);
        	                            } else {
        	                                result.append(tmp);
        	                            }
        	                        }
        	                        query = result.toString();
        	                    }
	                		}
%>
	org.dom4j.XPath xTmp<%=i%>_<%=cid%> = temp_<%=cid%>.createXPath("<%=query%>");
    xTmp<%=i%>_<%=cid%>.setNamespaceURIs(xmlNameSpaceMap_<%=cid%>);  
    str_<%=cid %> = xTmp<%=i%>_<%=cid%>.valueOf(temp_<%=cid%>);
	if (str_<%=cid %> != null ) {
<%
							String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
							JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
							String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
							if (javaType == JavaTypesManager.STRING || javaType == JavaTypesManager.OBJECT) {
%>
		<%=outputConnName%>.<%=column.getLabel() %> = str_<%= cid %>;
<%
							} else {
								if (javaType == JavaTypesManager.DATE) {
%>
		<%=outputConnName%>.<%=column.getLabel() %> = ParserUtils.parseTo_Date(str_<%= cid %>, <%= patternValue %>);
<%
								} else {
%>
		<%=outputConnName%>.<%=column.getLabel() %> = ParserUtils.parseTo_<%= typeToGenerate %>(str_<%= cid %>);
<%
								}
							}
%>
	}
<%
        				}else{
%>
		<%=outputConnName%>.<%=column.getLabel()%> = <%=inputConnName%>.<%=column.getLabel()%>;
<%
						}
					}
				}
			}
		}
	}
}
%>



			
