<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.core.model.process.IConnection
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.metadata.MetadataTalendType
    java.util.List
    java.util.Map
    java.util.Set
    java.util.HashMap
    java.util.ArrayList
    org.talend.commons.utils.StringUtils
" 
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();



// searching the outgoing schema
IMetadataTable metadata = null;

List<IMetadataTable> metadatas = node.getMetadataList();
if (metadatas != null && metadatas.size() > 0) {
    metadata = metadatas.get(0);
}

// we only generate output if incoming and outgoing schema are defined
if (metadata != null) {

    String debugString = ElementParameterParser.getValue(node, "__DEBUG__");
    boolean debug = false;
    if (debugString.equals("true")) {
        debug = true;
    }

    String useExistingConnection = ElementParameterParser.getValue(
        node,
        "__USE_EXISTING_CONNECTION__"
    );

    String dbhost = ElementParameterParser.getValue(node, "__HOST__");
    String dbport = ElementParameterParser.getValue(node, "__PORT__");
    String dbname = ElementParameterParser.getValue(node, "__DBNAME__");
    String dbuser = ElementParameterParser.getValue(node, "__USER__");
    String dbpass = ElementParameterParser.getValue(node, "__PASS__");
    String encoding = ElementParameterParser.getValue(
        node,
        "__ENCODING__"
    );

    String schemaDB = ElementParameterParser.getValue(
        node,
        "__SCHEMA_DB__"
    );


    String dbh = "dbh_";

    if (useExistingConnection.equals("true")) {
        String connection = ElementParameterParser.getValue(
            node,
            "__CONNECTION__"
        );

        dbh+= connection;
    }
    else {
        dbh+= cid;
    }

    String connectionType = ElementParameterParser.getValue(
        node,
        "__CONNECTION_TYPE__"
    );


    String dbtable = ElementParameterParser.getValue(node, "__TABLE__");
    String dbtablesrc = ElementParameterParser.getValue(node, "__TABLE_SRC__");
    String tableAction = ElementParameterParser.getValue(
        node,
        "__TABLE_ACTION__"
    );


    List<Map<String, String>> sourceKeys =
        (List<Map<String,String>>)ElementParameterParser.getObjectValue(
            node,
            "__SOURCE_KEYS__"
    );


    String useL1 = ElementParameterParser.getValue(node, "__USE_L1__");
    List<Map<String, String>> l1fields = new ArrayList<Map<String, String>>();

    if (useL1.equals("true")) {
        l1fields =
            (List<Map<String,String>>)ElementParameterParser.getObjectValue(
                node,
                "__L1_FIELDS__"
        );
    }

    String useL2 = ElementParameterParser.getValue(node, "__USE_L2__");
    List<Map<String, String>> l2fields = new ArrayList<Map<String, String>>();

    if (useL2.equals("true")) {
        l2fields =
            (List<Map<String,String>>)ElementParameterParser.getObjectValue(
                node,
                "__L2_FIELDS__"
        );
    }

    String startdateField = ElementParameterParser.getValue(
        node,
        "__L2_STARTDATE_FIELD__"
    );
    
    String enddateField = ElementParameterParser.getValue(
        node,
        "__L2_ENDDATE_FIELD__"
    );

    String useActive = ElementParameterParser.getValue(
        node,
        "__USE_L2_ACTIVE__"
    );
    
    String activeField = ElementParameterParser.getValue(
        node,
        "__L2_ACTIVE_FIELD__"
    );
    
    String useVersion = ElementParameterParser.getValue(
        node,
        "__USE_L2_VERSION__"
    );
    
    String versionField = ElementParameterParser.getValue(
        node,
        "__L2_VERSION_FIELD__"
    );


    Map<String, String> typeOfColumn = new HashMap();

    for (Map<String, String> sk : sourceKeys) {
        typeOfColumn.put(sk.get("NAME"), "SK");
    }

    for (Map<String, String> l1field : l1fields) {  
        typeOfColumn.put(l1field.get("NAME"), "L1");
    }

    for (Map<String, String> l2field : l2fields) {
        typeOfColumn.put(l2field.get("NAME"), "L2");
    }

    for (String key : typeOfColumn.keySet()) {
%>
# <%=key%> : <%=typeOfColumn.get(key)%>
<%
    }



%>

use DBI;
use tDB2Output::DB2;

my %desc_<%=cid %> = (
    dbhost        => <%=dbhost %>,
    dbport        => <%=dbport %>,
    dbname        => <%=dbname %>,
    dbtable       => <%=dbtable %>,
    dbuser        => <%=dbuser %>,
    dbpass        => <%=dbpass %>,
    encoding      => <%=encoding %>,
    schemadb      => <%=schemaDB %>,
    schema        => [
<%
        for (IMetadataColumn column: metadata.getListColumns()) {
%>
        {
            name    => '<%=column.getLabel() %>',
            key     => <%=column.isKey() %>,
            type    => '<%=column.getTalendType() %>',
            len     => <%=column.getLength() %>,
            precision => <%=column.getPrecision() %>,
            null    => <%=column.isNullable() %>,
            default => '<%=column.getDefault() %>',
            comment => '<%=column.getComment() %>',
        },
<%
        }
%>
    ],
);

<%
        if (useExistingConnection.equals("false")) {
%>

my $<%=dbh%> = DBI->connect(
    sprintf(
        'dbi:DB2:DATABASE=%s; HOSTNAME=%s; PORT=%s; PROTOCOL=TCPIP;',
        <%=dbname %>,
        <%=dbhost %>,
        <%=dbport %>,
    ),
    <%=dbuser %>,
    <%=dbpass %>,
)
    or die "can't connect to database";
<%
        }
%>

my $sth_<%=cid %>;
my $query;
my $table_exists;

<%
        if (tableAction.equals("DROP_CREATE")
            || tableAction.equals("CREATE_IF_NOT_EXISTS")) {
%>
# We need the table list to know if drop or "create if not exists" is
# relevant
my $tabsth = $<%=dbh%>->prepare(
"
select tabname 
from syscat.tables 
where 
type = 'T'
"
);
#$tabsth->execute(uc $desc_<%=cid %>{schemadb}, uc $desc_<%=cid %>{dbtable})
$tabsth->execute()
    or die "can't execute query : $!";
while (my $row = $tabsth->fetchrow_arrayref()) {
    $table_exists = $row->[0];
    last;
}
<%
        }

        if (tableAction.equals("DROP_CREATE")) {
%>
if ($table_exists) {
    $query = '
DROP TABLE '.<%=dbtable%>.'
';
    $<%=dbh%>->do($query)
        or die "can't drop table";

    # the table does not exist anymore
    $table_exists = 0;
}
<%
        }

        if (tableAction.equals("CREATE")
            || tableAction.equals("DROP_CREATE")
            || tableAction.equals("CREATE_IF_NOT_EXISTS")) {

            if (tableAction.equals("CREATE_IF_NOT_EXISTS")) {
%>
if (not $table_exists) {
<%
            }
%>
# now we create the table
$query = tDB2Output::DB2::getTableCreationQuery(
    tablename  => $desc_<%=cid %>{dbtable},
    schema     => $desc_<%=cid %>{schema},
);

$<%=dbh%>->do(
    $query
)
    or die "can't create table\n===\n$query\n===\n";
<%
            if (tableAction.equals("CREATE_IF_NOT_EXISTS")) {
%>
}
<%
            }
        }

        if (tableAction.equals("CLEAR")) {
%>
$query = '
DELETE
  FROM '.<%=dbtable%>.'
';

$<%=dbh%>->do($query)
    or die "can't clear table";
<%
        }
%>
my $before_l1_update_<%=cid%> = [gettimeofday];

<%
    if (debug) {
%>
            print "[<%=cid%>] table action <%=tableAction%> sql\n", 
                  $query, "\n";
            print( 
                      "[<%=cid%>] table action done\n",
                      "[<%=cid%>] ", 
                      tv_interval(
                          $before_l1_update_<%=cid%>, 
                          [gettimeofday]
                      ),"\n"
                 );
<%
    }
%>



<%  
    if( useL1.equals("true") ) {
        List setcols = new ArrayList();
        List selcols = new ArrayList();
        List joinclause = new ArrayList();
        List whereclause = new ArrayList();

        for (Map<String, String> sk : sourceKeys) {
            joinclause.add(
                "\n    d." + 
                sk.get("NAME")+
                " = t." + 
                sk.get("NAME")
            );
        }

        for (Map<String, String> l1field : l1fields) {
            setcols.add(
                "\n  d." + 
                l1field.get("NAME")
            );
        }

        for (Map<String, String> l1field : l1fields) {
            selcols.add(
                "\n  t." + 
                l1field.get("NAME")
            );
        }


        for (Map<String, String> l1field : l1fields) {
            whereclause.add(
                "\n  d." + 
                l1field.get("NAME")+
                " <> t." + 
                l1field.get("NAME")
            );
        }
    
        String setcolsString = StringUtils.join(
            setcols.toArray(),
            ", "
        );

        String selcolsString = StringUtils.join(
            selcols.toArray(),
            ", "
        );
    
        String joinclauseString = StringUtils.join(
            joinclause.toArray(),
            "AND "
        );
    
        String whereclauseString = StringUtils.join(
            whereclause.toArray(),
            " OR "
        );

%>	



# SCD TYPE 1
my $l1_update_query = '
UPDATE '.<%=dbtable%>.' d
SET ( <%=setcolsString%> )=( 
    select <%=selcolsString%>
    FROM '.<%=dbtablesrc%>.' t
    WHERE <%=joinclauseString%>
    AND (
        <%=whereclauseString%>
    )
) 
WHERE exists ( select 1
                 FROM '.<%=dbtablesrc%>.' t
                 WHERE <%=joinclauseString%>
                 AND (
                     <%=whereclauseString%>
                 )
             )
'
;

$<%=dbh%>->do($l1_update_query);

<%
    if (debug) {
%>
            print "[<%=cid%>] l1 update sql\n", 
                  $l1_update_query, "\n";
            print( 
                      "[<%=cid%>] l1 update done\n",
                      "[<%=cid%>] ", 
                      tv_interval(
                          $before_l1_update_<%=cid%>, 
                          [gettimeofday]
                      ),"\n"
                 );
<%
    }
%>

<%
    }
%>

<%  
        List setcols = new ArrayList();
        List joinclause = new ArrayList();
        List whereclause = new ArrayList();
        List outerwhereclause = new ArrayList();

        for (Map<String, String> sk : sourceKeys) {
            joinclause.add(
                "\n d." + 
                sk.get("NAME")+
                " = t." + 
                sk.get("NAME")
            );

            outerwhereclause.add(
                "\n d." + 
                sk.get("NAME")+
                " is null "
            );

        }



        for (Map<String, String> l2field : l2fields) {
            whereclause.add(
                "\n d." + 
                l2field.get("NAME")+
                " <> t." + 
                l2field.get("NAME")
            );
        }
    
        String setcolsString = StringUtils.join(
            setcols.toArray(),
            ", "
        );
    
        String joinclauseString = StringUtils.join(
            joinclause.toArray(),
            "\n AND"
        );

        String outerwhereclauseString = StringUtils.join(
            outerwhereclause.toArray(),
            "\n AND"
        );

    
        String whereclauseString = StringUtils.join(
            whereclause.toArray(),
            " OR"
        );

        // insert query generation
        List colnames = new ArrayList();

        // first we iterate on schema columns...
        for (IMetadataColumn column: metadata.getListColumns()) {
            if (typeOfColumn.containsKey(column.getLabel())) {
                colnames.add(
                    column.getLabel()
                );
            }
        }

        String l2SelectString = StringUtils.join(colnames.toArray(), "\n, t.");
    
        // then we add L2 dedicated columns to store historical informations
        if (useL2.equals("true")) {
            colnames.add(startdateField);

            //colnames.add(enddateField);
  
            if (useActive.equals("true")) {
                colnames.add(
                    activeField
                );
            }
    
            if (useVersion.equals("true")) {
                colnames.add(
                    versionField
                );
            }
        }
    
        String colnamesString = StringUtils.join(colnames.toArray(), "\n, ");
        String dateFormat = ElementParameterParser.getValue(
            node,
            "__DATE_FORMAT__"
        );

    if( useL2.equals("true") ) {
%>	
# SCD TYPE 2 : EXPIRATION DATE
my $l2_expiration_query = '
UPDATE '.<%=dbtable%>." d
SET 
<%=enddateField%> = '$_globals{job_execution_datetime}'
<%
    if (useActive.equals("true")) {
%>
    , <%=activeField%> = 0
<%
    }
%>
WHERE exists ( select 1
                 FROM ".<%=dbtablesrc%>.' t
                 WHERE <%=joinclauseString%>
                 AND (
                         <%=whereclauseString%>
                     )
             )
AND d.<%=enddateField%> is null
'
;

$<%=dbh%>->do($l2_expiration_query);

<%
    if (debug) {
%>
            print "[<%=cid%>] l2 expiration date sql\n", 
                  $l2_expiration_query, "\n";
            print( 
                      "[<%=cid%>] l2 expiration date done\n",
                      "[<%=cid%>] ", 
                      tv_interval(
                          $before_l1_update_<%=cid%>, 
                          [gettimeofday]
                      ),"\n"
                 );
<%
    }
%>

# SCD TYPE 2 : NEW ACTIVE ROW
my $l2_new_active_query = "
INSERT INTO ".<%=dbtable%>."(
<%=colnamesString%>
)
select
  t.<%=l2SelectString%>
, '$_globals{job_execution_datetime}'
<%
    if (useActive.equals("true")) {
%>
, 1
<%
    }
%>
<%
    if (useVersion.equals("true")) {
%>
    , d.<%=versionField%> + 1
<%
    }
%>
FROM ".
<%=dbtablesrc%>." t,".
<%=dbtable%>." d
WHERE
<%=joinclauseString%>  
AND ( 
<%=whereclauseString%>
)
AND d.<%=enddateField%> = '$_globals{job_execution_datetime}'
"
;


$<%=dbh%>->do($l2_new_active_query);

<%
    if (debug) {
%>
            print "[<%=cid%>] l2 new active row sql\n", 
                  $l2_new_active_query, "\n";
            print( 
                      "[<%=cid%>] l2 new active row done\n",
                      "[<%=cid%>] ", 
                      tv_interval(
                          $before_l1_update_<%=cid%>, 
                          [gettimeofday]
                      ),"\n"
                 );
<%
    }
%>

<%
    }
%>


# NEW ROWS ( TYPE 1 or 2 )
my $new_rows_query = "
INSERT INTO ".<%=dbtable%>."(
<%=colnamesString%>
)
select
  t.<%=l2SelectString%>
<%
    if( useL2.equals("true") ){
%>
, '$_globals{job_execution_datetime}'
<%
    if (useActive.equals("true")) {
%>
, 1
<%
    }
%>
<%
    if (useVersion.equals("true")) {
%>
    , 1
<%
    }
%>

<%
    }//l2 fields are defined
%>


FROM ".
<%=dbtablesrc%>." t LEFT JOIN ".
<%=dbtable%>." d
ON
<%=joinclauseString%>  
WHERE ( 
<%=outerwhereclauseString%>
)
"
;

$<%=dbh%>->do($new_rows_query);

<%
    if (debug) {
%>
            print "[<%=cid%>] l2 new rows sql\n", 
                  $new_rows_query, "\n";
            print( 
                      "[<%=cid%>] new rows done\n",
                      "[<%=cid%>] ", 
                      tv_interval(
                          $before_l1_update_<%=cid%>, 
                          [gettimeofday]
                      ),"\n"
                 );

<%
    }
%>




<%
}
else {
%>
# no code generated until input and output schema defined
<%
}
%>
