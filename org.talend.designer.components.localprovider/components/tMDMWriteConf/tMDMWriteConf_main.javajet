<%@ jet 
  imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.IConnectionCategory
    org.talend.core.model.metadata.types.JavaTypesManager
    org.talend.core.model.metadata.types.JavaType    
    java.util.List
    java.util.Map
  "
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();
String destination = ElementParameterParser.getValue(node, "__DESTINATION__");
boolean withReport = ("true").equals(ElementParameterParser.getValue(node,"__WITHREPORT__"));
String xmlField = ElementParameterParser.getValue(node,"__XMLFIELD__");
String needCheck = ElementParameterParser.getValue(node,"__ISINVOKE__");
boolean isMassInsert =("true").equals(ElementParameterParser.getValue(node,"__EXTENDINSERT__"));
String numMassInsert = ElementParameterParser.getValue(node,"__COMMIT_LEVEL__");
String sourceName = ElementParameterParser.getValue(node,"__SOURCE__");
boolean dieOnError = ("true").equals(ElementParameterParser.getValue(node,"__DIE_ON_ERROR__"));
String isUpdate = ElementParameterParser.getValue(node,"__ISUPDATE__");
List<Map<String,String>> keysReturn = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__RETURN_IDS__");
List<IMetadataTable> metadatas = node.getMetadataList();

if (destination != null && !"".equals(destination)) {
  cid = destination;
}

if (metadatas != null && metadatas.size()>0) { 
  IMetadataTable metadata = metadatas.get(0);

  if (metadata != null) { 
    String rejectConnName = null;
    List<? extends IConnection> rejectConns = node.getOutgoingConnections("REJECT");

    if (rejectConns != null && rejectConns.size() > 0) {
      IConnection rejectConn = rejectConns.get(0);
      rejectConnName = rejectConn.getName();
    }
    List<IMetadataColumn> rejectColumnList = null;
    IMetadataTable metadataTable = node.getMetadataFromConnector("REJECT");
    String outConnName = null;

    if (metadataTable != null) {
      rejectColumnList = metadataTable.getListColumns();      
    }
    List<? extends IConnection> outgoingConns = node.getOutgoingSortedConnections();

    for(IConnection tmpconn : outgoingConns) {
      if (tmpconn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
        if(rejectConnName==null || !rejectConnName.equals(tmpconn.getName())){
          outConnName=tmpconn.getName();
        }%>
        <%=tmpconn.getName() %> = null;
      <%
      }
    }

    if (outConnName != null) {
    %>
      <%=outConnName %> = new <%=outConnName %>Struct();
      <%=outConnName %>.<%=xmlField %> = strXmlField_<%=cid %>;
    <%}%>
    input_<%=cid %> = strXmlField_<%=cid %>;
    org.talend.mdm.webservice.WSItemPK wspk_<%=cid %>;

    try {
      org.talend.mdm.webservice.WSPutItem item_<%=cid %> = new org.talend.mdm.webservice.WSPutItem(dataCluster_<%=cid %>,input_<%=cid %>,dataModel_<%=cid %>, <%=isUpdate %>);

      <%
      if (withReport) {%>
        org.talend.mdm.webservice.WSPutItemWithReport itemReport_<%=cid %> = new org.talend.mdm.webservice.WSPutItemWithReport(item_<%=cid %>,<%=sourceName %>,<%=needCheck %>);

        <%if (isMassInsert) {%>
          miList_<%=cid %>.add(itemReport_<%=cid %>);

          if (miList_<%=cid %>.size() >= <%=numMassInsert %>) {
            xtentisWS_<%=cid %>.putItemWithReportArray(miList_<%=cid %>.toArray(new org.talend.mdm.webservice.WSPutItemWithReport[<%=numMassInsert %>]));
            miList_<%=cid %>.clear();
          }
        <%} else {%>
          wspk_<%=cid %> = xtentisWS_<%=cid %>.putItemWithReport(itemReport_<%=cid %>);
        <%
        }

        if (outConnName !=null && !isMassInsert && keysReturn.size() > 0) {
        
          for (int i = 0; i < keysReturn.size(); i++){
            Map<String,String> map = keysReturn.get(i);
            %>
            <%=outConnName %>.<%=map.get("OUTPUT_COLUMN")%>= wspk_<%=cid%>.getIds(<%=i %>);
          <%
          }
        }
      } else {
      
        if (isMassInsert) {
        %>
          miList_<%=cid %>.add(item_<%=cid %>);

          if (miList_<%=cid %>.size() >= <%=numMassInsert %>) {
            xtentisWS_<%=cid %>.putItemArray(miList_<%=cid %>.toArray(new org.talend.mdm.webservice.WSPutItem[<%=numMassInsert %>]));
            miList_<%=cid %>.clear();
          }
        <%
        } else {%>
          wspk_<%=cid %> = xtentisWS_<%=cid %>.putItem(item_<%=cid %>);

          <%
          if (outConnName !=null && !isMassInsert && keysReturn.size() > 0) {
            for (int i = 0; i < keysReturn.size(); i++){
              Map<String,String> map = keysReturn.get(i);
              %>
              <%=outConnName %>.<%=map.get("OUTPUT_COLUMN")%>= wspk_<%=cid%>.getIds(<%=i %>);
            <%
            }
          }
        }
      }
      %>
    } catch (Exception e) {
      <%if (dieOnError) {%>
        throw(e);
      <%} else {

        if (rejectConnName != null) {
          if (outConnName != null) {%>
            <%=outConnName %> = null;
          <%}%>
          <%=rejectConnName %> = new <%=rejectConnName %>Struct();
          <%=rejectConnName %>.<%=xmlField %> = strXmlField_<%=cid %>;
          <%=rejectConnName %>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
        <%} else {%>
          System.err.println(e.getMessage());
        <%}
      }%>
    }
    nb_line_<%=cid %>++;
  <%
  }
}%>
