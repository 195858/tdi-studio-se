<%@ jet 
	imports="
		org.talend.core.model.process.INode
		org.talend.core.model.process.ElementParameterParser  
		org.talend.core.model.metadata.IMetadataTable
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
		java.util.List
		java.util.Map
	"
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();

List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
    IMetadataTable metadata = metadatas.get(0);
    if (metadata!=null) {
        String cid = node.getUniqueName();
        String changetype = ElementParameterParser.getValue(node, "__CHANGETYPE__");
        boolean flushOnRow = ("true").equals(ElementParameterParser.getValue(node, "__FLUSHONROW__"));		
        String flushMod = ElementParameterParser.getValue(node, "__FLUSHONROW_NUM__");
        
        List<Map<String, String>> multiValueColumns = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__MULTIVALUECOLUMNS__");
        List<Map<String, String>> modifyColumns = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__MODIFYCONFIG__");
%>
		//////////////////////////
<%
    	List< ? extends IConnection> conns = node.getIncomingConnections();
    	for (IConnection conn : conns) {
    		if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {    		
%> 
		StringBuilder sb_<%=cid %> = new StringBuilder();
		boolean needSeparator_<%=cid %> = false;
		boolean canOutput_<%=cid %> = false;				   		
<%		
    			boolean generateOneAlready = false; //only for Modify append the char '-'
    			List<IMetadataColumn> columns = metadata.getListColumns();
    			int sizeColumns = columns.size();
    			boolean firstLoop = true;
    			for (int i = 0; i < sizeColumns; i++) {    				
    				IMetadataColumn column = columns.get(i);
					JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
					boolean isPrimitive = JavaTypesManager.isJavaPrimitiveType( javaType, column.isNullable());					
%>
		String value_<%=column.getLabel() %>_<%=cid %> = "";
<%					
					if(!isPrimitive) {
%>   				
	    if(<%=conn.getName() %>.<%=column.getLabel() %> != null && !("").equals(<%=conn.getName() %>.<%=column.getLabel() %>)) {
<%
} 
%>
    	value_<%=column.getLabel() %>_<%=cid %> =  						
<%
    				String pattern = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
    				if (javaType == JavaTypesManager.DATE && pattern != null && pattern.trim().length() != 0) {
%>
		FormatterUtils.format_Date(<%=conn.getName() %>.<%=column.getLabel() %>, <%= pattern %>);
<%				
					} else if(javaType == JavaTypesManager.STRING) {
%>
		<%=conn.getName() %>.<%=column.getLabel() %>;
<%
					} else if (javaType == JavaTypesManager.BIGDECIMAL) {
%>
		String.valueOf(<%=column.getPrecision() == null? conn.getName() + "." + column.getLabel() : conn.getName() + "." + column.getLabel() + ".setScale(" + column.getPrecision() + ", java.math.RoundingMode.HALF_UP)" %>);
<%
					} else {
%>
		String.valueOf(<%=conn.getName() %>.<%=column.getLabel() %>);
<%				
}					
%>
<% 
	if(i==0) {
%>		
		util_<%=cid %>.breakString(sb_<%=cid %>, dn_<%=cid %> + value_<%=column.getLabel() %>_<%=cid %>, wrap_<%=cid %>);
<%if(!"none".equals(changetype)){%>		
        util_<%=cid %>.breakString(sb_<%=cid %>, changetype_<%=cid %> + "<%=changetype %>", wrap_<%=cid %>);
<%}%>

<%if("delete".equals(changetype)){%>
	canOutput_<%=cid %> = true;        
<%}%> 

<%
	if(!isPrimitive) {
%>
	    }
<%					
	} 
%>   
<%
	continue;
 } 
%>						
<% if ("delete".equals(changetype)) {
	if(firstLoop){
	%>
<%
	if(!isPrimitive) {
%>
	    }
<%					
	} 
%> 		
	<%	
	}
	firstLoop = false; 
	break; 
} %>
<% if ("modify".equals(changetype)) {
		String operation = null;
		boolean isMultiValue = false;   
		String separator = null;
		for(Map<String, String> line:modifyColumns){// search in the configuration table
				String columnName = line.get("SCHEMA_COLUMN");				
				if(column.getLabel().equals(columnName)){
					operation = line.get("OPERATION");					
					isMultiValue = "true".equals(line.get("ISMULTIVALUE"));
					separator = line.get("SEPARATOR");										
					break;
				}
		}	
%>

<%if(!"none".equals(operation)){%>
	if(needSeparator_<%=cid %>){
		sb_<%=cid %>.append("-\n");
	}  
	util_<%=cid %>.breakString(sb_<%=cid %>, "<%=operation %>: " + "<%=column.getLabel() %>", wrap_<%=cid %>);
	<%if(isMultiValue){%>		
		String[] values_<%=column.getLabel() %>_<%=cid %> = value_<%=column.getLabel() %>_<%=cid %>.split(<%=separator %>);
		for(String item_<%=cid %> : values_<%=column.getLabel() %>_<%=cid %>){
			util_<%=cid %>.breakString(sb_<%=cid %>, "<%=column.getLabel() %>: " + item_<%=cid %>, wrap_<%=cid %>);
		}				
	<%}else{%>
		util_<%=cid %>.breakString(sb_<%=cid %>, "<%=column.getLabel() %>: " + value_<%=column.getLabel() %>_<%=cid %>, wrap_<%=cid %>); 
	<%}%>
	<%if(i==sizeColumns-1){%>
	sb_<%=cid %>.append("-\n");
	<%}%>
	needSeparator_<%=cid %> = true;
	canOutput_<%=cid %> = true;   	
<%}%>

<%
}// here end the if modify
%>
<% if ("add".equals(changetype) || "none".equals(changetype)) {   
		boolean isMultiValue = false;
		String separator = null;
		for(Map<String, String> line:multiValueColumns){// search in the configuration table
				String columnName = line.get("SCHEMA_COLUMN");				
				if(column.getLabel().equals(columnName)){
					isMultiValue = "true".equals(line.get("ISMULTIVALUE"));
					separator = line.get("SEPARATOR");										
					break;
				}
		}
%>
	<%if(isMultiValue){%>
		String[] values_<%=column.getLabel() %>_<%=cid %> = value_<%=column.getLabel() %>_<%=cid %>.split(<%=separator %>);
		for(String item_<%=cid %> : values_<%=column.getLabel() %>_<%=cid %>){
			util_<%=cid %>.breakString(sb_<%=cid %>, "<%=column.getLabel() %>: " + item_<%=cid %>, wrap_<%=cid %>);
		}				
	<%}else{%>
		util_<%=cid %>.breakString(sb_<%=cid %>, "<%=column.getLabel() %>: " + value_<%=column.getLabel() %>_<%=cid %>, wrap_<%=cid %>);
	<%}%>
	canOutput_<%=cid %> = true;
<%
}// here end the if add
%>
<% if ("modrdn".equals(changetype)) {
%>
		util_<%=cid %>.breakString(sb_<%=cid %>, "<%=column.getLabel() %>: " + value_<%=column.getLabel() %>_<%=cid %>, wrap_<%=cid %>);
		canOutput_<%=cid %> = true;
<%
}// here end the if modrdn
%>

<%
	if(!isPrimitive) {
%>
	    }
<%					
	} 
%>   				
<% 
}//here end the last for, the List "columns"
%>						
		sb_<%=cid %>.append('\n');		
		
	if(canOutput_<%=cid %>){		
		pw_<%=cid %>.write(sb_<%=cid %>.toString());
		<% if(flushOnRow) { %>
            if(nb_line_<%=cid %>%<%=flushMod %> == 0) {		
    		pw_<%=cid %>.flush();
    		}
		<%
			}
		%> 		
		
    	nb_line_<%=cid %>++;
    }	
<%
	}
}//here end the first for, the List "conns"
%>    	
    	//////////////////////////
<%
  }
}  
%>
