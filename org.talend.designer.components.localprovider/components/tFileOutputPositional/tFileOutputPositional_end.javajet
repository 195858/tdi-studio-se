<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.ElementParameterParser
		java.util.List
	"
%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	
    String filename = ElementParameterParser.getValue(node, "__FILENAME__");
    boolean isDeleteEmptyFile = ("true").equals(ElementParameterParser.getValue(node, "__DELETE_EMPTYFILE__"));
	boolean isAppend = ("true").equals(ElementParameterParser.getValue(node,"__APPEND__"));
	
	boolean useStream = ("true").equals(ElementParameterParser.getValue(node,"__USESTREAM__"));

	String parallelize = ElementParameterParser.getValue(node,"__PARALLELIZE__");
	boolean isParallelize = (parallelize!=null&&!("").equals(parallelize))?("true").equals(parallelize):false;

	List<IMetadataTable> metadatas = node.getMetadataList();
	if ((metadatas!=null)&&(metadatas.size()>0)) {
		IMetadataTable metadata = metadatas.get(0);
		if (metadata!=null) {
%>
<% 
	if(codeGenArgument.getIsRunInMultiThread()){
%>
	synchronized (multiThreadLockWrite) {
<%
	}
	if (codeGenArgument.subTreeContainsParallelIterate()) {
%>
	synchronized (lockWrite) {
<% 
	}
	if (isParallelize) {
%>
	Object[] pLockWrite = (Object[])globalMap.get("PARALLEL_LOCK_WRITE");
	synchronized (pLockWrite) {
<% 
	}
%>
	out<%=cid %>.close();
<% 
	if ( isParallelize) {
%>
    } 
<%
    }
	if (codeGenArgument.subTreeContainsParallelIterate()) {
%>
	}
<% 
	}
	if(codeGenArgument.getIsRunInMultiThread()){
%>
	}
<%
	}
%>
	globalMap.put("<%=cid %>_NB_LINE",nb_line_<%=cid %>);
<%
		}
	}
%>

<%if(!useStream && !isAppend && isDeleteEmptyFile){%>
	if(nb_line_<%=cid %> == 0){
		new java.io.File(<%=filename %>).delete();
	}		
<%}%>
