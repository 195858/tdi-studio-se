<%@ jet
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.process.ElementParameterParser
    java.util.List
    java.util.Map
    java.util.ArrayList
    org.talend.commons.utils.StringUtils
"
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

String rowSeparator = ElementParameterParser.getValue(
    node,
    "__ROWSEPARATOR__"
);

List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
    IMetadataTable metadata = metadatas.get(0);
    if (metadata!=null) {

        List<Map<String, String>> formats =
            (List<Map<String,String>>)ElementParameterParser.getObjectValue(
                node,
                "__FORMATS__"
            );

        List printfValues = new ArrayList();
        List printfFormats = new ArrayList();

        for (int i = 0; i < formats.size(); i++) {
            Map<String, String> format = formats.get(i);

            boolean useFormatString = false;
            String printfValue = "";
            String printfFormat = "";

            if (!format.get("PADDING_CHAR").equals("' '")
                && !format.get("PADDING_CHAR").equals("'0'")) {
                useFormatString = true;
            }
            
            if (format.get("ALIGN").equals("'C'")) {
                useFormatString = true;
            }

            if (format.get("KEEP").equals("'M'")
                || format.get("KEEP").equals("'R'")) {
                useFormatString = true;
            }

            if (useFormatString) {
                printfFormat = "%s";

                printfValue = "formatString(" + "\n"
+"            string       => $" + cid + "->[" + i + "]," + "\n"
+"            size         => " + format.get("SIZE") + "," + "\n"
+"            padding_char => " + format.get("PADDING_CHAR") + "," + "\n"
+"            align        => " + format.get("ALIGN") + "," + "\n"
+"            keep         => " + format.get("KEEP") + "," + "\n"
+"        )";
            }
            else {
                printfFormat = "%";

                if (format.get("ALIGN").equals("'L'")) {
                    printfFormat += "-";
                }

                if (format.get("PADDING_CHAR").equals("'0'")) {
                    printfFormat += "0";
                }
                
                printfFormat += format.get("SIZE");
                if (format.get("KEEP").equals("'L'")) {
                    printfFormat += "." + format.get("SIZE");
                }

                printfFormat += "s";

                printfValue = "$" + cid + "->[" + i + "]";
            }

            printfFormats.add(printfFormat);
            printfValues.add(printfValue);
        }

        String printfFormatString = StringUtils.join(
            printfFormats.toArray(),
            ""
        );

        String printfValueString = StringUtils.join(
            printfValues.toArray(),
            ",\n        "
        );
%>
    printf {$output_FH_<%=cid %>} (
        '<%=printfFormatString%>'.<%=rowSeparator%>,
        <%=printfValueString%>,
    ) or die "[<%=cid%>] cid%>] failed to write row";

    $nb_line_<%=cid %>++;

<%
    }
}
%>
