<%@ jet 
	package="org.talend.designer.codegen.translators" 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.metadata.IMetadataTable
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.EConnectionType
		org.talend.core.model.process.ElementParameterParser 
		org.talend.designer.codegen.config.CodeGeneratorArgument
		java.util.List
		java.util.Map
		org.talend.core.model.metadata.types.JavaTypesManager
	"
	class="FileOutputPositionalMain"
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();

List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
    IMetadataTable metadata = metadatas.get(0);
    if (metadata!=null) {
        
        String cid = node.getUniqueName();
        
        List<Map<String, String>> formats =
            (List<Map<String,String>>)ElementParameterParser.getObjectValue(
                node,
                "__FORMATS__"
            );
%>

				String tempStringM<%=cid %>= null;
				
				int tempLengthM<%=cid %>= 0;
				
<%
	List< ? extends IConnection> conns = node.getIncomingConnections();
	for (IConnection conn : conns) {
		if ((conn.getLineStyle().equals(EConnectionType.FLOW_MAIN)) || (conn.getLineStyle().equals(EConnectionType.FLOW_REF))) {
			List<IMetadataColumn> columns = metadata.getListColumns();
			int sizeColumns = columns.size();
			for (int i = 0; i < sizeColumns; i++) {
				IMetadataColumn column = columns.get(i);
				Map<String,String> format=formats.get(i);
				
				%>
				
				
				
				//get  and format output String begin
    			tempStringM<%=cid %>=<%				
				if(JavaTypesManager.isJavaPrimitiveType( column.getTalendType(), column.isNullable()) ) {%>
					String.valueOf(<%=conn.getName() %>.<%=column.getLabel() %>)<%					
				} else {%>
					(<%=conn.getName() %>.<%=column.getLabel() %> == null) ? 
					"": String.valueOf(<%=conn.getName() %>.<%=column.getLabel() %>)<%
				}%> ;
    			tempLengthM<%=cid %>=tempStringM<%=cid %>.length();
    			
            	if (tempLengthM<%=cid %> > <%=format.get("SIZE")%>) {
                    <%
                    if (format.get("KEEP").equals("\'A\'")) {%>
                        tempStringM<%=cid %> = tempStringM<%=cid %>.substring(tempLengthM<%=cid %>-<%=format.get("SIZE")%>);
                    <%
                    } else if (format.get("KEEP").equals("\'L\'")) {%>
                        tempStringM<%=cid %> = tempStringM<%=cid %>.substring(tempLengthM<%=cid %>-<%=format.get("SIZE")%>);
                    <%
                    } else if (format.get("KEEP").equals("\'M\'")) {%>
                        int begin<%=cid %>=(tempLengthM<%=cid %>-<%=format.get("SIZE")%>)/2;
                        tempStringM<%=cid %> = tempStringM<%=cid %>.substring(begin<%=cid %>, begin<%=cid %>+<%=format.get("SIZE")%>);
                    <%
                    } else {%>
                        tempStringM<%=cid %> = tempStringM<%=cid %>.substring(0, <%=format.get("SIZE")%>);
                    <%
                    }%>
                }else if(tempLengthM<%=cid %><<%=format.get("SIZE")%>){
                    StringBuilder result<%=cid %> = new StringBuilder();
                    <%
                    if (format.get("ALIGN").equals("\'L\'")) {
                    %>
                        result<%=cid %>.append(tempStringM<%=cid %>);
                        for(int i=0; i< <%=format.get("SIZE")%>-tempLengthM<%=cid %>; i++){
                            result<%=cid %>.append(<%=format.get("PADDING_CHAR")%>);
                        }
                        tempStringM<%=cid %> = result<%=cid %>.toString();
                    <%
                    } else if (format.get("ALIGN").equals("\'R\'")) {%>
                        for(int i=0; i< <%=format.get("SIZE")%>-tempLengthM<%=cid %>; i++){
                            result<%=cid %>.append(<%=format.get("PADDING_CHAR")%>);
                        }
                        result<%=cid %>.append(tempStringM<%=cid %>);
                        tempStringM<%=cid %> = result<%=cid %>.toString();
                    <%
                    } else {%>
                        int temp<%=cid %>= (<%=format.get("SIZE")%>-tempLengthM<%=cid %>)/2;
                        for(int i=0;i<temp<%=cid %>;i++){
                            result<%=cid %>.append(<%=format.get("PADDING_CHAR")%>);
                        }
                        result<%=cid %>.append(tempStringM<%=cid %>);
                        for(int i=0;i<temp<%=cid %>;i++){
                            result<%=cid %>.append(<%=format.get("PADDING_CHAR")%>);
                        }
                        if((temp<%=cid %>+temp<%=cid %>)!=(<%=format.get("SIZE")%>-tempLengthM<%=cid %>)){
                            result<%=cid %>.append(<%=format.get("PADDING_CHAR")%>);
                        }
                        tempStringM<%=cid %> = result<%=cid %>.toString();
                    <%
                    } %>       
                }
                //get  and format output String end
				
				
				out<%=cid %>.write(tempStringM<%=cid %>);
				<%
			}
			%>
			out<%=cid %>.write("\n");
			nb_line_<%=cid %>++;
<%
		}
	}
    }
}
%>