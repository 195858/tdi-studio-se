<%@ jet 
	package="org.talend.designer.codegen.translators" 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.metadata.IMetadataTable
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.EConnectionType
		org.talend.core.model.process.ElementParameterParser 
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.MetadataTalendType
		java.util.List
		java.util.Map
	"
	class="FileOutputPositionalMain"
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
boolean stats = codeGenArgument.isStatistics();

List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
    IMetadataTable metadata = metadatas.get(0);
    if (metadata!=null) {
        
        String cid = node.getUniqueName();
        
        List<Map<String, String>> formats =
            (List<Map<String,String>>)ElementParameterParser.getObjectValue(
                node,
                "__FORMATS__"
            );
%>
<%
	List< ? extends IConnection> conns = node.getIncomingConnections();
	for (IConnection conn : conns) {
		if (conn.getLineStyle().equals(EConnectionType.FLOW_MAIN)) {
			List<IMetadataColumn> columns = metadata.getListColumns();
			int sizeColumns = columns.size();
			for (int i = 0; i < sizeColumns; i++) {
				IMetadataColumn column = columns.get(i);
				Map<String,String> format=formats.get(i);
				%>
				
				
				
				//get  and format output String begin
    			tempString<%=cid %>=<%				
				if(MetadataTalendType.isJavaPrimitiveType( column.getTalendType()) ) {%>
					String.valueOf(<%=conn.getName() %>.<%=column.getLabel() %>)<%					
				} else {%>
					(<%=conn.getName() %>.<%=column.getLabel() %> == null) ? 
					"": String.valueOf(<%=conn.getName() %>.<%=column.getLabel() %>)<%
				}%> ;
    			tempLength<%=cid %>=tempString<%=cid %>.length();
    			
            	if (tempLength<%=cid %> > sizes<%=cid %>[<%=i%>]) {
                    if (otherFormats<%=cid %>[<%=i%>][2] == 'A') {
                        tempString<%=cid %> = tempString<%=cid %>.substring(tempLength<%=cid %>-sizes<%=cid %>[<%=i%>]);
                    } else if (otherFormats<%=cid %>[<%=i%>][2] == 'L') {
                        tempString<%=cid %> = tempString<%=cid %>.substring(tempLength<%=cid %>-sizes<%=cid %>[<%=i%>]);
                    } else if (otherFormats<%=cid %>[<%=i%>][2] == 'M') {
                        int begin=(tempLength<%=cid %>-sizes<%=cid %>[<%=i%>])/2;
                        tempString<%=cid %> = tempString<%=cid %>.substring(begin, begin+sizes<%=cid %>[<%=i%>]);
                    } else {
                        tempString<%=cid %> = tempString<%=cid %>.substring(0, sizes<%=cid %>[<%=i%>]);
                    }
                }else if(tempLength<%=cid %><sizes<%=cid %>[<%=i%>]){
                    StringBuilder result = new StringBuilder();
                    if (otherFormats<%=cid %>[<%=i%>][1] == 'L') {
                        result.append(tempString<%=cid %>);
                        for(int i=0; i< sizes<%=cid %>[<%=i%>]-tempLength<%=cid %>; i++){
                            result.append(otherFormats<%=cid %>[<%=i%>][0]);
                        }
                        tempString<%=cid %> = result.toString();
                    } else if (otherFormats<%=cid %>[<%=i%>][1] == 'R') {
                        for(int i=0; i< sizes<%=cid %>[<%=i%>]-tempLength<%=cid %>; i++){
                            result.append(otherFormats<%=cid %>[<%=i%>][0]);
                        }
                        result.append(tempString<%=cid %>);
                        tempString<%=cid %> = result.toString();
                    } else {
                        int temp= (sizes<%=cid %>[<%=i%>]-tempLength<%=cid %>)/2;
                        for(int i=0;i<temp;i++){
                            result.append(otherFormats<%=cid %>[<%=i%>][0]);
                        }
                        result.append(tempString<%=cid %>);
                        for(int i=0;i<temp;i++){
                            result.append(otherFormats<%=cid %>[<%=i%>][0]);
                        }
                        if((temp+temp)!=(sizes<%=cid %>[<%=i%>]-tempLength<%=cid %>)){
                            result.append(otherFormats<%=cid %>[<%=i%>][0]);
                        }
                        tempString<%=cid %> = result.toString();
                    }        
                }
                //get  and format output String end
				
				
				out<%=cid %>.write(tempString<%=cid %>);
				<%
			}
			%>
			out<%=cid %>.write("\n");
<%
		}
	}
    }
}
%>