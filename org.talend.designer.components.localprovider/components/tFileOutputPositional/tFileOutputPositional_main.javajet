<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.metadata.IMetadataTable
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.core.model.process.ElementParameterParser 
		org.talend.designer.codegen.config.CodeGeneratorArgument
		java.util.List
		java.util.Map
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
	"
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();

List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
    IMetadataTable metadata = metadatas.get(0);
    if (metadata!=null) {
        
        String cid = node.getUniqueName();
        
        String separator = ElementParameterParser.getValue(
            node,
            "__ROWSEPARATOR__"
        );
        
        List<Map<String, String>> formats =
            (List<Map<String,String>>)ElementParameterParser.getObjectValue(
                node,
                "__FORMATS__"
            );            
            
        boolean flushOnRow = ElementParameterParser.getValue(node, "__FLUSHONROW__").equals("true"); 
        String flushMod = ElementParameterParser.getValue(node, "__FLUSHONROW_NUM__");
        
		String advancedSeparatorStr = ElementParameterParser.getValue(node, "__ADVANCED_SEPARATOR__");
		boolean advancedSeparator = (advancedSeparatorStr!=null&&!advancedSeparatorStr.equals(""))?advancedSeparatorStr.equals("true"):false;
		String thousandsSeparator = ElementParameterParser.getValueWithJavaType(node, "__THOUSANDS_SEPARATOR__", JavaTypesManager.CHARACTER);
		String decimalSeparator = ElementParameterParser.getValueWithJavaType(node, "__DECIMAL_SEPARATOR__", JavaTypesManager.CHARACTER);        

		String parallelize = ElementParameterParser.getValue(node,"__PARALLELIZE__");
			boolean isParallelize = (parallelize!=null&&!parallelize.equals(""))?parallelize.equals("true"):false;
%>

				String tempStringM<%=cid %>= null;
				
				int tempLengthM<%=cid %>= 0;
				
<%
	List< ? extends IConnection> conns = node.getIncomingConnections();
	for (IConnection conn : conns) {
		if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
%>
				StringBuilder sb_<%=cid %> = new StringBuilder();
<%
			List<IMetadataColumn> columns = metadata.getListColumns();
			int sizeColumns = columns.size();
			for (int i = 0; i < sizeColumns; i++) {
				IMetadataColumn column = columns.get(i);
				Map<String,String> format=formats.get(i);
				JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
				String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
				%>
				
				
				//get  and format output String begin
    			tempStringM<%=cid %>=<%				
				if(JavaTypesManager.isJavaPrimitiveType( column.getTalendType(), column.isNullable()) ) {%>
					String.valueOf(<%=conn.getName() %>.<%=column.getLabel() %>)<%					
				} else {%>
					(<%=conn.getName() %>.<%=column.getLabel() %> == null) ? 
					"": <%
					if(javaType == JavaTypesManager.DATE && patternValue!=null){
					%>FormatterUtils.format_Date(<%=conn.getName() %>.<%=column.getLabel() %>, <%= patternValue %>)<%
					}else if(javaType == JavaTypesManager.BYTE_ARRAY){
					%>java.nio.charset.Charset.defaultCharset().decode(java.nio.ByteBuffer.wrap(<%=conn.getName() %>.<%=column.getLabel() %>)).toString()<%
					}else if(javaType == JavaTypesManager.STRING){
					%><%=conn.getName() %>.<%=column.getLabel() %><%
					} else if(advancedSeparator && JavaTypesManager.isNumberType(javaType, column.isNullable())) { 
							%>
        							<% if(javaType == JavaTypesManager.BIGDECIMAL) {%>
        							FormatterUtils.format_Number(String.valueOf(<%=conn.getName() %>.<%=column.getLabel() %>.doubleValue()), <%= thousandsSeparator %>, <%= decimalSeparator %>)					
        							<% } else { %>
        							FormatterUtils.format_Number(String.valueOf(<%=conn.getName() %>.<%=column.getLabel() %>), <%= thousandsSeparator %>, <%= decimalSeparator %>)						
        							<% } %>
							<%
					}else if (javaType == JavaTypesManager.BIGDECIMAL) {
					%>String.valueOf(<%=conn.getName() %>.<%=column.getLabel() %>.doubleValue())	
					<% }else{
					%>String.valueOf(<%=conn.getName() %>.<%=column.getLabel() %>)<%
					}
				}%> ;
    			tempLengthM<%=cid %>=tempStringM<%=cid %>.length();
    			
            	if (tempLengthM<%=cid %> >=<%=format.get("SIZE")%>) {
                    <%
                    if (format.get("KEEP").equals("\'A\'")) {%>
                        sb_<%=cid %>.append(tempStringM<%=cid %>);
                    <%
                    } else if (format.get("KEEP").equals("\'R\'")) {%>
                        sb_<%=cid %>.append(tempStringM<%=cid %>.substring(tempLengthM<%=cid %>-<%=format.get("SIZE")%>));
                    <%
                    } else if (format.get("KEEP").equals("\'M\'")) {%>
                        int begin<%=cid %>=(tempLengthM<%=cid %>-<%=format.get("SIZE")%>)/2;
                        sb_<%=cid %>.append(tempStringM<%=cid %>.substring(begin<%=cid %>, begin<%=cid %>+<%=format.get("SIZE")%>));
                    <%
                    } else {%>
                        sb_<%=cid %>.append(tempStringM<%=cid %>.substring(0, <%=format.get("SIZE")%>));
                    <%
                    }%>
                }else if(tempLengthM<%=cid %><<%=format.get("SIZE")%>){
                   
                    <%
                    if (format.get("ALIGN").equals("\'L\'")) {
                    %>
                        sb_<%=cid %>.append(tempStringM<%=cid %>);
                        for(int i_<%=cid %>=0; i_<%=cid %>< <%=format.get("SIZE")%>-tempLengthM<%=cid %>; i_<%=cid %>++){
                            sb_<%=cid %>.append(<%=format.get("PADDING_CHAR")%>);
                        }
                        
                    <%
                    } else if (format.get("ALIGN").equals("\'R\'")) {%>
                        for(int i_<%=cid %>=0; i_<%=cid %>< <%=format.get("SIZE")%>-tempLengthM<%=cid %>; i_<%=cid %>++){
                            sb_<%=cid %>.append(<%=format.get("PADDING_CHAR")%>);
                        }
                        sb_<%=cid %>.append(tempStringM<%=cid %>);
                        
                    <%
                    } else {%>
                        int temp<%=cid %>= (<%=format.get("SIZE")%>-tempLengthM<%=cid %>)/2;
                        for(int i_<%=cid %>=0;i_<%=cid %><temp<%=cid %>;i_<%=cid %>++){
                            sb_<%=cid %>.append(<%=format.get("PADDING_CHAR")%>);
                        }
                        sb_<%=cid %>.append(tempStringM<%=cid %>);
                        for(int i=temp<%=cid %>+tempLengthM<%=cid %>;i<<%=format.get("SIZE")%>;i++){
                            sb_<%=cid %>.append(<%=format.get("PADDING_CHAR")%>);
                        }

                        
                    <%
                    } %>       
                }
                //get  and format output String end				
				<%
			}
			%>
			sb_<%=cid %>.append(<%=separator%>);
			<% 
				if(codeGenArgument.getIsRunInMultiThread()){
			%>
			synchronized (multiThreadLockWrite) {
			<%
				}
				if (codeGenArgument.subTreeContainsParallelIterate()) {
			%>
			synchronized (lockWrite) {
			<% 
				}
				if (isParallelize) {
			%>
			Object[] pLockWrite = (Object[])globalMap.get("PARALLEL_LOCK_WRITE");
			synchronized (pLockWrite) {
			<% 
				}
			%>
			out<%=cid %>.write(sb_<%=cid %>.toString());
    		<% if(flushOnRow) { %>
        		if(nb_line_<%=cid %>%<%=flushMod %> == 0) {
        		out<%=cid %>.flush();
        		}
    		<%
    			}
    		%>
    		<%
    			if ( isParallelize) {
			%>
    			} 
			<%
    		    }
				if (codeGenArgument.subTreeContainsParallelIterate()) {
			%>
				}
			<% 
				}
				if(codeGenArgument.getIsRunInMultiThread()){
    		%>
    			}
    		<%
    			}
			%> 						
			nb_line_<%=cid %>++;
<%
		}
	}
    }
}
%>