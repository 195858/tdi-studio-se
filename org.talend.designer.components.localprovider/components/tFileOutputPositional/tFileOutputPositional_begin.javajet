<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.metadata.IMetadataTable
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.List
    java.util.Map
" 
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();

List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
    IMetadataTable metadata = metadatas.get(0);
    if (metadata!=null) {
    
    	String cid = node.getUniqueName();
    	
    	String encoding = ElementParameterParser.getValue(node, "__ENCODING__");
        if (encoding!=null) {
            if (("").equals(encoding)) {
                encoding = "undef";
            }
        }
        
        String separator = ElementParameterParser.getValue(
            node,
            "__ROWSEPARATOR__"
        );
        
        String filename = ElementParameterParser.getValue(
            node,
            "__FILENAME__"
        );
		
		boolean useByte = ("true").equals(ElementParameterParser.getValue(node, "__USE_BYTE__"));
		
        boolean isIncludeHeader = ("true").equals(ElementParameterParser.getValue(node,"__INCLUDEHEADER__"));

        boolean isAppend = ("true").equals(ElementParameterParser.getValue(node,"__APPEND__"));
        
		boolean useStream = ("true").equals(ElementParameterParser.getValue(node,"__USESTREAM__"));
		String outStream = ElementParameterParser.getValue(node,"__STREAMNAME__");

        List<Map<String, String>> formats =
            (List<Map<String,String>>)ElementParameterParser.getObjectValue(
                node,
                "__FORMATS__"
            );
        
        boolean compress = ("true").equals(ElementParameterParser.getValue(node,"__COMPRESS__"));
        
        boolean isInRowMode = ("true").equals(ElementParameterParser.getValue(node,"__ROW_MODE__"));
        String writerClass = null;
    	if(isInRowMode){
    		writerClass = "routines.system.BufferedOutput";
    	}else{
    		writerClass = "java.io.BufferedWriter";
    	}
%>
		int nb_line_<%=cid%> = 0;
		
<%
		if(!useStream){// the part of file path
%>
		String fileNewName_<%=cid%> = <%=filename%>;
		java.io.File createFile<%=cid%> = new java.io.File(fileNewName_<%=cid%>);
<%
			if(("true").equals(ElementParameterParser.getValue(node,"__CREATE__"))){
%>
        //create directory only if not exists
        java.io.File parentFile_<%=cid%> = createFile<%=cid%>.getParentFile();
        if(parentFile_<%=cid%> != null && !parentFile_<%=cid%>.exists()) {
            parentFile_<%=cid%>.mkdirs();
        }
<%
			}
			if(compress && !isAppend){// compress the dest file
%>
        String fullName_<%=cid%> = null;
        String extension_<%=cid%> = null;
        String directory_<%=cid%> = null;
        if((fileNewName_<%=cid%>.indexOf("/") != -1)) {
            if(fileNewName_<%=cid%>.lastIndexOf(".") < fileNewName_<%=cid%>.lastIndexOf("/")) {
                fullName_<%=cid%> = fileNewName_<%=cid%>;
                extension_<%=cid%> = "";
            } else {
                fullName_<%=cid%> = fileNewName_<%=cid%>.substring(0, fileNewName_<%=cid%>.lastIndexOf("."));
                extension_<%=cid%> = fileNewName_<%=cid%>.substring(fileNewName_<%=cid%>.lastIndexOf("."));
            }           
            directory_<%=cid%> = fileNewName_<%=cid%>.substring(0, fileNewName_<%=cid%>.lastIndexOf("/"));            
        } else {
            if(fileNewName_<%=cid%>.lastIndexOf(".") != -1) {
                fullName_<%=cid%> = fileNewName_<%=cid%>.substring(0, fileNewName_<%=cid%>.lastIndexOf("."));
                extension_<%=cid%> = fileNewName_<%=cid%>.substring(fileNewName_<%=cid%>.lastIndexOf("."));
            } else {
                fullName_<%=cid%> = fileNewName_<%=cid%>;
                extension_<%=cid%> = "";
            }
            directory_<%=cid%> = "";
        }
		String zipName_<%=cid %> = fullName_<%=cid%> + ".zip";
	    java.util.zip.ZipOutputStream zipOut_<%=cid %>=new java.util.zip.ZipOutputStream(
	    			new java.io.BufferedOutputStream(new java.io.FileOutputStream(zipName_<%=cid%>)));
	    zipOut_<%=cid %>.putNextEntry(new java.util.zip.ZipEntry(createFile<%=cid%>.getName()));
		final <%=writerClass %> out<%=cid %> = new <%=writerClass %>(new java.io.OutputStreamWriter(zipOut_<%=cid %>,<%= encoding%>));
<%
			}else{
%>
		final <%=writerClass %> out<%=cid %> = new <%=writerClass %>(new java.io.OutputStreamWriter(
        		new java.io.FileOutputStream(<%=filename %>, <%= isAppend%>),<%= encoding%>));
<%
			}
		}else{ //the part of the output stream
			if(compress && !isAppend){// compress the dest output stream
%>
	    java.util.zip.ZipOutputStream zipOut_<%=cid %>=new java.util.zip.ZipOutputStream(
	    			new java.io.BufferedOutputStream(<%=outStream %>));
	    zipOut_<%=cid %>.putNextEntry(new java.util.zip.ZipEntry("TalendOutputPositional"));
		java.io.OutputStreamWriter outWriter_<%=cid %> = new java.io.OutputStreamWriter(zipOut_<%=cid %>,<%= encoding%>);
		final <%=writerClass %> out<%=cid %> = new <%=writerClass %>(outWriter_<%=cid %>);
<%
			}else{
%>
		java.io.OutputStreamWriter outWriter_<%=cid %> = new java.io.OutputStreamWriter(<%=outStream %>,<%= encoding%>);
		final <%=writerClass %> out<%=cid %> = new <%=writerClass %>(outWriter_<%=cid %>);  
<%
			}
		}
		
		if(isIncludeHeader){      	
			if(!useStream){
%>
		if(createFile<%=cid%>.length()==0){
<%
			}
			
    		List<IMetadataColumn> columns = metadata.getListColumns();
    		int sizeColumns = columns.size();
%>
    		
    		String tempStringB<%=cid %>=null;
    		int tempLengthB<%=cid %>=0;
<%
    		for (int i = 0; i < sizeColumns; i++) {
    			IMetadataColumn column = columns.get(i);
    			Map<String, String> format=formats.get(i);
%>
    			//get  and format output String begin
    			tempStringB<%=cid %>="<%=column.getLabel() %>";
    			<%if(useByte){%>
    			tempLengthB<%=cid %>=tempStringB<%=cid %>.getBytes(<%=encoding %>).length;
    			<%}else{%>
    			tempLengthB<%=cid %>=tempStringB<%=cid %>.length();
    			<%}%>
    			
            	if (tempLengthB<%=cid %> > <%=format.get("SIZE")%>) {
<%
                    if (("\'A\'").equals(format.get("KEEP"))) {
                    } else if (("\'R\'").equals(format.get("KEEP"))) {
%>
                        tempStringB<%=cid %> = tempStringB<%=cid %>.substring(tempLengthB<%=cid %>-<%=format.get("SIZE")%>);
<%
                    } else if (("\'M\'").equals(format.get("KEEP"))) {
%>
                        int begin<%=cid %>=(tempLengthB<%=cid %>-<%=format.get("SIZE")%>)/2;
                        tempStringB<%=cid %> = tempStringB<%=cid %>.substring(begin<%=cid %>, begin<%=cid %>+<%=format.get("SIZE")%>);
<%
                    } else {
%>
                    tempStringB<%=cid %> = tempStringB<%=cid %>.substring(0, <%=format.get("SIZE")%>);
<%
                    }
%>
                }else if(tempLengthB<%=cid %><<%=format.get("SIZE")%>){
                    StringBuilder result<%=cid %> = new StringBuilder();
<%
                    if (("\'L\'").equals(format.get("ALIGN"))) {
%>
                        result<%=cid %>.append(tempStringB<%=cid %>);
                        for(int i<%=cid %>=0; i<%=cid %>< <%=format.get("SIZE")%>-tempLengthB<%=cid %>; i<%=cid %>++){
                            result<%=cid %>.append(<%=format.get("PADDING_CHAR")%>);
                        }
                        tempStringB<%=cid %> = result<%=cid %>.toString();
<%
                    } else if (("\'R\'").equals(format.get("ALIGN"))) {
%>
                        for(int i<%=cid %>=0; i<%=cid %>< <%=format.get("SIZE")%>-tempLengthB<%=cid %>; i<%=cid %>++){
                            result<%=cid %>.append(<%=format.get("PADDING_CHAR")%>);
                        }
                        result<%=cid %>.append(tempStringB<%=cid %>);
                        tempStringB<%=cid %> = result<%=cid %>.toString();
<%
                    } else {
%>
                        int temp<%=cid %>= (<%=format.get("SIZE")%>-tempLengthB<%=cid %>)/2;
                        for(int i<%=cid %>=0;i<%=cid %><temp<%=cid %>;i<%=cid %>++){
                            result<%=cid %>.append(<%=format.get("PADDING_CHAR")%>);
                        }
                        result<%=cid %>.append(tempStringB<%=cid %>);
                        for(int i<%=cid %>=0;i<%=cid %><temp<%=cid %>;i<%=cid %>++){
                            result<%=cid %>.append(<%=format.get("PADDING_CHAR")%>);
                        }
                        if((temp<%=cid %>+temp<%=cid %>)!=(<%=format.get("SIZE")%>-tempLengthB<%=cid %>)){
                            result<%=cid %>.append(<%=format.get("PADDING_CHAR")%>);
                        }
                        tempStringB<%=cid %> = result<%=cid %>.toString();
<%
                    } 
%>       
                }
                //get  and format output String end
    			out<%=cid %>.write(tempStringB<%=cid %>);
<%
    		}
%>
    		out<%=cid %>.write(<%=separator%>);
<%
			if(!useStream){
%>
    	}
<%
			}
		}
    }
}
%>
