<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn 
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
		java.util.List 
    	java.util.Map		
	" 
%>
<% 
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();
    final String cid = node.getUniqueName();	
		
	class GenerateCode{
		public int colLen = 0; // the length of the column in the input schema
		public void generateDynamicSchemaCode(boolean isCsv){
%>
if(isFirstCheckDyn_<%=cid %>){// for the header line
<%
		if(isCsv){
%>
int colsLen_<%=cid %> = row<%=cid %>.length;
<%
		}else{
%>
int colsLen_<%=cid %> = fid_<%=cid %>.getColumnsCountOfCurrentRow();
<%		}%>
    for (int i = <%=colLen %>-1; i < colsLen_<%=cid %>; i++) {
    
    	routines.system.DynamicMetadata dynamicMetadata_<%=cid%> = new routines.system.DynamicMetadata();
    	dynamicMetadata_<%=cid%>.setName(<%if(isCsv){%>row<%=cid %>[i]<%}else{%>fid_<%=cid %>.get(i)<%}%>.replaceAll("[ .-]+", "_"));
    	dynamicMetadata_<%=cid%>.setDbName(dynamicMetadata_<%=cid%>.getName());
    	dynamicMetadata_<%=cid%>.setType("id_String");
    	dynamicMetadata_<%=cid%>.setDbType("VARCHAR");
    	dynamicMetadata_<%=cid%>.setLength(100);
    	dynamicMetadata_<%=cid%>.setPrecision(0);
    	dynamicMetadata_<%=cid%>.setNullable(true);
    	dynamicMetadata_<%=cid%>.setKey(false);
    	dynamicMetadata_<%=cid%>.setSourceType(routines.system.DynamicMetadata.sourceTypes.demilitedFile);
    	dynamicMetadata_<%=cid%>.setColumnPosition(i);
    	dynamic_<%=cid%>.metadatas.add(dynamicMetadata_<%=cid%>);
    }
    isFirstCheckDyn_<%=cid %> = false;
    continue;
}
<%
		}
	}
	GenerateCode generateCode = new GenerateCode();
%>
<%
	if(("false").equals(ElementParameterParser.getValue(node,"__CSV_OPTION__"))) {	
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
%>

<%
List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
	IMetadataTable metadata = metadatas.get(0);
	if (metadata!=null) {
		String filename = ElementParameterParser.getValue(node,"__FILENAME__");
    	String encoding = ElementParameterParser.getValue(node,"__ENCODING__");
    	String header = ElementParameterParser.getValue(node, "__HEADER__");
    	if(("").equals(header)){
    		header="0";
    	}
    	String limit = ElementParameterParser.getValue(node, "__LIMIT__");
		if(("").equals(limit)){
			limit = "-1";
		}
    	String footer = ElementParameterParser.getValue(node, "__FOOTER__");
    	if(("").equals(footer)){
    		footer="0";
    	}
    	String random = "-1";
    	String ran = ElementParameterParser.getValue(node, "__RANDOM__");
    	if(("true").equals(ran)){
    		random = ElementParameterParser.getValue(node, "__NB_RANDOM__");
    		if(("").equals(random)){
    			random="0";
    		}
    	}
    	
		List<Map<String, String>> trimSelects = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__TRIMSELECT__");
		String isTrimAllStr = ElementParameterParser.getValue(node,"__TRIMALL__");
		boolean isTrimAll = (isTrimAllStr!=null&&!("").equals(isTrimAllStr))?("true").equals(isTrimAllStr):true;
		
    	String fieldSeparator = ElementParameterParser.getValue(node, "__FIELDSEPARATOR__");
    	String rowSeparator = ElementParameterParser.getValue(node, "__ROWSEPARATOR__");
    	String removeEmptyRowFlag =  ElementParameterParser.getValue(node, "__REMOVE_EMPTY_ROW__");
    	String dieOnErrorStr = ElementParameterParser.getValue(node, "__DIE_ON_ERROR__");
		boolean dieOnError = (dieOnErrorStr!=null&&!("").equals(dieOnErrorStr))?("true").equals(dieOnErrorStr):false; 
		
		String checkNumStr = ElementParameterParser.getValue(node, "__CHECK_FIELDS_NUM__");
		boolean checkNum = (checkNumStr!=null&&!("").equals(checkNumStr))?("true").equals(checkNumStr):false; 
		
		String advancedSeparatorStr = ElementParameterParser.getValue(node, "__ADVANCED_SEPARATOR__");
		boolean advancedSeparator = (advancedSeparatorStr!=null&&!("").equals(advancedSeparatorStr))?("true").equals(advancedSeparatorStr):false;
		String thousandsSeparator = ElementParameterParser.getValueWithJavaType(node, "__THOUSANDS_SEPARATOR__", JavaTypesManager.CHARACTER);
		String decimalSeparator = ElementParameterParser.getValueWithJavaType(node, "__DECIMAL_SEPARATOR__", JavaTypesManager.CHARACTER);
		
		String splitRecordStr = ElementParameterParser.getValue(node, "__SPLITRECORD__");
		boolean splitRecord = (splitRecordStr!=null&&!("").equals(splitRecordStr))?("true").equals(splitRecordStr):false;
		
		boolean uncompress = ("true").equals(ElementParameterParser.getValue(node,"__UNCOMPRESS__"));
		
		boolean hasDynamic = metadata.isDynamicSchema();
		if(hasDynamic){
%>
boolean isFirstCheckDyn_<%=cid %> = true;
routines.system.Dynamic dynamic_<%=cid %> = new routines.system.Dynamic();
<%
		}
%>
int nb_line_<%=cid%> = 0;
org.talend.fileprocess.FileInputDelimited fid_<%=cid %> = null;
try{
<%
		if(uncompress){
%>

Object filename_<%=cid %> = <%=filename %>;	
java.util.zip.ZipInputStream zis_<%=cid %> = null;
if(filename_<%=cid %> instanceof java.io.InputStream){
	zis_<%=cid %> = new java.util.zip.ZipInputStream(new java.io.BufferedInputStream((java.io.InputStream)filename_<%=cid %>));
}else{
	zis_<%=cid %> = new java.util.zip.ZipInputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(filename_<%=cid %>.toString())));
}
java.util.zip.ZipEntry entry_<%=cid %> = null;

while ((entry_<%=cid %> = zis_<%=cid %>.getNextEntry()) != null) {
	if(entry_<%=cid %>.isDirectory()){ //directory
		continue;
	}
	fid_<%=cid %> = new org.talend.fileprocess.FileInputDelimited(zis_<%=cid %>, <%=encoding %>,<%=fieldSeparator %>,<%=rowSeparator %>,<%=removeEmptyRowFlag %>,<%=header %><%=hasDynamic?"-1":""%>,<%=footer %>,<%=limit %>,<%=random %>, <%= splitRecord%>);
<%
		}else{
%>
fid_<%=cid %> = 
	new org.talend.fileprocess.FileInputDelimited(<%=filename %>, <%=encoding %>,<%=fieldSeparator %>,<%=rowSeparator %>,<%=removeEmptyRowFlag %>,<%=header %><%=hasDynamic?"-1":""%>,<%=footer %>,<%=limit %>,<%=random %>, <%= splitRecord%>);
<%
		}
%>
while (fid_<%=cid %>.nextRecord()) {
<%
	List< ? extends IConnection> conns = node.getOutgoingSortedConnections();

    String rejectConnName = "";
    List<? extends IConnection> rejectConns = node.getOutgoingConnections("REJECT");
    if(rejectConns != null && rejectConns.size() > 0) {
        IConnection rejectConn = rejectConns.get(0);
        rejectConnName = rejectConn.getName();
    }
    List<IMetadataColumn> rejectColumnList = null;
    IMetadataTable metadataTable = node.getMetadataFromConnector("REJECT");
    if(metadataTable != null) {
        rejectColumnList = metadataTable.getListColumns();      
    }

    	if (conns!=null) {
    		if (conns.size()>0) {
    			for (int i=0;i<conns.size();i++) {
    				IConnection connTemp = conns.get(i);
    				if (connTemp.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
%>
    		<%=connTemp.getName() %> = null;			
<%
    				}
    			}
    		}
    	}
    	
	String firstConnName = "";
	if (conns!=null) {
		if (conns.size()>0) {
			IConnection conn = conns.get(0);
			firstConnName = conn.getName();			
			if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {%>			
			boolean whetherReject_<%=cid %> = false;
			<%=firstConnName %> = new <%=conn.getName() %>Struct();
			try {
			<%	
				List<IMetadataColumn> listColumns = metadata.getListColumns();
				int sizeListColumns = listColumns.size();
				boolean noStringTypeExist = false;
				
				for (int valueN=0; valueN<sizeListColumns; valueN++) {
					IMetadataColumn column = listColumns.get(valueN);
					JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
					if(javaType == JavaTypesManager.STRING || javaType == JavaTypesManager.OBJECT){
					}else{
						noStringTypeExist = true;
						break;
					}
				}
				boolean hasStringDefault = false;
				for (int valueM=0; valueM<sizeListColumns; valueM++) {
					IMetadataColumn column = listColumns.get(valueM);
					JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
					if(javaType == JavaTypesManager.STRING || javaType == JavaTypesManager.OBJECT){
						if(hasStringDefault==false && column.getDefault()!=null && column.getDefault().length() > 0 ){
							hasStringDefault = true;
							break;
						}
					}
				}
				if(hasDynamic){// generate the dynamic schema code
					generateCode.colLen = sizeListColumns;
					generateCode.generateDynamicSchemaCode(false); //false: delimited mode
				}
				if(noStringTypeExist || hasStringDefault){%>String temp_<%=cid %> = ""; 
				<%}
				for (int valueN=0; valueN<sizeListColumns; valueN++) {
					IMetadataColumn column = listColumns.get(valueN);
					String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
					JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
					String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();%><%
if(javaType == JavaTypesManager.STRING || javaType == JavaTypesManager.OBJECT){
	String defaultValue = column.getDefault();
	if(defaultValue!=null && defaultValue.length()>0){
%>
temp_<%=cid %>  = fid_<%=cid %>.get(<%=valueN%>)<%=(isTrimAll || (!trimSelects.isEmpty() && ("true").equals(trimSelects.get(valueN).get("TRIM"))))?".trim()":"" %>;
if(temp_<%=cid %>.length() > 0){
	<%=firstConnName %>.<%=column.getLabel() %> = temp_<%=cid %>;
}else{
	<%=firstConnName %>.<%=column.getLabel() %> = <%=defaultValue %>;
}
<%	}else{%>
<%=firstConnName %>.<%=column.getLabel() %> = fid_<%=cid %>.get(<%=valueN%>)<%=(isTrimAll || (!trimSelects.isEmpty() && ("true").equals(trimSelects.get(valueN).get("TRIM"))))?".trim()":"" %>;
<%
	}
}else if(column.getTalendType().equals("id_Dynamic")){
%>
dynamic_<%=cid%>.clearColumnValues();
int fieldCount = fid_<%=cid%>.getColumnsCountOfCurrentRow();
for (int i = 0; i < dynamic_<%=cid%>.getColumnCount(); i++) {
	if ((<%=sizeListColumns%>-1+i) < fieldCount){
		dynamic_<%=cid%>.addColumnValue(fid_<%=cid%>.get(<%=sizeListColumns%>-1+i)<%=(isTrimAll || (!trimSelects.isEmpty() && ("true").equals(trimSelects.get(valueN).get("TRIM"))))?".trim()":"" %>);
	}
	else{
		dynamic_<%=cid%>.addColumnValue("");
	}
}
<%=firstConnName %>.<%=column.getLabel() %>=dynamic_<%=cid%>;
<%
}else{
%>temp_<%=cid %> = fid_<%=cid %>.get(<%=valueN%>)<%=(isTrimAll || (!trimSelects.isEmpty() && ("true").equals(trimSelects.get(valueN).get("TRIM"))))?".trim()":"" %>;
if(temp_<%=cid %>.length() > 0) {
<%
					if(javaType == JavaTypesManager.STRING || javaType == JavaTypesManager.OBJECT) {
					} else if(javaType == JavaTypesManager.BYTE_ARRAY){ 
%><%=firstConnName %>.<%=column.getLabel() %> = temp_<%=cid %>.getBytes(<%=encoding%>);
<%
					}else if(javaType == JavaTypesManager.DATE) { 
						if(checkNum){
%><%=firstConnName %>.<%=column.getLabel() %> = ParserUtils.parseTo_Date(temp_<%=cid %>, <%= patternValue %>, false);
<%
						}else{
%><%=firstConnName %>.<%=column.getLabel() %> = ParserUtils.parseTo_Date(temp_<%=cid %>, <%= patternValue %>);
<%
						}
					}else if(advancedSeparator && JavaTypesManager.isNumberType(javaType, column.isNullable())) { 
%><%=firstConnName %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%= typeToGenerate %>(ParserUtils.parseTo_Number(temp_<%=cid %>, <%= thousandsSeparator %>, <%= decimalSeparator %>));
<%
					} else { 
%><%=firstConnName %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%= typeToGenerate %>(temp_<%=cid %>);
<%
					}
%>} else {						
<%
					String defaultValue = JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate, column.getDefault());
					if(defaultValue == null) {
%>throw new RuntimeException("Value is empty for column : '<%= column.getLabel() %>' in '<%=firstConnName %>' connection, value is invalid or this column should be nullable or have a default value.");
<%
					} else {
%><%=firstConnName %>.<%=column.getLabel() %> = <%=defaultValue %>;
<%
					}
%>}
<%
}
%><%
				}%>
				
<%if(checkNum) {%>
	 int filedsum_<%=cid %> = fid_<%=cid %>.getColumnsCountOfCurrentRow();
	 if(filedsum_<%=cid %> < <%=metadata.getListColumns().size() %>){
	 	throw new RuntimeException("Column(s) missing");
	 } else if(filedsum_<%=cid %> > <%=metadata.getListColumns().size() %>) {
	 	throw new RuntimeException("Too many columns");
	 }     
<%}%>				

<%if(rejectConnName.equals(firstConnName)) {%> <%=firstConnName %> = null; <%}%>
				
    } catch (Exception e) {
        whetherReject_<%=cid%> = true;
        <%
        if (dieOnError) {
            %>
            throw(e);
            <%
        } else {
            if(!("").equals(rejectConnName)&&!rejectConnName.equals(firstConnName)&&rejectColumnList != null && rejectColumnList.size() > 0) {

                %>                    
                    <%=rejectConnName %> = new <%=rejectConnName %>Struct();
                <%
                for(IMetadataColumn column : metadata.getListColumns()) {
                    %>
                    <%=rejectConnName%>.<%=column.getLabel()%> = <%=firstConnName%>.<%=column.getLabel()%>;
                    <%
                }
                %>
                <%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
                <%=firstConnName %> = null;
                <%
            } else if(("").equals(rejectConnName)){
                %>
                System.err.println(e.getMessage());
                <%=firstConnName %> = null;
                <%
            } else if(rejectConnName.equals(firstConnName)){%>
            	<%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
            <%}
        } 
        %>
    }

				
<%
			}
		}
		if (conns.size()>0) {
			boolean isFirstEnter = true;
			for (int i=0;i<conns.size();i++) {
				IConnection conn = conns.get(i);
				if ((conn.getName().compareTo(firstConnName)!=0)&&(conn.getName().compareTo(rejectConnName)!=0)&&(conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA))) {
%>
		<% if(isFirstEnter) {%>if(!whetherReject_<%=cid%>) { <% isFirstEnter = false; } %>      
             if(<%=conn.getName() %> == null){ 
            	 <%=conn.getName() %> = new <%=conn.getName() %>Struct();
             }				
<%
			    	 for (IMetadataColumn column: metadata.getListColumns()) {
%>
	    	 <%=conn.getName() %>.<%=column.getLabel() %> = <%=firstConnName %>.<%=column.getLabel() %>;    				
<%
				 	}
				}
			}
%>
		<% if(!isFirstEnter) {%> } <% } %>	
<%
		}
	  }
	}
}
%>

<%
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}else{//the following is the tFileInputCSV component
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
%>

<%
List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
    IMetadataTable metadata = metadatas.get(0);
    if (metadata!=null) {
        
        String filename = ElementParameterParser.getValueWithUIFieldKey(node,"__FILENAME__", "FILENAME");
    	String encoding = ElementParameterParser.getValue(node,"__ENCODING__");
    	String header = ElementParameterParser.getValue(node, "__HEADER__");
    	String footer = ElementParameterParser.getValue(node, "__FOOTER__");
    	String limit = ElementParameterParser.getValue(node, "__LIMIT__");
    	if(("").equals(limit)){
    		limit="-1";
    	}
    	String delim1 = ElementParameterParser.getValue(node, "__FIELDSEPARATOR__");     	
    	String rowSeparator1 = ElementParameterParser.getValue(node, "__ROWSEPARATOR__");
    	
    	
    	String escapeChar1 = ElementParameterParser.getValue(node, "__ESCAPE_CHAR__");
    	
    	if(("").equals(escapeChar1)){
    		escapeChar1 = "\"\"";
    	}
    	String escapeChar = escapeChar1.substring(1,escapeChar1.length()-1);
    	if(("'").equals(escapeChar)){
    		escapeChar = "\\'";
    	}
    	String textEnclosure1 = ElementParameterParser.getValue(node, "__TEXT_ENCLOSURE__");
    	if(("").equals(textEnclosure1)){
    		textEnclosure1 = "\"\"";
    	}
    	String textEnclosure = textEnclosure1.substring(1,textEnclosure1.length()-1);
    	if ("".equals(textEnclosure)) textEnclosure = "\0";
    	if(("'").equals(textEnclosure)){
    		textEnclosure = "\\'";
    	}
    	
    	String removeEmptyRow = ElementParameterParser.getValue(node, "__REMOVE_EMPTY_ROW__");
    	
    	List<Map<String, String>> trimSelects = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__TRIMSELECT__");
		String isTrimAllStr = ElementParameterParser.getValue(node,"__TRIMALL__");
		boolean isTrimAll = (isTrimAllStr!=null&&!("").equals(isTrimAllStr))?("true").equals(isTrimAllStr):true;
		
    	String dieOnErrorStr = ElementParameterParser.getValue(node, "__DIE_ON_ERROR__");
		boolean dieOnError = (dieOnErrorStr!=null&&!("").equals(dieOnErrorStr))?("true").equals(dieOnErrorStr):false;
		
		String checkNumStr = ElementParameterParser.getValue(node, "__CHECK_FIELDS_NUM__");
		boolean checkNum = (checkNumStr!=null&&!("").equals(checkNumStr))?("true").equals(checkNumStr):false; 
		
		String advancedSeparatorStr = ElementParameterParser.getValue(node, "__ADVANCED_SEPARATOR__");
		boolean advancedSeparator = (advancedSeparatorStr!=null&&!("").equals(advancedSeparatorStr))?("true").equals(advancedSeparatorStr):false;
		String thousandsSeparator = ElementParameterParser.getValueWithJavaType(node, "__THOUSANDS_SEPARATOR__", JavaTypesManager.CHARACTER);
		String decimalSeparator = ElementParameterParser.getValueWithJavaType(node, "__DECIMAL_SEPARATOR__", JavaTypesManager.CHARACTER);
		
		boolean uncompress = ("true").equals(ElementParameterParser.getValue(node,"__UNCOMPRESS__"));
		
		boolean hasDynamic = metadata.isDynamicSchema();
		if(hasDynamic){
%>
boolean isFirstCheckDyn_<%=cid %> = true;
routines.system.Dynamic dynamic_<%=cid %> = new routines.system.Dynamic();
<%
		}
%>
		int nb_line_<%=cid%> = 0;
		int footer_<%=cid %> = <%= footer%>;
		int totalLine<%=cid %> = 0;
		int limit<%=cid %> = <%= limit %>;
		int lastLine<%=cid %> = -1;	
		
		char fieldSeparator_<%=cid %>[] = null;
		
		//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
		if ( ((String)<%=delim1%>).length() > 0 ){
			fieldSeparator_<%=cid %> = ((String)<%=delim1%>).toCharArray();
		}else {			
			throw new IllegalArgumentException("Field Separator must be assigned a char."); 
		}
		
		char rowSeparator_<%=cid %>[] = null;
		
		//support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'. 
		if ( ((String)<%=rowSeparator1%>).length() > 0 ){
			rowSeparator_<%=cid %> = ((String)<%=rowSeparator1%>).toCharArray();
		}else {
			throw new IllegalArgumentException("Row Separator must be assigned a char."); 
		}
		
		Object filename_<%=cid %> = <%=filename %>;		
		com.csvreader.CsvReader csvReader<%=cid %> = null;

		try{
<%
		if(uncompress){
%>
        java.util.zip.ZipInputStream zis_<%=cid %> = null;
        if(filename_<%=cid %> instanceof java.io.InputStream){
        	zis_<%=cid %> = new java.util.zip.ZipInputStream(new java.io.BufferedInputStream((java.io.InputStream)filename_<%=cid %>));
        }else{
        	zis_<%=cid %> = new java.util.zip.ZipInputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(filename_<%=cid %>.toString())));
        }
        java.util.zip.ZipEntry entry_<%=cid %> = null;
        
        while ((entry_<%=cid %> = zis_<%=cid %>.getNextEntry()) != null) {
        	if(entry_<%=cid %>.isDirectory()){ //directory
        		continue;
        	}
        	csvReader<%=cid %>=new com.csvreader.CsvReader(zis_<%=cid %>, fieldSeparator_<%=cid %>[0], java.nio.charset.Charset.forName(<%=encoding %>));
<%
		}else{
%>
		if(filename_<%=cid %> instanceof java.io.InputStream){
			csvReader<%=cid %>=new com.csvreader.CsvReader((java.io.InputStream)filename_<%=cid %>, fieldSeparator_<%=cid %>[0], java.nio.charset.Charset.forName(<%=encoding %>));
		}else{
			csvReader<%=cid %>=new com.csvreader.CsvReader(new java.io.BufferedReader(new java.io.InputStreamReader(
                	new java.io.FileInputStream(filename_<%=cid %>.toString()),<%=encoding %>)), fieldSeparator_<%=cid %>[0]);
        }
<%
		}
%>
		if ( (rowSeparator_<%=cid %>[0] != '\n') && (rowSeparator_<%=cid %>[0] != '\r') )
        	csvReader<%=cid %>.setRecordDelimiter(rowSeparator_<%=cid %>[0]);
        	
<%
		if(("").equals(textEnclosure1) || textEnclosure1.startsWith("\"")){//normal situation
%>
        csvReader<%=cid %>.setTextQualifier('<%=textEnclosure %>');
<%
		}else{ //context and global variables
%>
		String textEnclosure1_<%=cid %> = <%=textEnclosure1 %>; 
		char textEnclosure_<%=cid %>[] = null;
        
        if(((String)textEnclosure1_<%=cid %>).length() > 0 ){ 
  			textEnclosure_<%=cid %> = ((String)textEnclosure1_<%=cid %>).toCharArray(); 
		}else { 
            throw new IllegalArgumentException("Text Enclosure must be assigned a char."); 
        }
		csvReader<%=cid %>.setTextQualifier(textEnclosure_<%=cid %>[0]); 
<%
		}
		
		if(("").equals(escapeChar1) || escapeChar1.startsWith("\"")){//normal situation
        	if(("\\\\").equals(escapeChar)){
        %>
            csvReader<%=cid %>.setEscapeMode(com.csvreader.CsvReader.ESCAPE_MODE_BACKSLASH);
<%
        	}else if(escapeChar.equals(textEnclosure)){
        %>
            csvReader<%=cid %>.setEscapeMode(com.csvreader.CsvReader.ESCAPE_MODE_DOUBLED);
<%
        	}else{
        %>
            //?????doesn't work for other escapeChar
<%
        	}
        }else{//context and global variables
 %> 
        String escapeChar1_<%=cid %> = <%=escapeChar1 %>;          
        char escapeChar_<%=cid %>[] = null;
        
        if(((String)escapeChar1_<%=cid %>).length() > 0 ){ 
        	escapeChar_<%=cid %> = ((String)escapeChar1_<%=cid %>).toCharArray(); 
  		}else { 
            throw new IllegalArgumentException("Escape Char must be assigned a char."); 
        }
       	if(escapeChar_<%=cid %>[0] == '\\'){
       		csvReader<%=cid %>.setEscapeMode(com.csvreader.CsvReader.ESCAPE_MODE_BACKSLASH);
       	}else if(escapeChar_<%=cid %>[0] ==<%if(("").equals(textEnclosure1) || textEnclosure1.startsWith("\"")){%>
       	'<%=textEnclosure %>'<%}else{%>textEnclosure_<%=cid %>[0]<%}%>){
       		csvReader<%=cid %>.setEscapeMode(com.csvreader.CsvReader.ESCAPE_MODE_DOUBLED);
       	}
<%		}
	%>      
	
		String[] row<%=cid %>=null;
		
		if(footer_<%=cid %> > 0){
			for(totalLine<%=cid %>=0;totalLine<%=cid %> < <%= header %>; totalLine<%=cid %>++){
				csvReader<%=cid %>.readRecord();
			}
			csvReader<%=cid %>.setSkipEmptyRecords(<%=removeEmptyRow %>);
            while (csvReader<%=cid %>.readRecord()) {
<%             	if(("true").equals(removeEmptyRow)){%>
				row<%=cid %>=csvReader<%=cid %>.getValues();
				if(!(row<%=cid %>.length == 1 && ("\015").equals(row<%=cid %>[0]))){//empty line when row separator is '\n'
<%				}%>
                
                	totalLine<%=cid %>++;
                
<%            	if(("true").equals(removeEmptyRow)){%>
				}
<%				}%>
                
            }
            int lastLineTemp<%=cid %> = totalLine<%=cid %> - footer_<%=cid %>   < 0? 0 : totalLine<%=cid %> - footer_<%=cid %> ;
            if(lastLine<%=cid %> > 0){
                lastLine<%=cid %> = lastLine<%=cid %> < lastLineTemp<%=cid %> ? lastLine<%=cid %> : lastLineTemp<%=cid %>; 
            }else {
                lastLine<%=cid %> = lastLineTemp<%=cid %>;
            }
         
          	csvReader<%=cid %>.close();
          	
        if(filename_<%=cid %> instanceof java.io.InputStream){
		 	csvReader<%=cid %>=new com.csvreader.CsvReader((java.io.InputStream)filename_<%=cid %>, fieldSeparator_<%=cid %>[0], java.nio.charset.Charset.forName(<%=encoding %>));
        }else{
		 	csvReader<%=cid %>=new com.csvreader.CsvReader(new java.io.BufferedReader(new java.io.InputStreamReader(
		          new java.io.FileInputStream(filename_<%=cid %>.toString()),<%=encoding %>)), fieldSeparator_<%=cid %>[0]);
		}
	          
		if ( (rowSeparator_<%=cid %>[0] != '\n') && (rowSeparator_<%=cid %>[0] != '\r') )	
        	csvReader<%=cid %>.setRecordDelimiter(rowSeparator_<%=cid %>[0]);
<%
		if(("").equals(textEnclosure1) || textEnclosure1.startsWith("\"")){//normal situation
%>
		csvReader<%=cid %>.setTextQualifier('<%=textEnclosure %>');
<%
		}else{
%>
		csvReader<%=cid %>.setTextQualifier(textEnclosure_<%=cid %>[0]);
<%
		}
		if(("").equals(escapeChar1) || escapeChar1.startsWith("\"")){//normal situation
        	if(("\\\\").equals(escapeChar)){
        %>
        csvReader<%=cid %>.setEscapeMode(com.csvreader.CsvReader.ESCAPE_MODE_BACKSLASH);
<%
        	}else if(escapeChar.equals(textEnclosure)){
        %>
        csvReader<%=cid %>.setEscapeMode(com.csvreader.CsvReader.ESCAPE_MODE_DOUBLED);
<%
        	}else{
        %>
        //?????doesn't work for other escapeChar
<%
        	}
        }else{//context and global variables
%> 
       	if(escapeChar_<%=cid %>[0] == '\\'){
       		csvReader<%=cid %>.setEscapeMode(com.csvreader.CsvReader.ESCAPE_MODE_BACKSLASH);
       	}else if(escapeChar_<%=cid %>[0] == <%if(("").equals(textEnclosure1) || textEnclosure1.startsWith("\"")){%>
       	'<%=textEnclosure %>'<%}else{%>textEnclosure_<%=cid %>[0]<%}%>){
       		csvReader<%=cid %>.setEscapeMode(com.csvreader.CsvReader.ESCAPE_MODE_DOUBLED);
       	}
<%
        }
        %>  
          
        }
        
        
        
        int currentLine<%=cid %> = 0;
        int outputLine<%=cid %> = 0;
        
        if(limit<%=cid%> != 0){
        	for(currentLine<%=cid %>=0;currentLine<%=cid %> < <%= header %><%=hasDynamic?"-1":""%>;currentLine<%=cid %>++){
        		csvReader<%=cid %>.readRecord();
        	}
        }
        csvReader<%=cid %>.setSkipEmptyRecords(<%=removeEmptyRow %>);
        while ( limit<%=cid%> != 0 && csvReader<%=cid %>.readRecord() ) { 
        
        	row<%=cid %>=csvReader<%=cid %>.getValues();
        	
 <%
   		if(("true").equals(removeEmptyRow)){%>
        	if(row<%=cid %>.length == 1 && ("\015").equals(row<%=cid %>[0])){//empty line when row separator is '\n'
        		continue;
        	}
<%		}%>
        	
        	
        	currentLine<%=cid %>++;
            
            if(lastLine<%=cid %> > -1 && currentLine<%=cid %> > lastLine<%=cid %>) {
                break;
            }
            outputLine<%=cid %>++;
            if (limit<%=cid %> > 0 && outputLine<%=cid %> > limit<%=cid %>) {
                break;
            }  
                                                                      
<%
	List< ? extends IConnection> conns = node.getOutgoingSortedConnections();

    String rejectConnName = "";
    List<? extends IConnection> rejectConns = node.getOutgoingConnections("REJECT");
    if(rejectConns != null && rejectConns.size() > 0) {
        IConnection rejectConn = rejectConns.get(0);
        rejectConnName = rejectConn.getName();
    }
    List<IMetadataColumn> rejectColumnList = null;
    IMetadataTable metadataTable = node.getMetadataFromConnector("REJECT");
    if(metadataTable != null) {
        rejectColumnList = metadataTable.getListColumns();      
    }

    	if (conns!=null) {
    		if (conns.size()>0) {
    			for (int i=0;i<conns.size();i++) {
    				IConnection connTemp = conns.get(i);
    				if (connTemp.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
%>
    		<%=connTemp.getName() %> = null;			
<%
    				}
    			}
    		}
    	}
    	
	String firstConnName = "";
	if (conns!=null) {
		if (conns.size()>0) {
			IConnection conn = conns.get(0);
			firstConnName = conn.getName();
			
			if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
			%>
			boolean whetherReject_<%=cid %> = false;
			<%=firstConnName %> = new <%=conn.getName() %>Struct();
			try {			
			<%
				List<IMetadataColumn> columns=metadata.getListColumns();
				int columnSize = columns.size();
				%>				
				
			if(row<%=cid %>.length == 1 && ("\015").equals(row<%=cid %>[0])){//empty line when row separator is '\n'
				
<%
		for (IMetadataColumn column1: metadata.getListColumns()) {%>

				<%=firstConnName %>.<%=column1.getLabel() %> = <%=JavaTypesManager.getDefaultValueFromJavaIdType(column1.getTalendType(), column1.isNullable())%>;
				
<%		}%>
				
			}else{
			
<%
			boolean hasStringDefault = false;
			for (int valueM=0; valueM<columnSize; valueM++) {
				IMetadataColumn column = columns.get(valueM);
				JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
				if(javaType == JavaTypesManager.STRING || javaType == JavaTypesManager.OBJECT){
					if(hasStringDefault==false && column.getDefault()!=null && column.getDefault().length() > 0 ){
						hasStringDefault = true;
						break;
					}
				}
			}
			if(hasDynamic){// generate the dynamic schema code
				generateCode.colLen = columnSize;
				generateCode.generateDynamicSchemaCode(true); //true: CSV mode
			}
			if(hasStringDefault==true){
%>
				String temp_<%=cid %> = "";
<%
			}
			for (int i=0;i<columnSize;i++) {
					IMetadataColumn column=columns.get(i);
					String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
					JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
					String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
			%>
						
			
				if(<%=i %> < row<%=cid %>.length){				
<%
					if(javaType == JavaTypesManager.STRING || javaType == JavaTypesManager.OBJECT) {
						String defaultValue = column.getDefault();
						if(defaultValue!=null && defaultValue.length()>0){
%>
					temp_<%=cid %> = row<%=cid %>[<%=i %>]<%=(isTrimAll || (!trimSelects.isEmpty() && ("true").equals(trimSelects.get(i).get("TRIM"))))?".trim()":"" %>;
					if(temp_<%=cid %>.length() > 0){
						<%=firstConnName %>.<%=column.getLabel() %> = temp_<%=cid %>;
					}else{
						<%=firstConnName %>.<%=column.getLabel() %> = <%=defaultValue %>;
					}
<%
						}else{
%>
					<%=firstConnName %>.<%=column.getLabel() %> = row<%=cid %>[<%=i %>]<%=(isTrimAll || (!trimSelects.isEmpty() && ("true").equals(trimSelects.get(i).get("TRIM"))))?".trim()":"" %>;
<%
						}
					} else {
%>
						if(row<%=cid %>[<%=i %>].length() > 0) {
	<%
							if(javaType == JavaTypesManager.DATE) {
								if(checkNum){
	%>
								<%=firstConnName %>.<%=column.getLabel() %> = ParserUtils.parseTo_Date(row<%=cid %>[<%=i %>]<%=(isTrimAll || (!trimSelects.isEmpty() && ("true").equals(trimSelects.get(i).get("TRIM"))))?".trim()":"" %>, <%= patternValue %>, false);
	<%
								}else{
	%>
								<%=firstConnName %>.<%=column.getLabel() %> = ParserUtils.parseTo_Date(row<%=cid %>[<%=i %>]<%=(isTrimAll || (!trimSelects.isEmpty() && ("true").equals(trimSelects.get(i).get("TRIM"))))?".trim()":"" %>, <%= patternValue %>);
	<%
								}
							} else if(advancedSeparator && JavaTypesManager.isNumberType(javaType, column.isNullable())) { 
	%>
								<%=firstConnName %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%= typeToGenerate %>(ParserUtils.parseTo_Number(row<%=cid %>[<%=i %>]<%=(isTrimAll || (!trimSelects.isEmpty() && ("true").equals(trimSelects.get(i).get("TRIM"))))?".trim()":"" %>, <%= thousandsSeparator %>, <%= decimalSeparator %>));
	<%
							}else if(javaType == JavaTypesManager.BYTE_ARRAY){ 
	%>							
							    <%=firstConnName %>.<%=column.getLabel() %> = row<%=cid %>[<%=i %>]<%=(isTrimAll || (!trimSelects.isEmpty() && ("true").equals(trimSelects.get(i).get("TRIM"))))?".trim()":"" %>.getBytes(<%=encoding %>);
	<%
							}else if(column.getTalendType().equals("id_Dynamic")){
	%>
for (int i = 0; i < dynamic_<%=cid%>.getColumnCount(); i++) {
	dynamic_<%=cid%>.clearColumnValues();
}
int fieldCount = row<%=cid %>.length;
for (int i = 0; i < dynamic_<%=cid%>.getColumnCount(); i++) {
	if ((<%=columnSize%>-1+i) < fieldCount)
		dynamic_<%=cid%>.addColumnValue(row<%=cid %>[<%=columnSize%>-1+i]<%=(isTrimAll || (!trimSelects.isEmpty() && ("true").equals(trimSelects.get(i).get("TRIM"))))?".trim()":"" %>);
	else
		dynamic_<%=cid%>.addColumnValue("");
}
<%=firstConnName %>.<%=column.getLabel() %> = dynamic_<%=cid%>;
	<%
							}else {
	%>
								<%=firstConnName %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%= typeToGenerate %>(row<%=cid %>[<%=i %>]<%=(isTrimAll || (!trimSelects.isEmpty() && ("true").equals(trimSelects.get(i).get("TRIM"))))?".trim()":"" %>);
	<%
							}
	%>					
						}else{
							<%=firstConnName %>.<%=column.getLabel() %> = <%=JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate, column.getDefault())%>;
						}
	<%					
					}%>	
								
				}else{
					<%=firstConnName %>.<%=column.getLabel() %> = <%=JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate, column.getDefault()) %>;
				}

<%			}%>

			}
			
<%if(checkNum) {%>
	 int filedsum_<%=cid %> = row<%=cid %>.length;
	 if(filedsum_<%=cid %> < <%=metadata.getListColumns().size() %>){
	 	throw new Exception("Column(s) missing");
	 } else if(filedsum_<%=cid %> > <%=metadata.getListColumns().size() %>) {
	 	throw new RuntimeException("Too many columns");
	 }     
<%}%>	

<%if(rejectConnName.equals(firstConnName)) {%> <%=firstConnName %> = null; <%}%>
			
    } catch (Exception e) {
        whetherReject_<%=cid%> = true;
        <%
        if (dieOnError) {
            %>
            throw(e);
            <%
        } else {
            if(!("").equals(rejectConnName)&&!rejectConnName.equals(firstConnName)&&rejectColumnList != null && rejectColumnList.size() > 0) {

                %>
                    <%=rejectConnName %> = new <%=rejectConnName %>Struct();
                <%
                for(IMetadataColumn column : metadata.getListColumns()) {
                    %>
                    <%=rejectConnName%>.<%=column.getLabel()%> = <%=firstConnName%>.<%=column.getLabel()%>;
                    <%
                }
                %>
                <%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
                <%=firstConnName %> = null;
                <%
            } else if(("").equals(rejectConnName)){
                %>
                System.err.println(e.getMessage());
                <%=firstConnName %> = null;
                <%
            } else if(rejectConnName.equals(firstConnName)){%>
            	<%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
            <%}
        } 
        %>
    }

<%			
			}
		}
		if (conns.size()>0) {	
			boolean isFirstEnter = true;
			for (int i=0;i<conns.size();i++) {
				IConnection conn = conns.get(i);
				if ((conn.getName().compareTo(firstConnName)!=0)&&(conn.getName().compareTo(rejectConnName)!=0)&&(conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA))) {
%>
		<% if(isFirstEnter) {%>if(!whetherReject_<%=cid%>) { <% isFirstEnter = false; } %>      
             if(<%=conn.getName() %> == null){ 
            	 <%=conn.getName() %> = new <%=conn.getName() %>Struct();
             }
<%
			    	 for (IMetadataColumn column: metadata.getListColumns()) {
%>
	    	 <%=conn.getName() %>.<%=column.getLabel() %> = <%=firstConnName %>.<%=column.getLabel() %>;    				
<%
				 	}
				}
			}
%>
		<% if(!isFirstEnter) {%> } <% } %>	
<%
		}
	}
		}
	}
%>

<%
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }
%>
