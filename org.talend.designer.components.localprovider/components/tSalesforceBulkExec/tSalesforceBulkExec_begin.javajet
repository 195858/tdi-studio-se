<%@ jet 
imports="
    	org.talend.core.model.process.INode 
    	org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType	
		org.talend.core.model.utils.TalendTextUtils	
		java.util.List
		"
%>
	<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();    	
	
	String endpoint = ElementParameterParser.getValue(node, "__ENDPOINT__");
	String apiVersion = ElementParameterParser.getValue(node, "__API_VERSION__");
	String username = ElementParameterParser.getValue(node, "__USER__");
	String password = ElementParameterParser.getValue(node, "__PASS__");
	
	String sObject = ElementParameterParser.getValue(node, "__MODULENAME__");
	String customModulename = ElementParameterParser.getValue(node, "__CUSTOM_MODULE_NAME__");
	if ("CustomModule".equals(sObject)) {
		//modulename = customModulename; 
		sObject = customModulename;
	}else{
		sObject = "\""+sObject+"\"";
	}
	
	String action = ElementParameterParser.getValue(node, "__ACTION__");
	String externalId = ElementParameterParser.getValue(node, "__UPSERT_KEY_COLUMN__");
	//String contentType = ElementParameterParser.getValue(node, "__CONTENTTYPE__");
	String contentType = "csv";
	String bulkFileName = ElementParameterParser.getValue(node, "__BULKFILENAME__").trim();
	
	String maxBytes = ElementParameterParser.getValue(node,"__COMMIT_LEVEL_BYTES__");
	String maxRows = ElementParameterParser.getValue(node,"__COMMIT_LEVEL_ROWS__");
	
	boolean useProxy = ("true").equals(ElementParameterParser.getValue(node,"__USE_PROXY__"));
	String proxyHost = ElementParameterParser.getValue(node,"__PROXY_HOST__");
   	String proxyPort = ElementParameterParser.getValue(node,"__PROXY_PORT__");
   	String proxyUsername = ElementParameterParser.getValue(node,"__PROXY_USERNAME__");
   	String proxyPassword = ElementParameterParser.getValue(node,"__PROXY_PASSWORD__");
	
	boolean useExistingConn = ("true").equals(ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__"));
	String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
	
	String concurrencyMode = ElementParameterParser.getValue(node,"__CONCURRENCY_MODE__");
	String awaitTime = ElementParameterParser.getValue(node,"__AWAIT_TIME__");
	
	String loginType = ElementParameterParser.getValue(node,"__LOGIN_TYPE__");
	boolean useOAuth = "OAUTH".equals(loginType);
	if(useOAuth){
		String oauthKey = ElementParameterParser.getValue(node,"__OAUTH_CLIENT_ID__");
		String oauthSecret = ElementParameterParser.getValue(node,"__OAUTH_CLIENT_SECRET__");
		%>
		org.talend.salesforce.oauth.OAuthClient oauthClient_<%=cid%> = new org.talend.salesforce.oauth.OAuthClient();
		org.talend.salesforce.oauth.Token token_<%=cid%>;
		String endpointURL_<%=cid%> = null;
		String accessToken_<%=cid%> = null;
		oauthClient_<%=cid%>.setBaseOAuthURL(<%=endpoint%>);
		oauthClient_<%=cid%>.setClientID(<%=oauthKey%>);
		oauthClient_<%=cid%>.setClientSecret(<%=oauthSecret%>);
		String refreshToken_<%=cid%> = null;
		<%
		String tokenFile = ElementParameterParser.getValue(node,"__OAUTH_TOKEN_FILE__");
		if(!"".equals(tokenFile) && !"\"\"".equals(tokenFile)){
		%>
			// Attempt to load existing refresh token
			String tokenFile_<%=cid%> = <%=tokenFile%>;
			if(tokenFile_<%=cid%> != null){
				java.util.Properties properties_<%=cid%> = new java.util.Properties();
				try{
					java.io.FileInputStream inputStream_<%=cid%> = new java.io.FileInputStream(tokenFile_<%=cid%>);
					properties_<%=cid%>.load(inputStream_<%=cid%>);
					inputStream_<%=cid%>.close();
				}catch(java.io.FileNotFoundException e_<%=cid%>){
				}catch(java.io.IOException ee_<%=cid%>){
				}
				String storedRefreshToken_<%=cid%> = (String) properties_<%=cid%>.get("refreshtoken");
				
				// Check to see if the an existing refresh token was loaded.
				// If so, create a credential and call refreshToken() to get a new
				// access token.
				if(storedRefreshToken_<%=cid%> != null){
					// Request a new Access token using the refresh token.
					token_<%=cid%> = oauthClient_<%=cid%>.refreshToken(storedRefreshToken_<%=cid%>);
					endpointURL_<%=cid%> = oauthClient_<%=cid%>.getBulkEndpoint(token_<%=cid%>, <%=apiVersion%>);
					accessToken_<%=cid%> = token_<%=cid%>.getAccess_token();
					refreshToken_<%=cid%> = token_<%=cid%>.getRefresh_token();
				}
			}
		<%
		}
		%>
		if(accessToken_<%=cid%> == null || endpointURL_<%=cid%> == null){
			<%
			String callbackHost = ElementParameterParser.getValue(node,"__OAUTH_CALLBACK_HOST__");
			String callbackPort = ElementParameterParser.getValue(node,"__OAUTH_CALLBACK_PORT__");
			%>
			oauthClient_<%=cid%>.setCallbackHost(<%=callbackHost%>);
			oauthClient_<%=cid%>.setCallbackPort(<%=callbackPort%>);
			token_<%=cid%> = oauthClient_<%=cid%>.getToken();
			endpointURL_<%=cid%> = oauthClient_<%=cid%>.getBulkEndpoint(token_<%=cid%>, <%=apiVersion%>);
			accessToken_<%=cid%> = token_<%=cid%>.getAccess_token();
			refreshToken_<%=cid%> = token_<%=cid%>.getRefresh_token();
		}
		<%
		if(!"".equals(tokenFile) && !"\"\"".equals(tokenFile)){
		%>
			if(tokenFile_<%=cid%> != null && refreshToken_<%=cid%> != null){
				// Store the refresh token for future use.
				java.util.Properties storeProperties_<%=cid%> = new java.util.Properties();
				storeProperties_<%=cid%>.setProperty("refreshtoken", refreshToken_<%=cid%>);
				java.io.FileOutputStream outputStream_<%=cid%> = new java.io.FileOutputStream(tokenFile_<%=cid%>);
				storeProperties_<%=cid%>.store(outputStream_<%=cid%>, null);
				if(outputStream_<%=cid%> != null){
				    outputStream_<%=cid%>.close();
				}
			}
		<%
		}
	}
	%>
	int nb_line_<%=cid %> = 0;
    int nb_success_<%=cid%> = 0;
    int nb_reject_<%=cid%> = 0;
	
	org.talend.salesforceBulk.SalesforceBulkAPI sforceBulk_<%=cid%> = new org.talend.salesforceBulk.SalesforceBulkAPI();
	sforceBulk_<%=cid%>.setConcurrencyMode("<%=concurrencyMode%>");
	sforceBulk_<%=cid%>.setAwaitTime(<%=awaitTime%>);
	<%
	if(useExistingConn){
	%>
		if(globalMap.get("conn_<%=connection %>")==null){
			throw new RuntimeException("Get null connection from <%=connection %>");
		}
		sforceBulk_<%=cid%>.login((com.sforce.async.BulkConnection)globalMap.get("conn_<%=connection %>"));
	<%
	}else{
		if(useOAuth){
		%>
			sforceBulk_<%=cid%>.login(accessToken_<%=cid%>, endpointURL_<%=cid%>);
		<%
		}else{
			if(useProxy){
			%>
				sforceBulk_<%=cid%>.setProxy(true,<%=proxyHost%>,<%=TalendTextUtils.removeQuotes(proxyPort)%>,<%=proxyUsername%>,<%=proxyPassword%>);
			<%
			}
			%>
			sforceBulk_<%=cid%>.login(<%=endpoint%>,<%=username%>,<%=password%>,<%=apiVersion%>);
		<%
		}
	}
	%>


	sforceBulk_<%=cid%>.executeBulk(<%=sObject%>,"<%=action%>",<%=externalId%>,"<%=contentType%>",<%=bulkFileName%>,<%=maxBytes%>,<%=maxRows%>);

	<%
	List<IMetadataTable> metadatas = node.getMetadataList();
	if ((metadatas!=null)&&(metadatas.size()>0)) {//1
	    IMetadataTable metadata = metadatas.get(0);
	    if (metadata!=null) {//2
		%>
			int j_<%=cid%>=0;
			int batchCount_<%=cid%> = sforceBulk_<%=cid%>.getBatchCount();
			for(int i = 0; i < batchCount_<%=cid%>; i++){
				java.util.List<java.util.Map<String,String>> resultListMessage_<%=cid%> = sforceBulk_<%=cid%>.getBatchLog(i);
				for(java.util.Map<String,String> resultMessage_<%=cid%> : resultListMessage_<%=cid%>){
					j_<%=cid%>++;
			<% 
			List<? extends IConnection> outgoingConns = node.getOutgoingSortedConnections();
			if(outgoingConns!=null){
				for (int i=0;i<outgoingConns.size();i++) {
			    IConnection outgoingConn = outgoingConns.get(i);
			    	if (outgoingConn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
					%>
						<%=outgoingConn.getName() %> = null;			
					<%
			    	}
			    }
			}
    	
			List<? extends IConnection> connsSuccess = node.getOutgoingConnections("MAIN");
			List<? extends IConnection> connsReject = node.getOutgoingConnections("REJECT");
			%>	
			if("true".equals(resultMessage_<%=cid%>.get("Success"))){
				<%
				if (connsSuccess != null && connsSuccess.size() == 1) {
					IConnection connSuccess = connsSuccess.get(0);
					if (connSuccess.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
					%>
						nb_success_<%=cid %>++;
						<%=connSuccess.getName() %> = new <%=connSuccess.getName() %>Struct();

						<%=connSuccess.getName() %>.salesforce_created = resultMessage_<%=cid%>.get("Created");
						<%=connSuccess.getName() %>.salesforce_id = resultMessage_<%=cid%>.get("Id");
						<%
						for (IMetadataColumn column: metadata.getListColumns()) {
							String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
							JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
							String pattern = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
							%>			
							if("#N/A".equals(String.valueOf(resultMessage_<%=cid%>.get("<%=column.getLabel() %>")))){
				        		resultMessage_<%=cid%>.put("<%=column.getLabel() %>",null);
				        	}
						    <%		
					        if(javaType == JavaTypesManager.STRING ){
							%>
					            <%=connSuccess.getName() %>.<%=column.getLabel() %> = resultMessage_<%=cid%>.get("<%=column.getLabel() %>");
							<%
					        }else if(javaType == JavaTypesManager.DATE){
					        %>
					            <%=connSuccess.getName() %>.<%=column.getLabel() %> = ParserUtils.parseTo_Date(resultMessage_<%=cid%>.get("<%=column.getLabel() %>"), <%= pattern %>);
					        <%
					        }else if(JavaTypesManager.isNumberType(javaType)) {
					        %>
					            <%=connSuccess.getName() %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%=typeToGenerate%>(resultMessage_<%=cid%>.get("<%=column.getLabel() %>"));
					        <%
					        }else { 
							%>
								<%=connSuccess.getName() %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%=typeToGenerate%>(resultMessage_<%=cid%>.get("<%=column.getLabel() %>"));
							<%
							}
							%>
				           			
						<%					 
						}
					}
				}
				%>
			}else{
				<%
				if (connsReject != null && connsReject.size() == 1) {
					IConnection connReject = connsReject.get(0);
					if (connReject.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
					%>
						nb_reject_<%=cid %>++;
						<%=connReject.getName() %> = new <%=connReject.getName() %>Struct();
						<%=connReject.getName() %>.error = resultMessage_<%=cid%>.get("Error");
			
						<%
						for (IMetadataColumn column: metadata.getListColumns()) {
							String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
							JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
							String pattern = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
							%>			
							if("#N/A".equals(String.valueOf(resultMessage_<%=cid%>.get("<%=column.getLabel() %>")))){
					        		resultMessage_<%=cid%>.put("<%=column.getLabel() %>",null);
					        }
						    <%		
					        if(javaType == JavaTypesManager.STRING ){
							%>
					            <%=connReject.getName() %>.<%=column.getLabel() %> = resultMessage_<%=cid%>.get("<%=column.getLabel() %>");
							<%
					        }else if(javaType == JavaTypesManager.DATE && pattern != null){
					        %>
					            <%=connReject.getName() %>.<%=column.getLabel() %> = ParserUtils.parseTo_Date(resultMessage_<%=cid%>.get("<%=column.getLabel() %>"), <%= pattern %>);
					        <%
					        }else if(JavaTypesManager.isNumberType(javaType)) {
					        %>
					            <%=connReject.getName() %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%=typeToGenerate%>(resultMessage_<%=cid%>.get("<%=column.getLabel() %>"));
					        <%
					        }else { 
							%>
								<%=connReject.getName() %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%=typeToGenerate%>(resultMessage_<%=cid%>.get("<%=column.getLabel() %>"));
							<%
							}
							%>
						<%					 
						}
					}
				}else{
				%>
					System.err.print("Row "+j_<%=cid%>+":"+resultMessage_<%=cid%>.get("Error"));
				<%
				}
		}//2
	}//1
	%>
			}
				
