<%@ jet 
	imports="
	java.util.ArrayList
	java.util.List
	java.util.Map
	java.util.HashMap
	org.talend.core.model.metadata.IMetadataTable
	org.talend.core.model.metadata.IMetadataColumn
	org.talend.core.model.metadata.MetadataTalendType
	org.talend.core.model.metadata.types.JavaTypesManager
	org.talend.core.model.metadata.types.JavaType
	org.talend.designer.mapper.MapperMain
	org.talend.designer.codegen.config.CodeGeneratorArgument
	org.talend.designer.mapper.MapperComponent
	org.talend.designer.mapper.external.data.ExternalMapperData 
	org.talend.designer.mapper.external.data.ExternalMapperTable
	org.talend.designer.mapper.external.data.ExternalMapperTableEntry
	org.talend.core.model.process.IConnection
	org.talend.designer.mapper.language.ILanguage
	org.talend.designer.mapper.language.generation.GenerationManagerFactory
	org.talend.designer.mapper.language.generation.JavaGenerationManager
	org.talend.designer.mapper.language.LanguageProvider
	" 
%>

<%

	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	MapperComponent node = (MapperComponent) codeGenArgument.getArgument();
	boolean stats = codeGenArgument.isStatistics();
	
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        ExternalMapperData data = (ExternalMapperData) node.getExternalData();
        List<ExternalMapperTable> varsTables = data.getVarsTables();
        ILanguage currentLanguage = LanguageProvider.getJavaLanguage();
        JavaGenerationManager gm = (JavaGenerationManager) GenerationManagerFactory.getInstance().getGenerationManager(currentLanguage);

%>
// ###############################
// # Lookup's keys initialization<%

        List<IConnection> inputConnections = (List<IConnection>) node.getIncomingConnections();

        HashMap<String, IConnection> hNameToConnection = new HashMap<String, IConnection>();
        for (IConnection connection : inputConnections) {
            hNameToConnection.put(connection.getName(), connection);
        }

        List<ExternalMapperTable> inputTables = new ArrayList<ExternalMapperTable>(data.getInputTables());
        int lstSizeInputs = inputTables.size();
        for (int i = 1; i < lstSizeInputs; i++) {
            ExternalMapperTable inputTable = (ExternalMapperTable) inputTables.get(i);
            String tableName = inputTable.getName();
            IConnection connection = hNameToConnection.get(tableName);
            if (connection == null) {
                continue;
            }
            List<ExternalMapperTableEntry> tableEntries = inputTable.getMetadataTableEntries();
            if (tableEntries == null) {
                continue;
            }
            String className = tableName + "Struct";
%>

//org.talend.designer.components.commons.AdvancedMemoryLookup<<%=tableName%>Struct> tHash_Lookup_<%=tableName%> = (org.talend.designer.components.commons.AdvancedMemoryLookup<<%=tableName%>Struct>) globalMap.get( "tHash_Lookup_<%=tableName%>" );
org.talend.designer.components.persistent.PersistentSortedAdvancedLookup<<%=tableName%>Struct> tHash_Lookup_<%=tableName%> = (org.talend.designer.components.persistent.PersistentSortedAdvancedLookup<<%=tableName%>Struct>) globalMap.get( "tHash_Lookup_<%=tableName%>" );

<%=className%> <%=tableName%>HashKey = new <%=className%>();
<%=className%> <%=tableName%>Default = new <%=className%>();
<%
        }
%>
// ###############################        

// ###############################
// # Vars initialization
<%

        /////////////////////////////////////////////////////////////////////////
        gm.setVarsTables(varsTables);

        List<ExternalMapperTable> varTablesList = new ArrayList<ExternalMapperTable>(varsTables);

        // constants
        for (ExternalMapperTable table : varTablesList) {
            List<ExternalMapperTableEntry> tableEntries = table.getMetadataTableEntries();
            if (tableEntries == null) {
                continue;
            }
            String tableName = table.getName();
            
            String instanceVarName = tableName + "__" + node.getUniqueName();
            String className = instanceVarName + "__Struct";
            
%>
class  <%=className%>  {

<%
            int lstSize = tableEntries.size();
            for (int i = 0; i < lstSize; i++) {
                ExternalMapperTableEntry varTableEntry = (ExternalMapperTableEntry) tableEntries.get(i);
                String javaType = varTableEntry.getType();

%>	<%= JavaTypesManager.getTypeToGenerate(javaType, varTableEntry.isNullable()) %> <%= varTableEntry.getName() %>;

<%
            }
%>}
<%= className %> <%= instanceVarName %> = new <%= className %>();
<%
        }
%>
// ###############################

// ###############################
// # Outputs initialization
<%

		  List<IConnection> outputConnections = (List<IConnection>) node.getOutgoingConnections();
		  Map<String, IConnection> nameToOutputConnection = new HashMap<String, IConnection>();
        for (IConnection connection : outputConnections) {
		  		nameToOutputConnection.put(connection.getName(), connection);
		  }

        List<ExternalMapperTable> outputTablesList = new ArrayList<ExternalMapperTable>(data.getOutputTables());
        // constants
        for (ExternalMapperTable table : outputTablesList) {
        
            List<ExternalMapperTableEntry> tableEntries = table.getMetadataTableEntries();
            if (tableEntries == null || nameToOutputConnection.get(table.getName()) == null) {
                continue;
            }
            String tableName = table.getName();
            
            String instanceVarName = tableName + "__" + node.getUniqueName();
            String className = tableName + "Struct";
            
%>
<%= className %> <%= tableName %>_tmp = new <%= className %>();
<%
        }
%>
// ###############################
<%

HashMap<String, ExternalMapperTableEntry> hExternalInputTableEntries = new HashMap<String, ExternalMapperTableEntry>();

String currentJoinedTableNames = "";

int sizeInputTables = inputTables.size();
        
List<IConnection> cumulatedInputConnections = new ArrayList<IConnection>();

for (int iInputTable = 0; iInputTable < sizeInputTables - 1; iInputTable++) { // T_TM_B_101
        
	ExternalMapperTable currentInputTable = inputTables.get(iInputTable);
	ExternalMapperTable nextInputTable = inputTables.get(iInputTable + 1);
	
	if(currentJoinedTableNames.length() > 0) {
		currentJoinedTableNames += "__";
	}
	
	currentJoinedTableNames += currentInputTable.getName();

	List<IMetadataColumn> nextColumnsKeys = new ArrayList<IMetadataColumn>();
	
	
	
	
	%>
	
	class SortableRow_<%= currentJoinedTableNames %> implements Comparable<SortableRow_<%= currentJoinedTableNames %>>, org.talend.designer.components.persistent.IPersistableRow { // G_TM_B_001 

		boolean is__rejectedInnerJoin;

	<%
	        

	        String nextTableName = nextInputTable.getName();
            IConnection nextConection = hNameToConnection.get(nextTableName);
            if (nextConection == null) {
                continue;
            }
	
	
        
                IMetadataTable nextMetadataTable = nextConection.getMetadataTable();
                if (nextInputTable != null) {
                    hExternalInputTableEntries.clear();
                    List<ExternalMapperTableEntry> metadataTableEntries = nextInputTable.getMetadataTableEntries();
                    if (metadataTableEntries == null) {
                        continue;
                    }
                    for (ExternalMapperTableEntry nextInputTableEntry : metadataTableEntries) {
                        hExternalInputTableEntries.put(nextInputTableEntry.getName(), nextInputTableEntry);
                    }
                    List<IMetadataColumn> listColumns = nextMetadataTable.getListColumns();
                    for (IMetadataColumn column : listColumns) {
                        String columnName = column.getLabel();
                        ExternalMapperTableEntry externalInputTableEntry = hExternalInputTableEntries.get(columnName);
                        if (externalInputTableEntry != null) {
                            String expressionKey = externalInputTableEntry.getExpression();
                            if (expressionKey != null && !"".equals(expressionKey.trim())) {
                            
                            	nextColumnsKeys.add(column);
                            
                            	%><%= JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable()) %> exprKey_<%= nextInputTable.getName() %>__<%=column.getLabel() %>;
                            	<%
 		                           
                            }
                        }
                    }
				}
			
			
			
				        String currentTableName = currentInputTable.getName();
            IConnection currentConection = hNameToConnection.get(currentTableName);
            if (currentConection == null) {
                continue;
            }
	
        
                IMetadataTable currentMetadataTable = currentConection.getMetadataTable();
                if (currentInputTable != null) {

					for(IConnection connection : cumulatedInputConnections) {
                    	IMetadataTable joinedTable = connection.getMetadataTable();
	                    List<IMetadataColumn> listColumns = joinedTable.getListColumns();
                    	for (IMetadataColumn column : listColumns) {
	                        String columnName = column.getLabel();
                            
                            %><%= JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable()) %> <%= connection.getName() %>__<%=column.getLabel() %>;
                            <%
						}
                    }

                    hExternalInputTableEntries.clear();
                    List<ExternalMapperTableEntry> metadataTableEntries = currentInputTable.getMetadataTableEntries();
                    if (metadataTableEntries == null) {
                        continue;
                    }
                    for (ExternalMapperTableEntry currentInputTableEntry : metadataTableEntries) {
                        hExternalInputTableEntries.put(currentInputTableEntry.getName(), currentInputTableEntry);
                    }
                    cumulatedInputConnections.add(currentConection);

                    List<IMetadataColumn> listColumns = currentMetadataTable.getListColumns();
                    for (IMetadataColumn column : listColumns) {
                        String columnName = column.getLabel();
                            
                            	%><%= JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable()) %> <%= currentInputTable.getName() %>__<%=column.getLabel() %>;
                            	<%
 		                           
                    }
				}
				
		%>
		
		
		
		         public void fillFrom(<%
		         
			        String comma = "";
		         	for(IConnection connection : cumulatedInputConnections) {
			        	%><%=comma%> <%= connection.getName() %>Struct <%= connection.getName() %><%
		         		comma = ", ";
		         	}
                    int sizeNextColumns = nextColumnsKeys.size();
                    for (int iColumn = 0; iColumn < sizeNextColumns; iColumn++) { // T_TM_B_105
                    	IMetadataColumn column = nextColumnsKeys.get(iColumn);

		         		%><%=comma%> <%= JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable()) %> exprKey_<%= nextInputTable.getName() %>__<%=column.getLabel() %><%
                    
                    } // T_TM_B_105
                    
		         %>) {

					<%
		        	for(IConnection connection : cumulatedInputConnections) {
		        	
		        		IMetadataTable table = connection.getMetadataTable();
						List<IMetadataColumn> listColumns = table.getListColumns();
                    	for (IMetadataColumn column : listColumns) {
							%>this.<%= connection.getName() %>__<%= column.getLabel() %> = <%= connection.getName() %>.<%= column.getLabel() %>;
	                		<%
                		}
                	}
                	%>
                    <%
                    sizeNextColumns = nextColumnsKeys.size();
                    for (int iColumn = 0; iColumn < sizeNextColumns; iColumn++) { // T_TM_B_104
                    	IMetadataColumn column = nextColumnsKeys.get(iColumn);

						%>this.exprKey_<%= nextInputTable.getName() %>__<%=column.getLabel() %> = exprKey_<%= nextInputTable.getName() %>__<%=column.getLabel() %>;
						<%
                    
                    } // T_TM_B_104
                    %>
                }

                public void copyDataTo(<%
		         
		         comma = "";
		         for(IConnection connection : cumulatedInputConnections) {
			         %><%=comma%><%= connection.getName() %>Struct <%= connection.getName() %><%
		         	comma = ", ";
		         }
		         %>) {

					<%
		        	for(IConnection connection : cumulatedInputConnections) {
		        	
		        		IMetadataTable table = connection.getMetadataTable();
						List<IMetadataColumn> listColumns = table.getListColumns();
                    	for (IMetadataColumn column : listColumns) {
						%><%= connection.getName() %>.<%= column.getLabel() %> = this.<%= connection.getName() %>__<%= column.getLabel() %>;
	                	<%
                		}
                	}
                	%>
                }

		
		
		
		
		        public int compareTo(SortableRow_<%= currentJoinedTableNames %> other) {

                    int returnValue = 0;
                    
                    <%
                    sizeNextColumns = nextColumnsKeys.size();
                    for (int iColumn = 0; iColumn < sizeNextColumns; iColumn++) { // T_TM_B_102
                    	IMetadataColumn column = nextColumnsKeys.get(iColumn);
                    %>
                    
                    	returnValue = checkNullsAndCompare(this.exprKey_<%= nextInputTable.getName() %>__<%=column.getLabel() %>, other.exprKey_<%= nextInputTable.getName() %>__<%=column.getLabel() %>);
                    	if (returnValue != 0) {
	                        return returnValue;
                    	}
                    
                    <%
                    } // T_TM_B_102
                    %>

                    return returnValue;
                }

		    private int checkNullsAndCompare(Object object1, Object object2) {

        int ascendingInt = 1;

        int returnValue = 0;
        if (object1 instanceof String && object2 instanceof String) {
            returnValue = compareStrings((String) object1, (String) object2);
        } else if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return ascendingInt * returnValue;
    }

    private int compareStrings(String string1, String string2) {
        boolean ignoreCase = true;
        if (ignoreCase) {
            return string1.compareToIgnoreCase(string2);
        } else {
            return string1.compareTo(string2);
        }
    }

    public void loadData(byte[] data) {

        ByteArrayInputStream bai = null;
        DataInputStream dis = null;
        byte[] byteArray = null;
        try {
            bai = new ByteArrayInputStream(data);
            dis = new DataInputStream(bai);
            
			int length = 0;
			
			this.is__rejectedInnerJoin = dis.readBoolean();
			
		<%	
		boolean hasAtLeastOneRead = false;
		if (currentMetadataTable !=null) {
		
		        	for(IConnection connection : cumulatedInputConnections) {
		        	
		        	
		        	
		        		IMetadataTable table = connection.getMetadataTable();
						List<IMetadataColumn> listColumns = table.getListColumns();
                    	for (IMetadataColumn column : listColumns) {
			  	hasAtLeastOneRead = true;
				JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
			 	String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
				if (JavaTypesManager.isJavaPrimitiveType(column.getTalendType(), column.isNullable())) {
					typeToGenerate=typeToGenerate.substring(0,1).toUpperCase()+typeToGenerate.substring(1);
					%>
			            this.<%= connection.getName() %>__<%= column.getLabel() %> = dis.read<%= typeToGenerate %>();
					<%
				} else if(typeToGenerate.equals("java.util.Date")) {
					%>
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.<%= connection.getName() %>__<%= column.getLabel() %> = null;
           				} else {
           			    	this.<%= connection.getName() %>__<%= column.getLabel() %> = new Date(dis.readLong());
           				}
					<%
				} else if(typeToGenerate.equals("String")) {
					%>
			            length = dis.readInt();
           				if (length == -1) {
           	    			this.<%= connection.getName() %>__<%= column.getLabel() %> = null;
           				} else {
               				byteArray = new byte[length];
               				dis.read(byteArray);
               				this.<%= connection.getName() %>__<%= column.getLabel() %> = new String(byteArray);
           				}
					<%
				} else {
					typeToGenerate =JavaTypesManager.getTypeToGenerate(column.getTalendType(), false);
					typeToGenerate=typeToGenerate.substring(0,1).toUpperCase()+typeToGenerate.substring(1);
					%>
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.<%= connection.getName() %>__<%= column.getLabel() %> = null;
           				} else {
           			    	this.<%= connection.getName() %>__<%= column.getLabel() %> = dis.read<%= typeToGenerate %>();
           				}
					<%
				}


                		}
                	}
                	%>
                    <%
                    sizeNextColumns = nextColumnsKeys.size();
                    for (int iColumn = 0; iColumn < sizeNextColumns; iColumn++) { // T_TM_B_104
                    	IMetadataColumn column = nextColumnsKeys.get(iColumn);

			  	hasAtLeastOneRead = true;
				JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
			 	String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
				if (JavaTypesManager.isJavaPrimitiveType(column.getTalendType(), column.isNullable())) {
					typeToGenerate=typeToGenerate.substring(0,1).toUpperCase()+typeToGenerate.substring(1);
					%>
			            this.exprKey_<%= nextInputTable.getName() %>__<%= column.getLabel() %> = dis.read<%= typeToGenerate %>();
					<%
				} else if(typeToGenerate.equals("java.util.Date")) {
					%>
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.exprKey_<%= nextInputTable.getName() %>__<%= column.getLabel() %> = null;
           				} else {
           			    	this.exprKey_<%= nextInputTable.getName() %>__<%= column.getLabel() %> = new Date(dis.readLong());
           				}
					<%
				} else if(typeToGenerate.equals("String")) {
					%>
			            length = dis.readInt();
           				if (length == -1) {
           	    			this.exprKey_<%= nextInputTable.getName() %>__<%= column.getLabel() %> = null;
           				} else {
               				byteArray = new byte[length];
               				dis.read(byteArray);
               				this.exprKey_<%= nextInputTable.getName() %>__<%= column.getLabel() %> = new String(byteArray);
           				}
					<%
				} else {
					typeToGenerate =JavaTypesManager.getTypeToGenerate(column.getTalendType(), false);
					typeToGenerate=typeToGenerate.substring(0,1).toUpperCase()+typeToGenerate.substring(1);
					%>
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.exprKey_<%= nextInputTable.getName() %>__<%= column.getLabel() %> = null;
           				} else {
           			    	this.exprKey_<%= nextInputTable.getName() %>__<%= column.getLabel() %> = dis.read<%= typeToGenerate %>();
           				}
					<%
				}
                    
                    } // T_TM_B_104
		
		
		



    	}
	    if(hasAtLeastOneRead) {
	    %>
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        <%
        }
        %>
        } finally {
            if (dis != null) {
                try {
                    dis.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    public byte[] toData() {
        ByteArrayOutputStream bao = null;
        DataOutputStream dos = null;
        byte[] byteArray = null;
        try {
            bao = new ByteArrayOutputStream();
            dos = new DataOutputStream(bao);

           	dos.writeBoolean(this.is__rejectedInnerJoin);

		<%	
		boolean hasAtLeastOneWrite = false;
		if (currentMetadataTable !=null) {
			
			
		        	for(IConnection connection : cumulatedInputConnections) {
		        	
		        		IMetadataTable table = connection.getMetadataTable();
						List<IMetadataColumn> listColumns = table.getListColumns();
                    	for (IMetadataColumn column : listColumns) {
				JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
				hasAtLeastOneWrite = true;
			 	String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
				if (JavaTypesManager.isJavaPrimitiveType(column.getTalendType(), column.isNullable())) {
					typeToGenerate=typeToGenerate.substring(0,1).toUpperCase()+typeToGenerate.substring(1);
					%>
		            	dos.write<%= typeToGenerate %>(this.<%= connection.getName() %>__<%= column.getLabel() %>);
					<%
				} else if(typeToGenerate.equals("String")) {
					%>
						if(this.<%= connection.getName() %>__<%= column.getLabel() %> == null) {
			                dos.writeInt(-1);
						} else {
			                byteArray = this.<%= connection.getName() %>__<%= column.getLabel() %>.getBytes();
           			    	dos.writeInt(byteArray.length);
               				dos.write(byteArray);
		            	}
					<%
				} else if(typeToGenerate.equals("java.util.Date")) {
					%>
						if(this.<%= connection.getName() %>__<%= column.getLabel() %> == null) {
			                dos.writeInt(-1);
						} else {
           			    	dos.writeLong(this.<%= connection.getName() %>__<%= column.getLabel() %>.getTime());
		            	}
					<%
				} else {
					typeToGenerate =JavaTypesManager.getTypeToGenerate(column.getTalendType(), false);
					typeToGenerate = typeToGenerate.substring(0,1).toUpperCase()+typeToGenerate.substring(1);
					%>
						if(this.<%= connection.getName() %>__<%= column.getLabel() %> == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.write<%= typeToGenerate %>(this.<%= connection.getName() %>__<%= column.getLabel() %>);
		            	}
					<%
				
				}
                		}
                	}
                	%>
                    <%
                    sizeNextColumns = nextColumnsKeys.size();
                    for (int iColumn = 0; iColumn < sizeNextColumns; iColumn++) { // T_TM_B_104
                    	IMetadataColumn column = nextColumnsKeys.get(iColumn);

				JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
				hasAtLeastOneWrite = true;
			 	String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
				if (JavaTypesManager.isJavaPrimitiveType(column.getTalendType(), column.isNullable())) {
					typeToGenerate=typeToGenerate.substring(0,1).toUpperCase()+typeToGenerate.substring(1);
					%>
		            	dos.write<%= typeToGenerate %>(this.exprKey_<%= nextInputTable.getName() %>__<%= column.getLabel() %>);
					<%
				} else if(typeToGenerate.equals("String")) {
					%>
						if(this.exprKey_<%= nextInputTable.getName() %>__<%= column.getLabel() %> == null) {
			                dos.writeInt(-1);
						} else {
			                byteArray = this.exprKey_<%= nextInputTable.getName() %>__<%= column.getLabel() %>.getBytes();
           			    	dos.writeInt(byteArray.length);
               				dos.write(byteArray);
		            	}
					<%
				} else if(typeToGenerate.equals("java.util.Date")) {
					%>
						if(this.exprKey_<%= nextInputTable.getName() %>__<%= column.getLabel() %> == null) {
			                dos.writeInt(-1);
						} else {
           			    	dos.writeLong(this.exprKey_<%= nextInputTable.getName() %>__<%= column.getLabel() %>.getTime());
		            	}
					<%
				} else {
					typeToGenerate =JavaTypesManager.getTypeToGenerate(column.getTalendType(), false);
					typeToGenerate = typeToGenerate.substring(0,1).toUpperCase()+typeToGenerate.substring(1);
					%>
						if(this.exprKey_<%= nextInputTable.getName() %>__<%= column.getLabel() %> == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.write<%= typeToGenerate %>(this.exprKey_<%= nextInputTable.getName() %>__<%= column.getLabel() %>);
		            	}
					<%
				
				}
                    
                    } // T_TM_B_104
			
			


    	}
	    if(hasAtLeastOneWrite) {
	    %>
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        <%
        }
        %>
        } finally {
            if (dos != null) {
                try {
                    dos.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
        return bao.toByteArray();
    }
		
		
		
		} // G_TM_B_001
		

	org.talend.designer.components.persistent.PersistentRowSorterIterator<SortableRow_<%= currentJoinedTableNames %>> fsi_<%= currentJoinedTableNames %> = 
		new org.talend.designer.components.persistent.PersistentRowSorterIterator<SortableRow_<%= currentJoinedTableNames %>>(
			"/home/amaumont/data/dev/projets/Talend/hashfile/sort/data_<%= currentJoinedTableNames %>") {
			public SortableRow_<%= currentJoinedTableNames %> createRowInstance() {
				return new SortableRow_<%= currentJoinedTableNames %>();
			}
		};
	
	fsi_<%= currentJoinedTableNames %>.initPut();

		
		
<%
} // T_TM_B_101      
%>        
        
        
        
        
        
        
