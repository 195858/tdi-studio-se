<%@ jet
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.IMetadataTable 
    	org.talend.core.model.metadata.IMetadataColumn 
    	org.talend.core.model.process.IConnection
    	org.talend.core.model.process.EConnectionType
    	java.util.List
	"
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();
%>
<%
List<IMetadataTable> metadatas = node.getMetadataList();
 String lookupConName = "";
 String hashName = "";
if ((metadatas!=null)&&(metadatas.size()>0)) {//1
    IMetadataTable metadata = metadatas.get(0);
   
    if (metadata!=null) {//2
    
       

        //get the input Main and Lookup connection
        IConnection inMainCon = null;
        IConnection inRefCon = null;   
        List< ? extends IConnection> connsIn = node.getIncomingConnections();     
        for (IConnection conn : connsIn) {//3
        	if (conn.getLineStyle().equals(EConnectionType.FLOW_MAIN)) {
        		inMainCon = conn;
        	}
        	else if(conn.getLineStyle().equals(EConnectionType.FLOW_REF))
        	{
        		inRefCon = conn;
        		lookupConName = inRefCon.getName();
        		hashName = lookupConName;
        		if (conn.getSource().getComponent().isHashComponent()) {
        			hashName = ElementParameterParser.getValue(conn.getSource(), "__LIST__");
        			lookupConName = "row2";
        		}
        	}
        }//3 
        }//2
        }//1
        
             
%>
   final java.util.Map<<%=lookupConName %>Struct, <%=lookupConName %>Struct> tHash_<%=cid %> =new java.util.LinkedHashMap<<%=lookupConName %>Struct, <%=lookupConName %>Struct>();
      tHash_<%=cid %>.putAll((java.util.Map<<%=lookupConName %>Struct, <%=lookupConName %>Struct>) globalMap.get("tHash_<%=hashName %>"));
            
            java.util.Iterator iterator_<%=cid %>= tHash_<%=cid %>.keySet().iterator();
			final java.util.List<<%=lookupConName %>Struct> list_<%=cid %>=new java.util.ArrayList<<%=lookupConName %>Struct>();
			while(iterator_<%=cid %>.hasNext()){
				list_<%=cid %>.add((<%=lookupConName %>Struct)iterator_<%=cid %>.next());
			}
			
    
 
 class Util_<%=cid %>{
			
        <%=lookupConName %>Struct lookupValue = null;
        <%=lookupConName %>Struct <%=lookupConName %>HashKey = new <%=lookupConName %>Struct();
        
        public boolean isJoined(int line_num) {    
        
          if(line_num>list_<%=cid %>.size()){
           return false;
           }else{
          <%=lookupConName %>HashKey=list_<%=cid %>.get(line_num-1);          
      


			             
            lookupValue = tHash_<%=cid %>.get(<%=lookupConName %>HashKey);        
            if(lookupValue != null){
            	return true;
            }  
            return false;
            }
        }
    }
   
        
  Util_<%=cid %> util_<%=cid %> = new Util_<%=cid %>();
  
   int nb_line_<%=cid %> = 0; 
   int lineNum_<%=cid %>= 0;
			 				
           