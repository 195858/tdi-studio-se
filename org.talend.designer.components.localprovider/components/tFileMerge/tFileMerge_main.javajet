<%@ jet
imports="
    	org.talend.core.model.process.INode 
    	org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.EConnectionType
		java.util.List
		java.util.Map
"
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();

List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {//11
    IMetadataTable metadata = metadatas.get(0);
    if (metadata!=null) {//22
%>

<%    
        String cid = node.getUniqueName();
            	
    	//get the input Main and Lookup connection
    	IConnection inMainCon = null;
    	IConnection inRefCon = null;   
    	List< ? extends IConnection> connsIn = node.getIncomingConnections();     
    	for (IConnection conn : connsIn) {//3
    		if (conn.getLineStyle().equals(EConnectionType.FLOW_MAIN)) {
    			inMainCon = conn;
    		}
    		else if(conn.getLineStyle().equals(EConnectionType.FLOW_REF))
    		{
    			inRefCon = conn;
    		}
        }//3
        
        if(inMainCon == null){
        	return "";
        }
        
        IMetadataTable preMetadata = inMainCon.getMetadataTable();
        String incomingName = inMainCon.getName();
        String inComingLookupName= inRefCon.getName();
        
    	List<IMetadataColumn> columns = metadata.getListColumns();
    	int columnSize = columns.size();
    	List<IMetadataColumn> preColumns = preMetadata.getListColumns();
    	int preColumnSize = preColumns.size();
    	int minSize = Math.min(columnSize, preColumnSize);
        
        List<Map<String, String>> lookupCols = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__LOOKUP_COLS__");
        boolean useLookup = ElementParameterParser.getValue(node, "__USE_LOOKUP_COLS__").equals("true");
        boolean useReject = ElementParameterParser.getValue(node, "__USE_INNER_JOIN__").equals("true");
        
    	List< ? extends IConnection> outConns = node.getOutgoingConnections(EConnectionType.FLOW_MAIN);
	
    	
    	for (IConnection conn : outConns) {
    		if(!conn.isActivate()) continue;
    		String outputConnName = conn.getName();    		
%>
	<%=outputConnName %> = null;	
	
	
	
<%		
		}
	    	
    	for (IConnection conn : outConns) {
    		if(!conn.isActivate()) continue;
    		String outputConnName = conn.getName();
%>
	
	<%=outputConnName %> = new <%=outputConnName %>Struct();	
    lineNum_<%=cid %>++;
<%
		//first, iterate with minSize
		for (int i = 0; i < columnSize; i++) {//4
			IMetadataColumn column = columns.get(i);
			
			
			//find the lookup column
			boolean isLookup = false;
			for (int j = 0; j < lookupCols.size(); j++) {
                 Map<String, String> lineValue = lookupCols.get(j);
                 if (column.getLabel().equals(lineValue.get("OUTPUT_COLUMN"))) {
					isLookup = true;
					break;
                 }
            }
            
            if(!isLookup) {
            if(i<preColumnSize){
            IMetadataColumn preColumn = preColumns.get(i);
%>					
	<%=outputConnName %>.<%=column.getLabel() %> = <%=incomingName %>.<%=preColumn.getLabel() %>;
		
			
<%
			}
			}
%>
<% if(isLookup){ //5
  
 
%>
   if(util_<%=cid %>.isJoined(lineNum_<%=cid %>)){
   
   <%=outputConnName %>.<%=column.getLabel() %>=util_<%=cid %>.lookupValue.<%=column.getLabel() %>;
   }
<%
}//5
%>   
   
    

<%			
		} //4
%>
      nb_line_<%=cid %>++;
<%		
	}
%>
    			
<%
    }//22
}//11
%>