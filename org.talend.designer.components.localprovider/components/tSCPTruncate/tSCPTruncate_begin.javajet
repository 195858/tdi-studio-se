<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.List
    java.util.Map
"
%>

<%
        CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
        INode node = (INode)codeGenArgument.getArgument();
        String cid = node.getUniqueName();

        String host = ElementParameterParser.getValue(
            node,
            "__HOST__"
        );

        String port = ElementParameterParser.getValue(
            node,
            "__PORT__"
        );

        String user = ElementParameterParser.getValue(
            node,
            "__USERNAME__"
        );

        String authMethod = ElementParameterParser.getValue(
            node,
            "__AUTH_METHOD__"
        );

        String privatekey = ElementParameterParser.getValue(
            node,
            "__PRIVATEKEY__"
        );
        
        List<Map<String, String>> filelist =
            (List<Map<String,String>>)ElementParameterParser.getObjectValue(
                node,
                "__FILELIST__"
        );
%>
	int nb_file_<%=cid%> = 0;
	globalMap.put("<%=cid %>_STATUS", "");


    /* Create a connection instance */

	<%
	String useExistingConn = ElementParameterParser.getValue(node, "__USE_EXISTING_CONNECTION__");
	
	if(("true").equals(useExistingConn)){
		String connection = ElementParameterParser.getValue(node, "__CONNECTION__");
		String conn= "conn_" + connection;
	%>
	
	ch.ethz.ssh2.Connection conn_<%=cid %> = (ch.ethz.ssh2.Connection)globalMap.get("<%=conn %>");
	
<%}else{%>

    String hostname_<%=cid%> = <%=host%>;
    String username_<%=cid%> = <%=user%>;

<%
        if(("").equals(port)){
%>
              ch.ethz.ssh2.Connection conn_<%=cid%> = new ch.ethz.ssh2.Connection(hostname_<%=cid%>);
<%
        } else {
%>
              ch.ethz.ssh2.Connection conn_<%=cid%> = new ch.ethz.ssh2.Connection(hostname_<%=cid%>,<%=port%>);
<%
        }
%>
              /* Now connect */
        conn_<%=cid%>.connect();
<%        
        if (("PUBLICKEY").equals(authMethod)) {
%>
        java.io.File keyfile_<%=cid%> = new java.io.File(<%=privatekey%>); 
            <%
            String passwordFieldName = "__PASSPHRASE__";
            %>
            <%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>        	
            boolean isAuthenticated_<%=cid%> = conn_<%=cid%>.authenticateWithPublicKey(username_<%=cid%>, keyfile_<%=cid%>, decryptedPassword_<%=cid%>);
              if (isAuthenticated_<%=cid%> == false)
                      throw new RuntimeException("Authentication failed.");
<%
        }
        if (("PASSWORD").equals(authMethod)) {
%>
            <%
            String passwordFieldName = "__PASSWORD__";
            %>
            <%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>			
	        boolean isAuthenticated_<%=cid%> = conn_<%=cid%>.authenticateWithPassword(username_<%=cid%>, decryptedPassword_<%=cid%>);
        if (isAuthenticated_<%=cid%> == false)
            throw new RuntimeException("Authentication failed.");
<%
        }
        if (("KEYBOARDINTERACTIVE").equals(authMethod)) {
%>
        boolean isAuthenticated_<%=cid%> = conn_<%=cid%>.authenticateWithKeyboardInteractive(username_<%=cid%>, 
            new ch.ethz.ssh2.InteractiveCallback() {
        
        		public String[] replyToChallenge(String name,
        				String instruction, int numPrompts,
        				String[] prompt, boolean[] echo)
        				throws java.lang.Exception {
        			// TODO Auto-generated method stub
        			String[] reply = new String[numPrompts];
                        <%
                        String passwordFieldName = "__PASSWORD__";
                        %>
                        <%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>	        			
        			for (int i = 0; i < reply.length; i++) {
	        				reply[i] = decryptedPassword_<%=cid%>;
        			}
        
        			return reply;
        		}
        	}	
        );
        if (isAuthenticated_<%=cid%> == false)
            throw new RuntimeException("Authentication failed.");
<%
        }
	}//if(useExistingConn)
%>

        ch.ethz.ssh2.SCPClient scp_<%=cid%> = new  ch.ethz.ssh2.SCPClient(conn_<%=cid%>);
        
        String[] destFileNames_<%=cid%> = new String[]{
         <%
             for (Map<String, String> file : filelist) {
         %>
             <%=file.get("DESTINATION")%>,
         <%          
            }
         %>
       };
       for(String destFile_<%=cid %> : destFileNames_<%=cid%>){
