<%@ jet 
  imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.List
    org.talend.core.model.process.IElementParameter
    org.talend.core.model.utils.NodeUtil 
  "
%>
<%@ include file="../templates/Log4j/Log4jFileUtil.javajet"%> 
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();
String host=ElementParameterParser.getValue(node, "__HOST__");
String port=ElementParameterParser.getValue(node, "__PORT__");
String username=ElementParameterParser.getValue(node, "__USERNAME__");
String password=ElementParameterParser.getValue(node, "__PASSWORD__");
String remoteDir = ElementParameterParser.getValue(node, "__REMOTEDIR__");
String filename = ElementParameterParser.getValue(node, "__FILENAME__");
boolean useProxy = ("true").equals(ElementParameterParser.getValue(node, "__USE_PROXY__"));
String proxyHost = ElementParameterParser.getValue(node, "__PROXY_HOST__");
String proxyPort = ElementParameterParser.getValue(node, "__PROXY_PORT__");
String proxyUser = ElementParameterParser.getValue(node, "__PROXY_USERNAME__");
String proxyPass = ElementParameterParser.getValue(node, "__PROXY_PASSWORD__");
String encoding = ElementParameterParser.getValue(node, "__ENCODING__");
String user = ElementParameterParser.getValue(node, "__USERNAME__");
String pass = ElementParameterParser.getValue(node, "__PASSWORD__");
String authMethod = ElementParameterParser.getValue(node, "__AUTH_METHOD__");
String privateKey = ElementParameterParser.getValue(node, "__PRIVATEKEY__");
String passPhrase = ElementParameterParser.getValue(node, "__PASSPHRASE__");    
String connectMode = ElementParameterParser.getValue(node, "__CONNECT_MODE__");
String connection = ElementParameterParser.getValue(node, "__CONNECTION__");
String conn= "conn_" + connection;
String useExistingConn = ElementParameterParser.getValue(node, "__USE_EXISTING_CONNECTION__");
boolean sftp = false;

boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
log4jFileUtil.componentStartInfo(node); 
log4jFileUtil.logParameters(node); 
if (("true").equals(useExistingConn)) {
  List<? extends INode> nodeList = node.getProcess().getGeneratingNodes();

  for (INode n : nodeList) {
    if (n.getUniqueName().equals(connection)) {
      sftp = ("true").equals(ElementParameterParser.getValue(n, "__SFTP__"));
    }
  }
} else {
  sftp = ("true").equals(ElementParameterParser.getValue(node, "__SFTP__"));
}
//The following part support the socks proxy for FTP and SFTP (Socks V4 or V5, they are all OK). 
//And it can not work with the FTP proxy directly, only support the socks proxy.
if (useProxy) {
%>
  java.util.Properties props_<%=cid%> = System.getProperties();
  props_<%=cid%>.put("socksProxyPort", <%=proxyPort %>);
  props_<%=cid%>.put("socksProxyHost", <%=proxyHost %>);
  props_<%=cid%>.put("java.net.socks.username", <%=proxyUser %>);
  props_<%=cid%>.put("java.net.socks.password", <%=proxyPass %>);        
<%
}

if (sftp) {
	if (("false").equals(useExistingConn)) {
  %>
		class MyUserInfo_<%=cid%> implements com.jcraft.jsch.UserInfo, com.jcraft.jsch.UIKeyboardInteractive {

			String passphrase_<%=cid %> = <%=passPhrase %>;

			public String getPassphrase() { return passphrase_<%=cid %>; }

			public String getPassword() { return null; } 

			public boolean promptPassword(String arg0) { return true; } 

			public boolean promptPassphrase(String arg0) { return true; } 

			public boolean promptYesNo(String arg0) { return true; } 

			public void showMessage(String arg0) { } 

			public String[] promptKeyboardInteractive(String destination, String name, String instruction, String[] prompt,
			boolean[] echo) {
				String[] password_<%=cid%> = {<%=pass%>};
				return password_<%=cid%>;
			}
		}; 
    	final com.jcraft.jsch.UserInfo defaultUserInfo_<%=cid%> = new MyUserInfo_<%=cid%>();
    	com.jcraft.jsch.JSch jsch_<%=cid%>=new com.jcraft.jsch.JSch(); 

    	<%if (("PUBLICKEY").equals(authMethod)) {%>
	  		<%if(isLog4jEnabled){%>
				log.info("<%=cid%> - SFTP authentication using a public key.");
				log.debug("Private key: '" + <%=privateKey %> + "'.");
	  		<%}%>
      		jsch_<%=cid%>.addIdentity(<%=privateKey %>, defaultUserInfo_<%=cid%>.getPassphrase());
    	<%}%>
    	com.jcraft.jsch.Session session_<%=cid%>=jsch_<%=cid%>.getSession(<%=user%>, <%=host%>, <%=port%>);

    	<%if (("PASSWORD").equals(authMethod)) {%> 
	  		<%if(isLog4jEnabled){%>
				log.info("<%=cid%> - SFTP authentication using a password.");
	  		<%}%>
      		session_<%=cid%>.setPassword(<%=pass%>); 
    	<%}%>
    	session_<%=cid%>.setUserInfo(defaultUserInfo_<%=cid%>); 
		<%if (!useProxy) {%>
	  		if(("true").equals(System.getProperty("http.proxySet")) ){
		  		com.jcraft.jsch.ProxyHTTP proxy_<%=cid%> = new com.jcraft.jsch.ProxyHTTP(System.getProperty("http.proxyHost"),Integer.parseInt(System.getProperty("http.proxyPort")));
  				if(!"".equals(System.getProperty("http.proxyUser"))){
  					proxy_<%=cid%>.setUserPasswd(System.getProperty("http.proxyUser"),System.getProperty("http.proxyPassword"));
  				}
  				session_<%=cid%>.setProxy(proxy_<%=cid%>);
  			}
		<%}%>
		<%if(isLog4jEnabled){%>
			log.info("<%=cid%> - Connection attempt to '" + <%=host %> + "' as '" + <%=user%> + "'.");
		<%}%>
    	session_<%=cid%>.connect();
		com.jcraft.jsch. Channel channel_<%=cid%>=session_<%=cid%>.openChannel("sftp");
    	channel_<%=cid%>.connect();
		<%if(isLog4jEnabled){%>
			log.info("<%=cid%> - Connection to '" + <%=host%> + "' has succeeded.");
		<%}%>
    	com.jcraft.jsch.ChannelSftp c_<%=cid%>=(com.jcraft.jsch.ChannelSftp)channel_<%=cid%>;
    	c_<%=cid%>.setFilenameEncoding(<%=encoding%>);
  <%
  	} else {
  %>    
	    com.jcraft.jsch.ChannelSftp c_<%=cid%> = (com.jcraft.jsch.ChannelSftp)globalMap.get("<%=conn %>");
		<%if(isLog4jEnabled){%>
			if(c_<%=cid%>!=null && c_<%=cid%>.getSession()!=null) {
				log.info("<%=cid%> - Uses an existing connection as " + c_<%=cid%>.getSession().getUserName() + ". Connection hostname: " + c_<%=cid%>.getSession().getHost() + ". Connection port: " + c_<%=cid%>.getSession().getPort() + "."); 
			}
		<%}%>
	    if(c_<%=cid%>.getHome()!=null && !c_<%=cid%>.getHome().equals(c_<%=cid%>.pwd())){
	  		c_<%=cid%>.cd(c_<%=cid%>.getHome());
	  	}
  <%
	}
} else {%>
	com.enterprisedt.net.ftp.FTPClient ftp_<%=cid %> = null;

	<% if (("true").equals(useExistingConn)) {%>
		ftp_<%=cid %> = (com.enterprisedt.net.ftp.FTPClient)globalMap.get("<%=conn %>");
		<%if(isLog4jEnabled){%>
			if(ftp_<%=cid %>!=null) {
				log.info("<%=cid%> - Uses an existing connection. Connection hostname: " + ftp_<%=cid %>.getRemoteHost() + ". Connection port: " + ftp_<%=cid %>.getRemotePort() + "."); 
			}
		<%}%>
  	<%} else {%>    
	   	ftp_<%=cid %> = new com.enterprisedt.net.ftp.FTPClient();
	   	ftp_<%=cid %>.setRemoteHost(<%=host %>);
	   	ftp_<%=cid %>.setRemotePort(<%=port %>);
	
		<%if(isLog4jEnabled){%>
			log.debug("<%=cid%> - " + <%=(("ACTIVE").equals(connectMode))?"\"Using the active mode.\"":"\"Using the passive mode.\""%>);
		<%}%>

	    <%if (("ACTIVE").equals(connectMode)) {%>
	      ftp_<%=cid %>.setConnectMode(com.enterprisedt.net.ftp.FTPConnectMode.ACTIVE);
	    <%} else {%>
	      ftp_<%=cid %>.setConnectMode(com.enterprisedt.net.ftp.FTPConnectMode.PASV);
	    <%}%>
	    ftp_<%=cid %>.setControlEncoding(<%=encoding%>);
		<%if(isLog4jEnabled){%>
			log.info("<%=cid%> - Authentication using a password.");
			log.info("<%=cid%> - Connection attempt to '" + <%=host %> + "' as '" +<%=username %>+ "'.");
		<%}%>
	    ftp_<%=cid %>.connect();  
	    ftp_<%=cid %>.login(<%=username %>, <%=password %>);
		<%if(isLog4jEnabled){%>
			log.info("<%=cid%> - Connection to '" + <%=host%>  + "' has succeeded.");
		<%}%>
	  <%  
	}
}%>