<%@ jet 
    imports="
        org.talend.core.model.process.INode 
        org.talend.core.model.process.ElementParameterParser 
        org.talend.core.model.metadata.IMetadataTable 
        org.talend.core.model.metadata.IMetadataColumn 
        org.talend.core.model.process.IConnection
        org.talend.core.model.process.IConnectionCategory
        org.talend.designer.codegen.config.CodeGeneratorArgument
        org.talend.core.model.metadata.types.JavaTypesManager
        org.talend.core.model.metadata.types.JavaType
        java.util.List 
        java.util.Map       
    " 
%>

<% 
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();
    String cid = node.getUniqueName();  
%>

<%
List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
    IMetadataTable metadata = metadatas.get(0);
    if (metadata!=null) {                                    
        String encoding = ElementParameterParser.getValue(node,"__ENCODING__");
        boolean compress = ("true").equals(ElementParameterParser.getValue(node,"__COMPRESS__"));
        
        List< ? extends IConnection> conns = node.getIncomingConnections();
        if(conns!=null){
            if (conns.size()>0){
                IConnection conn =conns.get(0);
                if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
                List<IMetadataColumn> columns = metadata.getListColumns();
                    int sizeColumns = columns.size();
%>      
                    String[] row<%=cid%>=new String[<%=sizeColumns%>];      
                    <%
                    for (int i = 0; i < sizeColumns; i++) {
                        IMetadataColumn column = columns.get(i);
                        JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
                        String pattern = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
                        if(JavaTypesManager.isJavaPrimitiveType( column.getTalendType(), column.isNullable())){
                            %>
                            row<%=cid%>[<%=i%>] =String.valueOf(<%=conn.getName() %>.<%=column.getLabel() %>); 
                            <%
                        }else { 
                            %>
                            if(<%=conn.getName() %>.<%=column.getLabel() %> == null){
                                row<%=cid%>[<%=i%>]="";
                            }else{
                                <%                  
                                if(javaType == JavaTypesManager.STRING ){
                                    %>
                                    row<%=cid%>[<%=i%>] = <%=conn.getName() %>.<%=column.getLabel() %>;
                                    <%
                                }else if(javaType == JavaTypesManager.DATE && pattern != null){
                                    %>
                                    row<%=cid%>[<%=i%>] = FormatterUtils.format_Date(<%=conn.getName() %>.<%=column.getLabel() %>, <%= pattern %>);
                                    <%
                                }else if(javaType == JavaTypesManager.BYTE_ARRAY){
                                    %>
                                    row<%=cid%>[<%=i%>] = java.nio.charset.Charset.defaultCharset().decode(java.nio.ByteBuffer.wrap(<%=conn.getName() %>.<%=column.getLabel() %>)).toString();
                                    <%
                                }else{
                                    %>
                                    row<%=cid%>[<%=i%>] = String.valueOf(<%=conn.getName() %>.<%=column.getLabel() %>);
                                    <%
                                }
                                %>
                            }
                            <%              
                        }
                    } 

                        %>
                    <% if(compress){%>
                       //encoding
                        for(int i =0;i<row<%=cid%>.length;i++){
                            row<%=cid%>[i]=new sun.misc.BASE64Encoder().encode(com<%=cid%>.zip(row<%=cid%>[i].getBytes(<%=encoding%>)));//encodeing!!!!!!!!!!!!!!!!!!!
                        }
                    <% } %>    
                        CsvWriter<%=cid%>.writeNext(row<%=cid%>); 
                        CsvWriter<%=cid%>.flush();                

                    nb_line_<%=cid %>++;
                    <%          
                }
            
            }
        }   
    
    }

}
%>            
