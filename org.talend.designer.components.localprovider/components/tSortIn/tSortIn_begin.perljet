<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn 
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.List
    java.util.Map
" 
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
boolean stats = codeGenArgument.isStatistics();

List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
    IMetadataTable metadata = metadatas.get(0);
    if (metadata!=null) {
        String cid = metadata.getTableName();
        List<Map<String, String>> criteria = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__CRITERIA__");
        String origin = ElementParameterParser.getValue(node, "__ORIGIN__");
%>

my %desc_<%=cid %> = (
    origin        => '<%=origin %>',
    schema        => [
    <%
        for (IMetadataColumn column: metadata.getListColumns()) {
    %>
    	{
            name    => '<%=column.getLabel() %>',
            key     => <%=column.isKey() %>,
            type    => '<%=column.getType() %>',
            len     => <%=column.getLength() %>,
            null    => <%=column.isNullable() %>,
            default => '<%=column.getDefault() %>',
            comment => '<%=column.getComment() %>',
		},
	<%
        }
    %>
    ]
);

<%
        int column_number = 0;
        for (IMetadataColumn column: metadata.getListColumns()) {
%>
use constant <%=origin %>__<%=column.getLabel() %> => <%=column_number%>;
<%
            column_number++;
        }

        if (stats) {
%>
    UpdateStat('<%=cid %>', 0);
<%
        }

        StringBuffer sb = new StringBuffer();

for(int i=0; i<criteria.size(); i++) {
    if (i>0) {
        sb.append(" or ");
    }
    Map<String, String> line = criteria.get(i);
    
    String colname = origin + "__" + line.get("COLNAME");
    String sort = line.get("SORT");
    String order = line.get("ORDER");
    boolean asc = (order.toLowerCase().equals("asc"));
    
    StringBuffer first = new StringBuffer();
    first.append("$a->[");
    first.append(colname);
    first.append("]");
    
    StringBuffer second = new StringBuffer();
    second.append("$b->[");
    second.append(colname);
    second.append("]");
    
    if (asc) {
        sb.append(first);
    } else {
        sb.append(second);
    }
    
    if (sort.toLowerCase().startsWith("alp")) {
        sb.append(" cmp ");
    } else {
    //(order.toLowerCase().startwith("num"))
        sb.append(" <=> ");
    }
    
    if (asc) {
        sb.append(second);
    } else {
        sb.append(first);
    }
}
%>

foreach my $row_aref (
    sort {
        <%=sb %>
    } @<%=origin %>
) {

<%
    if (stats) {
%>
    UpdateStat('<%=cid %>', 1);
<%
    }
%>


    # increase number of line really splitted
    $nb_line_<%=cid %>++;

    my @<%=cid %> = @{$row_aref};

<%
    }
}
%>
