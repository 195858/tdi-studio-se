<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.process.IConnectionCategory
    org.talend.core.model.metadata.IMetadataTable
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.metadata.types.JavaTypesManager
    org.talend.core.model.metadata.types.JavaType
    java.util.List
    java.util.ArrayList
    java.util.Map
"
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

String field = ElementParameterParser.getValue(node, "__FIELD__");

String dieOnErrorStr = ElementParameterParser.getValue(node, "__DIE_ON_ERROR__");
boolean dieOnError = (dieOnErrorStr!=null&&!("").equals(dieOnErrorStr))?("true").equals(dieOnErrorStr):false;
String encoding  = ElementParameterParser.getValue(node, "__ENCODING__");
List<Map<String, String>> trimSelects = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__TRIMSELECT__");
String isTrimAllStr = ElementParameterParser.getValue(node,"__TRIMALL__");
boolean isTrimAll = (isTrimAllStr!=null&&!("").equals(isTrimAllStr))?("true").equals(isTrimAllStr):true;

IConnection inConn = null;
Integer byteLength = null;
List< ? extends IConnection> inConns = node.getIncomingConnections();
if(inConns!=null){
    for (IConnection conn : inConns) {
    	if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
    		inConn = conn;
    		break;
    	}
    }
}

String rejectConnName = "";
List<IMetadataColumn> rejectColumnList = null;
List<? extends IConnection> rejectConns = node.getOutgoingConnections("REJECT");
if(rejectConns != null && rejectConns.size() > 0) {
    IConnection rejectConn = rejectConns.get(0);
    rejectColumnList = rejectConn.getMetadataTable().getListColumns();
    rejectConnName = rejectConn.getName();
}

IConnection outConn = null;
String firstConnName = "";
List< ? extends IConnection> outConns = node.getOutgoingConnections();
if(outConns!=null){
    for (IConnection conn : outConns) {
    	if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
    		outConn = conn;
    		firstConnName = outConn.getName();
    		break;
    	}
    }
}

if(outConns!=null){
    for (IConnection conn : outConns) {
    	if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
%>
<%=conn.getName() %> = null;
<%
    	}
    }
}

//get field column
if(inConn!=null){
	IMetadataTable inputMetadataTable = inConn.getMetadataTable();
	for (IMetadataColumn inputCol : inputMetadataTable.getListColumns()) {
		if(inputCol.getLabel().equals(field) && JavaTypesManager.getJavaTypeFromId(inputCol.getTalendType()) == JavaTypesManager.BYTE_ARRAY){
			byteLength = inputCol.getLength();
%>
			byte [] byteData_<%=cid%> = <%=inConn.getName()%>.<%=inputCol.getLabel()%>;
<%
			break;
		}
	}
}

//set original columns
List<IMetadataColumn> newColumnList = new ArrayList<IMetadataColumn>();
if(outConn!=null && inConn!=null){
%>
try{
	<%=outConn.getName() %> = new <%=outConn.getName() %>Struct();
<%
	IMetadataTable outputMetadataTable = outConn.getMetadataTable();
	IMetadataTable inputMetadataTable = inConn.getMetadataTable();
	for (IMetadataColumn outputCol : outputMetadataTable.getListColumns()) {
		if(outputCol.getLabel().equals(field)){
			continue;
		}
		boolean isOirginalColumn = false;
		for(IMetadataColumn inputCol : inputMetadataTable.getListColumns()){	
			JavaType stringType =  JavaTypesManager.getJavaTypeFromId(inputCol.getTalendType());
			if( outputCol.getLabel().equals( inputCol.getLabel()) ){
				isOirginalColumn = true;
				if(stringType == JavaTypesManager.STRING){
					boolean trimStr = false;
					if(trimSelects!=null){
						for(Map<String, String> mapTrim : trimSelects){
							if(outputCol.getLabel().equals(mapTrim.get("SCHEMA_COLUMN")) && "true".equals(mapTrim.get("TRIM"))){
								trimStr = true;
								break;
							}
						}
					}
%>
					<%=outConn.getName()%>.<%=outputCol.getLabel()%> = <%=inConn.getName()%>.<%=inputCol.getLabel()%><%=(isTrimAll || (!trimSelects.isEmpty() && (trimStr)))?".trim()":"" %>;
<%
				}else{
%>
					<%=outConn.getName()%>.<%=outputCol.getLabel()%> = <%=inConn.getName()%>.<%=inputCol.getLabel()%>;
<%
				}
				break;
			}
		}
	
		if(!isOirginalColumn){
			if(!("").equals(rejectConnName)&&rejectConnName.equals(firstConnName)
				&& (outputCol.getLabel().equals("errorMessage") || outputCol.getLabel().equals("errorCode"))){
			}else{
				newColumnList.add(outputCol);
			}
		}
	}
%>
		bbRecord_<%=cid %> = java.nio.ByteBuffer.wrap(byteData_<%=cid%>);
<%
	for(int valueN = 0 ; valueN < newColumnList.size();valueN++){//----- for begin
			IMetadataColumn column = newColumnList.get(valueN);
			Integer orgainLength = column.getOriginalLength();
			Integer length = column.getLength();
			String orgainType = column.getType();
			Integer precision = column.getPrecision();
			if(precision==null) precision = 0;
			if(orgainLength==null || orgainLength.intValue()==0 || orgainType==null || "".endsWith(orgainType.trim())) {
%>
//////////////////////////////////////////////////
the original size in the column:<%=column.getLabel()%> in the schema should be bigger than 0 and DB Type shouldn't be null or Empty
//////////////////////////////////////////////////
<%
				continue;
			}
%>
			byte[] bb_<%=outConn.getName() %>_<%=column.getLabel()%> = new byte[<%=orgainLength %>];
			bbRecord_<%=cid %>.get(bb_<%=outConn.getName() %>_<%=column.getLabel()%>);
<%
			if(orgainType.equals("X")){
					boolean trimStr = false;
					if(trimSelects!=null){
						for(Map<String, String> mapTrim : trimSelects){
							if(column.getLabel().equals(mapTrim.get("SCHEMA_COLUMN")) && "true".equals(mapTrim.get("TRIM"))){
								trimStr = true;
								break;
							}
						}
					}
%>				
				<%=outConn.getName() %>.<%=column.getLabel()%> = new String(bb_<%=outConn.getName() %>_<%=column.getLabel()%>,<%=encoding%>)<%=(isTrimAll || (!trimSelects.isEmpty() && (trimStr)))?".trim()":"" %>;
<%
			}else if(orgainType.equals("1")) {
%>
				<%=outConn.getName() %>.<%=column.getLabel()%> = new java.lang.Float(java.nio.ByteBuffer.wrap(bb_<%=outConn.getName() %>_<%=column.getLabel()%>).order(java.nio.ByteOrder.BIG_ENDIAN).getFloat());
<%
			}else if(orgainType.equals("2")) {
%>
				<%=outConn.getName() %>.<%=column.getLabel()%> = new java.lang.Double(java.nio.ByteBuffer.wrap(bb_<%=outConn.getName() %>_<%=column.getLabel()%>).order(java.nio.ByteOrder.BIG_ENDIAN).getDouble());
<%
			}else if(orgainType.equals("3")) {
%>
				cobolConversion.PackedDecimal pd_<%=outConn.getName() %>_<%=column.getLabel()%> = new cobolConversion.PackedDecimal(bb_<%=outConn.getName() %>_<%=column.getLabel()%>, 0, <%=length%> - <%=precision %>, <%=precision %>);
				<%=outConn.getName() %>.<%=column.getLabel()%> = new java.math.BigDecimal(pd_<%=outConn.getName() %>_<%=column.getLabel()%>.toString().trim());
<%
			}else if(orgainType.equals("9")) {
				String isImpliedDecimalStr = column.getAdditionalField().get("ImpliedDecimal");
				boolean isImpliedDecimal = (isImpliedDecimalStr!=null&&!("").equals(isImpliedDecimalStr))?("true").equals(isImpliedDecimalStr):true;
%>
				<%=outConn.getName() %>.<%=column.getLabel()%> = cobolConversion.EBCDICReadType9.readType9Value(bb_<%=outConn.getName() %>_<%=column.getLabel()%>,<%=precision %>,<%=isImpliedDecimal %>,<%=encoding %>);
<%
			}else if(orgainType.equals("B")) {
%>
				<%=outConn.getName() %>.<%=column.getLabel()%> = new java.math.BigDecimal(new java.math.BigInteger(bb_<%=outConn.getName() %>_<%=column.getLabel()%>),0);
<%
			}else if (orgainType.equals("T")) {
%>
				<%=outConn.getName() %>.<%=column.getLabel()%> = bb_<%=outConn.getName() %>_<%=column.getLabel()%>;
<%
			}else {
%>
//////////////////////////////////////////////////
DB Type of the column:<%=column.getLabel()%> should be X, 1, 2, 3, 9, B, T
//////////////////////////////////////////////////
<%
			}
	}//----- for end
	if(!("").equals(rejectConnName) && rejectConnName.equals(firstConnName)){
%>
		<%=outConn.getName() %> = null;
<%
	}
%>
	bbRecord_<%=cid %>.clear();
	nb_line_<%=cid%>++;
}catch(Exception ex_<%=cid %>){
<%
	if(dieOnError){
%>
		throw(ex_<%=cid %>);
<%
	}else{
		if(!("").equals(rejectConnName)&&!rejectConnName.equals(firstConnName)&&rejectColumnList != null && rejectColumnList.size() > 0) {
%>
			<%=rejectConnName %> = new <%=rejectConnName %>Struct();
<%
            for(IMetadataColumn column : outConn.getMetadataTable().getListColumns()) {
%>
    			<%=rejectConnName%>.<%=column.getLabel()%> = <%=firstConnName %>.<%=column.getLabel() %>;
<%
			}
%>    
		    <%=rejectConnName%>.errorMessage = ex_<%=cid %>.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
		    <%=firstConnName %> = null;
<%
		} else if(("").equals(rejectConnName)){
%>
		    System.err.println(ex_<%=cid %>.getMessage());
		    <%=firstConnName %> = null;
<%
		} else if(rejectConnName.equals(firstConnName)){
%>
			<%=rejectConnName%>.errorMessage = ex_<%=cid %>.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
<%
		}
	}
%>
}
<%
}
%>
