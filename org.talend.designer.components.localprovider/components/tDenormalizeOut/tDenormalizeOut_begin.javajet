<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.metadata.IMetadataTable
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.IConnectionCategory
    org.talend.core.model.process.ElementParameterParser
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.metadata.types.JavaTypesManager
    java.util.List
    java.util.Map
    java.util.ArrayList
    java.util.HashMap
"
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();
List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {

    IMetadataTable metadata = metadatas.get(0);
    List< ? extends IConnection> inConns = node.getIncomingConnections();
    IMetadataTable inMetadata = null;
    if(inConns != null){ 
    	for (IConnection conn : inConns) { 
			if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) { 
				inMetadata = conn.getMetadataTable();
    			break;
			}
		}
	}
    if (metadata != null && inMetadata != null) { 
    	List<IMetadataColumn> inColumns = inMetadata.getListColumns();
    	Map<String, String> typesMap = new HashMap<String, String>();
    	for(IMetadataColumn column : inColumns){
    		String type = JavaTypesManager.getTypeToGenerate(column.getTalendType(), true);
    		typesMap.put(column.getLabel(), type);
    	}
        List<Map<String, String>> denormalizes = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__DENORMALIZE_COLUMNS__");
        List<String> denormalizeColumns = new ArrayList<String>();
        List<String> denormalizeDelimiters = new ArrayList<String>();
        List<Boolean> denormalizeMergeFlags = new ArrayList<Boolean>();
        List<String> groupColumns = new ArrayList<String>();
        for(Map<String, String> denormalize : denormalizes){
        	String columnName = denormalize.get("INPUT_COLUMN");
        	if(denormalizeColumns.contains(columnName)){
        		continue;
        	}
        	denormalizeColumns.add(columnName);
        	denormalizeDelimiters.add(denormalize.get("DELIMITER"));
        	denormalizeMergeFlags.add(denormalize.get("MERGE").equals("true"));
        }
        for(IMetadataColumn column : inColumns){
        	String columnName = column.getLabel();
        	if(denormalizeColumns.contains(columnName)){
        		continue;
        	}
        	groupColumns.add(column.getLabel());
        }
%>
class DenormalizeStruct<%=cid %> {
<%
	for(int i = 0; i < denormalizeColumns.size(); i++){
		String column = denormalizeColumns.get(i);
		if(denormalizeMergeFlags.get(i)){
%>
java.util.List<<%=typesMap.get(column) %>> <%=column %> = new java.util.ArrayList<<%=typesMap.get(column) %>>();
<% 
		}else{
%>
StringBuilder <%=column %> = new StringBuilder();
<%
		}
	}
%>
}
DenormalizeStruct<%=cid %> denormalize_result_<%=cid %> = null;
<%
for(int ii = 0; ii < groupColumns.size(); ii++){
	String input = groupColumns.get(ii);
	for(int i = ii; i < groupColumns.size(); i++){
		if(i == groupColumns.size() - 1){
//
//end
%>
java.util.Map<<%=typesMap.get(groupColumns.get(i)) %>, DenormalizeStruct<%=cid %><%
//start
//
		}else{
//
//end
%>java.util.Map<<%=typesMap.get(groupColumns.get(i)) %>,<%
//start
//
		}
	}
	for(int i = ii; i < groupColumns.size(); i++){
//
//end
%>><%
//start
//
	}
//
//end
%> hash_<%=input %>_<%=cid %> = <%
	if(ii != 0){
%>null;
<%	}else{
%>new <%
//start
//
		for(int i = 0; i < groupColumns.size(); i++){
			if(i == groupColumns.size() - 1){
//
//end
%>java.util.<%
					if(i == 0){
%>Hash<%
					}
%>Map<<%=typesMap.get(groupColumns.get(i)) %>, DenormalizeStruct<%=cid %><%
//start
//
			}else{
//
//end
%>java.util.<%
				if(i == 0){
%>Hash<%
				}
%>Map<<%=typesMap.get(groupColumns.get(i)) %>,<%
//start
//
			}
		}
		for(int i = 0; i < groupColumns.size(); i++){
//
//end
%>><%
//start
//
		}
//
//end
%>();
<%
	}
}

}
}
%>