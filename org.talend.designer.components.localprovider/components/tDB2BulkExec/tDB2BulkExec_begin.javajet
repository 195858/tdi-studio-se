<%@ jet 
imports="
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.INode
		org.talend.core.model.process.ElementParameterParser  
		org.talend.core.model.metadata.IMetadataTable 
        org.talend.core.model.metadata.MappingTypeRetriever
        org.talend.core.model.metadata.MetadataTalendType        
		java.util.List
		java.util.ArrayList
		java.util.Map
		java.util.HashMap
" 
skeleton="../templates/db_output_bulk.skeleton"
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

String action = ElementParameterParser.getValue(node, "__DATA_ACTION__");
String field_separator = ElementParameterParser.getValue(node, "__FIELDS_TERMINATED_BY__");
String file = ElementParameterParser.getValue(node, "__DATA__");

String host = ElementParameterParser.getValue(node, "__HOST__");
String port = ElementParameterParser.getValue(node, "__PORT__");
String db = ElementParameterParser.getValue(node, "__DBNAME__");
String dbschema = ElementParameterParser.getValue(node, "__TABLESCHEMA__");
String user = ElementParameterParser.getValue(node, "__USER__");
String pas = ElementParameterParser.getValue(node, "__PASS__");
String table = ElementParameterParser.getValue(node, "__TABLE__");
String dataAction = ElementParameterParser.getValue(node,"__DATA_ACTION__");	
String tableAction = ElementParameterParser.getValue(node,"__TABLE_ACTION__");		
String dbmsId = ElementParameterParser.getValue(node,"__MAPPING__");

String dateformat = ElementParameterParser.getValue(node, "__DATE_FORMAT__");
String timeformat = ElementParameterParser.getValue(node, "__TIME_FORMAT__");
String timestampformat = ElementParameterParser.getValue(node, "__TIMESTAMP_FORMAT__");
boolean useExistingConnection = ("true").equals(ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__"));
boolean removeLoadPending = ("true").equals(ElementParameterParser.getValue(node,"__REMOVE_LODA_PENDING__"));

List<IMetadataColumn> columnList = getColumnList(node);
List<Column> stmtStructure = null;
Manager manager = null;
    if(useExistingConnection) {
    	String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
    	String conn = "conn_" + connection;
    	String schema = "tableschema_" + connection;
    	String username = "username_" + connection;
        %>
        java.sql.Connection conn_<%=cid%> = (java.sql.Connection)globalMap.get("<%=conn%>");
        String schema_<%=cid%> = (String)globalMap.get("<%=schema %>");
        String dbUser_<%=cid %> = (String)globalMap.get("<%=username%>");  
        <%
    } else { 
        %>
	    java.lang.Class.forName("com.ibm.db2.jcc.DB2Driver");    
    	String url_<%=cid %> = "jdbc:db2://" + <%=host%> + ":" + <%=port%> + "/" + <%=db%>;    
    	String dbUser_<%=cid %> = <%=user%>;    
    	String dbPwd_<%=cid %> = <%=pas%>;
    	String schema_<%=cid%> = <%=dbschema%>;    
    	java.sql.Connection conn_<%=cid%> = java.sql.DriverManager.getConnection(url_<%=cid %>,dbUser_<%=cid%>,dbPwd_<%=cid%>);
    	<%
    }
%>
		String tableName_<%=cid%> = null;
		if(schema_<%=cid%> == null || schema_<%=cid%>.trim().length() == 0) {
    		tableName_<%=cid%> = <%=table%>;
		} else {
    		tableName_<%=cid%> = schema_<%=cid%> +  "\".\"" + <%=table%>;
		}
		
		String fileName_<%=cid%> = <%=file%>;
		
<%
if(columnList != null && columnList.size() > 0) {
	stmtStructure = getManager(dbmsId, cid).createColumnList(columnList, false, null, null);      
}
if((columnList != null && columnList.size() > 0) || "CLEAR".equals(tableAction) || "NONE".equals(tableAction)){

%>

<%
	//----------------------remove Load Pending
	if (removeLoadPending) {
%>
		String sqlLoadPending_<%=cid%> = "CALL SYSPROC.ADMIN_CMD(?)";
		java.sql.CallableStatement callStmtLoadPending_<%=cid%> = conn_<%=cid%>.prepareCall(sqlLoadPending_<%=cid%>);
        callStmtLoadPending_<%=cid%>.setString(1, "load from  /dev/null  of del terminate into \"" + tableName_<%=cid%> + "\"");
        try {
        	callStmtLoadPending_<%=cid%>.execute();   
        } catch (java.sql.SQLException e) { 
        	//when table not in load pending mode will throw exception.
        	//and do nothing.
        }
        callStmtLoadPending_<%=cid%>.close();
<%
	}
%>

<%@ include file="../templates/_tableActionForBulk.javajet"%>

<%
	//feature0011004 load command options begin
	List<Map<String, String>> options = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__OPTIONS__");
    java.util.Map<String, String> parametersMap = new java.util.HashMap<String, String>();
    
    //	LOAD FROM OF (position1) DEL MODIFIED BY (position2) INTO (position3)
    java.lang.StringBuilder position1 = new java.lang.StringBuilder();
    java.lang.StringBuilder position2 = new java.lang.StringBuilder();
    java.lang.StringBuilder position3 = new java.lang.StringBuilder();
    
    for(java.util.Map<String, String> option : options) {
        String key = option.get("KEY");
        String value = option.get("VALUE");
        
        String[] keySplit = key.split(",");
        if (keySplit.length > 1) {
	        if ("1".equals(keySplit[1])) {
	        	position1.append(keySplit[0]).append(" ").append(value).append(" ");
	        } else if ("2".equals(keySplit[1])) {
	        	if ("MODIFIED BY".equals(keySplit[0])) {
	        		position2.append(" ").append(value).append(" ");
	        	} else {
	        		position2.append(keySplit[0]).append(" ").append(value).append(" ");
	        	}
	        } else if ("3".equals(keySplit[1])) {
	        	position3.append(keySplit[0]).append(" ").append(value).append(" ");
	        }
        }
    }
	//end feature0011004 load command options begin
%>

<%    
	////////////////////////////////////////////    
    if(("INSERT").equals(action) || ("REPLACE").equals(action)) {
    
        %>
        String action_<%=cid%> = "<%=action%>";
        java.sql.CallableStatement callStmt_<%=cid%> = null;
        String sql_<%=cid%> = "CALL SYSPROC.ADMIN_CMD(?)";
        String param_<%=cid%> = "LOAD FROM \""+ fileName_<%=cid%> + "\" OF <%=position1.toString()%> DEL MODIFIED BY COLDEL"+ <%=field_separator%> + 
        				" dateformat=\""+ <%=dateformat%>+ "\" timeformat=\"" + <%=timeformat%>+ "\" timestampformat=\""+<%=timestampformat%> +"\" <%=position2.toString()%> " +
        				 action_<%=cid%> +" INTO \""  + tableName_<%=cid%> + "\" <%=position3.toString()%>";     			
        callStmt_<%=cid%> = conn_<%=cid%>.prepareCall(sql_<%=cid%>);
        callStmt_<%=cid%>.setString(1, param_<%=cid%>);
        callStmt_<%=cid%>.execute();        
        callStmt_<%=cid%>.close();
        <%
    } else if(("UPDATE").equals(action)) {
        if(columnList != null && columnList.size() > 0) {
            int keyCount = 0;
            for(IMetadataColumn column : columnList) {
                if(column.isKey()) {
                    keyCount++;
                }
            }
            %>
            int keyCount_<%=cid%> = <%=keyCount%>;
            if(keyCount_<%=cid%> == 0) {
                throw new RuntimeException("For bulk update, Schema must have a key at least."); 
            }
            String tmpTableName_<%=cid%> = tableName_<%=cid%>;
            tableName_<%=cid%> = "tmp_<%=cid%>" + "_" + pid; 
            java.sql.Statement stmtCreateTmp_<%=cid%> = conn_<%=cid%>.createStatement();
            

            
            stmtCreateTmp_<%=cid%>.execute("<%=manager.getCreateTableSQL(stmtStructure)%>");
            stmtCreateTmp_<%=cid%>.close();
                        
        	java.sql.CallableStatement callStmt_<%=cid%> = null;
        	String sql_<%=cid%> = "CALL SYSPROC.ADMIN_CMD(?)";
        	String param_<%=cid%> = "LOAD FROM \""+ fileName_<%=cid%>.replace("\\","/") + "\" OF <%=position1.toString()%> DEL MODIFIED BY COLDEL" + <%=field_separator%> + 
        							" dateformat=\""+<%=dateformat%>+"\" timeformat=\"" +<%=timeformat%>+ "\" timestampformat=\"" + <%=timestampformat%>+"\"" + 
        							" <%=position2.toString()%> INSERT INTO \""  + tableName_<%=cid%> + "\" <%=position3.toString()%>"; 	        			
        	
        	callStmt_<%=cid%> = conn_<%=cid%>.prepareCall(sql_<%=cid%>);
        	callStmt_<%=cid%>.setString(1, param_<%=cid%>);
        	callStmt_<%=cid%>.execute();        
        	callStmt_<%=cid%>.close();            
                    			
            tableName_<%=cid%> = tmpTableName_<%=cid%>;
            tmpTableName_<%=cid%> = "tmp_<%=cid%>"+ "_" + pid;             
            java.sql.Statement stmtUpdateBulk_<%=cid%> = conn_<%=cid%>.createStatement();
                        
            stmtUpdateBulk_<%=cid%>.executeUpdate("<%=manager.getUpdateBulkSQL(columnList)%>");
            stmtUpdateBulk_<%=cid%>.close();           
            
            tableName_<%=cid%> = "tmp_<%=cid%>" + "_" + pid;
            java.sql.Statement stmtTmpDrop_<%=cid%> = conn_<%=cid%>.createStatement();
            stmtTmpDrop_<%=cid%>.execute("<%=manager.getDropTableSQL()%>");
            stmtTmpDrop_<%=cid%>.close();
            <%
        }
    }    
    /////////////////////////////////////////
} 		
%>






