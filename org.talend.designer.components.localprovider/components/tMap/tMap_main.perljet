<%@ jet 
	imports="
	java.util.ArrayList
	java.util.Collections
	java.util.Comparator
	java.util.List
	java.util.HashMap
	org.talend.designer.codegen.config.CodeGeneratorArgument

	org.talend.designer.mapper.MapperMain
	org.talend.designer.mapper.MapperComponent
	org.talend.designer.mapper.external.data.ExternalMapperData
	org.talend.designer.mapper.external.data.ExternalMapperTable
	org.talend.designer.mapper.external.data.ExternalMapperTableEntry
	org.talend.designer.mapper.language.ILanguage
	org.talend.designer.mapper.language.generation.GenerationManagerFactory
	org.talend.designer.mapper.language.generation.PerlGenerationManager
	org.talend.designer.mapper.language.LanguageProvider
	org.talend.designer.mapper.model.tableentry.TableEntryLocation
	org.talend.designer.mapper.utils.DataMapExpressionParser
	org.talend.core.model.process.IConnection
	org.talend.core.model.process.EConnectionType
	org.talend.designer.mapper.language.generation.TableType
	org.talend.core.model.metadata.IMetadataTable
	org.talend.core.model.metadata.IMetadataColumn
	" 
%>
<%


	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	MapperComponent node = (MapperComponent) codeGenArgument.getArgument();

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
        ILanguage currentLanguage = LanguageProvider.getPerlLanguage();
        List<IConnection> inputConnections = (List<IConnection>) node.getIncomingConnections();
        List<IConnection> outputConnections = (List<IConnection>) node.getOutgoingConnections();
        ExternalMapperData data = (ExternalMapperData) node.getExternalData();
        String uniqueNameComponent = node.getUniqueName();

        String cr = "\n";
        String rejected = "rejected";
        String rejectedInnerJoin = "rejectedInnerJoin";

        List<ExternalMapperTable> inputTables = data.getInputTables();
        List<ExternalMapperTable> varsTables = data.getVarsTables();
        List<ExternalMapperTable> outputTables = data.getOutputTables();

        int indent = 1;

        DataMapExpressionParser expressionParser = new DataMapExpressionParser(currentLanguage);

        PerlGenerationManager gm = (PerlGenerationManager) GenerationManagerFactory.getInstance().getGenerationManager(currentLanguage);

        StringBuilder sb = new StringBuilder();

        gm.setInputTables(inputTables);
        gm.setVarsTables(varsTables);

        // /////////////////////////////////////////////////////////////////////////////////////////////////////
        // /////////////////////////////////////////////////////////////////////////////////////////////////////
        // INPUTS : initialization of input arrays from expressions keys and hashes
        // 
        sb.append(cr + gm.indent(indent));
        sb.append(cr + gm.indent(indent) + "###############################");
        sb.append(cr + gm.indent(indent) + "# Input tables ");

        HashMap<String, IConnection> hNameToConnection = new HashMap<String, IConnection>();
        for (IConnection connection : inputConnections) {
            hNameToConnection.put(connection.getName(), connection);
        }

        ArrayList<ExternalMapperTable> inputTablesWithInnerJoin = new ArrayList<ExternalMapperTable>();

        HashMap<String, ExternalMapperTableEntry> hExternalInputTableEntries = new HashMap<String, ExternalMapperTableEntry>();
        for (ExternalMapperTable externalTable : inputTables) {
            String tableName = externalTable.getName();
            IConnection connection = hNameToConnection.get(tableName);
            if (connection == null) {
                continue;
            }
            EConnectionType connectionType = connection.getLineStyle();
            if (connectionType == EConnectionType.FLOW_MAIN) {
                continue;
            } else if (connectionType == EConnectionType.FLOW_REF) {

                IMetadataTable metadataTable = connection.getMetadataTable();
                if (externalTable != null) {
                    if (externalTable.isInnerJoin()) {
                        inputTablesWithInnerJoin.add(externalTable);
                    }
                    hExternalInputTableEntries.clear();
                    List<ExternalMapperTableEntry> metadataTableEntries = externalTable.getMetadataTableEntries();
                    if (metadataTableEntries == null) {
                        continue;
                    }
                    for (ExternalMapperTableEntry externalTableEntry : metadataTableEntries) {
                        hExternalInputTableEntries.put(externalTableEntry.getName(), externalTableEntry);
                    }
                    List<IMetadataColumn> listColumns = metadataTable.getListColumns();
                    ArrayList<String> keysValues = new ArrayList<String>();
                    for (IMetadataColumn column : listColumns) {
                        String columnName = column.getLabel();
                        ExternalMapperTableEntry externalInputTableEntry = hExternalInputTableEntries.get(columnName);
                        if (externalInputTableEntry != null) {
                            String expressionKey = externalInputTableEntry.getExpression();
                            if (column.isKey() && expressionKey != null && !"".equals(expressionKey.trim())) {
                                String outputExpressionKeyToWrite = gm.prefixEntryLocationsForOutputExpression(uniqueNameComponent, expressionKey,
                                        expressionParser, new TableType[] { TableType.INPUT });

                                keysValues.add(outputExpressionKeyToWrite);
                            }
                        }
                    }
                    String[] aKeysValues = keysValues.toArray(new String[0]);
                    if (aKeysValues.length > 0) {
				        String string = ""; //$NON-NLS-1$
				        string += "my @" + tableName + " = @{ $tHash_" + tableName + "";
				        for (int i = 0; i < aKeysValues.length; i++) {
				            string += "{ " + aKeysValues[i] + " }";
				        }
				        string += "};";
                        sb.append(cr + gm.indent(indent) + string);
                    }

                } // if(externalTable != null) {
            } // else if(connectionType == EConnectionType.FLOW_REF) {
        } // for (IConnection connection : connections) {
        boolean atLeastOneInputTableWithInnerJoin = !inputTablesWithInnerJoin.isEmpty();

        sb.append(cr + gm.indent(indent) + "###############################");
        // /////////////////////////////////////////////////////////////////////////////////////////////////////
        // /////////////////////////////////////////////////////////////////////////////////////////////////////

        // /////////////////////////////////////////////////////////////////////////////////////////////////////
        // /////////////////////////////////////////////////////////////////////////////////////////////////////
        // VARIABLES
        // 
        sb.append(cr + gm.indent(indent));
        sb.append(cr + gm.indent(indent) + "###############################");
        sb.append(cr + gm.indent(indent) + "# Vars tables");
        for (ExternalMapperTable varsTable : varsTables) {
            List<ExternalMapperTableEntry> varsTableEntries = varsTable.getMetadataTableEntries();
            if (varsTableEntries == null) {
                continue;
            }
            if (varsTableEntries.size() > 0) {
                sb.append(cr + gm.indent(indent) + gm.buildNewArrayDeclaration(uniqueNameComponent, varsTable.getName(), indent));
            }
            String varsTableName = varsTable.getName();
            for (ExternalMapperTableEntry varsTableEntry : varsTableEntries) {
                String varsColumnName = varsTableEntry.getName();
                String varExpression = varsTableEntry.getExpression();
                if (varExpression == null || varExpression.trim().length() == 0) {
                    continue;
                }
                
                String varExpressionWithPrefixs = gm.prefixEntryLocationsForOutputExpression(uniqueNameComponent, varExpression, expressionParser,
                      new TableType[] { TableType.INPUT, TableType.VARS });
                

                sb.append(cr + gm.indent(indent) + gm.getGeneratedCodeTableColumnVariable(uniqueNameComponent, varsTableName, varsColumnName, true) + " = "
                        + varExpressionWithPrefixs + ";");

            }
        }
        sb.append(cr + gm.indent(indent) + "###############################");
        // /////////////////////////////////////////////////////////////////////////////////////////////////////
        // /////////////////////////////////////////////////////////////////////////////////////////////////////

        // /////////////////////////////////////////////////////////////////////////////////////////////////////
        // /////////////////////////////////////////////////////////////////////////////////////////////////////
        // OUTPUTS
        // 
        sb.append(cr + gm.indent(indent));
        sb.append(cr + gm.indent(indent) + "###############################");
        sb.append(cr + gm.indent(indent) + "# Output tables");

        ArrayList<ExternalMapperTable> outputTablesSortedByReject = new ArrayList<ExternalMapperTable>(outputTables);
        // sorting outputs : rejects tables after not rejects table
        Collections.sort(outputTablesSortedByReject, new Comparator<ExternalMapperTable>() {

            public int compare(ExternalMapperTable o1, ExternalMapperTable o2) {
                if (o1.isReject() != o2.isReject()) {
                    if (o1.isReject()) {
                        return 1;
                    } else {
                        return -1;
                    }
                }
                if (o1.isRejectInnerJoin() != o2.isRejectInnerJoin()) {
                    if (o1.isRejectInnerJoin()) {
                        return 1;
                    } else {
                        return -1;
                    }
                }
                return 0;
            }

        });

        boolean lastValueReject = false;
        boolean oneFilterForNotRejectTable = false;
        boolean allNotRejectTablesHaveFilter = true;
        boolean atLeastOneReject = false;
        boolean atLeastOneRejectInnerJoin = false;
        boolean closeTestInnerJoinConditionsBracket = false;

        int lstSizeOutputs = outputTablesSortedByReject.size();
        // ///////////////////////////////////////////////////////////////////
        // init of allNotRejectTablesHaveFilter and atLeastOneReject
        for (int i = 0; i < lstSizeOutputs; i++) {
            ExternalMapperTable outputTable = (ExternalMapperTable) outputTablesSortedByReject.get(i);
            
            String outputTableName = outputTable.getName();

            sb.append(cr + gm.indent(indent) + "$branch_" + outputTableName + "_is_active = false;");
            
            List<ExternalMapperTableEntry> columnsEntries = outputTable.getMetadataTableEntries();
            List<ExternalMapperTableEntry> filters = outputTable.getConstraintTableEntries();
            boolean hasFilter = filters != null && filters.size() > 0 && !gm.checkFiltersAreEmpty(outputTable);
            if (columnsEntries != null && columnsEntries.size() > 0) {
                if (!hasFilter && !(outputTable.isReject() || outputTable.isRejectInnerJoin())) {
                    allNotRejectTablesHaveFilter = false;
                }
                if (outputTable.isReject()) {
                    atLeastOneReject = true;
                }
            }
            if (outputTable.isRejectInnerJoin()) {
                atLeastOneRejectInnerJoin = true;
            }
        }
        // ///////////////////////////////////////////////////////////////////

        if (allNotRejectTablesHaveFilter && atLeastOneReject) {
            // write $oneNotRejectFilterValidated = false;
            sb.append(cr + gm.indent(indent) + "$" + rejected + " = true;");
        }
        if (atLeastOneInputTableWithInnerJoin && atLeastOneRejectInnerJoin) {
            // write $oneNotRejectFilterValidated = false;
            sb.append(cr + gm.indent(indent) + "$" + rejectedInnerJoin + " = true;");
        }

        // write outputs arrays initialization with empty list for NOT reject tables
        for (int indexReject = 0; indexReject < lstSizeOutputs; indexReject++) {
            ExternalMapperTable outputNormalTable = (ExternalMapperTable) outputTablesSortedByReject.get(indexReject);
            if (outputNormalTable.isReject() || outputNormalTable.isRejectInnerJoin()) {
                break;
            }
            List<ExternalMapperTableEntry> metadataTableEntries = outputNormalTable.getMetadataTableEntries();
            if (metadataTableEntries != null && metadataTableEntries.size() > 0) {
                sb.append(cr + gm.indent(indent) + "# Output table: '" + outputNormalTable.getName() + "'");
                sb.append(cr + gm.indent(indent) + gm.buildNewArrayDeclaration(outputNormalTable.getName(), indent));
            }
        }

        // write conditions for inner join reject
        if (inputTablesWithInnerJoin.size() > 0 && lstSizeOutputs > 0) {
            sb.append(cr + gm.indent(indent) + "if(");
            String and = null;
            for (ExternalMapperTable inputTable : inputTablesWithInnerJoin) {
                if (and == null) {
                    and = "";
                } else {
                    and = " &&";
                }
                sb.append(and + " scalar( @" + inputTable.getName() + ")");
            }
            sb.append(" ) {");
            closeTestInnerJoinConditionsBracket = true;
            indent++;
            if (atLeastOneInputTableWithInnerJoin && atLeastOneRejectInnerJoin) {
                sb.append(cr + gm.indent(indent) + "$" + rejectedInnerJoin + " = false;");
            }
        }

        // ///////////////////////////////////////////////////////////////////
        // run through output tables list for generating intilization of outputs arrays
        for (int indexCurrentTable = 0; indexCurrentTable < lstSizeOutputs; indexCurrentTable++) {
            ExternalMapperTable outputTable = (ExternalMapperTable) outputTablesSortedByReject.get(indexCurrentTable);
            List<ExternalMapperTableEntry> outputTableEntries = outputTable.getMetadataTableEntries();
            if (outputTableEntries == null) {
                continue;
            }
            String outputTableName = outputTable.getName();

            List<ExternalMapperTableEntry> filters = outputTable.getConstraintTableEntries();

            boolean currentIsReject = outputTable.isReject();
            boolean currentIsRejectInnerJoin = outputTable.isRejectInnerJoin();

            boolean hasFilters = filters != null && filters.size() > 0 && !gm.checkFiltersAreEmpty(outputTable);

            boolean rejectValueHasJustChanged = lastValueReject != (currentIsReject || currentIsRejectInnerJoin);

            oneFilterForNotRejectTable = !(currentIsReject || currentIsRejectInnerJoin) && hasFilters;

            if (rejectValueHasJustChanged) {

                if (closeTestInnerJoinConditionsBracket) {
                    indent--;
                    sb.append(cr + gm.indent(indent) + "}");
                    if (atLeastOneReject) {
                        sb.append(" else {");
                        indent++;
                        sb.append(cr + gm.indent(indent) + "$" + rejected + " = false;");
                        indent--;
                        sb.append(cr + gm.indent(indent) + "}");
                    }
                    closeTestInnerJoinConditionsBracket = false;
                }

                sb.append(cr + gm.indent(indent) + "###### START REJECTS ##### ");
                // write outputs arrays initialization with empty list for reject tables
                for (int indexReject = indexCurrentTable; indexReject < lstSizeOutputs; indexReject++) {
                    ExternalMapperTable outputRejectTable = (ExternalMapperTable) outputTablesSortedByReject.get(indexReject);
                    if (outputRejectTable.isReject() || outputRejectTable.isRejectInnerJoin()) {
                        sb.append(cr + gm.indent(indent) + "# Output reject table: '" + outputRejectTable.getName() + "'");
                        sb.append(cr + gm.indent(indent) + gm.buildNewArrayDeclaration(outputRejectTable.getName(), indent));
                    }
                }
            }

            // write filters conditions and code to execute
            if (!currentIsReject && !currentIsRejectInnerJoin || rejectValueHasJustChanged && oneFilterForNotRejectTable || currentIsReject
                    && allNotRejectTablesHaveFilter || currentIsRejectInnerJoin && atLeastOneInputTableWithInnerJoin) {

                boolean closeFilterOrRejectBracket = false;
                if (hasFilters || currentIsReject || currentIsRejectInnerJoin && atLeastOneInputTableWithInnerJoin) {
                    sb.append(cr + gm.indent(indent) + "# Filter condition ");
                    sb.append(cr + gm.indent(indent) + "if( ");

                    String rejectedTests = null;
                    if (allNotRejectTablesHaveFilter && atLeastOneReject && currentIsReject && currentIsRejectInnerJoin
                            && atLeastOneInputTableWithInnerJoin) {
                        rejectedTests = "$" + rejected + " || $" + rejectedInnerJoin;
                        if (hasFilters) {
                            rejectedTests = "(" + rejectedTests + ")";
                        }
                    } else if (allNotRejectTablesHaveFilter && atLeastOneReject && currentIsReject) {
                        rejectedTests = "$" + rejected;
                    } else if (currentIsRejectInnerJoin && atLeastOneInputTableWithInnerJoin) {
                        rejectedTests = "$" + rejectedInnerJoin;
                    }
                    if (hasFilters) {
                        String filtersConditions = gm.buildConditions(uniqueNameComponent, filters, expressionParser);
                        if (rejectedTests == null) {
                            sb.append(filtersConditions);
                        } else {
                            sb.append(rejectedTests + " && (" + filtersConditions + ")");
                        }
                    } else {
                        sb.append(rejectedTests);
                    }
                    sb.append(" ) {");
                    indent++;
                    closeFilterOrRejectBracket = true;
                    if (allNotRejectTablesHaveFilter && !(currentIsReject || currentIsRejectInnerJoin) && atLeastOneReject) {
                        sb.append(cr + gm.indent(indent) + "$" + rejected + " = false;");
                    }
                }

                sb.append(cr + gm.indent(indent)  + "$branch_" + outputTableName + "_is_active = true;");

                if (!currentIsReject && !currentIsRejectInnerJoin || currentIsReject || currentIsRejectInnerJoin
                        && atLeastOneInputTableWithInnerJoin) {
                    for (ExternalMapperTableEntry outputTableEntry : outputTableEntries) {
                        String outputColumnName = outputTableEntry.getName();
                        String outputExpression = outputTableEntry.getExpression();
                        if (outputExpression != null && outputExpression.trim().length() != 0) {

                            String outputExpressionToWrite = gm.prefixEntryLocationsForOutputExpression(uniqueNameComponent, outputExpression, expressionParser,
                                    new TableType[] { TableType.INPUT, TableType.VARS });

                            sb.append(cr + gm.indent(indent) + gm.getGeneratedCodeTableColumnVariable(uniqueNameComponent, outputTableName, outputColumnName, false)
                                    + " = " + outputExpressionToWrite + ";");

                        }

                    } // for entries
                }
                if (closeFilterOrRejectBracket) {
                    indent--;
                    sb.append(cr + gm.indent(indent) + "}");
                }

            }
            lastValueReject = currentIsReject || currentIsRejectInnerJoin;

            boolean isLastTable = indexCurrentTable == lstSizeOutputs - 1;
            if (closeTestInnerJoinConditionsBracket && isLastTable) {
                indent--;
                sb.append(cr + gm.indent(indent) + "}");
                closeTestInnerJoinConditionsBracket = false;
            }

        } // for output tables

        sb.append(cr + gm.indent(indent) + "###############################");

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


%>
<%= sb.toString()%>
	
