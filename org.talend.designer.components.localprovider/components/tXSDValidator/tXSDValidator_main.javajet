<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.process.IConnection
	org.talend.core.model.process.IConnectionCategory
	java.io.*
	javax.xml.transform.Source
	javax.xml.transform.stream.StreamSource
	javax.xml.validation.*
	org.xml.sax.SAXException
"
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

String xsdfile = ElementParameterParser.getValue(node, "__XSDFILE__");
Boolean print = new Boolean(ElementParameterParser.getValue(node, "__PRINT__"));
String validMessage = ElementParameterParser.getValue(node, "__VALID_MESSAGE__");
String invalidMessage = ElementParameterParser.getValue(node, "__INVALID_MESSAGE__");
String xmlfile = ElementParameterParser.getValue(node, "__XMLFILE__");
%>

javax.xml.validation.SchemaFactory factory<%=cid %> =javax.xml.validation.SchemaFactory.newInstance("http://www.w3.org/2001/XMLSchema");
java.io.File schemaLocation<%=cid %> = new java.io.File(<%=xsdfile %>);
String message_<%=cid %> =null;
String ErrorMessage_<%=cid%>=null;
int validate_<%=cid %> = 0;


	class TalendErrorHandler_<%=cid %> implements org.xml.sax.ErrorHandler
	{
	  String errorMessage=null;

		public void warning(org.xml.sax.SAXParseException ex) throws org.xml.sax.SAXException
		{
			if (errorMessage== null)
			{
				errorMessage = "There is a Warning on line " + String.valueOf(ex.getLineNumber()) + " : " + ex.getMessage();
			}
			else
			{

				errorMessage = errorMessage + "\n" + "There is a Warning on line " + String.valueOf(ex.getLineNumber()) + " : " + ex.getMessage();
			}
		}

		public void error(org.xml.sax.SAXParseException ex) throws org.xml.sax.SAXException
		{
			if (errorMessage== null)
			{
				errorMessage = "There is an Error on line " + String.valueOf(ex.getLineNumber()) + " : " + ex.getMessage();
			}
			else
			{

				errorMessage = errorMessage + "\n" + "There is an Error on line " + String.valueOf(ex.getLineNumber()) + " : " + ex.getMessage();
			}
				//throw ex;
		}
		
		public void error(java.io.IOException ioEx){
			if (errorMessage == null) {
				errorMessage = "There is an Error on line " + " : " + ioEx.getMessage();
			} else {

				errorMessage = errorMessage + "\n" + "There is an Error on line " + " : " + ioEx.getMessage();
			}
		}
		
		public void fatalError(org.xml.sax.SAXParseException ex) throws org.xml.sax.SAXException
		{

			if (errorMessage == null)
			{
				errorMessage = "There is a Fatal Error on line " + String.valueOf(ex.getLineNumber()) + " : " + ex.getMessage();
			}
			else
			{

				errorMessage =errorMessage + "\n" + "There is a Fatal Error on line " + String.valueOf(ex.getLineNumber()) + " : " + ex.getMessage();
			}
			throw ex;

		}
		
		private String returnMessage(){
			return errorMessage==null?"":errorMessage;
		}

	}
TalendErrorHandler_<%=cid %> errorHandler_<%=cid %>=new TalendErrorHandler_<%=cid %>();

try {
	javax.xml.validation.Schema schema<%=cid %> = factory<%=cid %>.newSchema(schemaLocation<%=cid %>);
	javax.xml.validation.Validator validator<%=cid %> = schema<%=cid %>.newValidator();
	java.io.File xmlfile<%=cid %> = new java.io.File(<%=xmlfile %>);
	javax.xml.transform.Source source<%=cid %> = new javax.xml.transform.stream.StreamSource(xmlfile<%=cid %>);
	 
	validator<%=cid %>.setErrorHandler(errorHandler_<%=cid %>);
    	  

    validator<%=cid %>.validate(source<%=cid %>);
  	
	  	
} catch (org.xml.sax.SAXParseException ex<%=cid %>) {
	errorHandler_<%=cid %>.error(ex<%=cid %>);
} catch (java.io.IOException ioEx<%=cid %>){
	errorHandler_<%=cid %>.error(ioEx<%=cid %>);
}
ErrorMessage_<%=cid %>=errorHandler_<%=cid %>.returnMessage();
if (ErrorMessage_<%=cid%>!=null&& ErrorMessage_<%=cid%>.length()>0) {
	message_<%=cid %> = <%=invalidMessage %>;
} else {
	message_<%=cid %> = <%=validMessage %>;
	validate_<%=cid %> = 1;
	ErrorMessage_<%=cid%>=null;
}

globalMap.put("<%=cid %>_DIFFERENCE", "" + validate_<%=cid %>);
globalMap.put("<%=cid %>_ERROR_MESSAGE", "" + message_<%=cid %>);
globalMap.put("<%=cid %>_XSD_ERROR_MESSAGE", "" + ErrorMessage_<%=cid%>);

<%
if (print) {
%>
    System.out.println(message_<%=cid %>);
    if(validate_<%=cid %>==0)
    {
    System.err.println(ErrorMessage_<%=cid%>);
    }
<%
}

for (IConnection conn : node.getOutgoingConnections()) {
	if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
%>
		<%=conn.getName() %>.xsdfile = <%=xsdfile %>;
		<%=conn.getName() %>.xmlfile = <%=xmlfile %>;	
    	<%=conn.getName() %>.moment = java.util.Calendar.getInstance().getTime();
    	<%=conn.getName() %>.job = jobName;
		<%=conn.getName() %>.component = currentComponent;
		<%=conn.getName() %>.validate = validate_<%=cid %>;
		<%=conn.getName() %>.message = message_<%=cid %>;
<%
	}
}
%>
