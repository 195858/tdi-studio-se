<%@ jet
	imports="
	java.util.Arrays
	java.util.ArrayList
	java.util.HashMap
	java.util.List
	java.util.Map
	
	org.talend.core.model.metadata.IMetadataColumn
	org.talend.core.model.metadata.IMetadataTable
	org.talend.core.model.metadata.types.JavaTypesManager
	org.talend.core.model.process.ElementParameterParser
	org.talend.core.model.process.IConnection
	org.talend.core.model.process.IConnectionCategory
	org.talend.core.model.process.INode
	org.talend.designer.codegen.config.CodeGeneratorArgument
	"
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
%>
	
<%	
	IConnection firstDataConn = null;
	List<IMetadataColumn> firstColumnList = null;

	//1. get first DATA Link
	List< ? extends IConnection> conns = node.getOutgoingSortedConnections();	
	if(conns != null && conns.size() > 0){
		for(IConnection conn : conns){
			if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
				firstDataConn = conn;
				break;
			}
		}
	}

	//2. get first columnList (with real columns data) 	
	List<IMetadataTable> metadatas = node.getMetadataList();
	IMetadataTable metadata = null;
	if ( metadatas != null && metadatas.size() > 0 ) {
		metadata = metadatas.get(0);
		if(metadata != null){
			firstColumnList = metadata.getListColumns(); 
			if ( firstColumnList == null || firstColumnList.size() == 0 ) {
				firstColumnList = null;
			}
		}
	}
	
	//3. check the config Link and Schema
	if(firstDataConn == null || firstColumnList == null)
	{
		return "";
	}
%>

<%
            //this is a inner class to process the schema issue.
            class SchemaUtil {

                // keep all schema configuration
                private List<SAPSchema> sapSchemaList = new ArrayList<SAPSchema>();

                class SAPSchema {

                    public String getSchemaName() {
                        return schemaName;
                    }

                    public String getSapParameterType() {
                        return sapParameterType;
                    }

                    public String getSapTableName() {
                        return sapTableName;
                    }

                    public String getSapParameterName() {
                        return sapParameterName;
                    }

                    public String getSapParameterValue() {
                        return sapParameterValue;
                    }
                    
                    public String getRowNumber() {
                        return rowNumber;
                    }                    

                    String schemaName;

                    String sapParameterType;

                    String sapTableName;

                    String sapParameterName;

                    String sapParameterValue;
                    
                    String rowNumber;

                    public SAPSchema(String schemaName, String sapParameterType, String sapTableName, String sapParameterName,
                            String sapParameterValue, String rowNumber) {

                        this.schemaName = schemaName;

                        this.sapParameterType = sapParameterType;

                        this.sapTableName = sapTableName;

                        this.sapParameterName = sapParameterName;

                        this.sapParameterValue = sapParameterValue;
                        
                        this.rowNumber = rowNumber;
                    }

                }

                // step_1
                public void addSAPSchema(String schemaName, String sapParameterType, String sapTableName,
                        String sapParameterName, String sapParameterValue, String rowNumber) {
                    SAPSchema newSAPSchema = new SAPSchema(schemaName, sapParameterType, sapTableName, sapParameterName,
                            sapParameterValue, rowNumber);

                    // process List
                    sapSchemaList.add(newSAPSchema);
                }

                // step_2
                // <tableName, sameType_sameTable_schema>
                public Map<String, List<SAPSchema>> extractSchemaMap(String sapParameterType) {
                    Map<String, List<SAPSchema>> map = new HashMap<String, List<SAPSchema>>();
                    for (SAPSchema sapSchema : sapSchemaList) {

                        // filter the sapParameterType first
                        if (!sapSchema.getSapParameterType().equals(sapParameterType)) {
                            continue;
                        }

                        String key = sapSchema.getSapTableName();
                        List<SAPSchema> tableNamekeyList = map.get(key);
                        if (tableNamekeyList == null) {
                            List<SAPSchema> newTableNamekeyList = new ArrayList<SAPSchema>();
                            newTableNamekeyList.add(sapSchema);
                            map.put(key, newTableNamekeyList);

                        } else {
                            tableNamekeyList.add(sapSchema);
                        }
                    }
                    return map;
                }
            }
            
            
List<Map<String, String>> schemas = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__SCHEMAS__");
/*            
            //intial the schema in buffer
            SchemaUtil schemaUtil = new SchemaUtil();
            
			List<Map<String, String>> sapMapping = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__MAPPING_OUTPUT__");            
            
			for(Map<String, String> configRow : sapMapping){			
				schemaUtil.addSAPSchema(configRow.get("SCHEMA_COLUMN"), configRow.get("SAP_PARAMETER_TYPE"), configRow.get("SAP_TABLE_NAME"), configRow.get("SAP_PARAMETER_NAME"), configRow.get("SAP_PARAMETER_VALUE"));
				if(false){
				System.out.println(configRow.get("SCHEMA_COLUMN") + " " + configRow.get("SAP_PARAMETER_TYPE") + " " + configRow.get("SAP_TABLE_NAME") + " " + configRow.get("SAP_PARAMETER_NAME") + " " + configRow.get("SAP_PARAMETER_VALUE"));
				}
			}
*/			

            //intial the input configuration in buffer
            SchemaUtil schemaUtil_input = new SchemaUtil();			
			
			List<Map<String, String>> sapMapping_input = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__MAPPING_INPUT__");            
            
			for(Map<String, String> configRow : sapMapping_input){			
				schemaUtil_input.addSAPSchema(configRow.get("SCHEMA_COLUMN"), configRow.get("SAP_PARAMETER_TYPE"), configRow.get("SAP_TABLE_NAME"), configRow.get("SAP_PARAMETER_NAME"), configRow.get("SAP_PARAMETER_VALUE"), configRow.get("SAP_TABLE_ROWNUMBER"));
				if(false){
				System.out.println(configRow.get("SCHEMA_COLUMN") + " " + configRow.get("SAP_PARAMETER_TYPE") + " " + configRow.get("SAP_TABLE_NAME") + " " + configRow.get("SAP_PARAMETER_NAME") + " " + configRow.get("SAP_PARAMETER_VALUE")+ " " + configRow.get("SAP_TABLE_ROWNUMBER"));
				}
			}
%>

<%
boolean startIterate = false;
String firstDataConnName = firstDataConn.getName();

String client = ElementParameterParser.getValue(node, "__CLIENT__");
String userid = ElementParameterParser.getValue(node, "__USERID__");
String password = ElementParameterParser.getValue(node, "__PASSWORD__");
String language = ElementParameterParser.getValue(node, "__LANGUAGE__");
String hostname = ElementParameterParser.getValue(node, "__HOSTNAME__");
String systemnumber = ElementParameterParser.getValue(node, "__SYSTEMNUMBER__");

String functionName = ElementParameterParser.getValue(node, "__SAP_FUNCTION__");

String iterate_out_type = ElementParameterParser.getValue(node, "__SAP_ITERATE_OUT_TYPE__");
String iterate_out_tablename = ElementParameterParser.getValue(node, "__SAP_ITERATE_OUT_TABLENAME__");
String [] iterate_out_multi = iterate_out_tablename.split(",");
for(int k = 0; k < iterate_out_multi.length; k++){
	if(iterate_out_multi[k] != null){
		iterate_out_multi[k] = iterate_out_multi[k].trim();
	}
}
List<String> iterate_out_multi_list = Arrays.asList(iterate_out_multi);

boolean useExistingConn = ("true").equals(ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__"));
String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
%>

	  	  com.sap.mw.jco.JCO.Client client_<%=cid %> = null;
<%if(useExistingConn){%>	    
	  client_<%=cid %> = (com.sap.mw.jco.JCO.Client)globalMap.get("conn_<%=connection %>");	
<%}else{%>
	  //Create a client connection to a dedicated R/3 system
	  client_<%=cid %> = com.sap.mw.jco.JCO.createClient( <%=client %>,      // SAP client
					            				 <%=userid %>,   	// userid
					            				 <%=password %>,    // password
					            				 <%=language %>,    // language
					            				 <%=hostname %>,    // host name
					            				 <%=systemnumber %> );      // system number
	        				 
		// Open the connection
		client_<%=cid %>.connect();
<%}%>      
        com.sap.mw.jco.IRepository repository_<%=cid %> = com.sap.mw.jco.JCO.createRepository("REPOSITORY", client_<%=cid %>);

        com.sap.mw.jco.IFunctionTemplate functionTemplate_<%=cid %> = repository_<%=cid %>.getFunctionTemplate(<%=functionName %>);

        com.sap.mw.jco.JCO.Function function_<%=cid %> = functionTemplate_<%=cid %>.getFunction();

        com.sap.mw.jco.JCO.ParameterList importParameterList_<%=cid %> = function_<%=cid %>.getImportParameterList();
        com.sap.mw.jco.JCO.ParameterList exportParameterList_<%=cid %> = function_<%=cid %>.getExportParameterList();
        com.sap.mw.jco.JCO.ParameterList tableParameterList_<%=cid %> = function_<%=cid %>.getTableParameterList();
        
<%
        /* the following is output part, it will output data to SAP. */
        // "input_single"
        Map<String, List<SchemaUtil.SAPSchema>> input_single_map = schemaUtil_input.extractSchemaMap("input_single");
        for (String key : input_single_map.keySet()) {
            List<SchemaUtil.SAPSchema> oneTableNamelist = input_single_map.get(key);
            for (SchemaUtil.SAPSchema schema : oneTableNamelist) {
%>              
		importParameterList_<%=cid %>.setValue(<%=schema.getSapParameterValue() %>, <%=schema.getSapParameterName() %>); // "input_single"--<%=schema.getSchemaName() %>
<%            }
        }
%>

<%
        // "input_structure"
        Map<String, List<SchemaUtil.SAPSchema>> input_structure_map = schemaUtil_input.extractSchemaMap("input_structure");
        java.util.Set<String> input_structure_set=input_structure_map.keySet();
        if(input_structure_set.size()>0){
%>
        com.sap.mw.jco.JCO.Structure input_structure_<%=cid %>=null;
<%        for (String key : input_structure_map.keySet()) {
%>          
		input_structure_<%=cid %> = importParameterList_<%=cid %>.getStructure(<%=key %>);
<%          List<SchemaUtil.SAPSchema> oneTableNamelist = input_structure_map.get(key);
            for (SchemaUtil.SAPSchema schema : oneTableNamelist) {
%>              
		input_structure_<%=cid %>.setValue(<%=schema.getSapParameterValue() %>, <%=schema.getSapParameterName() %>); // "input_structure"--<%=schema.getSchemaName() %>
<%          }
        }
        }
%>

<%
        // "input_table"
        Map<String, List<SchemaUtil.SAPSchema>> input_table_map = schemaUtil_input.extractSchemaMap("input_table");
        java.util.Set<String> input_table_set=input_table_map.keySet();
        if(input_table_set.size()>0){
%>
        com.sap.mw.jco.JCO.Table input_table_<%=cid %>=null; 
<%        
        for (String key : input_table_set) {
%>          
		input_table_<%=cid %> = importParameterList_<%=cid %>.getTable(<%=key %>);

<%          List<SchemaUtil.SAPSchema> oneTableNamelist = input_table_map.get(key);
            
			//split the TABLE_ROW
			Map<String, List<SchemaUtil.SAPSchema>> mapRowNumber = new HashMap<String, List<SchemaUtil.SAPSchema>> ();
            for (SchemaUtil.SAPSchema schema : oneTableNamelist) {
            	 String rowNumber = schema.getRowNumber();
            	 List<SchemaUtil.SAPSchema> rowNumberList = mapRowNumber.get(rowNumber);
            	 if(rowNumberList != null){
            	 	rowNumberList.add(schema);
            	 }else{
            	 	List<SchemaUtil.SAPSchema> newRowNumberList = new ArrayList<SchemaUtil.SAPSchema>();
            	 	newRowNumberList.add(schema);
            	 	mapRowNumber.put(rowNumber, newRowNumberList);
            	 }
            }
            
            java.util.Set<String> rowNumber_set=mapRowNumber.keySet();
            for(String rowNumberkey : rowNumber_set){
%>
        		input_table_<%=cid %>.appendRow();
<%            
            	List<SchemaUtil.SAPSchema> oneRowlist = mapRowNumber.get(rowNumberkey);
					for(SchemaUtil.SAPSchema schema : oneRowlist){
%>					
					input_table_<%=cid %>.setValue(<%=schema.getSapParameterValue() %>, <%=schema.getSapParameterName() %>); // "input_table"--<%=schema.getSchemaName() %>
<%					
					}

            }
        }
    }
%>        

<%
        // "table_input"
        Map<String, List<SchemaUtil.SAPSchema>> table_input_map = schemaUtil_input.extractSchemaMap("table_input");
        java.util.Set<String> table_input_set=table_input_map.keySet();
        if(table_input_set.size()>0){
%>
        com.sap.mw.jco.JCO.Table  table_input_<%=cid %>=null; 
<%        
        for (String key : table_input_set) {
%>          
		table_input_<%=cid %> = tableParameterList_<%=cid %>.getTable(<%=key %>);

<%          List<SchemaUtil.SAPSchema> oneTableNamelist = table_input_map.get(key);
            
			//split the TABLE_ROW
			Map<String, List<SchemaUtil.SAPSchema>> mapRowNumber = new HashMap<String, List<SchemaUtil.SAPSchema>> ();
            for (SchemaUtil.SAPSchema schema : oneTableNamelist) {
            	 String rowNumber = schema.getRowNumber();
            	 List<SchemaUtil.SAPSchema> rowNumberList = mapRowNumber.get(rowNumber);
            	 if(rowNumberList != null){
            	 	rowNumberList.add(schema);
            	 }else{
            	 	List<SchemaUtil.SAPSchema> newRowNumberList = new ArrayList<SchemaUtil.SAPSchema>();
            	 	newRowNumberList.add(schema);
            	 	mapRowNumber.put(rowNumber, newRowNumberList);
            	 }
            }
            
            java.util.Set<String> rowNumber_set=mapRowNumber.keySet();
            for(String rowNumberkey : rowNumber_set){
%>
        		table_input_<%=cid %>.appendRow();
<%            
            	List<SchemaUtil.SAPSchema> oneRowlist = mapRowNumber.get(rowNumberkey);
					for(SchemaUtil.SAPSchema schema : oneRowlist){
%>					
					 table_input_<%=cid %>.setValue(<%=schema.getSapParameterValue() %>, <%=schema.getSapParameterName() %>); // "table_input"--<%=schema.getSchemaName() %>
<%					
					}

            }
        }
    }
%>    

        client_<%=cid %>.execute(function_<%=cid %>);
        
<%
for(Map<String, String> schemaMap : schemas) {
	String schemaName = schemaMap.get("SCHEMA");
	String paramType = schemaMap.get("SAP_ITERATE_OUT_TYPE");	
	String tableName = schemaMap.get("SAP_TABLE_NAME");	
%>
	boolean go_<%=schemaName %> = true;
	
	<%if(paramType.equals("output_table")){%>
		com.sap.mw.jco.JCO.Table table_<%=schemaName %>_<%=cid %> = exportParameterList_<%=cid %>.getTable(<%=tableName %>);
	<%}%>
	
	<%if(paramType.equals("table_output")){%>
		com.sap.mw.jco.JCO.Table table_<%=schemaName %>_<%=cid %> = tableParameterList_<%=cid %>.getTable(<%=tableName %>);
	<%}%>		
<%	
}
%>

while(<%
boolean firstWhilePart = true;
for(Map<String, String> schemaMap : schemas) {
	String schemaName = schemaMap.get("SCHEMA");
%>
	<%=!firstWhilePart?"||":"" %>go_<%=schemaName %>
<%	
	firstWhilePart = false;
}
%>){

<%
for(Map<String, String> schemaMap : schemas) {
	String schemaName = schemaMap.get("SCHEMA");
%>
	<%=schemaName %> = null;
<%	
}
%>


<%
for(Map<String, String> schemaMap : schemas) {
	String schemaName = schemaMap.get("SCHEMA");
	String paramType = schemaMap.get("SAP_ITERATE_OUT_TYPE");
	String tableName = schemaMap.get("SAP_TABLE_NAME");	
	String mapping = schemaMap.get("MAPPING");	
	String[] paramNames = null;
	if(mapping != null){
		paramNames = mapping.split(",");
	}	
	IConnection justConn = null; //------->get the right output connection--->to get the columns info
	if(conns != null && conns.size() > 0){
		for(IConnection conn : conns){
			if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
				if(schemaName.equals(conn.getName())){
					justConn = conn;
					break;
				}
			}
		}
	}
	
	IMetadataTable justMetadata = justConn.getMetadataTable();
	List<IMetadataColumn> justColumnList = justMetadata.getListColumns();
%>
	if(go_<%=schemaName %>){
		<%if(paramType.equals("output_single")){%>
			go_<%=schemaName %> = false;	
    		<%=justConn.getName() %> = new <%=justConn.getName() %>Struct();
            <%
                int i = 0;
                for(IMetadataColumn justColumn : justColumnList){            	
            		String typeToGenerate = JavaTypesManager.getTypeToGenerate(justColumn.getTalendType(), justColumn.isNullable());
            %>
            	<%=justConn.getName() %>.<%=justColumn.getLabel() %> = ParserUtils.parseTo_<%= typeToGenerate %>(exportParameterList_<%=cid %>.getString(<%=paramNames[i] %>)); // "output_single"--<%=justColumn.getLabel() %>
            <%	
            	i++;	
            	}
            %>            	
        <%}else if(paramType.equals("output_structure")){%>
        	go_<%=schemaName %> = false;
        	com.sap.mw.jco.JCO.Structure output_structure_<%=justConn.getName() %>_<%=cid %> = exportParameterList_<%=cid %>.getStructure(<%=tableName %>);
    		<%=justConn.getName() %> = new <%=justConn.getName() %>Struct();
            <%
                int i = 0;
                for(IMetadataColumn justColumn : justColumnList){            	
            		String typeToGenerate = JavaTypesManager.getTypeToGenerate(justColumn.getTalendType(), justColumn.isNullable());
            %>
            	<%=justConn.getName() %>.<%=justColumn.getLabel() %> = ParserUtils.parseTo_<%= typeToGenerate %>(output_structure_<%=justConn.getName() %>_<%=cid %>.getString(<%=paramNames[i] %>)); // "output_structure"--<%=justColumn.getLabel() %>
            <%	
            	i++;	
            	}
            %>            	        
        
		<%}else if(paramType.equals("output_table") || paramType.equals("table_output")){%>
    		if(table_<%=schemaName %>_<%=cid %>.isLastRow()){ //check the flag first
    			go_<%=schemaName %> = false;
    		}        	
    		<%=justConn.getName() %> = new <%=justConn.getName() %>Struct();
            <%
                int i = 0;
                for(IMetadataColumn justColumn : justColumnList){            	
            		String typeToGenerate = JavaTypesManager.getTypeToGenerate(justColumn.getTalendType(), justColumn.isNullable());
            %>
            	<%=justConn.getName() %>.<%=justColumn.getLabel() %> = ParserUtils.parseTo_<%= typeToGenerate %>(table_<%=schemaName %>_<%=cid %>.getString(<%=paramNames[i] %>)); // "output_structure"--<%=justColumn.getLabel() %>
            <%	
            	i++;
            	}
            %>
            
            if(go_<%=schemaName %>){
            	table_<%=schemaName %>_<%=cid %>.nextRow();
            }             		
		<%}%>
	}
<%	
}
%>