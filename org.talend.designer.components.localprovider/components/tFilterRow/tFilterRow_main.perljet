<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.process.IConnection
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.commons.utils.generation.LocationUtils
    org.talend.commons.utils.generation.EntryLocation
    java.util.List
    java.util.Map
    java.util.ArrayList
"
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();

List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
    IMetadataTable metadata = metadatas.get(0);
    if (metadata!=null) {
        String cid = metadata.getTableName();
        
        String logical = ElementParameterParser.getValue(
                node,
                "__LOGICAL_OP__"
            );

        String use_advanced = ElementParameterParser.getValue(
                node,
                "__USE_ADVANCED__"
            );

        String advanced = ElementParameterParser.getValue(
                node,
                "__ADVANCED_COND__"
            );


        List<Map<String, String>> conditions =
            (List<Map<String,String>>)ElementParameterParser.getObjectValue(
                node,
                "__CONDITIONS__"
            );


        // We need the name of the input connection and the name of the
        // previous component
        String inputRowName = new String("input_row");
        String prevComponentName = new String("prev_component_name");

        List< ? extends IConnection> inConns = node.getIncomingConnections();
        if (inConns != null && !inConns.isEmpty()) {
            IConnection inConn = inConns.get(0);

            inputRowName = inConn.getName();
            prevComponentName = inConn.getMetadataTable().getTableName();
        }

        StringBuffer conditionsExpr = new StringBuffer();
        String beginExpr = "" ;
        StringBuffer conditionSeparator = new StringBuffer();
        StringBuffer endExpr = new StringBuffer();
        StringBuffer blockExpr = new StringBuffer();
        String lastBlock = "" ;
        String beginExprAdvanced = "" ;

        StringBuffer copyRow = new StringBuffer();

        copyRow.append("\n@");
        copyRow.append(cid);
        copyRow.append(" = @");
        copyRow.append(inputRowName);
        copyRow.append(" ; \n");


        boolean isOrExpr = false ;
        boolean isAndExpr = false ;
        if(logical.equals("&&")){
            isAndExpr = true ;
            beginExpr = "\nnext unless( " ;
            conditionSeparator.append(" ) ; ");
            beginExprAdvanced = "\nnext unless ( " ;

        } 
        else {
            isOrExpr = true ;
            conditionSeparator.append(" ) ");
            blockExpr.append(" {");
            blockExpr.append(copyRow);
            blockExpr.append("\n}");

            lastBlock = "\n else { next ; } \n" ;
        }


        boolean isFirst = true ;
        boolean atLeastOneSimpleCondition = false ;
        for(int i=0; i<conditions.size(); i++) {
            atLeastOneSimpleCondition = true ;
            Map<String, String> condition = conditions.get(i);
            if(isFirst ){
                if(isOrExpr){
                    beginExpr = "\nif( " ;
            	    beginExprAdvanced = "\nelsif( " ;
            	}
            }
            else{
            	if(isOrExpr) {
            	    beginExpr = "\nelsif( " ;
            	}
            }
            conditionsExpr.append(beginExpr);
            conditionsExpr.append(condition.get("FUNCTION"));

            conditionsExpr.append(" $");
            conditionsExpr.append(inputRowName);
            conditionsExpr.append("[");
            conditionsExpr.append(inputRowName);
            conditionsExpr.append("__");
            conditionsExpr.append(condition.get("INPUT_COLUMN"));
            conditionsExpr.append("] ");

            conditionsExpr.append(condition.get("OPERATOR"));
            conditionsExpr.append(" ");
            conditionsExpr.append(condition.get("RVALUE"));
            conditionsExpr.append(conditionSeparator);

            conditionsExpr.append(blockExpr);
            
            isFirst = false ;
        }//for

        if(isOrExpr){
            if(!atLeastOneSimpleCondition){
                lastBlock = copyRow.toString() ;
            }
        }
        else {
            lastBlock = copyRow.toString() ;
        }
        
        
        if(use_advanced.equals("true")){

            if(isOrExpr){
                if(!atLeastOneSimpleCondition){
                    beginExprAdvanced = "\nif( " ;
                    lastBlock = "\nelse { next ; }" ;
                }
            }


            LocationUtils locationUtils = new LocationUtils();
            
            //replace column label by column position constant
            List<EntryLocation> locations = new ArrayList<EntryLocation>();

    
            if (inConns != null && !inConns.isEmpty()) {
                IConnection inConn = inConns.get(0);
                IMetadataTable inMetadata = inConn.getMetadataTable();
   
                List<IMetadataColumn> columns = inMetadata.getListColumns();
                for(IMetadataColumn column : columns) {
                    locations.add(
                        new EntryLocation(
                            inputRowName,
                            column.getLabel()
                        )
                    );
                }
            }
    
            
            advanced = advanced.replaceAll(
                "\\$input_row\\[",
                "\\$"+ inputRowName +"["
            );
            
            advanced = locationUtils.replaceColumnNameToConstantName(
                advanced,
                (EntryLocation[])locations.toArray(new EntryLocation[0])
            );
    
            // In case the user would make some tricky Perl things, he can use
            // the arrays as a whole.
            advanced = advanced.replaceAll(
                "@input_row",
                "@" + inputRowName
            );
    


            conditionsExpr.append(beginExprAdvanced);
            conditionsExpr.append("\n");
            conditionsExpr.append(advanced);
            conditionsExpr.append(conditionSeparator);
            conditionsExpr.append(blockExpr);

        }
        
        conditionsExpr.append(lastBlock);


%>

$nb_line_<%=cid%>++;
<%=conditionsExpr%>
$nb_line_ok_<%=cid%>++;


<%
    }
}
%>
