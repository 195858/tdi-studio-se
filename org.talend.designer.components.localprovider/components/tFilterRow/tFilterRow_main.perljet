<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.process.IConnection
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.commons.utils.generation.LocationUtils
    org.talend.commons.utils.generation.EntryLocation
    java.util.List
    java.util.Map
    java.util.ArrayList
"
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
    IMetadataTable metadata = metadatas.get(0);
    if (metadata!=null) {
        
        String logical = ElementParameterParser.getValue(
                node,
                "__LOGICAL_OP__"
            );

        String use_advanced = ElementParameterParser.getValue(
                node,
                "__USE_ADVANCED__"
            );

        String advanced = ElementParameterParser.getValue(
                node,
                "__ADVANCED_COND__"
            );


        List<Map<String, String>> conditions =
            (List<Map<String,String>>)ElementParameterParser.getObjectValue(
                node,
                "__CONDITIONS__"
            );


        // We need the name of the input connection and the name of the
        // previous component
        String inputRowName = new String("input_row");
        String prevComponentName = new String("prev_component_name");

        List< ? extends IConnection> inConns = node.getIncomingConnections();
        if (inConns != null && !inConns.isEmpty()) {
            IConnection inConn = inConns.get(0);

            inputRowName = inConn.getName();
            prevComponentName = inConn.getMetadataTable().getTableName();
        }

%>
$nb_line_<%=cid%>++ ;
<%

        for (IConnection outConn: node.getOutgoingConnections("FLOW")) {
%>
$branch_<%=outConn.getName()%>_is_active = true;
<%
        }

        for (IConnection outConn: node.getOutgoingConnections("REJECT")) {
%>
$branch_<%=outConn.getName()%>_is_active = false;
<%
        }
if( (conditions.size()>0) || (use_advanced.equals("true"))){
%>


if (
<%
        boolean isFirst = true ;
        boolean atLeastOneSimpleCondition = false ;
        for(int i=0; i<conditions.size(); i++) {
            atLeastOneSimpleCondition = true ;
            Map<String, String> condition = conditions.get(i);
%>
        <%
        if(!isFirst){
        %>
        <%=logical%>
        <%
        }
        %>
    <%=condition.get("FUNCTION")%>($<%=inputRowName%>->[<%=inputRowName%>__<%=condition.get("INPUT_COLUMN")%>])
        <%=condition.get("OPERATOR")%> <%=condition.get("RVALUE")%>
<%
            isFirst = false ;
        }//for

%>
        <%
        if(use_advanced.equals("true")){
            if(atLeastOneSimpleCondition){
        %>
        <%=logical%>
        <%  }
            LocationUtils locationUtils = new LocationUtils();
                
            //replace column label by column position constant
            List<EntryLocation> locations = new ArrayList<EntryLocation>();
    
        
            if (inConns != null && !inConns.isEmpty()) {
                IConnection inConn = inConns.get(0);
                IMetadataTable inMetadata = inConn.getMetadataTable();
       
                List<IMetadataColumn> columns = inMetadata.getListColumns();
                for(IMetadataColumn column : columns) {
                    locations.add(
                        new EntryLocation(
                            inputRowName,
                            column.getLabel()
                        )
                    );
                }
            }
        
                
            advanced = advanced.replaceAll(
                "\\$input_row\\[",
                "\\$"+ inputRowName +"["
            );
                
            advanced = locationUtils.replaceColumnNameToConstantName(
                advanced,
                (EntryLocation[])locations.toArray(new EntryLocation[0])
            );
            advanced = advanced.replaceAll(
                "\\$"+ inputRowName +"\\[",
                "\\$"+ inputRowName +"->["
            );
        
            // In case the user would make some tricky Perl things, he can use
            // the arrays as a whole.
            advanced = advanced.replaceAll(
                "@input_row",
                "@\\$" + inputRowName
            );
            %>
            <%=advanced%>,
        <%
        }
        %>
) {

    $nb_line_ok_<%=cid %>++ ;
}
else {
    $<%=cid%>_REJECT = $<%=cid%>;

<%
                    for (IConnection outConn: node.getOutgoingConnections("FLOW")) {
%>
    $branch_<%=outConn.getName()%>_is_active = false;
<%
                    }

                    for (IConnection outConn: node.getOutgoingConnections("REJECT")) {
%>
    $branch_<%=outConn.getName()%>_is_active = true;
<%
                    }
%>
}

<%
       }
    }
}
%>
