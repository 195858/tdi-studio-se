<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.IConnectionCategory
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.commons.utils.generation.LocationUtils
    org.talend.commons.utils.generation.EntryLocation
    java.util.List
    java.util.Map
    java.util.ArrayList
"
%>

<%
class Transfer{
	public String function(String function,String inputRowName, String inputColumn){
		if(function.equals("S_VALUE_OF")){
			return "("+inputRowName+"."+inputColumn+")";
		}else if(function.equals("N_VALUE_OF_FLOAT")){
			return "((Float)Float.parseFloat("+inputRowName+"."+inputColumn+"))";
		}else if(function.equals("N_VALUE_OF_INTEGER")){
			return "((Integer)Integer.parseInt("+inputRowName+"."+inputColumn+"))";
		}else if(function.equals("ABS_VALUE_FLOAT")){
			return "((Float)java.lang.Math.abs(Float.parseFloat("+inputRowName+"."+inputColumn+")))";
		}else if(function.equals("ABS_VALUE_INTEGER")){
			return "((java.lang.Integer)java.lang.Math.abs(Integer.parseInt("+inputRowName+"."+inputColumn+")))";
		}else if(function.equals("LC")){
			return "("+inputRowName+"."+inputColumn+").toLowerCase()";
		}else if(function.equals("UC")){
			return "("+inputRowName+"."+inputColumn+").toUpperCase()";
		}else if(function.equals("LCFIRST")){
			return "(("+inputRowName+"."+inputColumn+").substring(0, 1).toLowerCase()+("+inputRowName+"."+inputColumn+").substring(1))";
		}else if(function.equals("UCFIRST")){
			return "(("+inputRowName+"."+inputColumn+").substring(0, 1).toUpperCase()+("+inputRowName+"."+inputColumn+").substring(1))";
		}else if(function.equals("LENGTH")){	
			return "((Integer)("+inputRowName+"."+inputColumn+").length())";
		}
		return null;
	}
	
	public String operator(String operator, String value, String function, String inputRowName, String inputColumn){
		//if(value.startsWith("\""))	
		
		
		if(operator.equals("EQ")){
			return function(function,inputRowName,inputColumn)+".equals("+value+")";
		}else if(operator.equals("NE")){
			return "!("+function(function,inputRowName,inputColumn)+".equals("+value+"))";
		}else if(operator.equals("GT")){
			return "("+function(function,inputRowName,inputColumn)+".compareTo("+value+")>0)";
		}else if(operator.equals("LT")){
			return "("+function(function,inputRowName,inputColumn)+".compareTo("+value+")<0)";
		}else if(operator.equals("GE")){
			return "("+function(function,inputRowName,inputColumn)+".compareTo("+value+")>=0)";
		}else if(operator.equals("LE")){
			return "("+function(function,inputRowName,inputColumn)+".compareTo("+value+")<=0)";
		}else if(operator.equals("MATCH")){
			return "("+function(function,inputRowName,inputColumn)+".matches("+value+"))";
		}else if(operator.equals("NMATCH")){
			return "!("+function(function,inputRowName,inputColumn)+".matches("+value+"))";
		}
		return null;
	}
	
	
	public String logical(String logical){
		if(logical.equals("AND")){
			return "&&";
		}else if(logical.equals("OR")){
			return "||";
		}
		return null;
	}
}

Transfer tr=new Transfer();

CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
List<IMetadataColumn> columnList = null;
List< ? extends IConnection> inConns = node.getIncomingConnections();
// We need the name of the input connection and the name of the
// previous component
String inputRowName = new String("input_row");
String prevComponentName = new String("prev_component_name");
String cid=null;
boolean flag=true;

List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
    IMetadataTable metadata = metadatas.get(0);
    if (metadata!=null) {
    	columnList = metadata.getListColumns();
        cid = metadata.getTableName();       
        String logical = ElementParameterParser.getValue(node,"__LOGICAL_OP__");
        String use_advanced = ElementParameterParser.getValue(node,"__USE_ADVANCED__");
        String advanced = ElementParameterParser.getValue(node,"__ADVANCED_COND__");
        List<Map<String, String>> conditions =
        (List<Map<String,String>>)ElementParameterParser.getObjectValue(node,"__CONDITIONS__");
        if (inConns != null && !inConns.isEmpty()) {
            IConnection inConn = inConns.get(0);
            inputRowName = inConn.getName();
            prevComponentName = inConn.getMetadataTable().getTableName();
        }
%>
boolean branch_<%=cid%>_is_active = false;
nb_line_<%=cid%>++ ;
<%if(conditions.size()==0&&use_advanced.equals("false")){%>
	if (true
<%}else{%>
	if(	
<%
}
        boolean isFirst = true ;
        boolean atLeastOneSimpleCondition = false ;
        
        for(int i=0; i<conditions.size(); i++) {
            atLeastOneSimpleCondition = true ;
            Map<String, String> condition = conditions.get(i);     
        	if(!isFirst){
%>
        <%=tr.logical(logical)%>
<%      }%>
        <%=tr.operator(condition.get("OPERATOR"),condition.get("RVALUE"),condition.get("FUNCTION"),inputRowName,condition.get("INPUT_COLUMN"))%>
<%
            isFirst = false ;
        }//for

        if(use_advanced.equals("true")){
            if(atLeastOneSimpleCondition){
        %>
        <%=tr.logical(logical)%>
        <%  }
            LocationUtils locationUtils = new LocationUtils(); 
            //replace column label by column position constant
            List<EntryLocation> locations = new ArrayList<EntryLocation>();
            if (inConns != null && !inConns.isEmpty()) {
                IConnection inConn = inConns.get(0);
                IMetadataTable inMetadata = inConn.getMetadataTable();
                List<IMetadataColumn> columns = inMetadata.getListColumns();
                for(IMetadataColumn column : columns) {
                    locations.add(new EntryLocation(inputRowName,column.getLabel()));
                }
            }    
            advanced = advanced.replaceAll("input_row",inputRowName);              
            advanced = locationUtils.replaceColumnNameToConstantName(advanced,(EntryLocation[])locations.toArray(new EntryLocation[0]));   
         %>
            
            <%=advanced%>
<%     }%>

) {
    branch_<%=cid%>_is_active = true ;
    nb_line_ok_<%=cid %>++ ;
}



























<%
		List< ? extends IConnection> connsFilter = node.getOutgoingConnections("FILTER");
 		for(int connNO = 0; connNO < connsFilter.size(); connNO++){
 		  IConnection conn2 = connsFilter.get(connNO);
%>
		if(branch_<%=cid%>_is_active){
		<%=conn2.getName()%> = new <%=conn2.getName()%>Struct();
<%
 		  if(conn2.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)){
 		  	for(IMetadataColumn column:columnList){
 		  %>
 		   	<%=conn2.getName()%>.<%=column.getLabel()%>=<%=inputRowName%>.<%=column.getLabel()%>;
 		  <% 
 		  	}
 		  }
%>
		}else{
			<%=conn2.getName()%>=null;
		}
<%
 		}
%>





<%
		List< ? extends IConnection> connsReject = node.getOutgoingConnections("REJECT");
 		for(int connNO = 0; connNO < connsReject.size(); connNO++){
 		  IConnection conn2 = connsReject.get(connNO);
%>
		if(!branch_<%=cid%>_is_active){
		<%=conn2.getName()%> = new <%=conn2.getName()%>Struct();
<%
 		  if(conn2.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)){
 		  	for(IMetadataColumn column:columnList){
 		  %>
 		   	<%=conn2.getName()%>.<%=column.getLabel()%>=<%=inputRowName%>.<%=column.getLabel()%>;
 		  <% 
 		  	}
 		  }
%>
		}else{
			<%=conn2.getName()%>=null;
		}
<%
 		}
%>





<%
 }
}
%>