<%@ jet 
imports="
	org.talend.designer.codegen.config.CodeGeneratorArgument
	org.talend.core.model.process.INode
	org.talend.core.model.process.ElementParameterParser
	org.talend.core.model.process.IConnection
	org.talend.core.model.metadata.IMetadataColumn
	org.talend.core.model.metadata.IMetadataTable
	org.talend.core.model.metadata.types.JavaTypesManager
	org.talend.core.model.metadata.types.JavaType 
	org.talend.core.model.process.IConnectionCategory
    org.talend.core.model.metadata.MappingTypeRetriever
    org.talend.core.model.metadata.MetadataTalendType	
	java.util.List
	java.util.ArrayList
	java.util.Map
	java.util.HashMap
" 
skeleton="../templates/db_output_bulk.skeleton"
%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	String dbmsId = ElementParameterParser.getValue(node,"__MAPPING__");
	List<Map<String, String>> addCols = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node,"__ADD_COLS__");	
    boolean useFieldOptions = ("true").equals(ElementParameterParser.getValue(node, "__USE_FIELD_OPTIONS__"));
    List<Map<String, String>> fieldOptions = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__FIELD_OPTIONS__");	
	String dataAction = ElementParameterParser.getValue(node,"__DATA_ACTION__");
	String commitEvery = ElementParameterParser.getValue(node, "__COMMIT_EVERY__");
	String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");
	boolean extendedInsert = ("true").equals(ElementParameterParser.getValue(node, "__EXTENDINSERT__"));
	String tableName = ElementParameterParser.getValue(node,"__TABLE__");
	int numPerInsert = Integer.parseInt(ElementParameterParser.getValue(node, "__NB_ROWS_PER_INSERT__"));
    String dieOnError = ElementParameterParser.getValue(node, "__DIE_ON_ERROR__");
	boolean useBatchSize = ("true").equals(ElementParameterParser.getValue(node,"__USE_BATCH_SIZE__"));
	
	String rejectConnName = null;
	List<? extends IConnection> rejectConns = node.getOutgoingConnections("REJECT");
	if(rejectConns != null && rejectConns.size() > 0) {
	    IConnection rejectConn = rejectConns.get(0);
	    rejectConnName = rejectConn.getName();
	}
	
	String incomingConnName = null;
    List<IMetadataColumn> columnList = getColumnList(node);
    
    List< ? extends IConnection> conns = node.getIncomingConnections();
    if(conns!=null && conns.size()>0){
        IConnection conn = conns.get(0);
        incomingConnName = conn.getName();
    }
    List<Column> stmtStructure =  getManager(dbmsId, cid).createColumnList(columnList, useFieldOptions, fieldOptions, addCols);
    
	if(extendedInsert){
	    class ExtendInsertOperation{
	        public String generateType(String typeToGenerate){
	            if(("byte[]").equals(typeToGenerate)){
	                typeToGenerate = "Bytes";
	            }else if(("java.util.Date").equals(typeToGenerate)){
	                typeToGenerate = "Date";
	            }else if(("Integer").equals(typeToGenerate)){
	                typeToGenerate = "Int";
	            }else if(("List").equals(typeToGenerate)){  
	                typeToGenerate = "Object";                 
	            }else{
	                typeToGenerate=typeToGenerate.substring(0,1).toUpperCase()+typeToGenerate.substring(1);
	            }
	            return typeToGenerate;
	        }
	        
	        public void generateSetStmt(String typeToGenerate,Column column,String cid){
	            boolean isObject = false;                               
	            String prefix = "pstmt_";                             
	            %>

	        <%
	        if(("Character").equals(typeToGenerate)) {
	            isObject = true;
	            %>
	            if(bufferL<%=cid%>.<%=column.getName()%>==null){
	                <%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.CHAR);
                <%
	        }else if(("Date").equals(typeToGenerate)){
	            isObject = true;
	            %>
	            if(bufferL<%=cid%>.<%=column.getName()%>==null){
	                <%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.DATE);
                <%
	        }else if(("byte[]").equals(typeToGenerate)){
	            isObject = true;
	            %>
	            if(bufferL<%=cid%>.<%=column.getName()%>==null){
	                <%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.ARRAY);         
                <%
	        }else if(("Long").equals(typeToGenerate)||("Byte").equals(typeToGenerate)||("Integer").equals(typeToGenerate)||("Short").equals(typeToGenerate)){
	            isObject = true;
	            %>
	            if(bufferL<%=cid%>.<%=column.getName()%>==null){
	                <%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.INTEGER);
                <%
	        }else if(("String").equals(typeToGenerate)){
	            isObject = true;
	            %>
	            if(bufferL<%=cid%>.<%=column.getName()%>==null){
	                <%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.VARCHAR);
                <%
	        }else if(("Object").equals(typeToGenerate)){
	            isObject = true;
	            %>
	            if(bufferL<%=cid%>.<%=column.getName()%>==null){
	                <%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.OTHER);
                <%
	        }else if(("Boolean").equals(typeToGenerate)){
	            isObject = true;
	            %>
	            if(bufferL<%=cid%>.<%=column.getName()%>==null){
	                <%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.BOOLEAN);   
                <%
	        }else if(("Double").equals(typeToGenerate)){
	            isObject = true;
	            %>
	            if(bufferL<%=cid%>.<%=column.getName()%>==null){
	                <%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.DOUBLE);    
                <%
	        }else if(("Float").equals(typeToGenerate)){
	            isObject = true;
	            %>
	            if(bufferL<%=cid%>.<%=column.getName()%>==null){
	                <%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.FLOAT); 
                <%
	        }
            if(isObject){
                %>

                }else{

                <%
            }
	        typeToGenerate = generateType(typeToGenerate);
	        
	        if(("Char").equals(typeToGenerate)||("Character").equals(typeToGenerate)){
	            %>
	        <%
	        if(isObject) {
	            %>
	            if(bufferL<%=cid%>.<%=column.getName()%>==null){
	        <%
	        } else {
	            %>
	            if(("null").equals(String.valueOf(bufferL<%=cid%>.<%=column.getName()%>).toLowerCase())){
	        <%
	        }
            %>
            <%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.CHAR);
	            
	        } else if(bufferL<%=cid%>.<%=column.getName()%> == '\0') {
	        
	            <%=prefix+cid%>.setString(count<%=cid%>,"");
	            
	        } else {
	            
	            <%=prefix+cid%>.setString(count<%=cid%>,String.valueOf(bufferL<%=cid%>.<%=column.getName()%>));
	        }
	        <%
	        }else if(("Date").equals(typeToGenerate)){
	            %>
	            if(bufferL<%=cid%>.<%=column.getName()%>!=null){
	                // timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
	                date_<%=cid %> = bufferL<%=cid%>.<%=column.getName()%>.getTime();
	                if (date_<%=cid %> < year1_<%=cid %> || date_<%=cid %> >= year10000_<%=cid %>) {
	                    <%=prefix+cid%>.setString(count<%=cid%>, "0000-00-00 00:00:00");
	                } else {
	                    <%=prefix+cid%>.setTimestamp(count<%=cid%>, new java.sql.Timestamp(date_<%=cid %>));
	                }
	            }else{
	        
	                <%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.DATE);
	            
	            }
	            <%
	        }else{
	            %>
	            <%=prefix+cid%>.set<%=typeToGenerate%>(count<%=cid%>,bufferL<%=cid%>.<%=column.getName()%>);
	            <%
	        }
	        if(isObject){
	            %>
	            
	            }
	        
	        <%
	        }
        }
    }
	ExtendInsertOperation eiOperation = new ExtendInsertOperation();
	%>
  

    if(rowCount<%=cid%>!=0){

        StringBuilder extendInsertValueStmt = new StringBuilder();
        for(int i=0 ; i < rowCount<%=cid%> ; i++){
             extendInsertValueStmt.append("("+insertColValue<%=cid%>+")");
             if (i != rowCount<%=cid%> - 1) extendInsertValueStmt.append(",");
        }
        
        pstmt_<%=cid %> = 
            conn_<%=cid%>.prepareStatement("INSERT INTO `"+<%=tableName%>+"` ("+insertColName<%=cid%>+") VALUES "+extendInsertValueStmt.toString());
        
        int row2Count<%=cid%> = 0;
        int count<%=cid%> = 0;
        
        for(BufferLine_<%=cid%> bufferL<%=cid%> : exInsertColValueList<%=cid%>){            
            count<%=cid%> = row2Count<%=cid%>*<%=columnList.size()%>+1;         
          
            <%   
            for(Column column : stmtStructure) {
                if(!column.isReplaced() && !column.isAddCol() && column.isInsertable()) {
                    String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());                     
                    eiOperation.generateSetStmt(typeToGenerate, column, cid);
                    %>
                    count<%=cid%>++;
                    <%
                }
            }
            %>
    
            row2Count<%=cid%>++;
        }
        
        //insertedCount_<%=cid%> = insertedCount_<%=cid%> + pstmt_<%=cid %>.executeUpdate();
        pstmt_<%=cid %>.executeBatch();
        pstmt_<%=cid %>.clearBatch();
        pstmt_<%=cid %>.close();

    }


<%
	}
	
    if(("INSERT_OR_UPDATE").equals(dataAction)) {
        %>
        if(pstmtUpdate_<%=cid%> != null){

            pstmtUpdate_<%=cid %>.close();
            
        } 
        if(pstmtInsert_<%=cid %> != null){

            pstmtInsert_<%=cid %>.close();
            
        }
        if(pstmt_<%=cid %> != null) {

            pstmt_<%=cid %>.close();
            
        }        
        <%
    } else if(("UPDATE_OR_INSERT").equals(dataAction)) {
        %>
        if(pstmtUpdate_<%=cid%> != null){

            pstmtUpdate_<%=cid %>.close();
            
        } 
        if(pstmtInsert_<%=cid %> != null){

            pstmtInsert_<%=cid %>.close();
            
        }        
        <%
    } else {
        %>
        <%if (rejectConnName==null && (( useBatchSize && (("UPDATE").equals(dataAction) || ("DELETE").equals(dataAction)) )) ) {
    %>                
    try {
    	if(pstmt_<%=cid %> != null) {
    	<%if(!("true").equals(useExistingConn)) { //check if existing connectionn is not used
    	%>
        	if(commitCounter_<%=cid%> > 0){

		<%} else {
		%>
			if(batchSizeCounter_<%=cid%> > 0) {
		<%
		  }
		%>
				pstmt_<%=cid %>.executeBatch(); 
				pstmt_<%=cid %>.clearBatch(); 
	    	<%if (("UPDATE").equals(dataAction)) {
	    	%>
	    		updatedCount_<%=cid%> += pstmt_<%=cid %>.getUpdateCount();
	    	<%
	    	}else if (("DELETE").equals(dataAction)) {
	    	%>
	    	    deletedCount_<%=cid%> += pstmt_<%=cid %>.getUpdateCount();
	    	<%
	    	}%>
	    	}
	    }	                	    
    }catch (java.sql.BatchUpdateException e){
    	<%if(("true").equals(dieOnError)) {
    	%>
    		throw(e);
    	<%
    	}else {
    	%>
    	System.out.println(e.getMessage());
    	<%
    	}%>                	
	}                                  
    <%
    }%>  
    
        if(pstmt_<%=cid %> != null) {
            pstmt_<%=cid %>.close();
            
        }        
        <%
    }   
    %>

    <%
	if(!("true").equals(useExistingConn))
	{
		if(!("").equals(commitEvery) && !("0").equals(commitEvery))
		{
    		%>
    		conn_<%=cid%>.commit();
    		<%
		}
	
		commitEvery = "0";
    	%>	
    	conn_<%=cid%> .close();
    	<%
	}
    %>

	nb_line_deleted_<%=cid%>=nb_line_deleted_<%=cid%>+ deletedCount_<%=cid%>;
	nb_line_update_<%=cid%>=nb_line_update_<%=cid%> + updatedCount_<%=cid%>;
	nb_line_inserted_<%=cid%>=nb_line_inserted_<%=cid%> + insertedCount_<%=cid%>;
	nb_line_rejected_<%=cid%>=nb_line_rejected_<%=cid%> + rejectedCount_<%=cid%>;

    globalMap.put("<%=cid %>_NB_LINE",nb_line_<%=cid%>);
    globalMap.put("<%=cid %>_NB_LINE_UPDATED",nb_line_update_<%=cid%>);
    globalMap.put("<%=cid %>_NB_LINE_INSERTED",nb_line_inserted_<%=cid%>);
    globalMap.put("<%=cid %>_NB_LINE_DELETED",nb_line_deleted_<%=cid%>);
    globalMap.put("<%=cid %>_NB_LINE_REJECTED",nb_line_rejected_<%=cid%>);
