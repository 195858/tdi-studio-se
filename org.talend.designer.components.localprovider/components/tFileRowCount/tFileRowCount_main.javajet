<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser
    org.talend.designer.codegen.config.CodeGeneratorArgument
"
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

String filename = ElementParameterParser.getValue(
    node,
    "__FILENAME__"
);

String rowSeparator = ElementParameterParser.getValue(
    node,
    "__ROWSEPARATOR__"
);
String encoding = ElementParameterParser.getValue(node,"__ENCODING__");
%>
if (<%=filename%>.toLowerCase().endsWith(".xlsx")) throw new RuntimeException("not support excel 2007");  
int lineCount_<%=cid %> = 0;
if (<%=filename%>.toLowerCase().endsWith(".xls")){
  final jxl.WorkbookSettings wbs_<%=cid%> = new jxl.WorkbookSettings();
  wbs_<%=cid%>.setEncoding(<%=encoding%>);
  final jxl.Workbook wb_<%=cid%> = jxl.Workbook.getWorkbook(
      new java.io.BufferedInputStream(
          new java.io.FileInputStream(<%=filename%>)), wbs_<%=cid%>);

  java.util.List<jxl.Sheet> sheets_<%=cid%> = new java.util.ArrayList<jxl.Sheet>();;
  sheets_<%=cid%> = java.util.Arrays.<jxl.Sheet> asList(wb_<%=cid%>.getSheets());
  
  if (sheets_<%=cid%>.size() <= 0){
    wb_<%=cid%>.close();
    throw new RuntimeException("Special sheets not exist!");
  }  
  int emptyLineCount_<%=cid%> = 0;
 
  for (jxl.Sheet sheet_<%=cid%> : sheets_<%=cid%>) {
    int one_sheet_rows = sheet_<%=cid%>.getRows();
    lineCount_<%=cid %> += one_sheet_rows;
  
    for (int i = 0; i < one_sheet_rows; i++){
      jxl.Cell[] sheet_row = sheet_<%=cid%>.getRow(i);
    
      boolean bIsEmptyRow = true;
      for (jxl.Cell cell: sheet_row){
        if (cell.getContents() != null){
          bIsEmptyRow = false;
          break;
        }
      }
      emptyLineCount_<%=cid%> += bIsEmptyRow ? 1 : 0;
    }
  }  
  wb_<%=cid%>.close();
  
} else{        					
          java.io.BufferedReader br_<%=cid %> = new java.io.BufferedReader
        									(new java.io.InputStreamReader
        									(new java.io.FileInputStream(<%=filename %>), <%=encoding%>));				
        String rowSeparator_<%=cid %> = <%=rowSeparator %>;
        byte[] bytes_<%=cid %> = rowSeparator_<%=cid %>.getBytes();
        int index_<%=cid %> = 0;

        int oneChar_<%=cid %> = 0;
        boolean eol_<%=cid %>=false;
        int emptyLineCount_<%=cid %>=1;
		
		if(bytes_<%=cid %>.length > 0) {
            while ((oneChar_<%=cid %> = br_<%=cid %>.read()) != -1) {
            	
    			if(lineCount_<%=cid%>==0) lineCount_<%=cid%> = 1;
                if (oneChar_<%=cid %> == bytes_<%=cid %>[index_<%=cid %>]) {
                    if (index_<%=cid %> == bytes_<%=cid %>.length - 1) {
                        lineCount_<%=cid %>++;
                        if(eol_<%=cid%>) emptyLineCount_<%=cid %>++;
                        eol_<%=cid %>=true;
                        index_<%=cid %> = 0;
                    } else {
                        index_<%=cid %>++;
                    }
                }else{
                	eol_<%=cid %> = false;
                	emptyLineCount_<%=cid %>=1;
                	index_<%=cid %>= 0;
                }
            }
            if(eol_<%=cid %> && index_<%=cid %> == 0) lineCount_<%=cid %>=lineCount_<%=cid %>-emptyLineCount_<%=cid %>;
        }
       br_<%=cid %>.close();
  }    
  globalMap.put("<%=cid %>_COUNT",lineCount_<%=cid %>);    

