<%@ jet 
imports="
    	org.talend.core.model.process.INode 
    	org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.IConnection
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
		org.talend.core.model.process.IConnectionCategory
		java.util.List
        org.talend.core.model.process.IProcess		
		"
%>
<%@ include file="../templates/Log4j/Log4jFileUtil.javajet"%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
	IProcess process = node.getProcess();
	boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(process, "__LOG4J_ACTIVATE__"));
	
	boolean useProxy = ("true").equals(ElementParameterParser.getValue(node,"__USE_PROXY__"));
	String proxyHost = ElementParameterParser.getValue(node,"__PROXY_HOST__");
   	String proxyPort = ElementParameterParser.getValue(node,"__PROXY_PORT__");
   	String proxyUsername = ElementParameterParser.getValue(node,"__PROXY_USERNAME__");
   	String proxyPassword = ElementParameterParser.getValue(node,"__PROXY_PASSWORD__");
   	boolean needCompression = ("true").equals(ElementParameterParser.getValue(node,"__NEED_COMPRESSION__"));

	String cid = node.getUniqueName();
	
   	log4jFileUtil.componentStartInfo(node);
   	log4jFileUtil.logParameters(node);
   	
   	String passwordFieldName = "";
%>

int nb_line_<%=cid%> = 0;

<%
List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas != null) && (metadatas.size() > 0)) {
	IMetadataTable metadata = metadatas.get(0);
	
	if (metadata != null) {
		List<IMetadataColumn> columnList = metadata.getListColumns(); 
		List<? extends IConnection> outgoingConns = node.getOutgoingSortedConnections();

		if (outgoingConns != null && outgoingConns.size() > 0){
			
			String sd = ElementParameterParser.getValue(node, "__START_DATE__");
			String ed = ElementParameterParser.getValue(node, "__END_DATE__");
			String username = ElementParameterParser.getValue(node, "__USER__");

			String module = ElementParameterParser.getValue(node, "__MODULENAME__");
			String customModulename = ElementParameterParser.getValue(node, "__CUSTOM_MODULE_NAME__").trim();
			module = (("CustomModule").equals(module)) ? customModulename : "\""+module+"\"";
			String endpoint = ElementParameterParser.getValue(node, "__ENDPOINT__");
			boolean useExistingConn = ("true").equals(ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__"));
			String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
			String timeout = ElementParameterParser.getValue(node,"__TIMEOUT__");
			String clientID = ElementParameterParser.getValue(node,"__CLIENT_ID__");
			
			boolean bulkConnection = false; //for tSalesforceOAuth.javajet
			
			String apiVersion = ElementParameterParser.getValue(node,"__API_VERSION__");
			String loginType = ElementParameterParser.getValue(node,"__LOGIN_TYPE__");
			boolean useOAuth = "OAUTH".equals(loginType);
			if(!useExistingConn){
				if(useOAuth){
				%>
					<%@ include file="../tSalesforceConnection/tSalesforceOAuth.javajet"%>
				<%	
				}
			}
			%>
        	System.setProperty("org.apache.commons.logging.Log", "org.apache.commons.logging.impl.NoOpLog");
			java.text.SimpleDateFormat startdf_<%=cid%> = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            java.text.SimpleDateFormat enddf_<%=cid%> = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			
			startdf_<%=cid%>.parse(<%=sd%>);
            enddf_<%=cid%>.parse(<%=ed%>);
            
            java.util.Calendar startCal_<%=cid%> = startdf_<%=cid%>.getCalendar();
            java.util.Calendar endCal_<%=cid%> = enddf_<%=cid%>.getCalendar();
			
	        
	        org.talend.salesforce.SforceManagement sfMgr_<%=cid%> = new org.talend.salesforce.SforceManagementImpl();
			<%if(useExistingConn){%>
				if(globalMap.get("stub_<%=connection %>")==null || globalMap.get("sessionHeader_<%=connection%>")==null){
					throw new RuntimeException("Get null connection from <%=connection %>");
				}
				if(globalMap.get("callOptions_<%=connection %>")!=null ){
					sfMgr_<%=cid%>.setCallOptions((com.salesforce.soap.partner.CallOptions)globalMap.get("callOptions_<%=connection %>"));
				}
				sfMgr_<%=cid%>.login((com.salesforce.soap.partner.SforceServiceStub)globalMap.get("stub_<%=connection %>"),(com.salesforce.soap.partner.SessionHeader)globalMap.get("sessionHeader_<%=connection%>"));
				<%if(isLog4jEnabled){%>
					log.info("<%=cid%> - Login successful with exsit connection : <%=connection%>");
				<%}%>
			<%}else{%>
				<%if(clientID!=null && !"".equals(clientID) && !"\"\"".equals(clientID)){%>
					sfMgr_<%=cid%>.setClientID(<%=clientID%>);
				<%}
				if(useOAuth){
					%>
						boolean result_<%=cid%> = sfMgr_<%=cid%>.login(accessToken_<%=cid%>, endpointURL_<%=cid%>,<%=timeout%>,<%=needCompression%>);
						if(!result_<%=cid%>){
							throw new RuntimeException("Login failed!");
						}
					<%
					}else{
						if(useProxy){
							passwordFieldName = "__PROXY_PASSWORD__";
            				if (ElementParameterParser.canEncrypt(node, passwordFieldName)) {
                    		%>
                    		String decryptedPwd_<%=cid%> = routines.system.PasswordEncryptUtil.decryptPassword(<%=ElementParameterParser.getEncryptedValue(node, passwordFieldName)%>);
                    		<%
                    		} else {
                    		%>
                    		String decryptedPwd_<%=cid%> = <%= ElementParameterParser.getValue(node, passwordFieldName)%>;
                    		<%
                    		}
						%>
						    java.util.Properties props_<%=cid%> = System.getProperties();
						    props_<%=cid%>.put("socksProxyHost",<%=proxyHost %>);  
						    props_<%=cid%>.put("socksProxyPort",<%=proxyPort %>);
						    props_<%=cid%>.put("java.net.socks.username", <%=proxyUsername %>);
						    props_<%=cid%>.put("java.net.socks.password", decryptedPwd_<%=cid%>); 
						    
						<%
						}
						%>
						
						<%
            			passwordFieldName = "__PASS__";
            			%>
            
            			<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>
            			
						boolean result_<%=cid%> = sfMgr_<%=cid%>.login(<%=endpoint%>,<%=username%>,decryptedPassword_<%=cid%>,<%=timeout%>,<%=needCompression%>);
						if(!result_<%=cid%>){
							throw new RuntimeException("Login failed! Please check the username,password and endpoint");
						}
		        	<%
		        	}
		        	%>
		        	<%if(isLog4jEnabled){%>
						log.info("<%=cid%> - Login successful");
					<%}%>
		        <%
		        }
		        %>
        	
			<%
			java.lang.StringBuilder sb = new java.lang.StringBuilder();
			for (IMetadataColumn column: columnList){
				if(sb.length() == 0){
					sb.append(column.getLabel());
				}else{
					sb.append(","+column.getLabel());
				}
			}
			String fieldlist = sb.toString();
		
			IConnection outgoingConn = outgoingConns.get(0);
			if(outgoingConn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) { // start 1
			%>		
			<%log4jFileUtil.startRetriveDataInfo();%>		
			com.salesforce.soap.partner.GetDeletedResult gdr_<%=cid%> = sfMgr_<%=cid%>.getDeleted(<%=module%>, startCal_<%=cid%>, endCal_<%=cid%>);
    		com.salesforce.soap.partner.QueryResult qr_<%=cid%> = null;
    		com.salesforce.soap.partner.DeletedRecord[] drs_<%=cid%> = gdr_<%=cid%>.getDeletedRecords();
    		
    		if (drs_<%=cid%> != null && drs_<%=cid%>.length > 0) {
    			int batchSize_<%=cid%> = 500;
    			int count_<%=cid%> = 0;
    			StringBuilder soql_<%=cid%> = new StringBuilder();
    			String soqlBase_<%=cid%> = "SELECT " + "<%=fieldlist%>" + " FROM " + <%=module%> + " WHERE ";
				for(com.salesforce.soap.partner.DeletedRecord dr_<%=cid%> : drs_<%=cid%>){
					count_<%=cid%>++;
					
					soql_<%=cid%>.append("Id='"+dr_<%=cid%>.getId().getID()+"'");
					soql_<%=cid%>.append(" or ");
					<%//By default, SOQL statements cannot exceed 10,000 characters in length%>
					if((soql_<%=cid%>.length() > (10000 - 23 - soqlBase_<%=cid%>.length())) || count_<%=cid%> == drs_<%=cid%>.length){
						soql_<%=cid%>.delete(soql_<%=cid%>.length() - 4, soql_<%=cid%>.length());
						<%if(false){
						%>
							System.out.println(soqlBase_<%=cid%> + soql_<%=cid%>.toString());
						<%
						}%>
						qr_<%=cid%> = sfMgr_<%=cid%>.queryAll(soqlBase_<%=cid%> + soql_<%=cid%>.toString(),batchSize_<%=cid%>);

						boolean bContinue_<%=cid %> = true;
						while (bContinue_<%=cid %> && qr_<%=cid %> != null && qr_<%=cid %>.getRecords() != null) {
							nb_line_<%=cid%>++;
		        		    for(int i_<%=cid%> = 0; i_<%=cid%> < qr_<%=cid %>.getRecords().length; i_<%=cid%>++){
			        			org.apache.axiom.om.OMElement[] fields_<%=cid %> = qr_<%=cid %>.getRecords()[i_<%=cid%>].getExtraElement();
			
								int len_<%=cid%> = fields_<%=cid %>.length;
								<%
								for( int i = 0; i < columnList.size(); i++) {
								
									IMetadataColumn column = columnList.get(i);
									String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
									
									JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
									
									String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
									%>						
									if (<%=i %> < len_<%=cid%> && fields_<%=cid %>[<%=i%>].getText() != null && !"".equals(fields_<%=cid %>[<%=i%>].getText())){
										<%
										if (javaType == JavaTypesManager.STRING || javaType == JavaTypesManager.OBJECT) { // String or Object
										%>
											<%=outgoingConn.getName()%>.<%=columnList.get(i).getLabel()%> = fields_<%=cid %>[<%=i%>].getText();
										<%
										} else if(javaType == JavaTypesManager.DATE) { // Date
										%>
											<%=outgoingConn.getName()%>.<%=columnList.get(i).getLabel()%> = ParserUtils.parseTo_Date(fields_<%=cid %>[<%=i%>].getText(), <%= patternValue %>);
										<%
										} else if(javaType == JavaTypesManager.BYTE_ARRAY) { // byte[]
										%>
											<%=outgoingConn.getName()%>.<%=columnList.get(i).getLabel()%> = fields_<%=cid %>[<%=i%>].getText().getBytes();
										<%
										} else  { // other
										%>						
											<%=outgoingConn.getName()%>.<%=columnList.get(i).getLabel()%> = ParserUtils.parseTo_<%= typeToGenerate %>(fields_<%=cid %>[<%=i%>].getText());
										<%
										}
										%>			
									} else {
										<%=outgoingConn.getName()%>.<%=columnList.get(i).getLabel()%> = <%=JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate)%>;
									}
									<%	
									log4jFileUtil.collectRetriveData("fields_" + cid + "[" + i + "].getText()");
								}
								log4jFileUtil.debugRetriveData(node);
								%>
			<%
			}
		}
	}
}
%>
