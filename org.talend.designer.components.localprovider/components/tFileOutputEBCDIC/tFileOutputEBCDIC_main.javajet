<%@ jet 
	imports="
        java.util.List
        java.util.Map
        org.talend.core.model.metadata.IMetadataColumn
        org.talend.core.model.metadata.IMetadataTable
        org.talend.core.model.process.IConnection
        org.talend.core.model.process.IConnectionCategory
        org.talend.core.model.process.INode
        org.talend.designer.codegen.config.CodeGeneratorArgument
        org.talend.core.model.process.ElementParameterParser
	" 
%>
<% 
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();
    String cid = node.getUniqueName();	
    String incomingName = (String)codeGenArgument.getIncomingName();
	String noX2cjFileStr = ElementParameterParser.getValue(node,"__NO_X2CJ_FILE__");
	boolean noX2cjFile = (noX2cjFileStr!=null&&!("").equals(noX2cjFileStr))?("true").equals(noX2cjFileStr):true;
if(!noX2cjFile){//------11111
		List< ? extends IConnection> conns = node.getIncomingConnections();
    	List<IMetadataTable> preMetadatas = null;
		
		for (int i=0;i<conns.size();i++) {
			IConnection conn = conns.get(i);
			if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {    			
				if( conn.getName() == incomingName ) {				
					preMetadatas = conn.getSource().getMetadataList();
%>	
			java.util.List record_<%=cid %> = new java.util.ArrayList();
<%
			for (IMetadataColumn column: preMetadatas.get(0).getListColumns()) {
%>
			record_<%=cid %>.add(<%=conn.getName() %>.<%=column.getLabel() %>) ;
<%
			}
%>
        	rwriter_<%=cid %>.writeRecord(record_<%=cid %>);	
        	nb_line_<%=cid %>++;		
<%
				}
			}
		}
}else{//------11111
	List<Map<String, String>> trimSelects = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__TRIMSELECT__");
	String isTrimAllStr = ElementParameterParser.getValue(node,"__TRIMALL__");
	boolean isTrimAll = (isTrimAllStr!=null&&!("").equals(isTrimAllStr))?("true").equals(isTrimAllStr):true;
	List<IMetadataTable> metadatas = node.getMetadataList();
    if ((metadatas!=null)&&(metadatas.size()>0)) {
		List< ? extends IConnection> conns = node.getIncomingConnections();
       	for (IConnection conn : conns) {
    		if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
    			IMetadataTable metadata = metadatas.get(0);
    			List<IMetadataColumn> columns = metadata.getListColumns();
    			for (int i = 0; i < columns.size(); i++) {
					IMetadataColumn column = columns.get(i);
					Integer orgainLength = column.getOriginalLength();
					Integer length = column.getLength();
					String orgainType = column.getType();
					if(orgainLength==null || orgainLength.intValue()==0 || orgainType==null || "".endsWith(orgainType.trim())) {
%>
//////////////////////////////////////////////////
the original size in the column:<%=column.getLabel()%> in the schema should be bigger than 0 and DB Type shouldn't be null or Empty
//////////////////////////////////////////////////
<%
						continue;
 					}
%>
					byte[] bb_<%=conn.getName() %>_<%=column.getLabel()%> = new byte[<%=orgainLength %>];
<%
					if(orgainType.equals("X")){
%>				
						cobolConversion.EbcdicString <%=column.getLabel()%> = new cobolConversion.EbcdicString(new cobolConversion.EbcdicTable(), bb_<%=conn.getName() %>_<%=column.getLabel()%>, 0 , <%=length%>);
						<%=column.getLabel()%>.toEbcdic(<%=conn.getName() %>.<%=column.getLabel()%>);
						fOut_<%=cid%>.write(<%=column.getLabel()%>.getByteValueArray());
<%
					}else if(orgainType.equals("3")) {
%>
						cobolConversion.PackedDecimal <%=column.getLabel()%> = new cobolConversion.PackedDecimal(bb_<%=conn.getName() %>_<%=column.getLabel()%>, 0, <%=length%>, 0);
						<%=column.getLabel()%>.toPackedDecimal(<%=conn.getName()%>.<%=column.getLabel()%>.toPlainString());
						fOut_<%=cid%>.write(<%=column.getLabel()%>.getByteValueArray());
<%
					}else if(orgainType.equals("9")) {
%>
						java.math.BigDecimal <%=column.getLabel()%> = <%=conn.getName() %>.<%=column.getLabel()%>;
						byte[] bArr_<%=column.getLabel()%> = <%=column.getLabel()%>.toPlainString().getBytes("Cp037");
						for(int j=0;j<bArr_<%=column.getLabel()%>.length;j++){
							bb_<%=conn.getName() %>_<%=column.getLabel()%>[bb_<%=conn.getName() %>_<%=column.getLabel()%>.length-(j+1)] = bArr_<%=column.getLabel()%>[bArr_<%=column.getLabel()%>.length-(j+1)];
						}
						fOut_<%=cid%>.write(bb_<%=conn.getName() %>_<%=column.getLabel()%>);
<%
					}else if(orgainType.equals("B")) {
%>
						java.math.BigInteger <%=column.getLabel()%> = <%=conn.getName() %>.<%=column.getLabel()%>.toBigInteger() ;
						byte[] bArr_<%=column.getLabel()%> = <%=column.getLabel()%>.toByteArray();
						for(int j=0;j<bArr_<%=column.getLabel()%>.length;j++){
							bb_<%=conn.getName() %>_<%=column.getLabel()%>[bb_<%=conn.getName() %>_<%=column.getLabel()%>.length-(j+1)] = bArr_<%=column.getLabel()%>[j];
						}
						fOut_<%=cid%>.write(bb_<%=conn.getName() %>_<%=column.getLabel()%>);
<%
					}else if (orgainType.equals("T")) {
%>
						byte[] bArr_<%=column.getLabel()%> = <%=conn.getName() %>.<%=column.getLabel()%>;
						for(int j=0;j<bArr_<%=column.getLabel()%>.length;j++){
							bb_<%=conn.getName() %>_<%=column.getLabel()%>[j] = bArr_<%=column.getLabel()%>[j];
						}
						fOut_<%=cid%>.write(bb_<%=conn.getName() %>_<%=column.getLabel()%>);
<%
					}else {
%>
//////////////////////////////////////////////////
DB Type of the column:<%=column.getLabel()%> should be X, 1, 2, 3, 9, B, T
//////////////////////////////////////////////////
<%
					}
%>
						fOut_<%=cid%>.flush();

<%
				}
			}
		}
	}
}
%>
