<%@ jet 
	imports="
        java.util.List
        org.talend.core.model.metadata.IMetadataColumn
        org.talend.core.model.metadata.IMetadataTable
        org.talend.core.model.process.IConnection
        org.talend.core.model.process.IConnectionCategory
        org.talend.core.model.process.INode
        org.talend.designer.codegen.config.CodeGeneratorArgument
        org.talend.core.model.process.ElementParameterParser
	" 
%>
<% 
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();
    String cid = node.getUniqueName();	
    String incomingName = (String)codeGenArgument.getIncomingName();
	String customSetOriginalLengthStr = ElementParameterParser.getValue(node,"__NO_X2CJ_FILE__");
	String encoding = ElementParameterParser.getValue(node,"__ENCODING__");
	boolean customSetOriginalLength = (customSetOriginalLengthStr!=null&&!("").equals(customSetOriginalLengthStr))?("true").equals(customSetOriginalLengthStr):true;
if(!customSetOriginalLength){//------11111
		List< ? extends IConnection> conns = node.getIncomingConnections();
    	List<IMetadataTable> preMetadatas = null;
		
		for (int i=0;i<conns.size();i++) {
			IConnection conn = conns.get(i);
			if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {    			
				if( conn.getName() == incomingName ) {				
					preMetadatas = conn.getSource().getMetadataList();
%>	
			java.util.List record_<%=cid %> = new java.util.ArrayList();
<%
			for (IMetadataColumn column: preMetadatas.get(0).getListColumns()) {
%>
			record_<%=cid %>.add(<%=conn.getName() %>.<%=column.getLabel() %>) ;
<%
			}
%>
        	rwriter_<%=cid %>.writeRecord(record_<%=cid %>);	
        	nb_line_<%=cid %>++;		
<%
				}
			}
		}
}else{//------1111
	List<IMetadataTable> metadatas = node.getMetadataList();
    if ((metadatas!=null)&&(metadatas.size()>0)) {//------2222
		List< ? extends IConnection> conns = node.getIncomingConnections();
       	for (IConnection conn : conns) {//------3333
    		if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {//------4444
    			if( conn.getName() == incomingName ) {	//------5555
	    			IMetadataTable metadata = metadatas.get(0);
	    			List<IMetadataColumn> columns = metadata.getListColumns();
	    			List<IMetadataColumn> extColumns = new java.util.ArrayList<IMetadataColumn>();
	    			for (IMetadataColumn tempColumn : columns) {
	    				extColumns.add(tempColumn);
	    			}
	    			List<IMetadataColumn> inColumns = conn.getMetadataTable().getListColumns();
	    			for (IMetadataColumn inColumn: inColumns) {//------6666
						IMetadataColumn column = null;
						for (int j = 0; j < extColumns.size(); j++) {// search the corresponding metadata column for the input column
							if(inColumn.getLabel().equals(extColumns.get(j).getLabel()) ) {
								column = extColumns.remove(j);
								break;
							}
						}
						// if not find, then the first one of the metadata columns is used to correspond the input column
						if (column==null && !extColumns.isEmpty()) { 
							column = extColumns.remove(0);
						}
						if (column != null ) { //------77777
							Integer orgainLength = column.getOriginalLength();
							Integer length = column.getLength();
							String orgainType = column.getType();
							Integer precision = column.getPrecision();
							if(precision==null) precision = 0;
							if(orgainLength==null || orgainLength.intValue()==0 || orgainType==null || "".endsWith(orgainType.trim())) {
%>
//////////////////////////////////////////////////
the original size in the column:<%=column.getLabel()%> in the schema should be bigger than 0 and DB Type shouldn't be null or Empty
//////////////////////////////////////////////////
<%
								continue;
	 						}
%>
						byte[] bb_<%=column.getLabel()%>_<%=cid%> = new byte[<%=orgainLength %>];
<%
							if(orgainType.equals("X")){
%>				
							if (<%=length %> < <%=conn.getName() %>.<%=inColumn.getLabel()%>.length()) {
                 		   		throw new java.lang.Exception("Value length must be less than the length in schema.");
                			}
							while(<%=length%> > <%=conn.getName() %>.<%=inColumn.getLabel()%>.length()){
								<%=conn.getName() %>.<%=inColumn.getLabel()%> = <%=conn.getName() %>.<%=inColumn.getLabel()%> + " ";							
							}
							bb_<%=column.getLabel()%>_<%=cid%> = <%=conn.getName() %>.<%=inColumn.getLabel()%>.getBytes(<%=encoding %>);
							fOut_<%=cid%>.write(bb_<%=column.getLabel()%>_<%=cid %>);
<%
							}else if(orgainType.equals("3") || orgainType.equals("9")) {
								String isImpliedDecimalStr = column.getAdditionalField().get("ImpliedDecimal");
								boolean isImpliedDecimal = (isImpliedDecimalStr!=null&&!("").equals(isImpliedDecimalStr))?("true").equals(isImpliedDecimalStr):true;
								String isSignedStr = column.getAdditionalField().get("Signed");
								boolean isSigned = (isSignedStr!=null&&!("").equals(isSignedStr))?("true").equals(isSignedStr):true;
								if(orgainType.equals("3")){
%>
								java.math.BigDecimal <%=column.getLabel()%>_<%=cid%> = <%=conn.getName() %>.<%=inColumn.getLabel()%>;
								bb_<%=column.getLabel()%>_<%=cid%> = cobolConversion.EBCDICType3.writeType3Value(<%=orgainLength%>,<%=precision %>,<%=column.getLabel()%>_<%=cid%>,<%=isSigned %>);
								fOut_<%=cid%>.write(bb_<%=column.getLabel()%>_<%=cid%>);
<%
								}else {
%>
								java.math.BigDecimal <%=column.getLabel()%>_<%=cid%> = <%=conn.getName() %>.<%=inColumn.getLabel()%>;
								bb_<%=column.getLabel()%>_<%=cid%> = cobolConversion.EBCDICType9.writeType9Value(<%=length %>,<%=precision %>,<%=column.getLabel()%>_<%=cid%>,<%=isSigned %>,<%=isImpliedDecimal %>,<%=encoding %>);
								fOut_<%=cid%>.write(bb_<%=column.getLabel()%>_<%=cid%>);
<%
								}
							}else if(orgainType.equals("B")) {
								String isSignedStr = column.getAdditionalField().get("Signed");
%>
							java.math.BigInteger <%=column.getLabel()%>_<%=cid%> = <%=conn.getName() %>.<%=inColumn.getLabel()%>.toBigInteger() ;
							if(<%=column.getLabel()%>_<%=cid%>.compareTo(new java.math.BigInteger("0")) < 0 ){
								for(int i=0;i< <%=orgainLength%>;i++){
									bb_<%=column.getLabel()%>_<%=cid%>[i] = (byte)0xFF;
								}
							}
							byte[] bArr_<%=column.getLabel()%>_<%=cid%> = <%=column.getLabel()%>_<%=cid%>.toByteArray();
							for(int j=0;j<bArr_<%=column.getLabel()%>_<%=cid%>.length;j++){
								bb_<%=column.getLabel()%>_<%=cid%>[bb_<%=column.getLabel()%>_<%=cid%>.length-(j+1)] = bArr_<%=column.getLabel()%>_<%=cid%>[bArr_<%=column.getLabel()%>_<%=cid%>.length - (j+1)];
							}
							fOut_<%=cid%>.write(bb_<%=column.getLabel()%>_<%=cid%>);
<%
							}else if (orgainType.equals("T")) {
%>
							byte[] bArr_<%=column.getLabel()%>_<%=cid%> = <%=conn.getName() %>.<%=inColumn.getLabel()%>;
							for(int j=0;j<bArr_<%=column.getLabel()%>_<%=cid%>.length;j++){
								bb_<%=column.getLabel()%>_<%=cid%>[j] = bArr_<%=column.getLabel()%>_<%=cid%>[j];
							}
							fOut_<%=cid%>.write(bb_<%=column.getLabel()%>_<%=cid%>);
<%
							}else {
%>
//////////////////////////////////////////////////
DB Type of the column:<%=column.getLabel()%> should be X, 3, 9, B, T
//////////////////////////////////////////////////
<%
							}
%>
							fOut_<%=cid%>.flush();

<%
						} //-----77777
					}//------66666
				}//------5555
			}//------4444
		}//------3333
	}//------2222
}//------1111
%>
