<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.metadata.MetadataTalendType
    java.util.List
    java.util.Map
    java.util.ArrayList
    java.util.HashMap
    org.talend.commons.utils.StringUtils
" 
%>

<%
final class SchemaColumn {
    private String name;
    private String sql = "?";
    private boolean isKey = false;
    private boolean isUpdateKey = false;
    private boolean isDeleteKey = false;
    private boolean insertable = true;
    private boolean updatable = true;

    public SchemaColumn(
        String name,
        String sql,
        boolean isKey,
        boolean useFieldOptions,
        Map<String, String> fieldOptions
        ) {
        super();
        this.name = name;
        this.sql = sql;
        this.isKey = isKey;

        if (useFieldOptions) {
            this.isUpdateKey = fieldOptions.get("UPDATE_KEY").equals("true");
            this.isDeleteKey = fieldOptions.get("DELETE_KEY").equals("true");
            this.insertable = fieldOptions.get("INSERTABLE").equals("true");
            this.updatable = fieldOptions.get("UPDATABLE").equals("true");
        }
        else {
            this.insertable = true;

            if (isKey) {
                this.isUpdateKey = true;
                this.isDeleteKey = true;
                this.updatable = false;
            }
            else {
                this.isUpdateKey = false;
                this.isDeleteKey = false;
                this.updatable = true;
            }
        }
    }

    public String getName() {
        return this.name;
    }

    public String getSql() {
        return this.sql;
    }

    public boolean isUpdateKey() {
        return this.isUpdateKey;
    }

    public boolean isDeleteKey() {
        return this.isDeleteKey;
    }

    public boolean insertable() {
        return this.insertable;
    }

    public boolean updatable() {
        return this.updatable;
    }
}

CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
    IMetadataTable metadata = metadatas.get(0);
    if (metadata!=null) {

        String dataAction = ElementParameterParser.getValue(
            node,
            "__DATA_ACTION__"
        );
        String tableAction = ElementParameterParser.getValue(
            node,
            "__TABLE_ACTION__"
        );
        String dbtable = ElementParameterParser.getValue(node, "__DBTABLE__");
        String dbhost = ElementParameterParser.getValue(node, "__HOST__");
        String dbport = ElementParameterParser.getValue(node, "__PORT__");
        String dbname = ElementParameterParser.getValue(node, "__DBNAME__");
        String dbuser = ElementParameterParser.getValue(node, "__USER__");
        String dbpass = ElementParameterParser.getValue(node, "__PASS__");
        String encoding = ElementParameterParser.getValue(
            node,
            "__ENCODING__"
        );

        String commitEvery = ElementParameterParser.getValue(
            node,
            "__COMMIT_EVERY__"
        );

        List<Map<String, String>> addCols =
            (List<Map<String,String>>)ElementParameterParser.getObjectValue(
                node,
                "__ADD_COLS__"
        );

        if (tableAction.equals("DROP_CREATE")
            || tableAction.equals("CREATE")
            || tableAction.equals("CREATE_IF_NOT_EXISTS")) {
            addCols.clear();
        }

        String useExistingConnection = ElementParameterParser.getValue(
            node,
            "__USE_EXISTING_CONNECTION__"
        );

        String connection = ElementParameterParser.getValue(
            node,
            "__CONNECTION__"
        );

        String dbh = "dbh_";
        if (useExistingConnection.equals("true")) {
            dbh+= connection;
        }
        else {
            dbh+= cid;
        }

        Boolean useExtendedInserts = new Boolean(
            ElementParameterParser.getValue(
                node,
                "__USE_EXTENDED_INSERTS__"
            )
        );

        String nbRowsPerInsert = ElementParameterParser.getValue(
            node,
            "__NB_ROWS_PER_INSERT__"
        );

        // extended insert is available only for INSERT data action, it is
        // not compatible yet with INSERT OR UPDATE.
        if (!useExtendedInserts || !dataAction.equals("INSERT")) {
            nbRowsPerInsert = "1";
        }

        Boolean useFieldOptions = new Boolean(
            ElementParameterParser.getValue(
                node,
                "__USE_FIELD_OPTIONS__"
            )
        );

        List<Map<String, String>> fieldOptionsList =
            (List<Map<String,String>>)ElementParameterParser.getObjectValue(
                node,
                "__FIELD_OPTIONS__"
        );

        // schema is built from metadata + addCols + fieldOptions
        List<SchemaColumn> schema = new ArrayList<SchemaColumn>();
        int i = 0;
        for (IMetadataColumn column: metadata.getListColumns()) {
            String colName = column.getLabel();
            Map<String, String> fieldOptions = new HashMap();

            if (useFieldOptions) {
                fieldOptions = fieldOptionsList.get(i++);
            }

            for (Map<String, String> addCol : addCols) {
                String refColName = addCol.get("REFCOL");

                if (refColName.equals(colName)) {
                    String addColPos = addCol.get("POS");

                    if (addColPos.equals("BEFORE")) {
                        schema.add(
                            new SchemaColumn(
                                addCol.get("NAME"),
                                addCol.get("SQL"),
                                false, // isKey
                                useFieldOptions,
                                addCol
                            )
                        );
                    }
                }
            }

            SchemaColumn columnToAdd = new SchemaColumn(
                "'" + column.getLabel() + "'",
                "'?'",
                column.isKey(),
                useFieldOptions,
                fieldOptions
            );

            for (Map<String, String> addCol : addCols) {
                String refColName = addCol.get("REFCOL");

                if (refColName.equals(colName)) {
                    String addColPos = addCol.get("POS");

                     if (addColPos.equals("REPLACE")) {
                         columnToAdd = new SchemaColumn(
                             addCol.get("NAME"),
                             addCol.get("SQL"),
                             column.isKey(),
                             useFieldOptions,
                             addCol // fieldOptions
                         );
                     }
                }
            }

            schema.add(columnToAdd);

            for (Map<String, String> addCol : addCols) {
                String refColName = addCol.get("REFCOL");

                if (refColName.equals(colName)) {
                    String addColPos = addCol.get("POS");

                    if (addColPos.equals("AFTER")) {
                        schema.add(
                            new SchemaColumn(
                                addCol.get("NAME"),
                                addCol.get("SQL"),
                                false, // isKey
                                useFieldOptions,
                                addCol
                            )
                        );
                    }
                }
            }
        }

        for (SchemaColumn schemaColumn : schema) {
%>
# <%=schemaColumn.getName()%> => <%=schemaColumn.getSql()%>
<%
        }
%>

# <%=tableAction%>

use DBI;
use tInterbaseOutput::InterBase;

my %desc_<%=cid %> = (
    dbhost        => <%=dbhost %>,
    dbport        => <%=dbport %>,
    dbname        => <%=dbname %>,
    dbtable       => <%=dbtable %>,
    dbuser        => <%=dbuser %>,
    dbpass        => <%=dbpass %>,
    encoding      => <%=encoding %>,
    commit_every  => <%=commitEvery %>,
    schema        => [
<%
        for (IMetadataColumn column: metadata.getListColumns()) {
%>
        {
            name    => '<%=column.getLabel() %>',
            key     => <%=column.isKey() %>,
            type    => '<%=column.getTalendType() %>',
            len     => <%=column.getLength() %>,
            precision => <%=column.getPrecision() %>,
            null    => <%=column.isNullable() %>,
            default => '<%=column.getDefault() %>',
            comment => '<%=column.getComment() %>',
        },
<%
        }
%>
    ],
);

my $sth_<%=cid %>;
my $query;

<%
        if (useExistingConnection.equals("false")) {
%>
my $<%=dbh%> = DBI->connect(
    sprintf(
        'DBI:InterBase:database=%s;host=%s;port=%s;ib_dialect=%s',
        <%=dbname %>,
        <%=dbhost %>,
        <%=dbport %>,
        3,
    ),
    <%=dbuser %>,
    <%=dbpass %>,
    {
        AutoCommit => 0,
<%
        if (dataAction.equals("INSERT_OR_UPDATE")) {
%>
        PrintError => 0,
<%
        }
%>
    }
)
    or die "can't connect to database";

<%
        }
%>

tInterbaseOutput::InterBase::performTableAction(
    tableAction => '<%=tableAction%>',
    dbh => $<%=dbh%>,
    dbtable => <%=dbtable %>,
    component => <%=cid%>,
    schema => $desc_<%=cid %>{schema}
);

my $query = '';

<%
if ((dataAction.equals("UPDATE"))
    || (dataAction.equals("UPDATE_OR_INSERT"))
    || (dataAction.equals("INSERT_OR_UPDATE"))) {
    List updateCols  = new ArrayList();
    List keyCols     = new ArrayList();

    for (SchemaColumn schemaColumn : schema) {
        String columnName = schemaColumn.getName();
        String columnSql = schemaColumn.getSql();
        String queryPart = columnName + ".' = '." + columnSql;

        if (schemaColumn.isUpdateKey()) {
            keyCols.add(queryPart);
        }

        if (schemaColumn.updatable()) {
            updateCols.add(queryPart);
        }
    }

    if (keyCols.isEmpty()) {
%>
# We know there is a problem, but we cannot make it obvious yet in
# the GUI, so we make it obvious during execution.
die "[<%=cid%>] For update at least one update key is required";
<%
    }

    String keyString = StringUtils.join(
        keyCols.toArray(),
        ".' AND '."
    );

    String updateString = StringUtils.join(
        updateCols.toArray(),
        ".', '."
    );
%>

$query = '
UPDATE '.<%=dbtable%>.'
  SET '.<%=updateString%>.'
  WHERE '.<%=keyString%>.'
';

my $usth_<%=cid %> = $<%=dbh%>->prepare($query);

<%
}

if (dataAction.equals("DELETE")) {
    List keyCols = new ArrayList();

    for (SchemaColumn schemaColumn : schema) {
        String columnName = schemaColumn.getName();
        String columnSql = schemaColumn.getSql();
        String queryPart = columnName + ".' = '." + columnSql;

        if (schemaColumn.isDeleteKey()) {
            keyCols.add(queryPart);
        }
    }

    if (keyCols.isEmpty()) {
%>
# We know there is a problem, but we cannot make it obvious yet in
# the GUI, so we make it obvious during execution.
die "[<%=cid%>] For delete at least one delete key is required";
<%
    }

    String keyString = StringUtils.join(
        keyCols.toArray(),
        ".' AND '."
    );
%>

$query = '
DELETE FROM '.<%=dbtable%>.'
  WHERE '.<%=keyString%>.'
';

my $dsth_<%=cid %> = $<%=dbh%>->prepare($query);

<%
}

if ((dataAction.equals("INSERT"))
    || (dataAction.equals("UPDATE_OR_INSERT"))
    || (dataAction.equals("INSERT_OR_UPDATE"))) {
    List keys = new ArrayList();
    List parameters = new ArrayList();

    for (SchemaColumn schemaColumn : schema) {
        String columnName = schemaColumn.getName();
        String columnSql = schemaColumn.getSql();

        if (schemaColumn.insertable()) {
            keys.add(columnName);
            parameters.add(columnSql);
        }
    }

    String keyString = StringUtils.join(
        keys.toArray(),
        ".', '."
    );

    String parametersString = StringUtils.join(
        parameters.toArray(),
        ".', '."
    );
%>
my $keyString_<%=cid%> = <%=keyString%>;
my $parametersString_<%=cid%> = <%=parametersString%>;

$query = tInterbaseOutput::InterBase::getInsertQuery(
    <%=dbtable%>,
    $keyString_<%=cid%>,
    $parametersString_<%=cid%>,
    <%=nbRowsPerInsert%>
);
my $isth_<%=cid %> = $<%=dbh%>->prepare($query);

<%
}
%>

my $nb_line_<%=cid%> = 0;
my $nb_line_updated_<%=cid%>  = 0;
my $nb_line_inserted_<%=cid%> = 0;
my $nb_line_deleted_<%=cid%>  = 0;

my $nb_rows_in_buffer_<%=cid%> = 0;
my @buffer_<%=cid%> = ();

my $nb_line_current_commit_<%=cid%> = 0;
<%
    }
}
%>
