<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.IConnection
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.process.IHashableInputConnections
		org.talend.core.model.process.IHashConfiguration
		org.talend.core.model.process.IHashableColumn
		org.talend.core.model.process.IMatchingMode
		org.talend.designer.codegen.config.CodeGeneratorArgument
		java.util.List
		java.util.ArrayList
		org.talend.core.model.process.EConnectionType
	"
	skeleton="tAdvancedHash_commons.skeleton"
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();


    List<IConnection> connections = (List<IConnection>) node.getIncomingConnections();
    List<IConnection> outConnections = (List<IConnection>) node.getOutgoingConnections();
    
    List<INode> graphicalNodes = (List<INode>) node.getProcess().getGraphicalNodes();
    
	if (connections != null && connections.size() > 0) { // T_AH_100
        for (IConnection connection : connections) { // T_AH_101
        	String connectionName = connection.getName();

			INode validTarget = searchTargetNode(connection);

			if(validTarget != null) { // T_AH_102
					IHashableInputConnections target = (IHashableInputConnections) validTarget;
					IHashConfiguration hashConfiguration = target.getHashConfiguration(connection.getName());
					List<IHashableColumn> hashableColumns = null;
					IMatchingMode matchingMode = null;
					if(hashConfiguration == null) {
						hashableColumns = new ArrayList(0);
					} else {
						hashableColumns = hashConfiguration.getHashableColumns();
						matchingMode = hashConfiguration.getMatchingMode();
					}

					String matchingModeStr = null;
					if(matchingMode == null) {
						if(hashableColumns.size() > 0) {
							matchingModeStr = "UNIQUE_MATCH";
						} else {
							matchingModeStr = "ALL_ROWS";
						}
					} else {
						matchingModeStr = matchingMode.toString();
					}
					StringBuffer hashKey = new StringBuffer();
					hashKey.append("join( $;, ");

					int size = hashableColumns.size();
					for(int i = 0; i < size; i++) {
						Integer columnIndice = hashableColumns.get(i).getIndex();
                                                hashKey.append("$");
                                                hashKey.append(connectionName);
                                                hashKey.append("->[");
                                                hashKey.append(columnIndice);
                                                hashKey.append("], ");
					}
					hashKey.append(" ) ");
					
					if( matchingModeStr.equals("ALL_ROWS") || matchingModeStr.equals("ALL_MATCHES")){
					%>
# <%= matchingModeStr %> key => [ [ ], [ ],... ]
push @{ $tHash_Lookup_<%= connectionName %>->{ <%=hashKey%> } } , $<%= connectionName %> ;
					<%
				        } else if ( matchingModeStr.equals("FIRST_MATCH") ){
					%>
# <%= matchingModeStr %> key => []
$tHash_Lookup_<%= connectionName %>->{ <%=hashKey%> } ||= $<%= connectionName %>  ;
					<%
				        } else if ( matchingModeStr.equals("UNIQUE_MATCH") ){
					%>
# <%= matchingModeStr %> key => []
warn "[tHash_Lookup_<%= connectionName %>] key <%=hashKey%> is not unique" if exists $tHash_Lookup_<%= connectionName %>->{ <%=hashKey%> } ;
$tHash_Lookup_<%= connectionName %>->{ <%=hashKey%> } = $<%= connectionName %>  ;
					<%
					} else {
					%>
# <%= matchingModeStr %> key => [] 
$tHash_Lookup_<%= connectionName %>->{ <%=hashKey%> } = $<%= connectionName %> ;

					<%
					}
            } // T_AH_103 
            else { // T_AH_104
				%> 
				#
				# Valid target not found for connection "<%= connectionName%>"
				# 
				<%
			} // T_AH_104
		} // T_AH_101
	} // T_AH_100

%>
