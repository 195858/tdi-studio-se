<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.IConnection
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.process.IHashableInputConnections
		org.talend.core.model.process.IHashConfiguration
		org.talend.core.model.process.IHashableColumn
		org.talend.core.model.process.IMatchingMode
		org.talend.designer.codegen.config.CodeGeneratorArgument
		java.util.List
		java.util.ArrayList
	"
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();


    List<IConnection> connections = (List<IConnection>) node.getIncomingConnections();
    List<IConnection> outConnections = (List<IConnection>) node.getOutgoingConnections();
    
    List<INode> graphicalNodes = (List<INode>) node.getProcess().getGraphicalNodes();
    
	if (connections != null && connections.size() > 0) {
        for (IConnection connection : connections) {
        	String connectionName = connection.getName();
			INode nodeSource = connection.getSource();

			INode validTarget = null;
			INode currentTarget = null;
	
			// searching the target graphic node of current tHash because no generation nodes are connected at outputs
		    for(INode graphcalNode : graphicalNodes) {
		    	if(graphcalNode.getUniqueName().equals(nodeSource.getUniqueName())) {
		    		List<IConnection> outGraphicalConnections = (List<IConnection>) graphcalNode.getOutgoingConnections();
		    		for(IConnection outGraphicalConnection : outGraphicalConnections) {
		    			if(outGraphicalConnection.getUniqueName().equals(connectionName)) {
		    				currentTarget = outGraphicalConnection.getTarget();
		    			}
		    		}
		    	}
		    }

			

			if(!(currentTarget instanceof IHashableInputConnections)) {
				currentTarget = currentTarget.getExternalNode();
			}
			if(currentTarget instanceof IHashableInputConnections) {
				validTarget = currentTarget;
			}

			// System.out.println(connectionName + " ######## " + validTarget + " " + validTarget.getClass());

			if(validTarget != null) {
					IHashableInputConnections target = (IHashableInputConnections) validTarget;
					IHashConfiguration hashConfiguration = target.getHashConfiguration(connection.getName());
					List<IHashableColumn> hashableColumns = null;
					IMatchingMode matchingMode = null;
					if(hashConfiguration == null) {
						hashableColumns = new ArrayList(0);
					} else {
						hashableColumns = hashConfiguration.getHashableColumns();
						matchingMode = hashConfiguration.getMatchingMode();
					}

					String matchingModeStr = null;
					if(matchingMode == null) {
						if(hashableColumns.size() > 0) {
							matchingModeStr = "UNIQUE_MATCH";
						} else {
							matchingModeStr = "ALL_ROWS";
						}
					} else {
						matchingModeStr = matchingMode.toString();
					}
					StringBuffer hashKey = new StringBuffer();
					hashKey.append("join( $;, ");

					int size = hashableColumns.size();
					for(int i = 0; i < size; i++) {
						Integer columnIndice = hashableColumns.get(i).getIndex();
                                                hashKey.append("$");
                                                hashKey.append(connectionName);
                                                hashKey.append("[");
                                                hashKey.append(columnIndice);
                                                hashKey.append("], ");
					}
					hashKey.append(" ) ");
					
					if( matchingModeStr.equals("ALL_ROWS") || matchingModeStr.equals("ALL_MATCHES")){
					%>
# <%= matchingModeStr %> key => [ [ ], [ ],... ]
push @{ $tHash_Lookup_<%= connectionName %>->{ <%=hashKey%> } } , \@<%= connectionName %> ;
					<%
				        } else if ( matchingModeStr.equals("FIRST_MATCH") ){
					%>
# <%= matchingModeStr %> key => []
$tHash_Lookup_<%= connectionName %>->{ <%=hashKey%> } ||= \@<%= connectionName %>  ;
					<%
				        } else if ( matchingModeStr.equals("UNIQUE_MATCH") ){
					%>
# <%= matchingModeStr %> key => []
warn "[tHash_Lookup_<%= connectionName %>] key <%=hashKey%> is not unique" if exists $tHash_Lookup_<%= connectionName %>->{ <%=hashKey%> } ;
$tHash_Lookup_<%= connectionName %>->{ <%=hashKey%> } ||= \@<%= connectionName %>  ;
					<%
					} else {
					%>
# <%= matchingModeStr %> key => [] 
$tHash_Lookup_<%= connectionName %>->{ <%=hashKey%> } = \@<%= connectionName %> ;

					<%
					}
			} else { 
				// System.out.println(connectionName + " ######## Valid target not found" );
			}
		}
	}

%>
