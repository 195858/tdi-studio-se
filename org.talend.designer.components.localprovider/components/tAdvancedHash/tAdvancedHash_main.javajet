<%@ jet 
	imports="
        java.util.ArrayList
        java.util.List
        
        org.talend.core.model.metadata.IMetadataColumn
        org.talend.core.model.metadata.IMetadataTable
        org.talend.core.model.process.EConnectionType
        org.talend.core.model.process.ElementParameterParser
        org.talend.core.model.process.IConnection
        org.talend.core.model.process.IHashConfiguration
        org.talend.core.model.process.IHashableColumn
        org.talend.core.model.process.IHashableInputConnections
        org.talend.core.model.process.IMatchingMode
        org.talend.core.model.process.INode
        org.talend.designer.codegen.config.CodeGeneratorArgument
	"
	skeleton="tAdvancedHash_commons.skeleton"
%>


<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();

    List<IConnection> connections = (List<IConnection>) node.getIncomingConnections();
    List<IConnection> outConnections = (List<IConnection>) node.getOutgoingConnections();
    
    boolean isVirtualGenerateNode = node.isVirtualGenerateNode();
    
if(isVirtualGenerateNode){    
    
    List<INode> graphicalNodes = (List<INode>) node.getProcess().getGraphicalNodes();
    
	if (connections != null && connections.size() > 0) { // T_AH_100
        for (IConnection connection : connections) { // T_AH_101
        	String connectionName = connection.getName();
   
			INode validTarget = searchTargetNode(connection);

			if(validTarget != null) { // T_AH_102
					IHashableInputConnections target = (IHashableInputConnections) validTarget;
					IHashConfiguration hashConfiguration = target.getHashConfiguration(connection.getName());
					List<IHashableColumn> hashableColumns = null;
					IMatchingMode matchingMode = null;
					if(hashConfiguration == null) {
						hashableColumns = new ArrayList(0);
					} else {
						hashableColumns = hashConfiguration.getHashableColumns();
						matchingMode = hashConfiguration.getMatchingMode();
					}
					
					String matchingModeStr = null;
					if(matchingMode == null) {
						if(hashableColumns.size() > 0) {
							matchingModeStr = "UNIQUE_MATCH";
						} else {
							matchingModeStr = "ALL_ROWS";
						}
					} else {
						matchingModeStr = matchingMode.toString();
					}
					
			   %>
			   
			   <%
				if(hashConfiguration != null && hashConfiguration.isPersistent()) {
				%>

					<%=connectionName%>Struct <%=connectionName%>_HashRow = tHash_Lookup_<%=connectionName%>.getNextFreeRow();

	   			<%	
	   			} else {
	   			%>

					<%=connectionName%>Struct <%=connectionName%>_HashRow = new <%=connectionName%>Struct();
		   	   	   
				<%
				}
			} // T_AH_103 
            else { // T_AH_104
				%> 
				/*
				 * Valid target not found for connection "<%= connectionName%>"
				 */ 
				<%
            } // T_AH_104
			
			IMetadataTable metadataTable = connection.getMetadataTable();
			
			List<IMetadataColumn> listColumns = metadataTable.getListColumns();
            for (IMetadataColumn column : listColumns) {
                String columnName = column.getLabel();
				%>
				<%=connectionName%>_HashRow.<%=columnName%> = <%=connectionName%>.<%=columnName%>;
				<%
            } 


			%>
			tHash_Lookup_<%=connectionName%>.put(<%=connectionName%>_HashRow);
			<%
			
			
		} // T_AH_101
	} // T_AH_100

}else{
//this part is only for feature:11325

String keyManagement = ElementParameterParser.getValue(node, "__KEYS_MANAGEMENT__");
//PERSISTENT, MEMORY
String dataWriteMode = ElementParameterParser.getValue(node, "__DATA_WRITE_MODEL__");

String tempDirectory = ElementParameterParser.getValue(node, "__TEMPORARY_DATA_DIRECTORY__");
String bufferSize = ElementParameterParser.getValue(node, "__ROWS_BUFFER_SIZE__");

	if (connections != null && connections.size() > 0) {//BBBBBB
        for (IConnection connection : connections) {//111
        	String connectionName = connection.getName();
        	String matchingModeStr = keyManagement;
        	boolean isAllRows = "ALL_ROWS".equals(matchingModeStr);
        	boolean isPersistent = "PERSISTENT".equals(dataWriteMode);
        	String rowsBufferSize = bufferSize;
        	String tempFolder = tempDirectory;

				if(isPersistent) {
				%>
					<%=connectionName%>Struct <%=connectionName%>_HashRow = tHash_Lookup_<%=connectionName%>.getNextFreeRow();
	   			<%	
	   			} else {
	   			%>
					<%=connectionName%>Struct <%=connectionName%>_HashRow = new <%=connectionName%>Struct();		   	   	   
				<%
				}
				
				//////////////////////////////////////////
    			IMetadataTable metadataTable = connection.getMetadataTable();
    			
    			List<IMetadataColumn> listColumns = metadataTable.getListColumns();
                for (IMetadataColumn column : listColumns) {
                    String columnName = column.getLabel();
    				%>
    				<%=connectionName%>_HashRow.<%=columnName%> = <%=connectionName%>.<%=columnName%>;
    				<%
                } 
    
    
    			%>
    			tHash_Lookup_<%=connectionName%>.put(<%=connectionName%>_HashRow);				
				<%
        }//111
    }//BBBBBB

}
%>
            



