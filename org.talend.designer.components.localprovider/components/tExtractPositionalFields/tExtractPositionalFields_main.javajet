<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.process.IConnectionCategory
    org.talend.core.model.metadata.IMetadataTable
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.metadata.types.JavaTypesManager
    org.talend.core.model.metadata.types.JavaType
    java.util.List
    java.util.ArrayList
    java.util.Map
"
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

String field = ElementParameterParser.getValue(node, "__FIELD__");
String pattern = ElementParameterParser.getValue(node, "__PATTERN__");
boolean advanced = ElementParameterParser.getValue(node, "__ADVANCED_OPTION__").equals("true");
List<Map<String, String>> formats =
	(List<Map<String,String>>)ElementParameterParser.getObjectValue( node, "__FORMATS__");

String advancedSeparatorStr = ElementParameterParser.getValue(node, "__ADVANCED_SEPARATOR__");
boolean advancedSeparator = (advancedSeparatorStr!=null&&!advancedSeparatorStr.equals(""))?advancedSeparatorStr.equals("true"):false;
String thousandsSeparator = ElementParameterParser.getValueWithJavaType(node, "__THOUSANDS_SEPARATOR__", JavaTypesManager.CHARACTER);
String decimalSeparator = ElementParameterParser.getValueWithJavaType(node, "__DECIMAL_SEPARATOR__", JavaTypesManager.CHARACTER);

IConnection inConn = null;
List< ? extends IConnection> inConns = node.getIncomingConnections();
if(inConns!=null){
    for (IConnection conn : inConns) {
    	if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
    		inConn = conn;
    		break;
    	}
    }
}

IConnection outConn = null;
List< ? extends IConnection> outConns = node.getOutgoingConnections();
if(outConns!=null){
    for (IConnection conn : outConns) {
    	if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
    		outConn = conn;
    		break;
    	}
    }
}


//get field column
if(inConn!=null){
	IMetadataTable inputMetadataTable = inConn.getMetadataTable();
	for (IMetadataColumn inputCol : inputMetadataTable.getListColumns()) {
		if(inputCol.getLabel().equals(field)){
%>
	String field_<%=cid%> = <%=inConn.getName()%>.<%=field%>;
<%
			break;
		}
	}
}

//set original columns
List<IMetadataColumn> newColumnList = new ArrayList<IMetadataColumn>();
if(outConn!=null && inConn!=null){
	IMetadataTable outputMetadataTable = outConn.getMetadataTable();
	IMetadataTable inputMetadataTable = inConn.getMetadataTable();
	for (IMetadataColumn outputCol : outputMetadataTable.getListColumns()) {
		if(outputCol.getLabel().equals(field)){
			continue;
		}
		boolean isOirginalColumn = false;
		for (IMetadataColumn inputCol : inputMetadataTable.getListColumns()) {
			if( outputCol.getLabel().equals( inputCol.getLabel()) ){
				isOirginalColumn = true;
%>
	<%=outConn.getName()%>.<%=outputCol.getLabel()%> = <%=inConn.getName()%>.<%=inputCol.getLabel()%> ;
<%
				break;
			}
		}
		if(!isOirginalColumn){
			newColumnList.add(outputCol);
		}
	}
}
%>
	java.util.Map<String,String> newFields_<%=cid%> = new java.util.HashMap<String,String>();
<%
if(advanced){
	for(int i=0; i<formats.size(); i++){
		Map<String,String> tmp = formats.get(i);
		if(i==0){
%>
	newFields_<%=cid%>.put("<%=tmp.get("COLUMN")%>", TalendString.talendTrim(field_<%=cid %>.substring(0,
		indexs_<%=cid%>[<%=i%>]>field_<%=cid %>.length()||indexs_<%=cid%>[<%=i%>]<0?field_<%=cid %>.length():indexs_<%=cid%>[<%=i%>]),
     			<%=tmp.get("PADDING_CHAR")%>, <%=tmp.get("ALIGN")%>));
<%
		}else{
%>
	if(<%=i%><indexs_<%=cid%>.length && indexs_<%=cid%>[<%=i-1%>]>=0 && indexs_<%=cid%>[<%=i-1%>]<= field_<%=cid %>.length()){
    	newFields_<%=cid%>.put("<%=tmp.get("COLUMN")%>",
     		TalendString.talendTrim(field_<%=cid %>.substring(indexs_<%=cid%>[<%=i-1%>],
     			indexs_<%=cid%>[<%=i%>]>field_<%=cid %>.length()||indexs_<%=cid%>[<%=i%>]<0?field_<%=cid %>.length():indexs_<%=cid%>[<%=i%>]),
     			<%=tmp.get("PADDING_CHAR")%>, <%=tmp.get("ALIGN")%>));
 	}
<%
		}
	}
}else{
	for(int i=0;i<newColumnList.size();i++){
		IMetadataColumn tmp = newColumnList.get(i);
		if(i==0){
%>
	newFields_<%=cid%>.put("<%=tmp.getLabel()%>", field_<%=cid %>.substring(0,
		indexs_<%=cid%>[<%=i%>]>field_<%=cid %>.length()||indexs_<%=cid%>[<%=i%>]<0?field_<%=cid %>.length():indexs_<%=cid%>[<%=i%>]));
<%
		}else{
%>
	if(<%=i%><indexs_<%=cid%>.length && indexs_<%=cid%>[<%=i-1%>]>=0 && indexs_<%=cid%>[<%=i-1%>]<= field_<%=cid %>.length()){
    	newFields_<%=cid%>.put("<%=tmp.getLabel()%>",field_<%=cid %>.substring(indexs_<%=cid%>[<%=i-1%>],
     		indexs_<%=cid%>[<%=i%>]>field_<%=cid %>.length()||indexs_<%=cid%>[<%=i%>]<0?field_<%=cid %>.length():indexs_<%=cid%>[<%=i%>]));
 	}
<%
		}
	}
}
%>
	String temp_<%=cid%> = null;
<%
for(IMetadataColumn column:newColumnList){
	String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
	JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
	String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();%><%
	if(javaType == JavaTypesManager.STRING || javaType == JavaTypesManager.OBJECT){
%>
	<%=outConn.getName()%>.<%=column.getLabel() %> = newFields_<%=cid%>.get("<%=column.getLabel()%>");
<%
	}else{ 
%>
	temp_<%=cid %> = newFields_<%=cid%>.get("<%=column.getLabel()%>");
	if(temp_<%=cid %>!=null && temp_<%=cid %>.length() > 0) {
<%
		if(javaType == JavaTypesManager.BYTE_ARRAY){ 
%>
		<%=outConn.getName() %>.<%=column.getLabel() %> = temp_<%=cid %>.getBytes();
<%
		}else if(javaType == JavaTypesManager.DATE) { 
%>
		<%=outConn.getName() %>.<%=column.getLabel() %> = ParserUtils.parseTo_Date(temp_<%=cid %>, <%= patternValue %>);
<%
		}else if(advancedSeparator && JavaTypesManager.isNumberType(javaType, column.isNullable())) { 
%>
		<%=outConn.getName() %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%= typeToGenerate %>(ParserUtils.parseTo_Number(temp_<%=cid %>, <%= thousandsSeparator %>, <%= decimalSeparator %>));
<%
		} else {
%>
		<%=outConn.getName() %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%= typeToGenerate %>(temp_<%=cid %>);
<%
		}
%>
	} else {						
<%
		String defaultValue = JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate, column.getDefault());
		if(defaultValue == null) {
%>
		throw new RuntimeException("Value is empty for column : '<%= column.getLabel() %>' in '<%=outConn.getName() %>' connection, value is invalid or this column should be nullable or have a default value.");
<%
		} else {
%>
		<%=outConn.getName() %>.<%=column.getLabel() %> = <%=defaultValue %>;
<%
		}
%>
	}
<%
	}
}
%>