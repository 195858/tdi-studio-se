<%@ jet 
imports="
	org.talend.core.model.process.INode
	org.talend.core.model.process.ElementParameterParser
	org.talend.core.model.metadata.IMetadataTable
	org.talend.core.model.metadata.IMetadataColumn
	org.talend.designer.codegen.config.CodeGeneratorArgument
	org.talend.core.model.process.IConnection
	org.talend.core.model.process.IConnectionCategory
	org.talend.core.model.metadata.builder.database.ExtractMetaDataUtils
	org.talend.core.model.metadata.types.JavaTypesManager
	org.talend.core.model.metadata.types.JavaType
	java.util.List
" 
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode) codeGenArgument.getArgument();
String cid = node.getUniqueName();

String driverJar = ElementParameterParser.getValue(node, "__DRIVER_JAR__");
String driverClass = ElementParameterParser.getValue(node, "__DRIVER_CLASS__");
String jdbcUrl = ElementParameterParser.getValue(node, "__URL__");
String dbuser = ElementParameterParser.getValue(node, "__USER__");
String dbpwd = ElementParameterParser.getValue(node, "__PASS__");
String dbencoding = ElementParameterParser.getValue(node, "__ENCODING__");
String dbquery = ElementParameterParser.getValue(node, "__QUERY__");
dbquery = dbquery.replaceAll("\n"," ");
dbquery = dbquery.replaceAll("\r"," ");

List<IMetadataTable> metadatas = node.getMetadataList();
IMetadataTable metadata = null;
if ((metadatas != null) && (metadatas.size() > 0)) {
	metadata = metadatas.get(0);
}

if (metadata != null) {
	%>
	int nb_line_<%=cid%> = 0;
	
	java.lang.Class.forName(<%=driverClass%>);
	String connectionString_<%=cid%> = <%=jdbcUrl%>;
	java.sql.Connection connection_<%=cid%> =
		java.sql.DriverManager.getConnection(connectionString_<%=cid%>, <%=dbuser%>, <%=dbpwd%>);
	
	java.sql.Statement statement_<%=cid%> = connection_<%=cid%>.createStatement();
	java.sql.ResultSet resultSet_<%=cid%> = statement_<%=cid%>.executeQuery(<%=dbquery%>);
	java.sql.ResultSetMetaData resultSetMetadata_<%=cid%> = resultSet_<%=cid%>.getMetaData();
	int columnsCount_<%=cid%> = resultSetMetadata_<%=cid%>.getColumnCount();
	String tmpString_<%=cid%> = null;
	java.sql.Date tmpDate_<%=cid%> = null;
	
	globalMap.put("<%=cid%>_QUERY", <%=dbquery%>);
	
	while (resultSet_<%=cid%>.next()) {
		nb_line_<%=cid%>++;
		
		<%
		List<? extends IConnection> outConnections = node.getOutgoingSortedConnections();
		List<IMetadataColumn> columnList = metadata.getListColumns();
		
		if (outConnections != null && outConnections.size() > 0) {
		 	IConnection firstOutConnection = outConnections.get(0);
		 	int currentColumn = 1;
		
		 	for (IMetadataColumn column : columnList) {
				String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
			 	String defaultValue = JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate);
				
				if (firstOutConnection.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
					%>
 					if (columnsCount_<%=cid%> < <%=currentColumn%>) {
			 			<%=firstOutConnection.getName()%>.<%=column.getLabel()%> = <%=defaultValue%>;
 					} else {
						<%
						String method;
						if (typeToGenerate.equals("byte[]")) {
							method = "Bytes";
						} else if (typeToGenerate.equals("Integer")) {
							method = "Int";
						} else {
							method = typeToGenerate.substring(0,1).toUpperCase() + typeToGenerate.substring(1);
						}
						
			  			if (typeToGenerate.equals("Char") || typeToGenerate.equals("Character")) {
							%>
							tmpString_<%=cid%> = resultSet_<%=cid%>.getString(<%=currentColumn%>);
				  			if (tmpString_<%=cid%> != null && tmpString_<%=cid%>.length() > 0) {
				  				<%=firstOutConnection.getName()%>.<%=column.getLabel()%> = tmpString_<%=cid%>.charAt(0);
					  		}
						 	<%
						} else if (typeToGenerate.equals("java.util.Date")) {
							%>
							tmpDate_<%=cid%> = resultSet_<%=cid%>.getDate(<%=currentColumn%>);
							if (tmpDate_<%=cid%> != null) {
								<%=firstOutConnection.getName()%>.<%=column.getLabel()%> = new java.util.Date(tmpDate_<%=cid%>.getTime());
							}
						
						    <%
			           		 }else if (typeToGenerate.equals("List")) {
			          	    %>
			         		<%=firstOutConnection.getName()%>.<%=column.getLabel()%> = (List)resultSet_<%=cid%>.getObject(<%=currentColumn%>);
				 			<%
				 		} else {
			   	 			%>
			   	 			
			   	 			
    			   	 		if(resultSet_<%=cid%>.getObject(<%=currentColumn%>) != null)
                            {
                               <%=firstOutConnection.getName()%>.<%=column.getLabel()%> = resultSet_<%=cid%>.get<%=method%>(<%=currentColumn%>);
                            }
                            else
                            {
                                <%
                                if(column.isNullable())
                                {
                                %>
                                <%=firstOutConnection.getName()%>.<%=column.getLabel()%> = null;
                                <%
                                }else{
                                %>    
                                    throw new RuntimeException("Null value in non-Nullable column");
                                <%    
                                }
                                %>
                            }<%
                        
                        
						}
						
						if (column.isNullable()) {
							%>
							if (resultSet_<%=cid%>.wasNull()) {
								<%=firstOutConnection.getName()%>.<%=column.getLabel()%> = null;
							}
							<%
						}	   	 		
			   	 		%>
			   	 	}
			   	 	<%
			   	 	currentColumn++;
				}
			}
			
			for (int i = 1; i < outConnections.size(); i++) {
				IConnection outConnection = outConnections.get(i);
				if ((outConnection.getName().compareTo(firstOutConnection.getName()) != 0) &&
					(outConnection.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA))) {
					for (IMetadataColumn column : columnList) {
						%>
						<%=outConnection.getName()%>.<%=column.getLabel()%> = <%=firstOutConnection.getName()%>.<%=column.getLabel()%>;
						<%
					}
				}
			}
		}
}
%>