<%@ jet
	imports="
	java.util.ArrayList
	java.util.HashMap
	java.util.List
	java.util.Map
	
	org.talend.core.model.metadata.IMetadataColumn
	org.talend.core.model.metadata.IMetadataTable
	org.talend.core.model.metadata.types.JavaTypesManager
	org.talend.core.model.process.ElementParameterParser
	org.talend.core.model.process.IConnection
	org.talend.core.model.process.IConnectionCategory
	org.talend.core.model.process.INode
	org.talend.designer.codegen.config.CodeGeneratorArgument
	"
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
%>
	
<%	
	IConnection firstDataConn = null;
	List<IMetadataColumn> firstColumnList = null;

	//1. get first DATA Link
	List< ? extends IConnection> conns = node.getIncomingConnections();	
	if(conns != null && conns.size() > 0){
		for(IConnection conn : conns){
			if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
				firstDataConn = conn;
				break;
			}
		}
	}

	//2. get first columnList (with real columns data) 	
	List<IMetadataTable> metadatas = node.getMetadataList();
	IMetadataTable metadata = null;
	if ( metadatas != null && metadatas.size() > 0 ) {
		metadata = metadatas.get(0);
		if(metadata != null){
			firstColumnList = metadata.getListColumns(); 
			if ( firstColumnList == null || firstColumnList.size() == 0 ) {
				firstColumnList = null;
			}
		}
	}
	
	//3. check the config Link and Schema
	if(firstDataConn == null || firstColumnList == null)
	{
		return "";
	}
%>

<%
            //this is a inner class to process the schema issue.
            class SchemaUtil {

                // keep all schema configuration
                private List<SAPSchema> sapSchemaList = new ArrayList<SAPSchema>();

                class SAPSchema {

                    public String getSchemaName() {
                        return schemaName;
                    }

                    public String getSapParameterType() {
                        return sapParameterType;
                    }

                    public String getSapTableName() {
                        return sapTableName;
                    }

                    public String getSapParameterName() {
                        return sapParameterName;
                    }

                    public String getSapParameterValue() {
                        return sapParameterValue;
                    }

                    String schemaName;

                    String sapParameterType;

                    String sapTableName;

                    String sapParameterName;

                    String sapParameterValue;

                    public SAPSchema(String schemaName, String sapParameterType, String sapTableName, String sapParameterName,
                            String sapParameterValue) {

                        this.schemaName = schemaName;

                        this.sapParameterType = sapParameterType;

                        this.sapTableName = sapTableName;

                        this.sapParameterName = sapParameterName;

                        this.sapParameterValue = sapParameterValue;
                    }

                }

                // step_1
                public void addSAPSchema(String schemaName, String sapParameterType, String sapTableName,
                        String sapParameterName, String sapParameterValue) {
                    SAPSchema newSAPSchema = new SAPSchema(schemaName, sapParameterType, sapTableName, sapParameterName,
                            sapParameterValue);

                    // process List
                    sapSchemaList.add(newSAPSchema);
                }

                // step_2
                // <tableName, sameType_sameTable_schema>
                public Map<String, List<SAPSchema>> extractSchemaMap(String sapParameterType) {
                    Map<String, List<SAPSchema>> map = new HashMap<String, List<SAPSchema>>();
                    for (SAPSchema sapSchema : sapSchemaList) {

                        // filter the sapParameterType first
                        if (!sapSchema.getSapParameterType().equals(sapParameterType)) {
                            continue;
                        }

                        String key = sapSchema.getSapTableName();
                        List<SAPSchema> tableNamekeyList = map.get(key);
                        if (tableNamekeyList == null) {
                            List<SAPSchema> newTableNamekeyList = new ArrayList<SAPSchema>();
                            newTableNamekeyList.add(sapSchema);
                            map.put(key, newTableNamekeyList);

                        } else {
                            tableNamekeyList.add(sapSchema);
                        }
                    }
                    return map;
                }
            }
            
            //intial the schema in buffer
            SchemaUtil schemaUtil = new SchemaUtil(); 
            
			List<Map<String, String>> sapMapping = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__MAPPING__");            
            
			for(Map<String, String> configRow : sapMapping){			
				schemaUtil.addSAPSchema(configRow.get("SCHEMA_COLUMN"), configRow.get("SAP_PARAMETER_TYPE"), configRow.get("SAP_TABLE_NAME"), configRow.get("SAP_PARAMETER_NAME"), configRow.get("SAP_PARAMETER_VALUE"));
				if(true){
				System.out.println(configRow.get("SCHEMA_COLUMN") + " " + configRow.get("SAP_PARAMETER_TYPE") + " " + configRow.get("SAP_TABLE_NAME") + " " + configRow.get("SAP_PARAMETER_NAME") + " " + configRow.get("SAP_PARAMETER_VALUE"));
				}				
			}
%>

<%
boolean startIterate = false;
String firstDataConnName = firstDataConn.getName();

String client = ElementParameterParser.getValue(node, "__CLIENT__");
String userid = ElementParameterParser.getValue(node, "__USERID__");
String password = ElementParameterParser.getValue(node, "__PASSWORD__");
String language = ElementParameterParser.getValue(node, "__LANGUAGE__");
String hostname = ElementParameterParser.getValue(node, "__HOSTNAME__");
String systemnumber = ElementParameterParser.getValue(node, "__SYSTEMNUMBER__");

String functionName = ElementParameterParser.getValue(node, "__SAP_FUNCTION__");

String iterate_out_type = ElementParameterParser.getValue(node, "__SAP_ITERATE_OUT_TYPE__");
String iterate_out_tablename = ElementParameterParser.getValue(node, "__SAP_ITERATE_OUT_TABLENAME__");
%>        
<%
        /* the following is output part, it will output data to SAP. */
        // "input_single"
        Map<String, List<SchemaUtil.SAPSchema>> input_single_map = schemaUtil.extractSchemaMap("input_single");
        for (String key : input_single_map.keySet()) {
            List<SchemaUtil.SAPSchema> oneTableNamelist = input_single_map.get(key);
            for (SchemaUtil.SAPSchema schema : oneTableNamelist) {
%>              
		importParameterList_<%=cid %>.setValue(<%=firstDataConnName %>.<%=schema.getSchemaName() %>, <%=schema.getSapParameterName() %>); // "input_single"--<%=schema.getSchemaName() %>
<%            }
        }
%>

<%
        // "input_structure"
        Map<String, List<SchemaUtil.SAPSchema>> input_structure_map = schemaUtil.extractSchemaMap("input_structure");
        for (String key : input_structure_map.keySet()) {
%>          
		com.sap.mw.jco.JCO.Structure input_structure_structure_<%=cid %> = importParameterList_<%=cid %>.getStructure(<%=key %>);
<%          List<SchemaUtil.SAPSchema> oneTableNamelist = input_structure_map.get(key);
            for (SchemaUtil.SAPSchema schema : oneTableNamelist) {
%>              
		input_structure_structure_<%=cid %>.setValue(<%=firstDataConnName %>.<%=schema.getSchemaName() %>, <%=schema.getSapParameterName() %>); // "input_structure"--<%=schema.getSchemaName() %>
<%          }
        }
%>

<%
        // "input_table"
        Map<String, List<SchemaUtil.SAPSchema>> input_table_map = schemaUtil.extractSchemaMap("input_table");
        for (String key : input_table_map.keySet()) {
%>          
		com.sap.mw.jco.JCO.Table input_table_table_<%=cid %> = importParameterList_<%=cid %>.getTable(<%=key %>);
        input_table_table_<%=cid %>.appendRow();
<%          List<SchemaUtil.SAPSchema> oneTableNamelist = input_table_map.get(key);
            for (SchemaUtil.SAPSchema schema : oneTableNamelist) {
%>              
		input_table_table_<%=cid %>.setValue(<%=firstDataConnName %>.<%=schema.getSchemaName() %>, <%=schema.getSapParameterName() %>); // "input_table"--<%=schema.getSchemaName() %>
<%            }
        }
%>        

<%       
        // "table_input"
        Map<String, List<SchemaUtil.SAPSchema>> table_input_map = schemaUtil.extractSchemaMap("table_input");
        for (String key : table_input_map.keySet()) {
%>          
		com.sap.mw.jco.JCO.Table table_input_table_<%=cid %> = tableParameterList_<%=cid %>.getTable(<%=key %>);
        table_input_table_<%=cid %>.appendRow();
<%          List<SchemaUtil.SAPSchema> oneTableNamelist = table_input_map.get(key);
            for (SchemaUtil.SAPSchema schema : oneTableNamelist) {
%>              
		table_input_table_<%=cid %>.setValue(<%=firstDataConnName %>.<%=schema.getSchemaName() %>, <%=schema.getSapParameterName() %>); // "table_input"--<%=schema.getSchemaName() %>
<%          }
        }
%>        

        client_<%=cid %>.execute(function_<%=cid %>);