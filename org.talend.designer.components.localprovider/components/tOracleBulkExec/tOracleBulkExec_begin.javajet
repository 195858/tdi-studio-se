<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.core.model.metadata.IMetadataTable
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.core.model.metadata.MetadataTalendType    
    org.talend.core.model.metadata.MappingTypeRetriever    
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.List
    java.util.ArrayList    
    java.lang.StringBuilder
    java.util.Map
    java.util.HashMap
" 
skeleton="../templates/db_output_bulk.skeleton"
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();
String filename = ElementParameterParser.getValue(node, "__DATA__");
String host = ElementParameterParser.getValue(node, "__HOST__");
String port = ElementParameterParser.getValue(node, "__PORT__");
String dbname = ElementParameterParser.getValue(node, "__DBNAME__");
String dbschema = ElementParameterParser.getValue(node, "__SCHEMA_DB__");
String dbuser = ElementParameterParser.getValue(node, "__USER__");
String dbpass = ElementParameterParser.getValue(node, "__PASS__");
String table = ElementParameterParser.getValue(node, "__TABLE__");
String data_action = ElementParameterParser.getValue(node, "__DATA_ACTION__");
String fields_terminated_by = ElementParameterParser.getValue(node, "__FIELDS_TERMINATED_BY__");
String fields_enclosed_by = ElementParameterParser.getValue(node, "__FIELDS_ENCLOSED_BY__");
String columns = "";//if schema is defined, use this option in clt file
   
List<Map<String, String>> options = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__OPTIONS__");
java.lang.StringBuilder optionStr = new java.lang.StringBuilder();
String silentMode = "";
String parallelRead = "false";
String rowsPerCommit = "5000";
String bindSize = "20000000";
String readSize = "20000000";
for(java.util.Map<String, String> option : options) {
    String key = option.get("KEY");
    if(key.equals("PARALLEL")) {
        parallelRead = option.get("VALUE");
    } else if(key.equals("ROWS")) {
        rowsPerCommit = option.get("VALUE");
    } else if(key.equals("BINDSIZE")) {
        bindSize = option.get("VALUE");
    } else if(key.equals("READSIZE")) {
        readSize = option.get("VALUE");
    } else if(key.equals("SILENT")) {
        silentMode = option.get("VALUE");
    } else {
        if(optionStr.length() > 0) {
            optionStr.append(",").append(key).append("=").append(option.get("VALUE"));
        } else {
            optionStr.append(key).append("=").append(option.get("VALUE"));
        }
    }
}
if(optionStr.length() > 0) {
    optionStr.append(",");
}
optionStr.append("PARALLEL").append("=").append(parallelRead);
optionStr.append(",").append("ROWS").append("=").append(rowsPerCommit);
optionStr.append(",").append("BINDSIZE").append("=").append(bindSize);
optionStr.append(",").append("READSIZE").append("=").append(readSize);

if(silentMode.length() > 0) {
	if(silentMode.indexOf(",") < 0) {
	    optionStr.append(",").append("SILENT=").append(silentMode);
	} else {
	    optionStr.append(",").append("SILENT=(").append(silentMode).append(")");
	}
}
   
String encoding  = ElementParameterParser.getValue(node, "__ENCODING__");
encoding= encoding.toUpperCase();
if(encoding.equals("\"UTF-8\"")){
    encoding = "'UTF8'";
}else if(encoding.equals("\"ISO-8859-15\"")){
    encoding = "'WE8ISO8859P15'";
}else if(encoding.equals("\"GBK\"")){
    encoding = "'ZHS16GBK'";
}else if(encoding.equals("\"GB2312\"")){
    encoding = "'ZHS16CGB231280'";//ZHS16MACCGB231280 ?
}else if(encoding.equals("\"BIG5\"")){
    encoding = "'ZHT16BIG5'";
} else {
   //will be enhanced later, now default with utf-16
    encoding = "'AL16UTF16'";
}
String outputAction  = ElementParameterParser.getValue(node, "__OUTPUT__");
%>
java.sql.Connection conn_<%=cid%> = null;
String serviceUrl_<%=cid%> = null;
String host_<%=cid%> = null;
String port_<%=cid%> = null;
String dbname_<%=cid%> = null;
String dbschema_<%=cid%> = null;
String username_<%=cid%> = null;
String password_<%=cid%> = null;
<%       
String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");
if(useExistingConn.equals("true"))
{
    String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
    String conn = "conn_" + connection;
    String existHost = "host_" + connection;
    String existPort = "port_" + connection;
    String existDbName = "dbname_" + connection;
    String existDbSchema = "dbschema_" + connection;
    String existUsername = "username_" + connection;
    String existPassword = "password_" + connection;
    %>
    host_<%=cid%> = (String)globalMap.get("<%=existHost%>");
    port_<%=cid%> = (String)globalMap.get("<%=existPort%>");
    dbname_<%=cid%> = (String)globalMap.get("<%=existDbName%>");
    dbschema_<%=cid%> = (String)globalMap.get("<%=existDbSchema%>");
    username_<%=cid%> = (String)globalMap.get("<%=existUsername%>");
    password_<%=cid%> = (String)globalMap.get("<%=existPassword%>");
    serviceUrl_<%=cid%> = "(description=(address=(protocol=tcp)(host=" + host_<%=cid%> + ")(port=" + port_<%=cid%> + "))(connect_data=(service_name=" + dbname_<%=cid%> + ")))";
    conn_<%=cid%> = (java.sql.Connection)globalMap.get("<%=conn%>");
    <%
}
else
{
    %>
    String url_<%=cid%> = null;
    host_<%=cid%> = <%=host%>;
    port_<%=cid%> = <%=port%>;
    dbname_<%=cid%> = <%=dbname%>;
    dbschema_<%=cid%> = <%=dbschema%>;
    username_<%=cid%> = <%=dbuser%>;
    password_<%=cid%> = <%=dbpass%>;
    serviceUrl_<%=cid%> = "(description=(address=(protocol=tcp)(host=" + host_<%=cid%> + ")(port=" + port_<%=cid%> + "))(connect_data=(service_name=" + dbname_<%=cid%> + ")))";    
    <%
    String connectionType = ElementParameterParser.getValue(node, "__CONNECTION_TYPE__");
    if(connectionType.equals("ORACLE_SID")) {
        %>
        url_<%=cid%> = "jdbc:oracle:thin:@" + host_<%=cid%> + ":" + port_<%=cid%> + ":" + dbname_<%=cid%>;
        <%
    } else if(connectionType.equals("ORACLE_SERVICE_NAME")) {
        %>
        url_<%=cid%> = "jdbc:oracle:thin:@" + serviceUrl_<%=cid%>;
        <%
    } else if(connectionType.equals("ORACLE_OCI")) {
        %>
        url_<%=cid%> = "jdbc:oracle:oci8:@" + serviceUrl_<%=cid%>;
        <%
    }
    %>
    java.lang.Class.forName("oracle.jdbc.driver.OracleDriver");
    conn_<%=cid%> = java.sql.DriverManager.getConnection(url_<%=cid%>,username_<%=cid %>,password_<%=cid %>);
<%
}
%>

<%
List<IMetadataColumn> columnList = getColumnList(node);
%>
String tableName_<%=cid%> = null;
if(dbschema_<%=cid%> == null || dbschema_<%=cid%>.trim().length() == 0) {
    tableName_<%=cid%> = <%=table%>;
} else {
    tableName_<%=cid%> = dbschema_<%=cid%> + "." + <%=table%>;
}
<%
String tableAction = ElementParameterParser.getValue(node,"__TABLE_ACTION__");
String dbmsId = ElementParameterParser.getValue(node,"__MAPPING__");
if(columnList != null && columnList.size() > 0) {
	//init value of columns
	MappingTypeRetriever mappingType = MetadataTalendType.getMappingTypeRetriever(dbmsId);
	columns = "(";
	boolean flag = false;
	for(IMetadataColumn column:columnList){
		String dataType = null;
        if(column.getType() == null || column.getType().trim().length() == 0) {
        	dataType = mappingType.getDefaultSelectedDbType(column.getTalendType());
        } else {
        	dataType = column.getType().toUpperCase();
        }
        Integer length = column.getLength() == null ? 0 : column.getLength();
        
		if(flag){
			columns += ", ";
		}else{
			flag = true;
		}
		columns += column.getOriginalDbColumnName();
		if(column.getType().equals("DATE")){//date
			String pattn = column.getPattern();
			if(pattn.length() > 2){
				pattn = "'" + pattn.substring(1, pattn.length() - 1) + "'";
			}else{
				pattn = "";
			}
			columns += (" DATE " + pattn);
		}else if(dataType.equals("CHAR") || dataType.equals("NCHAR") || dataType.equals("NVARCHAR2") || dataType.equals("VARCHAR") || dataType.equals("VARCHAR2")){//long text
			if(length > 255){
				columns += " CHAR(" + length + ")";
			}
		}
	}
	columns += ")\\r\\n";
	
    List<Column> stmtStructure = getManager(dbmsId, cid).createColumnList(columnList, null);
    Manager manager = getManager(dbmsId, cid);
    if(tableAction.equals("DROP_CREATE")) {
        %>
        java.sql.Statement stmtDrop_<%=cid%> = conn_<%=cid%>.createStatement();
        stmtDrop_<%=cid%>.execute("<%=manager.getDropTableSQL()%>");
        java.sql.Statement stmtCreate_<%=cid%> = conn_<%=cid%>.createStatement();
        stmtCreate_<%=cid%>.execute("<%=manager.getCreateTableSQL(stmtStructure)%>");
        <%
    } else if(tableAction.equals("CREATE")) {
        %>
        java.sql.Statement stmtCreate_<%=cid%> = conn_<%=cid%>.createStatement();
        stmtCreate_<%=cid%>.execute("<%=manager.getCreateTableSQL(stmtStructure)%>");
        <%
    } else if(tableAction.equals("CREATE_IF_NOT_EXISTS")) {
        %>
        java.sql.DatabaseMetaData dbMetaData_<%=cid%> = conn_<%=cid%>.getMetaData();
        java.sql.ResultSet rsTable_<%=cid%> = dbMetaData_<%=cid%>.getTables(null, null, null, new String[]{"TABLE"});
        boolean whetherExist_<%=cid%> = false;
        while(rsTable_<%=cid%>.next()) {
            String table_<%=cid%> = rsTable_<%=cid%>.getString("TABLE_NAME");
            if(table_<%=cid%>.equalsIgnoreCase(<%=table%>)) {
                whetherExist_<%=cid%> = true;
                break;
            }
        }
        if(!whetherExist_<%=cid%>) {
            java.sql.Statement stmtCreate_<%=cid%> = conn_<%=cid%>.createStatement();
            stmtCreate_<%=cid%>.execute("<%=manager.getCreateTableSQL(stmtStructure)%>");            
        }
        <%
    } else if(tableAction.equals("CLEAR")) {
        %>
        java.sql.Statement stmtClear_<%=cid%> = conn_<%=cid%>.createStatement();
        stmtClear_<%=cid%>.executeUpdate("<%=manager.getTruncateTableSQL()%>");
        <%
    }    
}
%><%
if(!useExistingConn.equals("true"))
{
    %>
    conn_<%=cid%>.close();
    <%
}
%>

String cltf_<%=cid %> = <%=filename %>+".clt";

String badf_<%=cid %> = <%=filename %>+".bad";

String dscf_<%=cid %> = <%=filename %>+".dsc";

String logf_<%=cid %> = <%=filename %>+".log";

String enclosure_<%=cid %> = <%if(fields_enclosed_by.equals("\"\"\"")){%>"\""<%}else{%><%=fields_enclosed_by %><%}%>;

java.io.FileWriter fw_<%=cid %> = new java.io.FileWriter(cltf_<%=cid %>);
    
fw_<%=cid %>.write("\r\nLOAD DATA\r\nCHARACTERSET <%=encoding %>\r\n" +
    "<%=data_action %> INTO TABLE " + tableName_<%=cid%> + 
    "\r\nFIELDS TERMINATED BY \"" + <%=fields_terminated_by %> + 
    "\"\r\nOPTIONALLY ENCLOSED BY '" + enclosure_<%=cid %> + "'\r\n<%=columns %>");
            
fw_<%=cid %>.close();

java.io.File badFile_<%=cid %> = new java.io.File(badf_<%=cid %>);

if(badFile_<%=cid %>.exists()){
	
    badFile_<%=cid %>.delete();
	
}

String command_<%=cid %> = "sqlldr '" + username_<%=cid%> + "/" + password_<%=cid%> + "@" + serviceUrl_<%=cid%> + "' DATA='" + <%=filename %> 
+ "', CONTROL='" + cltf_<%=cid %> + "', BAD='" + badf_<%=cid %> + "', DISCARD='" + dscf_<%=cid %> + "', LOG='" + logf_<%=cid %> + "',<%=optionStr%>";

final Process process_<%=cid %> = Runtime.getRuntime().exec(command_<%=cid %>); 

Thread normal_<%=cid %> = new Thread() {
	public void run() {
		try {
			java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(process_<%=cid %>.getInputStream()));
			String line = "";
			try {
				while((line = reader.readLine()) != null) {
			        <%
			        if (outputAction.equals("OUTPUT_TO_CONSOLE")) {
			            %>
				        System.out.println(line);
				        <%
			        } else if (outputAction.equals("RETRIEVE_OUTPUT")) {
			            %>
				        globalMap.put("<%=cid %>_OUTPUT",(String)globalMap.get("<%=cid %>_OUTPUT") + "\n" + line);
				        <%
			        }
			        %>
		        }
		    } finally {
		         reader.close();
		    }
	    }catch(java.io.IOException ioe) {
			ioe.printStackTrace();
		}
	}
};

normal_<%=cid %>.start();

Thread error_<%=cid %> = new Thread() {
    public void run() {
	   try {
		   java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(process_<%=cid %>.getErrorStream()));
		   String line = "";
		   try {
			   while((line = reader.readLine()) != null) {
			       <%
				   if (outputAction.equals("OUTPUT_TO_CONSOLE")) {
				       %>
					   System.err.println(line);
					   <%
				   } else if (outputAction.equals("RETRIEVE_OUTPUT")) {
				       %>
					   globalMap.put("<%=cid %>_OUTPUT",(String)globalMap.get("<%=cid %>_OUTPUT")+"\n"+line);
					   <%
				   }
			       %>
			   }
		    } finally {
			    reader.close();
		    }
	    } catch(java.io.IOException ioe) {
		   ioe.printStackTrace();
        }
	}
};

error_<%=cid %>.start();

process_<%=cid %>.waitFor();

normal_<%=cid %>.interrupt();

error_<%=cid %>.interrupt();
	
int nb_line_data_<%=cid %> = (int)(com.delimitedparser.DelimitedDataReaderFactory.createDelimitedDataReader(<%=filename %>, <%=fields_terminated_by %>, "\n", false).getAvailableRowCount(0));

int nb_line_bad_<%=cid %> = 0;

if(new java.io.File(badf_<%=cid %>).exists()){
	
	nb_line_bad_<%=cid %> = (int)(com.delimitedparser.DelimitedDataReaderFactory.createDelimitedDataReader(badf_<%=cid %>, <%=fields_terminated_by %>, "\n", false).getAvailableRowCount(0));
	
}

globalMap.put("<%=cid %>_NB_LINE_DATA", nb_line_data_<%=cid %>);

globalMap.put("<%=cid %>_NB_LINE_DATA", nb_line_bad_<%=cid %>);

globalMap.put("<%=cid %>_NB_LINE_INSERTED", nb_line_data_<%=cid %> - nb_line_bad_<%=cid %>);




