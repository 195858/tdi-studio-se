<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.core.model.metadata.IMetadataTable
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.core.model.metadata.MetadataTalendType    
    org.talend.core.model.metadata.MappingTypeRetriever    
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.metadata.types.JavaTypesManager
	org.talend.core.model.metadata.types.JavaType
    java.util.List
    java.util.ArrayList    
    java.lang.StringBuilder
    java.util.Map
    java.util.HashMap
" 
skeleton="../templates/db_output_bulk.skeleton"
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();
String host = ElementParameterParser.getValue(node, "__HOST__");
String port = ElementParameterParser.getValue(node, "__PORT__");
String dbname = ElementParameterParser.getValue(node, "__DBNAME__");
String localServiceName = ElementParameterParser.getValue(node, "__LOCAL_SERVICE_NAME__"); 
String dbschema = ElementParameterParser.getValue(node, "__SCHEMA_DB__");
String dbuser = ElementParameterParser.getValue(node, "__USER__");
String dbpass = ElementParameterParser.getValue(node, "__PASS__");
String table = ElementParameterParser.getValue(node, "__TABLE__");
String data_action = ElementParameterParser.getValue(node, "__DATA_ACTION__");
String outputAction  = ElementParameterParser.getValue(node, "__OUTPUT__");
String use_existing_ctl_file = ElementParameterParser.getValue(node, "__USE_EXISTING_CLT_FILE__");
String inputIntoTableClause = ElementParameterParser.getValue(node, "__INPUT_INTO_TABLE_CLAUSE__");
String useDatePattern = ElementParameterParser.getValue(node, "__USE_DATE_PATTERN__");
boolean convertToUppercase = ElementParameterParser.getValue(node, "__CONVERT_COLUMN_TABLE_TO_UPPERCASE__").equals("true");
String columns = "";//if schema is defined, use this option in ctl file
List<IMetadataColumn> columnList = getColumnList(node);

boolean flagHasLob=false;

String advancedSeparatorStr = ElementParameterParser.getValue(node, "__ADVANCED_SEPARATOR__");
boolean advancedSeparator = (advancedSeparatorStr!=null&&!advancedSeparatorStr.equals(""))?advancedSeparatorStr.equals("true"):false;
String thousandsSeparator = ElementParameterParser.getValue(node, "__THOUSANDS_SEPARATOR__");
String decimalSeparator = ElementParameterParser.getValue(node, "__DECIMAL_SEPARATOR__"); 
decimalSeparator = decimalSeparator.trim();
if(decimalSeparator.length() > 2){
	decimalSeparator = String.valueOf(decimalSeparator.charAt(1));
}else{
	decimalSeparator = ".";
}
boolean noThousandsSeparator = false;
thousandsSeparator = thousandsSeparator.trim();
if(thousandsSeparator.length() > 2){
	thousandsSeparator = String.valueOf(thousandsSeparator.charAt(1));
}else{
	thousandsSeparator = " ";
	noThousandsSeparator = true;
}

%>

<%
if(data_action.equals("UPDATE")) {
    if(columnList != null && columnList.size() > 0) {
        int keyCount = 0;
        for(IMetadataColumn column : columnList) {
            if(column.isKey()) {
                keyCount++;
            }
        }
        %>
        int keyCount_<%=cid%> = <%=keyCount%>;
        if(keyCount_<%=cid%> == 0) {
            throw new RuntimeException("For bulk update, Schema must have a key at least."); 
        }
        <%
    }
}
%>

java.sql.Connection conn_<%=cid %> = null;
String serviceUrl_<%=cid %> = null;
String host_<%=cid %> = null;
String dbname_<%=cid %> = null;
String dbschema_<%=cid %> = null;
String username_<%=cid %> = null;
String password_<%=cid %> = null;
<%       
String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");
if(useExistingConn.equals("true")) {
    String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
    String conn = "conn_" + connection;
    String existHost = "host_" + connection;
    String existPort = "port_" + connection;
    String existDbName = "dbname_" + connection;
    String existDbSchema = "dbschema_" + connection;
    String existUsername = "username_" + connection;
    String existPassword = "password_" + connection;
    %>
    host_<%=cid%> = (String)globalMap.get("<%=existHost%>");
    dbname_<%=cid%> = (String)globalMap.get("<%=existDbName%>");
    dbschema_<%=cid%> = (String)globalMap.get("<%=existDbSchema%>");
    username_<%=cid%> = (String)globalMap.get("<%=existUsername%>");
    password_<%=cid%> = (String)globalMap.get("<%=existPassword%>");
    serviceUrl_<%=cid%> = "(description=(address=(protocol=tcp)(host=" + host_<%=cid%> + ")(port=" + <%=port%> + "))(connect_data=(service_name=" + dbname_<%=cid%> + ")))";
    conn_<%=cid%> = (java.sql.Connection)globalMap.get("<%=conn%>");
    <%
} else {
    %>
    String url_<%=cid%> = null;
    host_<%=cid%> = <%=host%>;
    dbname_<%=cid%> = <%=dbname%>;
    dbschema_<%=cid%> = <%=dbschema%>;
    username_<%=cid%> = <%=dbuser%>;
    password_<%=cid%> = <%=dbpass%>;
    serviceUrl_<%=cid%> = "(description=(address=(protocol=tcp)(host=" + host_<%=cid%> + ")(port=" + <%=port%> + "))(connect_data=(service_name=" + dbname_<%=cid%> + ")))";    
    <%
    String connectionType = ElementParameterParser.getValue(node, "__CONNECTION_TYPE__");
    if(connectionType.equals("ORACLE_SID")) {
        %>
        url_<%=cid%> = "jdbc:oracle:thin:@" + host_<%=cid%> + ":" + <%=port%> + ":" + dbname_<%=cid%>;
        <%
    } else if(connectionType.equals("ORACLE_SERVICE_NAME")) {
        %>
        url_<%=cid%> = "jdbc:oracle:thin:@" + serviceUrl_<%=cid%>;
        <%
    } else if(connectionType.equals("ORACLE_OCI")) {
        %>
        url_<%=cid%> = "jdbc:oracle:oci8:@" + <%=localServiceName%>; 
        <%
    }
    %>
    java.lang.Class.forName("oracle.jdbc.driver.OracleDriver");
    conn_<%=cid%> = java.sql.DriverManager.getConnection(url_<%=cid%>,username_<%=cid %>,password_<%=cid %>);
    <%
}

//table action begin
%>
String tableName_<%=cid%> = null;
if(dbschema_<%=cid%> == null || dbschema_<%=cid%>.trim().length() == 0) {
    tableName_<%=cid%> = <%=table%><%=convertToUppercase ? ".toUpperCase()" : ""%>;
} else {
    tableName_<%=cid%> = dbschema_<%=cid%> + "." + <%=table%><%=convertToUppercase ? ".toUpperCase()" : ""%>;
}
<%
if(data_action.equals("UPDATE")) {
    %>
    String tmpTableName_<%=cid%> = tableName_<%=cid%>;
    tableName_<%=cid%> = "<%=cid%>";
    <%
}
%>

<%
String tableAction = ElementParameterParser.getValue(node,"__TABLE_ACTION__");
String dbmsId = ElementParameterParser.getValue(node,"__MAPPING__");
List<Column> stmtStructure = null;
Manager manager = null;


if(columnList != null && columnList.size() > 0) {
	//init string value of field list for use in .ctl file
	MappingTypeRetriever mappingType = MetadataTalendType.getMappingTypeRetriever(dbmsId);
	if(use_existing_ctl_file.equals("false") && inputIntoTableClause.equals("false")){
    	columns = "(";
    	boolean flag = false;
    	
    	for(IMetadataColumn column:columnList){
    		String dataType = null;
    		JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
    		
    		String dbType = column.getType() ;
    		
            if(column.getType() == null || column.getType().trim().length() == 0) {
            	dataType = mappingType.getDefaultSelectedDbType(column.getTalendType());
            } else {
            	dataType = column.getType().toUpperCase();
            }
            Integer length = column.getLength() == null ? 0 : column.getLength();
            
    		if(flag){
    			columns += ", \\n";
    		}else{
    			flag = true;
    		}
    		columns += column.getOriginalDbColumnName();
    		
    		if(column.getType().equals("DATE") && useDatePattern.equals("true")){//date
    			String pattn = column.getPattern();
    			if(pattn != null && pattn.length() > 2){
    				columns += (" DATE '" + pattn.substring(1, pattn.length() - 1) + "'");
    			}
    		}else if(dataType.equals("CHAR") || dataType.equals("NCHAR") || dataType.equals("NVARCHAR2") || dataType.equals("VARCHAR") || dataType.equals("VARCHAR2")){//long text
    			if(length > 255){
    				columns += " CHAR(" + length + ")";
    			}
    		} else if (dataType.equals("CLOB") || dataType.equals("BLOB") ) {
    			   flagHasLob=true;
    			   columns += " CHAR(" + length + ")  ENCLOSED BY '<startlob>' AND '<endlob>' ";
    		} else if(advancedSeparator && JavaTypesManager.isNumberType(javaType)) {//add for issue
    			if(noThousandsSeparator){
    				columns += (" \\\"TO_NUMBER(ltrim(rtrim(:" + column.getOriginalDbColumnName() + ")), '999999999999D999999999999', 'NLS_NUMERIC_CHARACTERS=''" + decimalSeparator + thousandsSeparator + "''')\\\"");
    			}else{
    				columns += (" \\\"TO_NUMBER(ltrim(rtrim(:" + column.getOriginalDbColumnName() + ")), '999G999G999G999D999999999999', 'NLS_NUMERIC_CHARACTERS=''" + decimalSeparator + thousandsSeparator + "''')\\\"");
    			}
    		}
    	}
    	columns += ")\\r\\n";
    }
	
    stmtStructure = getManager(dbmsId, cid).createColumnList(columnList, null);
    if(convertToUppercase) {
        for(Column column : stmtStructure) {
            column.setColumnName(column.getColumnName().toUpperCase());
        }
    }
    manager = getManager(dbmsId, cid);
    if(tableAction.equals("DROP_CREATE")) {
        %>
        java.sql.Statement stmtDrop_<%=cid%> = conn_<%=cid%>.createStatement();
        stmtDrop_<%=cid%>.execute("<%=manager.getDropTableSQL()%>");
        stmtDrop_<%=cid%>.close();
        java.sql.Statement stmtCreate_<%=cid%> = conn_<%=cid%>.createStatement();
        stmtCreate_<%=cid%>.execute("<%=manager.getCreateTableSQL(stmtStructure)%>");
        stmtCreate_<%=cid%>.close();
        <%
    } else if(tableAction.equals("CREATE")) {
        %>
        java.sql.Statement stmtCreate_<%=cid%> = conn_<%=cid%>.createStatement();
        stmtCreate_<%=cid%>.execute("<%=manager.getCreateTableSQL(stmtStructure)%>");
        stmtCreate_<%=cid%>.close();
        <%
    } else if(tableAction.equals("CREATE_IF_NOT_EXISTS")) {
        %>
        java.sql.DatabaseMetaData dbMetaData_<%=cid%> = conn_<%=cid%>.getMetaData();
        java.sql.ResultSet rsTable_<%=cid%> = dbMetaData_<%=cid%>.getTables(null, null, null, new String[]{"TABLE"});
        boolean whetherExist_<%=cid%> = false;
        while(rsTable_<%=cid%>.next()) {
            String table_<%=cid%> = rsTable_<%=cid%>.getString("TABLE_NAME");
            if(table_<%=cid%>.equalsIgnoreCase(<%=table%>)) {
                whetherExist_<%=cid%> = true;
                break;
            }
        }
        rsTable_<%=cid%>.close();
        if(!whetherExist_<%=cid%>) {
            java.sql.Statement stmtCreate_<%=cid%> = conn_<%=cid%>.createStatement();
            stmtCreate_<%=cid%>.execute("<%=manager.getCreateTableSQL(stmtStructure)%>");
            stmtCreate_<%=cid%>.close();
        }
        <%
    } else if(tableAction.equals("CLEAR")) {
        %>
        java.sql.Statement stmtClear_<%=cid%> = conn_<%=cid%>.createStatement();
        stmtClear_<%=cid%>.executeUpdate("<%=manager.getDeleteTableSQL()%>");
        stmtClear_<%=cid%>.close();
        <%
    } else if(tableAction.equals("TRUNCATE")) {
        %>
        java.sql.Statement stmtTrunc_<%=cid%> = conn_<%=cid%>.createStatement();
        stmtTrunc_<%=cid%>.executeUpdate("<%=manager.getTruncateTableSQL()%>");
        stmtTrunc_<%=cid%>.close();
        <%
    }    
}
%>
<%
//table atction end

//////////////////////////////////////////////////////////////////////////////////////////////
if(use_existing_ctl_file.equals("true")) {
	String ctl_file = ElementParameterParser.getValue(node, "__CLT_FILE__");
	%>
	String ctlf_<%=cid %> = <%=ctl_file %>;
	String logf_<%=cid %> = <%=ctl_file %>+".log";
	<%
} else {
	//options clause begin
	List<Map<String, String>> options = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__OPTIONS__");
    java.util.Map<String, String> parametersMap = new java.util.HashMap<String, String>();
    parametersMap.put("PARALLEL", "false");
    parametersMap.put("BINDSIZE", "20000000");
    parametersMap.put("ROWS", "5000");
    parametersMap.put("READSIZE", "20000000");
    
    for(java.util.Map<String, String> option : options) {
        String key = option.get("KEY");
        String value = option.get("VALUE");
        if(value.equals("")){
        	continue;
        }
        if(key.equals("SILENT") && value.contains(",")){
        	value = "(" + value + ")";
        }
        parametersMap.put(key, value);
    }
    
    java.lang.StringBuilder optionClause = new java.lang.StringBuilder();
    java.util.Set<String> keySet = parametersMap.keySet();
    boolean flag = false;
    optionClause.append("OPTIONS (");
    for(String key : keySet){
    	if(flag){
    		optionClause.append(", ");
    	}else{
    		flag = true;
    	}
    	optionClause.append(key).append("=").append(parametersMap.get(key));
    }
    optionClause.append(")");
	//options clause end
	//encoding begin
    String encoding  = ElementParameterParser.getValue(node, "__ENCODING__");
    encoding= encoding.toUpperCase();
    if(encoding.equals("\"UTF-8\"")){
        encoding = "'UTF8'";
    }else if(encoding.equals("\"ISO-8859-15\"")){
        encoding = "'WE8ISO8859P15'";
    }else if(encoding.equals("\"GBK\"")){
        encoding = "'ZHS16GBK'";
    }else if(encoding.equals("\"GB2312\"")){
        encoding = "'ZHS16CGB231280'";//ZHS16MACCGB231280 ?
    }else if(encoding.equals("\"BIG5\"")){
        encoding = "'ZHT16BIG5'";
    } else {
       //will be enhanced later, now default with utf-16
        encoding = "'AL16UTF16'";
    }
    //encoding end    
	String dataFile = ElementParameterParser.getValue(node, "__DATA__");
    %>
    String dataf_<%=cid %> = <%=dataFile %>;
    
    String ctlf_<%=cid %> = dataf_<%=cid %> + ".ctl";
    
    String badf_<%=cid %> = dataf_<%=cid %> + ".bad";
    
    String dscf_<%=cid %> = dataf_<%=cid %> + ".dsc";
    
    String logf_<%=cid %> = dataf_<%=cid %> + ".log";
    
    java.io.File badFile_<%=cid %> = new java.io.File(badf_<%=cid %>);
    
    if(badFile_<%=cid %>.exists()){
    	
        badFile_<%=cid %>.delete();
    	
    }
    java.io.BufferedWriter bw_<%=cid %> = new java.io.BufferedWriter(new java.io.FileWriter(ctlf_<%=cid %>));
    bw_<%=cid %>.write("<%=optionClause.toString() %>\r\n");
    
    bw_<%=cid %>.write("LOAD DATA\r\nCHARACTERSET <%=encoding %>\r\nINFILE '" + dataf_<%=cid %> + "'");
        
    <%if (flagHasLob) {%>
		bw_<%=cid %>.write(" \"str '|'\" ");
    <%}%>
    
    
    
    <%
    //record format begin
    String recordFormat = ElementParameterParser.getValue(node, "__RECORD_FORMAT__");
    if(recordFormat.equals("STREAM")){
    	String streamTerminator = ElementParameterParser.getValue(node, "__TERMINATOR_STRING__");
        %>
        bw_<%=cid %>.write(" \"str '" + <%=streamTerminator %> + "'\"");
        <%
    }else if(recordFormat.equals("FIXED")){
    	String recordLength = ElementParameterParser.getValue(node, "__RECORD_LENGTH__");
        %>
        bw_<%=cid %>.write(" \"fix " + <%=recordLength %> + "\"");
        <%
    }else if(recordFormat.equals("VARIABLE")){
    	String lengthFieldSize = ElementParameterParser.getValue(node, "__RECORD_LENGTH_FIELD_SIZE__");
        %>
        bw_<%=cid %>.write(" \"var " + <%=lengthFieldSize %> + "\"");
        <%
    }
    //record format end
    %>
    bw_<%=cid %>.write("\r\nBADFILE '" + badf_<%=cid %> + "'\r\nDISCARDFILE '" + dscf_<%=cid %> + "'\r\n");
    <%
	String preserveBlanks = ElementParameterParser.getValue(node, "__PRESERVE_BLANKS__");
	if(preserveBlanks.equals("true")){
        %>
        bw_<%=cid %>.write("PRESERVE BLANKS\r\n");
        <%
	}
	
	
	String inputINTOTABLEClause = ElementParameterParser.getValue(node, "__INPUT_INTO_TABLE_CLAUSE__");
	if(inputIntoTableClause.equals("true")) {
		String intoTableClause = ElementParameterParser.getValue(node, "__INTO_TABLE_CLAUSE__");
        %>
        bw_<%=cid %>.write(<%=intoTableClause %>);
        <%
	} else {
        if(data_action.equals("UPDATE")) {
            %>
            bw_<%=cid %>.write("INTO TABLE " + tableName_<%=cid %> + "\r\nINSERT\r\n");
            <%
        } else {
            %>
            bw_<%=cid %>.write("INTO TABLE " + tableName_<%=cid %> + "\r\n<%=data_action %>\r\n");
            <%
        }
		//field condition
		String useFieldCondition = ElementParameterParser.getValue(node, "__FIELD_CONDITION__");
		if(useFieldCondition.equals("true")){
			String fieldCondition = ElementParameterParser.getValue(node, "__FIELD_CONDITION_VALUE__");
			if(!fieldCondition.equals("") && !fieldCondition.equals("\"\"")){
                %>
                bw_<%=cid %>.write("WHEN " + <%=fieldCondition %> + "\r\n");
                <%
			}
		}
		
		//field terminator
		String fieldsTerminator = ElementParameterParser.getValue(node, "__FIELDS_TERMINATOR__");
		boolean hasFieldsTerminator = false;
		if(fieldsTerminator.equals("EOF") || fieldsTerminator.equals("WHITESPACE")){
			hasFieldsTerminator = true;
            %>
            bw_<%=cid %>.write("FIELDS TERMINATED BY <%=fieldsTerminator %>");
            <%
		}else if(fieldsTerminator.equals("OTHER")){
			hasFieldsTerminator = true;
			String terminatorValue = ElementParameterParser.getValue(node, "__TERMINATOR_VALUE__");
            %>
            bw_<%=cid %>.write("FIELDS TERMINATED BY \""+ <%=terminatorValue %> + "\"");
            <%
		}
		
		//field enclusure
		String useFieldEnclosure = ElementParameterParser.getValue(node, "__USE_FIELDS_ENCLOSURE__");
		if(useFieldEnclosure.equals("true")){
			if(hasFieldsTerminator){
                %>
                bw_<%=cid %>.write(" OPTIONALLY ENCLOSED BY ");
                <%
			}else{
                %>
                bw_<%=cid %>.write("FIELDS ENCLOSED BY ");
                <%
			}
			String left = ElementParameterParser.getValue(node, "__FIELDS_ENCLOSURE_LEFT__");
            %>
            bw_<%=cid %>.write("'" + <%=left %> + "'");
            <%
			String right = ElementParameterParser.getValue(node, "__FIELDS_ENCLOSURE_RIGHT__");
			if(!left.trim().equals(right.trim())){
                %>
                bw_<%=cid %>.write(" AND '" + <%=right %> + "'");
                <%
			}
            %>
            bw_<%=cid %>.write("\r\n");
            <%
		}else if(hasFieldsTerminator){
            %>
            bw_<%=cid %>.write("\r\n");
            <%
		}
		
		//trailing nullcols
		String trailingNullcols = ElementParameterParser.getValue(node, "__TRAILING_NULLCOLS__");
		if(trailingNullcols.equals("true")){
            %>
            bw_<%=cid %>.write("TRAILING NULLCOLS\r\n");
            <%
		}
        %>
        bw_<%=cid %>.write("<%=columns %>");
        <%
	}
    %>
    bw_<%=cid %>.close();
    <%
}
%>

String command_<%=cid %> = "sqlldr '" + username_<%=cid %> + "/" + password_<%=cid %> + "@" + serviceUrl_<%=cid %> + "' CONTROL='" + ctlf_<%=cid %> + "' LOG='" + logf_<%=cid %> + "'";

<%
if(data_action.equals("UPDATE")) {
    %>
    java.sql.Statement stmtCreateTmp_<%=cid%> = conn_<%=cid%>.createStatement();
    stmtCreateTmp_<%=cid%>.execute("<%=manager.getCreateTableSQL(stmtStructure)%>");
    stmtCreateTmp_<%=cid%>.close();
    final Process process_<%=cid %> = Runtime.getRuntime().exec(command_<%=cid %>);
    <%
} else {
    %>
		java.util.ArrayList<String> envParam_<%=cid%>=new java.util.ArrayList<String>();
		java.util.Map<String, String> systemEnvMap_<%=cid %> = System.getenv();
		for (java.util.Map.Entry<String, String> entry : systemEnvMap_<%=cid %>.entrySet())
		{
		   envParam_<%=cid%>.add(entry.getKey() + "=" + entry.getValue());
		}
<%
	String nlsLanguage = ElementParameterParser.getValue(node, "__NLS_LANGUAGE__");
	boolean setNLSTerritory = ElementParameterParser.getValue(node, "__SET_NLS_TERRITORY__").equals("true");
	String NLSTerritory = ElementParameterParser.getValue(node, "__NLS_TERRITORY__");
	List<Map<String, String>> nlsoptions = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__NLSOPTIONS__");
	if(!nlsLanguage.equals("DEFAULT")){
%>envParam_<%=cid%>.add("NLS_LANGUAGE=<%=nlsLanguage%>");
<%
	}
	if(setNLSTerritory){
		if(!NLSTerritory.equals("DEFAULT")){
%>envParam_<%=cid%>.add("NLS_TERRITORY=<%=NLSTerritory%>");
<%
		}
	}else{
    	for(java.util.Map<String, String> option : nlsoptions) {
    		String key = option.get("KEY");
        	String value = option.get("VALUE");
        	if(value != null && value.trim().length()>0){
%>
        envParam_<%=cid%>.add("<%=key%>=<%=value%>");
<%
    		}
    	}
    }
%>
    final Process process_<%=cid %> = Runtime.getRuntime().exec(command_<%=cid %>,envParam_<%=cid%>.toArray(new String[0]));
    <%
}
%> 

//System.out.println(command_<%=cid %>);

Thread normal_<%=cid %> = new Thread() {
	public void run() {
		try {
			java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(process_<%=cid %>.getInputStream()));
			String line = "";
			try {
				while((line = reader.readLine()) != null) {
			        <%
			        if (outputAction.equals("OUTPUT_TO_CONSOLE")) {
			            %>
				        System.out.println(line);
				        <%
			        } else if (outputAction.equals("RETRIEVE_OUTPUT")) {
			            %>
				        globalMap.put("<%=cid %>_OUTPUT",(String)globalMap.get("<%=cid %>_OUTPUT") + "\n" + line);
				        <%
			        }
			        %>
		        }
		    } finally {
		         reader.close();
		    }
	    }catch(java.io.IOException ioe) {
			ioe.printStackTrace();
		}
	}
};

normal_<%=cid %>.start();

Thread error_<%=cid %> = new Thread() {
    public void run() {
	   try {
		   java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(process_<%=cid %>.getErrorStream()));
		   String line = "";
		   try {
			   while((line = reader.readLine()) != null) {
			       <%
				   if (outputAction.equals("OUTPUT_TO_CONSOLE")) {
				       %>
					   System.err.println(line);
					   <%
				   } else if (outputAction.equals("RETRIEVE_OUTPUT")) {
				       %>
					   globalMap.put("<%=cid %>_OUTPUT",(String)globalMap.get("<%=cid %>_OUTPUT")+"\n"+line);
					   <%
				   }
			       %>
			   }
		    } finally {
			    reader.close();
		    }
	    } catch(java.io.IOException ioe) {
		   ioe.printStackTrace();
        }
	}
};

error_<%=cid %>.start();

process_<%=cid %>.waitFor();

int exitCode_<%=cid%> = process_<%=cid %>.exitValue();

normal_<%=cid %>.interrupt();

error_<%=cid %>.interrupt();
	
java.io.BufferedReader lr_<%=cid %> = new java.io.BufferedReader(new java.io.FileReader(logf_<%=cid %>));
int nb_line_data_<%=cid %> = 0;
int nb_line_bad_<%=cid %> = 0;
int nb_line_inserted_<%=cid %> = 0;

String tempLine_<%=cid %> = "";
while (!tempLine_<%=cid %>.contains("Total logical records read")) {
	tempLine_<%=cid %> = lr_<%=cid %>.readLine();
	if (tempLine_<%=cid %> == null) {
		break;
	}
}
if (tempLine_<%=cid %> != null) {
	nb_line_data_<%=cid %> = Integer.parseInt(tempLine_<%=cid %>.substring(tempLine_<%=cid %>.indexOf(":") + 1).trim());
}

tempLine_<%=cid %> = "";
while (!tempLine_<%=cid %>.contains("Total logical records rejected")) {
	tempLine_<%=cid %> = lr_<%=cid %>.readLine();
	if (tempLine_<%=cid %> == null) {
		break;
	}
}
if (tempLine_<%=cid %> != null) {
	nb_line_bad_<%=cid %> = Integer.parseInt(tempLine_<%=cid %>.substring(tempLine_<%=cid %>.indexOf(":") + 1).trim());
}

nb_line_inserted_<%=cid %> = nb_line_data_<%=cid %> - nb_line_bad_<%=cid %>;

globalMap.put("<%=cid %>_NB_LINE_DATA", nb_line_data_<%=cid %>);

globalMap.put("<%=cid %>_NB_LINE_BAD", nb_line_bad_<%=cid %>);

globalMap.put("<%=cid %>_NB_LINE_INSERTED", nb_line_data_<%=cid %> - nb_line_inserted_<%=cid %>);

globalMap.put("<%=cid %>_RETURN_CODE", exitCode_<%=cid%>);

