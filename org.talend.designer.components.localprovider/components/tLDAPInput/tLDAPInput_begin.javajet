<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn 
    org.talend.core.model.metadata.types.JavaTypesManager
    org.talend.core.model.metadata.types.JavaType
    org.talend.core.model.process.IConnection
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.process.IConnectionCategory
    org.talend.core.model.process.EConnectionType
    java.util.List
"
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	
	List<IMetadataTable> metadatas = node.getMetadataList();
	    if ((metadatas!=null)&&(metadatas.size()>0)) {
	        IMetadataTable metadata = metadatas.get(0);	        
	        if(metadata!=null) {

	List<IMetadataColumn> columnList = metadata.getListColumns();
	String cid = node.getUniqueName();
	String filter=ElementParameterParser.getValue(node, "__FILTER__");
	String separator=ElementParameterParser.getValue(node, "__MULTI_VALUE_SEPARATOR__");
	boolean dieOnError = ("true").equals(ElementParameterParser.getValue(node, "__DIE_ON_ERROR__"));	
	boolean paging =("true").equals(ElementParameterParser.getValue(node, "__ISPAGING__"));	
	String pageSize =ElementParameterParser.getValue(node, "__PAGESIZE__");
	String limit =ElementParameterParser.getValue(node, "__LIMIT__");
	String timeout =ElementParameterParser.getValue(node, "__TIMEOUT__");
	String baseDN=ElementParameterParser.getValue(node, "__BASEDN__");
	
	String connection = ElementParameterParser.getValue(node, "__CONNECTION__");
	String exConn= "conn_" + connection;
	String exConnBaseDN = "connBaseDN_" + connection;
	String useExistingConn = ElementParameterParser.getValue(node, "__USE_EXISTING_CONNECTION__");
	String protocol = "";
%>
	String baseDN_<%=cid%> = "";
<%
if(("false").equals(useExistingConn)){
	String host=ElementParameterParser.getValue(node, "__HOST__");
	String port=ElementParameterParser.getValue(node, "__PORT__");
	protocol=ElementParameterParser.getValue(node, "__PROTOCOL__");
	String advanced=ElementParameterParser.getValue(node, "__ADVANCEDCA__");
	String storepath=ElementParameterParser.getValue(node, "__STORECA__");
	String storepwd = ElementParameterParser.getValue(node, "__STORECAPWD__");
	boolean alwaysTrust = ("true").equals(ElementParameterParser.getValue(node, "__ALWAYS_TRUST__"));
	String referrals=ElementParameterParser.getValue(node, "__REFERRALS__");
	String aliases=ElementParameterParser.getValue(node, "__ALIASES__");
	String authen =ElementParameterParser.getValue(node, "__AUTHENTIFICATION__");
	String user =ElementParameterParser.getValue(node, "__USER__");
	String passwd =ElementParameterParser.getValue(node, "__PASS__");
%>
	java.util.Hashtable env_<%=cid%> = new java.util.Hashtable();
	env_<%=cid%>.put(javax.naming.Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.ldap.LdapCtxFactory");
    env_<%=cid%>.put(javax.naming.Context.SECURITY_AUTHENTICATION, "simple");// "none","simple","strong"
	env_<%=cid%>.put(javax.naming.Context.REFERRAL, "<%=referrals%>");
	env_<%=cid%>.put("java.naming.ldap.derefAliases","<%=aliases%>");
	env_<%=cid%>.put("java.naming.ldap.attributes.binary","objectGUID");
<%
	if(baseDN == null || baseDN.length()<=2){
%>
	env_<%=cid%>.put(javax.naming.Context.PROVIDER_URL, "ldap://"+<%=host%>+":"+<%=port%>);
<%
	}else{
%>
	env_<%=cid%>.put(javax.naming.Context.PROVIDER_URL, "ldap://"+<%=host%>+":"+<%=port%>);
<%
	}
    if(("true").equals(authen)){
%>
    env_<%=cid%>.put(javax.naming.Context.SECURITY_PRINCIPAL, <%=user%>);
    env_<%=cid%>.put(javax.naming.Context.SECURITY_CREDENTIALS, <%=passwd%>);
<%
    }
    if(("LDAPS").equals(protocol)){
%>
	env_<%=cid%>.put(javax.naming.Context.SECURITY_PROTOCOL, "ssl");
	env_<%=cid%>.put("java.naming.ldap.factory.socket", "talend.ssl.AdvancedSocketFactory");
<%
	}
	if(("LDAPS").equals(protocol) || ("TLS").equals(protocol)){
		if(("true").equals(advanced)){
			if(alwaysTrust) {
%>
	talend.ssl.AdvancedSocketFactory.alwaysTrust();
<%
			} else {
%>
	talend.ssl.AdvancedSocketFactory.setCertStorePath(<%=storepath%>);
<%
				if(storepwd !=null && storepwd.length() !=0 ){%>
	talend.ssl.AdvancedSocketFactory.setCertStorePassword(<%=storepwd %>);
<%
				}
			}
		}
    }
%>
    javax.naming.ldap.InitialLdapContext ctx_<%=cid%> = new javax.naming.ldap.InitialLdapContext(env_<%=cid%>, null);
<%
	if(("TLS").equals(protocol)){
%>
	javax.naming.ldap.StartTlsRequest tldsReq_<%=cid%> = new javax.naming.ldap.StartTlsRequest();
    javax.naming.ldap.StartTlsResponse tls_<%=cid%> =(javax.naming.ldap.StartTlsResponse)ctx_<%=cid%>.extendedOperation(tldsReq_<%=cid%>);
    javax.net.ssl.SSLSession session_<%=cid%> = tls_<%=cid%>.negotiate((javax.net.ssl.SSLSocketFactory)talend.ssl.AdvancedSocketFactory.getDefault());
<%
	}
}else{
	List<? extends INode> nodes = node.getProcess().getGraphicalNodes();
    for(INode targetNode : nodes){
    	if (targetNode.getUniqueName().equals(connection)) {
	      protocol = ElementParameterParser.getValue(targetNode, "__PROTOCOL__");
	    }
    }
%>
	javax.naming.ldap.InitialLdapContext ctx_<%=cid%> = (javax.naming.ldap.InitialLdapContext)globalMap.get("<%=exConn%>");
	baseDN_<%=cid%> = (String)globalMap.get("<%=exConnBaseDN%>");
<%
}
%>
	int <%=cid%>_NB_LINE = 0;
	
	javax.naming.directory.SearchControls searchCtls_<%=cid%> = new javax.naming.directory.SearchControls();
    searchCtls_<%=cid%>.setSearchScope(javax.naming.directory.SearchControls.SUBTREE_SCOPE);
    searchCtls_<%=cid%>.setReturningAttributes(new String[]{
<%
					for(IMetadataColumn column:columnList){		
%>
		"<%=column.getOriginalDbColumnName()%>",
<%
                	}
%>    
    });
    searchCtls_<%=cid%>.setTimeLimit(<%=timeout%>*1000);
    searchCtls_<%=cid%>.setCountLimit(<%=limit %>);
<%
				if(("false").equals(useExistingConn)){
					if(baseDN == null || baseDN.length()<=2){
%>
	//get basce dn
	javax.naming.directory.Attributes attrsNaming_<%=cid%> = ctx_<%=cid%>.getAttributes("",new String[] {"namingContexts"});
    javax.naming.directory.Attribute aNaming_<%=cid%> = attrsNaming_<%=cid%>.get("namingContexts");
    if(aNaming_<%=cid%> == null)
    {
        aNaming_<%=cid%> =attrsNaming_<%=cid%>.get("namingcontexts");
    }
    // String searchBase_<%=cid%> = (aNaming_<%=cid%>==null)|())?"":aNaming_<%=cid%>.get().toString();         
	String searchBase_<%=cid%> = ((aNaming_<%=cid%> == null) || ((aNaming_<%=cid%> != null)
                    && (aNaming_<%=cid%>.get().toString() != null)
                    && (aNaming_<%=cid%>.get().toString().length() > 0) && (Character
                    .isIdentifierIgnorable(aNaming_<%=cid%>.get().toString().charAt(0))))) ? ""
                    : aNaming_<%=cid%>.get().toString();
<%
					}else{
%>
		String searchBase_<%=cid%> = <%=baseDN%>;
<%
					}
				}else{
%>
					String searchBase_<%=cid%> = "";
<%
				}
%>
		baseDN_<%=cid%> = searchBase_<%=cid%>;
<%if(paging){%>
    // Set the page size and initialize the cookie that we pass back in subsequent pages
    int pageSize_<%=cid%> = <%=pageSize %>;
    byte[] cookie_<%=cid%> = null;
    // Request the paged results control
    javax.naming.ldap.Control[] ctls_<%=cid%> = new javax.naming.ldap.Control[] { new javax.naming.ldap.PagedResultsControl(pageSize_<%=cid%>, true) };
    ctx_<%=cid%>.setRequestControls(ctls_<%=cid%>);
    
do {
<%}%>

    javax.naming.NamingEnumeration answer_<%=cid%> = ctx_<%=cid%>.search(searchBase_<%=cid%>, <%=filter%>, searchCtls_<%=cid%>);
    while (answer_<%=cid%> .hasMoreElements()) {//a
<%
	List< ? extends IConnection> conns = node.getOutgoingConnections(EConnectionType.FLOW_MAIN);
	if(conns.size() == 0){
		conns = node.getOutgoingConnections(EConnectionType.FLOW_MERGE);
	}
    String rejectConnName = "";
    List<? extends IConnection> rejectConns = node.getOutgoingConnections("REJECT");
    if(rejectConns != null && rejectConns.size() > 0) {
        IConnection rejectConn = rejectConns.get(0);
        rejectConnName = rejectConn.getName();
    }
    List<IMetadataColumn> rejectColumnList = null;
    IMetadataTable metadataTable = node.getMetadataFromConnector("REJECT");
    if(metadataTable != null) {
        rejectColumnList = metadataTable.getListColumns();      
    }
    
    String firstConnName = "";
	if (conns!=null) {
        if (conns.size()>0) {
        	for (int i=0;i<conns.size();i++) {
        		IConnection connTemp = conns.get(i);
        		if(i==0){
        			firstConnName = connTemp.getName();
        		}
        		if (connTemp.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
%>
    		<%=connTemp.getName() %> = null;			
<%
				}
			}
		}
	}
%>
    	<%=cid%>_NB_LINE++;
    	javax.naming.directory.Attributes attrs_<%=cid%> = null;
<%
	if(firstConnName.length()>0){
%>
		<%=firstConnName %> = new <%=firstConnName %>Struct(); 
	try{ 
<%
	}
%>

            javax.naming.directory.SearchResult sr_<%=cid%>  = (javax.naming.directory.SearchResult) answer_<%=cid%>.next();
    		globalMap.put("<%=cid%>_RESULT_NAME",sr_<%=cid%>.getName());
            attrs_<%=cid%> = sr_<%=cid%>.getAttributes();
     		// for output
<%
            if (conns!=null) {//1
                if (conns.size()>0) {//2
                    IConnection conn = conns.get(0); //the first connection
                    firstConnName = conn.getName();         
                    if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {//3
                        %>          
        if (attrs_<%=cid%> != null) {//b
<%
					for(IMetadataColumn column:columnList){//5		
						JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
						if(javaType == JavaTypesManager.BYTE_ARRAY){
%>
							<%=conn.getName() %>.<%=column.getLabel() %> = (byte[])attrs_<%=cid%>.get("<%=column.getOriginalDbColumnName()%>").get();
<%
						}else{
							if("dn".equals(column.getLabel().toLowerCase())){
%>
								<%=conn.getName()%>.<%=column.getLabel()%> = ("".equals(sr_<%=cid%>.getName())?sr_<%=cid%>.getName():(sr_<%=cid%>.getName()+ ",")) + baseDN_<%=cid%>;
<%
							}else{
%>
			javax.naming.directory.Attribute attr_<%=column.getLabel()%>_<%=cid%> = attrs_<%=cid%>.get("<%=column.getOriginalDbColumnName()%>");
			if(attr_<%=column.getLabel()%>_<%=cid%> != null){
    			StringBuilder attrStr_<%=cid%> = new StringBuilder();
    			for (javax.naming.NamingEnumeration e_<%=cid%> = attr_<%=column.getLabel()%>_<%=cid%>.getAll(); e_<%=cid%>.hasMore();){
    				if(attrStr_<%=cid%>.length()>0){
    					attrStr_<%=cid%>.append(<%=separator%>);
    				}
					<%if("userpassword".equals(column.getOriginalDbColumnName().toLowerCase()) && "LDAP".equals(protocol)){%>
	    				if(attrs_<%=cid%>.get("userPassword") !=null){
	    					byte[] b_pwd_<%=cid%>  =(byte[])e_<%=cid%>.next();
							attrStr_<%=cid%>.append(new String(b_pwd_<%=cid%>,defaultCharset));
		    			}
	    			<%}else{%>
	    					attrStr_<%=cid%>.append(e_<%=cid%>.next().toString());
	    			<%}%>
    			}
    			<%=conn.getName() %>.<%=column.getLabel() %> = attrStr_<%=cid%>.toString();
			} else {
				<%=conn.getName() %>.<%=column.getLabel() %> = null;
			}
			
<%
							}
						}
                	}//5
%>
		}//b
	} catch (Exception e) {

<%
        if (dieOnError) {
%>
        throw(e);
<%
        } else {
            if(!("").equals(rejectConnName)&&!rejectConnName.equals(firstConnName)&&rejectColumnList != null && rejectColumnList.size() > 0) {
%>                    
        <%=rejectConnName %> = new <%=rejectConnName %>Struct();
<%
                for(IMetadataColumn column : metadata.getListColumns()) {
%>
        <%=rejectConnName%>.<%=column.getLabel()%> = <%=firstConnName%>.<%=column.getLabel()%>;
<%
                }
%>
                <%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
                <%=firstConnName %> = null;
<%
            } else if(("").equals(rejectConnName)){
%>
                System.err.println(e.getMessage());
                <%=firstConnName %> = null;
<%
            } else if(rejectConnName.equals(firstConnName)){
%>
            	<%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
<%
			}
        }
%>
    }
<%
        }//3
    }//2
    
}//1

%>
///////////////////////////////////        
<%
  }
}  
 %>
