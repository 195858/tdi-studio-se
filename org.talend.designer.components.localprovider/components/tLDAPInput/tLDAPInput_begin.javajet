<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn 
    org.talend.core.model.process.IConnection
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.process.IConnectionCategory
    java.util.List
"
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	
	List<IMetadataTable> metadatas = node.getMetadataList();
	    if ((metadatas!=null)&&(metadatas.size()>0)) {
	        IMetadataTable metadata = metadatas.get(0);	        
	        if(metadata!=null) {

	List<IMetadataColumn> columnList = metadata.getListColumns();
	String cid = node.getUniqueName();
	String host=ElementParameterParser.getValue(node, "__HOST__");
	String port=ElementParameterParser.getValue(node, "__PORT__");
	String baseDN=ElementParameterParser.getValue(node, "__BASEDN__");
	String protocol=ElementParameterParser.getValue(node, "__PROTOCOL__");
	String filter=ElementParameterParser.getValue(node, "__FILTER__");
	String separator=ElementParameterParser.getValue(node, "__MULTI_VALUE_SEPARATOR__");
	String advanced=ElementParameterParser.getValue(node, "__ADVANCEDCA__");
	String storepath=ElementParameterParser.getValue(node, "__STORECA__");
	String referrals=ElementParameterParser.getValue(node, "__REFERRALS__");
	String aliases=ElementParameterParser.getValue(node, "__ALIASES__");
	String limit =ElementParameterParser.getValue(node, "__LIMIT__");
	String timeout =ElementParameterParser.getValue(node, "__TIMEOUT__");
	String authen =ElementParameterParser.getValue(node, "__AUTHENTIFICATION__");
	String user =ElementParameterParser.getValue(node, "__USER__");
	String passwd =ElementParameterParser.getValue(node, "__PASSWD__");
%>
	int <%=cid%>_NB_LINE = 0;
	java.util.Hashtable env_<%=cid%> = new java.util.Hashtable();
	env_<%=cid%>.put(javax.naming.Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.ldap.LdapCtxFactory");
    env_<%=cid%>.put(javax.naming.Context.SECURITY_AUTHENTICATION, "simple");// "none","simple","strong"
	env_<%=cid%>.put(javax.naming.Context.REFERRAL, "<%=referrals%>");
	env_<%=cid%>.put("java.naming.ldap.derefAliases","<%=aliases%>");
<%
	if(baseDN == null || baseDN.length()<=2){
%>
	env_<%=cid%>.put(javax.naming.Context.PROVIDER_URL, "ldap://"+<%=host%>+":"+<%=port%>);
<%
	}else{
%>
	env_<%=cid%>.put(javax.naming.Context.PROVIDER_URL, "ldap://"+<%=host%>+":"+<%=port%>+"/"+<%=baseDN%>);
<%
	}
    if(authen.equals("true")){
%>
    env_<%=cid%>.put(javax.naming.Context.SECURITY_PRINCIPAL, <%=user%>);
    env_<%=cid%>.put(javax.naming.Context.SECURITY_CREDENTIALS, <%=passwd%>);
<%
    }
    if(protocol.equals("LDAPS")){
%>
	env_<%=cid%>.put(javax.naming.Context.SECURITY_PROTOCOL, "ssl");
	env_<%=cid%>.put("java.naming.ldap.factory.socket", "talend.ssl.AdvancedSocketFactory");
<%
		if(advanced.equals("true")){
%>
	talend.ssl.AdvancedSocketFactory.setCertStorePath(<%=storepath%>);
<%
		}
    }else if(protocol.equals("TLS")){
    	if(advanced.equals("true")){
%>
	talend.ssl.AdvancedSocketFactory.setCertStorePath(<%=storepath%>);
<%
		}
    }
%>
    javax.naming.ldap.InitialLdapContext ctx_<%=cid%> = new javax.naming.ldap.InitialLdapContext(env_<%=cid%>, null);
<%
	if(protocol.equals("TLS")){
%>
	javax.naming.ldap.StartTlsRequest tldsReq_<%=cid%> = new javax.naming.ldap.StartTlsRequest();
    javax.naming.ldap.StartTlsResponse tls_<%=cid%> =(javax.naming.ldap.StartTlsResponse)ctx_<%=cid%>.extendedOperation(tldsReq_<%=cid%>);
    javax.net.ssl.SSLSession session_<%=cid%> = tls_<%=cid%>.negotiate((javax.net.ssl.SSLSocketFactory)talend.ssl.AdvancedSocketFactory.getDefault());
<%
	}
%>
	javax.naming.directory.SearchControls searchCtls_<%=cid%> = new javax.naming.directory.SearchControls();
    searchCtls_<%=cid%>.setSearchScope(javax.naming.directory.SearchControls.SUBTREE_SCOPE);
    searchCtls_<%=cid%>.setReturningAttributes(new String[]{
<%
					for(IMetadataColumn column:columnList){		
%>
		"<%=column.getLabel()%>",
<%
                	}
%>    
    });
    searchCtls_<%=cid%>.setTimeLimit(<%=timeout%>*1000);
<%
					if(baseDN == null || baseDN.length()<=2){
%>
	//get basce dn
	javax.naming.directory.Attributes attrsNaming_<%=cid%> = ctx_<%=cid%>.getAttributes("",new String[] {"namingContexts"});
    javax.naming.directory.Attribute aNaming_<%=cid%> = attrsNaming_<%=cid%>.get("namingContexts");
    if(aNaming_<%=cid%> == null)
    {
        aNaming_<%=cid%> =attrsNaming_<%=cid%>.get("namingcontexts");
    }
    // String searchBase = (aNaming_<%=cid%>==null)|())?"":aNaming_<%=cid%>.get().toString();         
	String searchBase = ((aNaming_<%=cid%> == null) || ((aNaming_<%=cid%> != null)
                    && (aNaming_<%=cid%>.get().toString() != null)
                    && (aNaming_<%=cid%>.get().toString().length() > 0) && (Character
                    .isIdentifierIgnorable(aNaming_<%=cid%>.get().toString().charAt(0))))) ? ""
                    : aNaming_<%=cid%>.get().toString();
	
    javax.naming.NamingEnumeration answer_<%=cid%> = ctx_<%=cid%>.search(searchBase, <%=filter%>, searchCtls_<%=cid%>);
<%
					}else{
%>
	javax.naming.NamingEnumeration answer_<%=cid%> = ctx_<%=cid%>.search("", <%=filter%>, searchCtls_<%=cid%>);
<%
					}
%>
	int entryCount_<%=cid%> = 0;
    while (answer_<%=cid%> .hasMoreElements()) {//a
    	if(entryCount_<%=cid%> >= <%=limit%>){
    		break;
    	}
    	<%=cid%>_NB_LINE++;
        javax.naming.directory.SearchResult sr_<%=cid%>  = (javax.naming.directory.SearchResult) answer_<%=cid%>.next();
		globalMap.put("<%=cid%>_RESULT_NAME",sr_<%=cid%>.getName());
        javax.naming.directory.Attributes attrs_<%=cid%> = sr_<%=cid%>.getAttributes();

     // for output
        <%
            List< ? extends IConnection> conns = node.getOutgoingSortedConnections();
            String firstConnName = "";
            if (conns!=null) {//1
                if (conns.size()>0) {//2
                
                    IConnection conn = conns.get(0); //the first connection
                    firstConnName = conn.getName();         
                    if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {//3

                        %>
                        
        if (attrs_<%=cid%> != null) {//b
        	entryCount_<%=cid%>++;
<%
					for(IMetadataColumn column:columnList){//5		
%>        	
			javax.naming.directory.Attribute attr_<%=column.getLabel()%>_<%=cid%> = attrs_<%=cid%>.get("<%=column.getLabel()%>");
			if(attr_<%=column.getLabel()%>_<%=cid%> != null)
			{
    			StringBuffer attrStr_<%=cid%> = new StringBuffer();
    			for (javax.naming.NamingEnumeration e_<%=cid%> = attr_<%=column.getLabel()%>_<%=cid%>.getAll(); e_<%=cid%>.hasMore();){
    				if(attrStr_<%=cid%>.length()>0){
    					attrStr_<%=cid%>.append(<%=separator%>);
    				}
    				attrStr_<%=cid%>.append(e_<%=cid%>.next().toString());
    			}
    			<%=conn.getName() %>.<%=column.getLabel() %> = attrStr_<%=cid%>.toString();
			} else {
				<%=conn.getName() %>.<%=column.getLabel() %> = null;
			}
			
<%
                	}//5

        }//3
        
        
        if (conns.size()>1) {
            for (int i=1;i<conns.size();i++) {
                IConnection conn2 = conns.get(i);
                if ((conn2.getName().compareTo(firstConnName)!=0)&&(conn2.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA))) {
                    for (IMetadataColumn column: metadata.getListColumns()) {%>
                <%=conn2.getName() %>.<%=column.getLabel() %> = <%=firstConnName %>.<%=column.getLabel() %>;
                 <%
                    }
                }
            }
        }
        
        
    }//2
    
}//1

%>
///////////////////////////////////        
<%
  }
}  
 %>