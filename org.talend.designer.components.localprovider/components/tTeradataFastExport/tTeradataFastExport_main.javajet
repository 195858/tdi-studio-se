<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.metadata.MappingTypeRetriever
    org.talend.core.model.metadata.MetadataTalendType
    java.util.List
    java.lang.StringBuilder
    java.util.Map
" 
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

String host = ElementParameterParser.getValue(node, "__HOST__");
String dbname= ElementParameterParser.getValue(node, "__DBNAME__");
String dbuser= ElementParameterParser.getValue(node, "__USER__");
String dbpwd= ElementParameterParser.getValue(node, "__PASS__");
String table= ElementParameterParser.getValue(node, "__TABLE__");
String logDB = ElementParameterParser.getValue(node, "__LOG_DB__");
String logTable = ElementParameterParser.getValue(node, "__LOG_TABLE__");

boolean needHost = ("".equals(host) || "\"\"".equals(host)) ? false : true;
logDB = ("".equals(logDB) || "\"\"".equals(logDB)) ? dbname : logDB;
logTable = ("".equals(logTable) || "\"\"".equals(logTable)) ? table + "+\"_lt\"" : logTable;

boolean useQuery = "true".equals(ElementParameterParser.getValue(node, "__USE_QUERY__"));
String query = ElementParameterParser.getValue(node, "__QUERY__"); 
query = query.replaceAll("\n"," ").replaceAll("\r"," ");

String dieOnErrorStr = ElementParameterParser.getValue(node, "__DIE_ON_ERROR__");
boolean dieOnError = (dieOnErrorStr!=null&&!("").equals(dieOnErrorStr))?("true").equals(dieOnErrorStr):false;

String execution= ElementParameterParser.getValue(node, "__EXECUTION__");
String scriptPath= ElementParameterParser.getValue(node, "__SCRIPT_PATH__");
String exportedFile= ElementParameterParser.getValue(node, "__EXPORTED_FILE__");
String separator= ElementParameterParser.getValue(node, "__FIELD_SEPARATOR__");
String errorFile= ElementParameterParser.getValue(node, "__ERROR_FILE__");

//windows line separator as default
String lineSeparator = "\\r\\n";

if(!scriptPath.endsWith("/\"")){
	scriptPath = scriptPath+	"+\"/\"";
}
if(exportedFile.indexOf("/") !=0 && ("Windows").equals(execution)){
	exportedFile = exportedFile.replaceAll("/", "\\\\\\\\");
} else {
	//Unix line separator
	lineSeparator = "\\n";
}

String dbmsId = "teradata_id";

List<IMetadataColumn> columnList = null;
List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
	IMetadataTable metadata = metadatas.get(0);
	if (metadata!=null) {
		columnList = metadata.getListColumns();
	}
}
%>
try {
	String tableFullName_<%=cid%> = <%=dbname%> + "." + <%=table%>;
<%
	if(("Windows").equals(execution)){
%>
	java.io.FileWriter fw_<%=cid %> = new java.io.FileWriter(<%=scriptPath%>+<%=table%>+".script");
<%
	}else{
%>
	java.io.FileWriter fw_<%=cid %> = new java.io.FileWriter(<%=scriptPath%>+<%=table%>+".scr");
<%
	}
%>
	
	<%//build script---------------------------------------------------------%>
	
	StringBuilder script_<%=cid%> = new StringBuilder();
	fw_<%=cid %>.write(".LOGTABLE "+<%=logDB%>+"."+<%=logTable%>+";" + "<%=lineSeparator%>");
	fw_<%=cid %>.write(".LOGON "+<%if(needHost) {%><%=host%>+"/"<%} else {%> "" <%}%>+<%=dbuser%>+","+<%=dbpwd%>+";"+ "<%=lineSeparator%>");
	
	<%//Layout---------------------------------------------------------------%>
	fw_<%=cid %>.write(".BEGIN EXPORT SESSIONS 8;"+"<%=lineSeparator%>");
	<%if(!useQuery) {%>
		fw_<%=cid %>.write("SELECT "+"<%=lineSeparator%>");
		<%
		if(columnList!=null){
			int counter = 1;
			for(IMetadataColumn column:columnList){	
				if( columnList.size() != counter){	%>
				fw_<%=cid %>.write("cast( <%=column.getOriginalDbColumnName()%> as CHAR(<%=column.getLength()%>))<%if(separator.length()>0 && !"\"\"".equals(separator)){%>||'"+<%=separator%>+"'||<%}else{%>,<%}%>"+"<%=lineSeparator%>");
			<%
				} else {
			%>
				fw_<%=cid %>.write("cast( <%=column.getOriginalDbColumnName()%> as CHAR(<%=column.getLength()%>))"+"<%=lineSeparator%>");
			<% } 
				counter++;
			}
		}
		%>
	
		fw_<%=cid %>.write("FROM "+ <%=dbname%> + "." + <%=table%>+";"+"<%=lineSeparator%>");
	<%} else {%>
		fw_<%=cid %>.write(<%=query%> +";"+"<%=lineSeparator%>");
	<%}%>
	
	<%//Export file----------------------------------------------------------%>
	fw_<%=cid %>.write(".EXPORT OUTFILE \""+<%=exportedFile%>+".data\" FORMAT TEXT mode record;"+"<%=lineSeparator%>");
	fw_<%=cid %>.write(".END EXPORT;"+"<%=lineSeparator%>");
	fw_<%=cid %>.write(".LOGOFF;"+"<%=lineSeparator%>");
	
	<%//write script to file-------------------------------------------------%>
	fw_<%=cid %>.close();
	
	<%//run fexp command----------------------------------------------------%>
	<%
	if("Windows".equals(execution)){
	%>
	String[] sb_<%=cid%> = {"cmd","/c","fexp < \""+<%=scriptPath%>+<%=table%>+".script\"<%if(!dieOnError) {%> > \""+<%=errorFile%>+"\"<%}%> 2>&1"};
	<%}else{%>
	String[] sb_<%=cid%> = {"sh","-c","fexp < "+<%=scriptPath%>+<%=table%>+".scr"+"<%if(!dieOnError) {%> > \""+<%=errorFile%>+"\"<%}%> 2>&1"};
	<%}%>
	final Process process_<%=cid %> = Runtime.getRuntime().exec(sb_<%=cid%>); 
	<%if(dieOnError) {%>
	final String returnCodePrefix<%=cid%> = "Highest return code encountered = '";
	final String returnInfoBeginMark<%=cid%> = "================================";
	globalMap.put("hasError<%=cid%>", null);
	globalMap.put("hasCommonError<%=cid%>", null);
	<%}%>
	Thread normal_<%=cid %> = new Thread() {
	    public void run() {
	    	try {
	    		java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(process_<%=cid %>.getInputStream()));
	    		String line = "";
	    		<%if(dieOnError) {%>
	    		int lineNum = 0;
	    		<%}%>
	    		try {
	    			while(true) {
	    				if((line = reader.readLine())!=null){
	    					<%if(dieOnError) {%>
	    					if((++lineNum) == 1 && !line.contains(returnInfoBeginMark<%=cid%>)) {
	    						globalMap.put("hasError<%=cid%>", true);
	    						break;
	    					}
	    					int index = line.indexOf(returnCodePrefix<%=cid%>);
							if(index!=-1) {
								String returnCode = line.substring(index, index+2);
								//Teradata errorCode : 08 or 12 
								if("08 12".indexOf(returnCode)!=-1) {
									globalMap.put("hasError<%=cid%>", true);
									break;
								}
							}
							<%}%>
	    			   		System.out.println(line);
	    			   	} else {
	    			   		<%if(dieOnError) {%>
	    			   		globalMap.put("hasError<%=cid%>", false);
	    			   		<%}%>
	    			   		break;
	    			   	}
	    	        }
	    	    } finally {
	    	         reader.close();
	    	    }
	        }catch(java.io.IOException ioe) {
	    		ioe.printStackTrace();
	    	}
	    }
	};
	normal_<%=cid %>.start();
	
	Thread error_<%=cid %> = new Thread() {
		public void run() {
			try {
				java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(process_<%=cid %>.getErrorStream()));
				String line = "";
				try {
					while(true) {
						if((line = reader.readLine()) != null) {
							System.err.println(line);
							<%if(dieOnError) {%>
							globalMap.put("hasCommonError<%=cid%>", true);
							break;
							<%}%>
						} else {
							<%if(dieOnError) {%>
							globalMap.put("hasCommonError<%=cid%>", false);
							<%}%>
							break;
						}
					}
				} finally {
					reader.close();
				}
			} catch(java.io.IOException ioe) {
			   ioe.printStackTrace();
			}
		}
	};
	error_<%=cid %>.start();
	
	process_<%=cid %>.waitFor();
	
	normal_<%=cid %>.interrupt();
	
	error_<%=cid %>.interrupt();
	
	<%if(dieOnError) {%>
	while(globalMap.get("hasError<%=cid%>") == null && globalMap.get("hasCommonError<%=cid%>") == null) {
		try {
			Thread.sleep(1);
		} catch(InterruptedException e) {
			//do nothing
		}
	}
	
	if((Boolean)globalMap.get("hasError<%=cid%>") || (Boolean)globalMap.get("hasCommonError<%=cid%>")) {
		throw new RuntimeException("some error happen on fastexport");
	}
	<%}%>
	
} catch(Exception e) {
	<% if(dieOnError) {%>
		throw(e);
	<% } else {%>
		System.err.println(e.getMessage());
	<% } %>		
}
