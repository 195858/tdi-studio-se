<%@ jet
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.process.ElementParameterParser
    java.util.List
    java.util.ArrayList
    java.util.LinkedList
    java.util.Map
    java.util.HashMap
  	org.talend.core.model.process.IConnection    
	org.talend.core.model.process.IConnectionCategory
    org.talend.core.model.metadata.types.JavaTypesManager
	org.talend.core.model.metadata.types.JavaType
	org.talend.core.model.utils.NodeUtil
	org.talend.core.model.process.EConnectionType
"
skeleton="tFileOutputXMLMultiSchema_java.skeleton"
%>

<%
//XMLTool
class XMLTool{
	public boolean advancedSeparator = false;
	public String thousandsSeparator = null;
 	public String decimalSeparator =null;
	public String connName = null;
	public String cid = null;
	
	public void getValue(XMLNode node){
%>
		valueMap_<%=cid%>.get("<%=node.relatedColumn.getLabel()%>")
<%
	}

	public void getValue(IMetadataColumn column){
		JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
		String defaultValue=column.getDefault();
		boolean isNotSetDefault = false;
		if(defaultValue!=null){
			isNotSetDefault = defaultValue.length()==0;
		}else{
			isNotSetDefault=true;
		}
%>
	(
<%
		if(column.isNullable()){
%>
		<%=connName%>.<%=column.getLabel()%> != null?
<%
		}
		
        if(advancedSeparator && JavaTypesManager.isNumberType(javaType, column.isNullable())) { 
        	if(javaType == JavaTypesManager.BIGDECIMAL) {
%>
    		FormatterUtils.format_Number(String.valueOf(<%=column.getPrecision() == null? connName + "." + column.getLabel() : connName + "." + column.getLabel() + ".setScale(" + column.getPrecision() + ", java.math.RoundingMode.HALF_UP)" %>), <%= thousandsSeparator%>,<%=decimalSeparator %>)					
<%
    		} else {
%>
    		FormatterUtils.format_Number(String.valueOf(<%=connName%>.<%=column.getLabel()%>), <%= thousandsSeparator %>,<%=decimalSeparator %>)						
<%
	   		}
        } else if(JavaTypesManager.isJavaPrimitiveType( column.getTalendType(), column.isNullable())){
%>
            String.valueOf(<%=connName%>.<%=column.getLabel()%>)
<%
        }else if(javaType == JavaTypesManager.DATE){
            if( column.getPattern() != null && column.getPattern().trim().length() != 0 ){
%>
            FormatterUtils.format_Date(<%=connName%>.<%=column.getLabel()%>,<%=column.getPattern()%>)
<%
            }else{
%>
			<%=connName%>.<%=column.getLabel()%>
<%
           }
        }else if (javaType == JavaTypesManager.BIGDECIMAL) {
%>
			String.valueOf(<%=column.getPrecision() == null? connName + "." + column.getLabel() : connName + "." + column.getLabel() + ".setScale(" + column.getPrecision() + ", java.math.RoundingMode.HALF_UP)" %>)
<%
        }else{
%>
            <%=connName%>.<%=column.getLabel()%>.toString()
<%
		}
		if(column.isNullable()){
			%>:<% 
			if(isNotSetDefault == false){
				%><%=column.getDefault()%><%
			}else{
				%>null<%
			}
		}
%>
		)
<%
	}
}

// ------------------- *** Dom4j generation mode start *** ------------------- //
class GenerateToolByDom4j{
	String cid = null;
	boolean allowEmpty = false;
	boolean outputAsXSD = false;
	XMLTool tool = null;
	public void generateCode(XMLNode node, String currEleName, String parentName){
		if(node.type.equals("ELEMENT")){
			createElement(currEleName,node,parentName);
			setText(currEleName,node);
			for(XMLNode ns:node.namespaces){
				addNameSpace(currEleName,ns);
			}
			for(XMLNode attri:node.attributes){
				addAttribute(currEleName,attri);
			}
			if(node.name.indexOf(":")>0){
%>
			<%=currEleName%>_<%=cid%>.setName("<%=node.name%>");
<%
			}
			int index = 0;
			for(XMLNode child:node.elements){
				if(0==(child.special & 1)){
					generateCode(child,currEleName+"_"+index++,currEleName);
				}
			}
			if(node.relatedColumn != null && (node.special & 2)==0 && (node.special & 1)==0){
				if(!outputAsXSD && !allowEmpty){
%>
			if (<%=currEleName%>_<%=cid%>.content().size() == 0 
				&& <%=currEleName%>_<%=cid%>.attributes().size() == 0 
				&& <%=currEleName%>_<%=cid%>.declaredNamespaces().size() == 0) {
                <%=parentName%>_<%=cid%>.remove(<%=currEleName%>_<%=cid%>);
            }			
<%
				}
			}
		}
	}	
	private void createElement(String currEleName, XMLNode node, String parentName){
		int index = node.name.indexOf(":");
		if(index>0 && node.parent!=null){
%>
		org.dom4j.Element <%=currEleName%>_<%=cid%>;
		if (<%=parentName%>_<%=cid%>.getNamespaceForPrefix("<%=node.name.substring(0,index)%>") == null) {
            <%=currEleName%>_<%=cid%> = <%=parentName%>_<%=cid%>.addElement("<%=node.name.substring(index+1)%>");
        } else {
        	<%=currEleName%>_<%=cid%> = <%=parentName%>_<%=cid%>.addElement("<%=node.name%>");
        }
<%
		}else{
%>
		org.dom4j.Element <%=currEleName%>_<%=cid%> = <%=parentName%>_<%=cid%>.addElement("<%=node.name%>");
<%
		}
		if(0!=(node.special & 2)){
%>
		subTreeRootParent_<%=cid%> = <%=currEleName%>_<%=cid%>;
<%
		}
	}
	private void setText(String currEleName, XMLNode node){
		if(node.relatedColumn!=null){
			JavaType javaType = JavaTypesManager.getJavaTypeFromId(node.relatedColumn.getTalendType());
			if(javaType == JavaTypesManager.OBJECT){
%>
		if(<%tool.getValue(node); %>!=null){
			nestXMLTool_<%=cid%> .parseAndAdd(<%=currEleName%>_<%=cid%>,<%tool.getValue(node);%>);
		}
<%
				if(outputAsXSD){
%>
		else{
			nestXMLTool_<%=cid%> .parseAndAdd(<%=currEleName%>_<%=cid%>,"");
			<%=currEleName%>_<%=cid%>.addAttribute("xsi:nil","true");
		}
<%
				}
			}else{
%>
		if(<%tool.getValue(node);%>!=null){
			nestXMLTool_<%=cid%> .setText(<%=currEleName%>_<%=cid%>,<%tool.getValue(node);%>);
		}
<%
				if(outputAsXSD){
%>
		else{
			<%=currEleName%>_<%=cid%>.setText("");
			<%=currEleName%>_<%=cid%>.addAttribute("xsi:nil","true");
		}
<%
				}
			}
		}
	}
	private void addAttribute(String currEleName, XMLNode node){
		if(node.relatedColumn!=null){
%>
		if(<%tool.getValue(node);%>!=null){
			<%=currEleName%>_<%=cid%>.addAttribute("<%=node.path%>",<%tool.getValue(node);%>);
		}
<%
		}
	}
	private void addNameSpace(String currEleName, XMLNode node){
		if(node.relatedColumn!=null){
%>
		if(<%tool.getValue(node);%>!=null){
			<%=currEleName%>_<%=cid%>.addNamespace("<%=node.path%>",TalendString.replaceSpecialCharForXML(<%tool.getValue(node);%>));
<%
			if(node.path ==null || node.path.length()==0){
%>
        	<%=currEleName%>_<%=cid%>.setQName(org.dom4j.DocumentHelper.createQName(<%=currEleName%>_<%=cid%>.getName(),
        	org.dom4j.DocumentHelper.createNamespace("",TalendString.replaceSpecialCharForXML(<%tool.getValue(node);%>))));
<%
			}
%>
		}
<%
		}
	}
}
// ------------------- *** Dom4j generation mode end *** ------------------- //

// ------------------- *** Common code start *** ------------------- //
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();
String cid_original = cid;
cid = cid_original.replace("tFileOutputXMLMultiSchema","tOXMLMS");

String incomingName = (String)codeGenArgument.getIncomingName();

List<IMetadataTable> metadatas = NodeUtil.getIncomingMetadataTable(node, IConnectionCategory.FLOW);

if ((metadatas!=null)&&(metadatas.size()>0)) {
    	List< ? extends IConnection> incomingConns = node.getIncomingConnections();
    	
  		//Notice here: only for the code viewer, because when click the tUnite component, it doesn't know which is the right input connection. 
    	if (incomingName == null && incomingConns.size() > 0) 
    	{ 
    	   incomingName = incomingConns.get(0).getName(); 
    	}    	 	
    	if(incomingConns!=null && incomingConns.size()>0){
    		//the first connection name
    		String firstConnName=incomingConns.get(0).getUniqueName();
    	
	    	IConnection incomingConn = null;
	    	INode preNode = null;
	    	List<IMetadataTable> preMetadatas = null;
	    	IMetadataTable preMetadata = null;
	    	String sourceName=null;
	    	for (IConnection conn : incomingConns) {
	    		if ( conn.getLineStyle().equals(EConnectionType.FLOW_MERGE) && conn.getName().equals(incomingName)) {
					
					incomingConn = conn;
					preNode = incomingConn.getSource();
					preMetadatas = preNode.getMetadataList();
					preMetadata = preMetadatas.get(0);
					sourceName = incomingConn.getUniqueName();
	    		    break;
	    		}
	    	}
	    	
    		if(preMetadata!=null){
    		
            	List<Map<String, String>> rootTable =
                	(List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__ROOT__");
                List<Map<String, String>> groupTable =
                	(List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__GROUP__");
                List<Map<String, String>> loopTable =
                	(List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__LOOP__");
                
                String allowEmpty = ElementParameterParser.getValue(node, "__CREATE_EMPTY_ELEMENT__");
                String encoding = ElementParameterParser.getValue(node, "__ENCODING__");
                
                String advancedSeparatorStr = ElementParameterParser.getValue(node, "__ADVANCED_SEPARATOR__");
        		boolean advancedSeparator = (advancedSeparatorStr!=null&&!advancedSeparatorStr.equals(""))?advancedSeparatorStr.equals("true"):false;
        		String thousandsSeparator = ElementParameterParser.getValueWithJavaType(node, "__THOUSANDS_SEPARATOR__", JavaTypesManager.CHARACTER);
        		String decimalSeparator = ElementParameterParser.getValueWithJavaType(node, "__DECIMAL_SEPARATOR__", JavaTypesManager.CHARACTER); 
        		
        		// init tool
                XMLTool tool = new XMLTool();
                tool.connName = incomingConn.getName();
                tool.advancedSeparator=advancedSeparator;
                tool.thousandsSeparator=thousandsSeparator;
                tool.decimalSeparator=decimalSeparator;
                tool.cid=cid;
                
                // change tables to a tree 
                List<List<Map<String, String>>> tables = getTables(rootTable, groupTable, loopTable, sourceName);
				Object[] treeObjs = getTree(tables.get(0), tables.get(1), tables.get(2), preMetadata.getListColumns());
				
            	List<XMLNode> mainList = (ArrayList<XMLNode>)treeObjs[0];
                List<XMLNode> groupList = (ArrayList<XMLNode>)treeObjs[1];
                XMLNode root = mainList.get(0);                
            	XMLNode loop = (XMLNode)treeObjs[2];
            	
                if(!allowEmpty.equals("true")){
                	removeEmptyElement(root);
                }
                
                List<List<XMLNode>> groupbyNodeList = new ArrayList<List<XMLNode>>();
                for(XMLNode group:groupList){
                	groupbyNodeList.add(getGroupByNodeList(group));
                }
%>
	nb_line_<%=cid%>++;
	valueMap_<%=cid%>.clear();
<%
					for(IMetadataColumn column :preMetadata.getListColumns()){
%>
	valueMap_<%=cid%>.put("<%=column.getLabel()%>", <%tool.getValue(column); %>);
<%
					}
// ------------------- *** Common code end *** ------------------- //

// ------------------- *** Dom4j generation mode start *** ------------------- //
		//init the generate tool.
		GenerateToolByDom4j generateToolByDom4j = new GenerateToolByDom4j();
	
	    if(allowEmpty.equals("true")){
	    	generateToolByDom4j.allowEmpty = true;
	    }
	    generateToolByDom4j.cid = cid;
	    generateToolByDom4j.tool = tool;
	    
	    //start generate code
%>
	org.dom4j.Element subTreeRootParent_<%=cid%> = null;
	
<%		//the first input connection
		if(sourceName.equals(firstConnName)){
%>
	// build root xml tree 
	if (needRoot_<%=sourceName%>_<%=cid%>) {
		needRoot_<%=sourceName%>_<%=cid%> = false;
<%	
		generateToolByDom4j.generateCode(root,"root","doc");
%>
		root_<%=sourceName %>_<%=cid %> = subTreeRootParent_<%=cid %>;
	}else{
		subTreeRootParent_<%=cid %>= root_<%=sourceName %>_<%=cid%>;

	}
<%
		}else{
			XMLNode rootNode = getRootTree(rootTable);
			XMLNode branchNode = getInsertNode(rootNode, mainList);
			if(branchNode.sourceName.equals(sourceName)==false){
%>
	// build root xml tree 
	if (needRoot_<%=sourceName%>_<%=cid%>) {
		needRoot_<%=sourceName%>_<%=cid%> = false;
		root_<%=sourceName %>_<%=cid %> = 
			(org.dom4j.Element)doc_<%=cid %>.selectSingleNode("<%=branchNode.path %>");
		subTreeRootParent_<%=cid%>= root_<%=sourceName%>_<%=cid %>;
	}else{
		subTreeRootParent_<%=cid%>= root_<%=sourceName%>_<%=cid %>;
	}
<%
			}else{
				//find the father main node in the branch
				XMLNode tempNode=null;
				for(XMLNode tmpNode: mainList){
					if(tmpNode.path.equals(branchNode.path)){
						tempNode = tmpNode;
						break;
					}
				}
%>
	// build root xml tree 
	if (needRoot_<%=sourceName %>_<%=cid %>) {
		needRoot_<%=sourceName %>_<%=cid %> = false;
		root_<%=sourceName %>_<%=cid %> = 
			(org.dom4j.Element)doc_<%=cid %>.selectSingleNode("<%=branchNode.parent.path %>");
	<%generateToolByDom4j.generateCode(tempNode,"root", "root_"+sourceName); %>
		root_<%=sourceName%>_<%=cid%> = subTreeRootParent_<%=cid%>;
	}else{
		subTreeRootParent_<%=cid%>= root_<%=sourceName%>_<%=cid %>;
	}
<%
			}
		}
%>
	
	// build group xml tree 
<% 
		if(tables.get(1).size()>0){					//init the generate tool.
		    String firstGroupPath = groupList.get(0).path;
%>		
		boolean bl_<%=cid %>= false;//true:find the insert node;false:not
<%
			for( int i=0; i<groupList.size();i++){
				XMLNode groupNode= groupList.get(i);
%>
		if(bl_<%=cid %>==false){
			java.util.List<org.dom4j.Element> listNodes= subTreeRootParent_<%=cid %>.elements();
			if(listNodes!=null && listNodes.size()>0){
				int j=0;
				for(j=0;j<listNodes.size();j++){
					org.dom4j.Element tempElem =listNodes.get(j);
					if(tempElem.attributes()!=null && tempElem.attributes().size()>0){
						if(true 
<%	
				for(int j=0;j<groupbyNodeList.get(i).size();j++){
					XMLNode attri = groupbyNodeList.get(i).get(j);
					if(attri.relatedColumn!=null){
%> && tempElem.attribute("<%=attri.name%>")!=null && tempElem.attribute("<%=attri.name%>").getText()!=null
 && tempElem.attribute("<%=attri.name%>").getText().equals(<%tool.getValue(attri); %>)
<%
					}
				}
%>){
						subTreeRootParent_<%=cid %> =  tempElem;
						break;
						}
					}
				}
				if(j>=listNodes.size()){
					bl_<%=cid %>=true;
				}
			}else{
				bl_<%=cid %>=true;
			}
		}
		if(bl_<%=cid %>==true){
<% 
				generateToolByDom4j.generateCode(groupList.get(i),"group"+i+"_","subTreeRootParent");
%>
		}
<%
	 		}//for
		}
%>
	// build loop xml tree
<%
				if(tables.get(2)!=null && tables.get(2).size()>0){
					generateToolByDom4j.generateCode(loop,"loop","subTreeRootParent");
				}
// ------------------- *** Dom4j generation mode end *** ------------------- //

// ------------------- *** Common code start *** ------------------- //
			}
		}
}
// ------------------- *** Common code end *** ------------------- //
%>