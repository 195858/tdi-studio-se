<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.process.ElementParameterParser
    java.util.List
    java.util.ArrayList
    java.util.LinkedList
    java.util.Map
    java.util.HashMap
    org.talend.core.model.metadata.IMetadataTable
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.core.model.metadata.types.JavaTypesManager
	org.talend.core.model.metadata.types.JavaType
	org.talend.core.model.process.IConnectionCategory
	org.talend.core.model.utils.NodeUtil
"

%>

<%

// ------------------- *** Common code start *** ------------------- //
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String allowEmpty = ElementParameterParser.getValue(node, "__CREATE_EMPTY_ELEMENT__");

String encoding = ElementParameterParser.getValue(node, "__ENCODING__");
String cid = node.getUniqueName();
String cid_original = cid;
cid = cid_original.replace("tFileOutputXMLMultiSchema","tOXMLMS");

String filename = ElementParameterParser.getValue(node, "__FILENAME__");
boolean isDeleteEmptyFile = ElementParameterParser.getValue(node, "__DELETE_EMPTYFILE__").equals("true");

List<IMetadataTable> metadatas = NodeUtil.getIncomingMetadataTable(node, IConnectionCategory.FLOW);
if ((metadatas!=null)&&(metadatas.size()>0)) {
%>
	java.io.FileOutputStream stream_<%=cid%> = new java.io.FileOutputStream(fileName_<%=cid%>);
 
	org.dom4j.io.XMLWriter output_<%=cid%> = new org.dom4j.io.XMLWriter(stream_<%=cid%>, format_<%=cid%>);
	
    nestXMLTool_<%=cid%>.replaceDefaultNameSpace(doc_<%=cid%>.getRootElement());
<%
	if(!allowEmpty.equals("true")){
%>
    nestXMLTool_<%=cid%>.removeEmptyElement(doc_<%=cid%>.getRootElement());
<%
	}
%>
    output_<%=cid%>.write(doc_<%=cid%>);
    output_<%=cid%>.close();

<%	if(isDeleteEmptyFile){%>
	if(nb_line_<%=cid %> == 0){
		new java.io.File(<%=filename %>).delete();
	}
<%
	}
}
%>