<%@ jet 
imports="
        org.talend.designer.codegen.config.CodeGeneratorArgument
        org.talend.core.model.process.INode
        org.talend.core.model.process.ElementParameterParser  
        org.talend.core.model.metadata.IMetadataTable 
        org.talend.core.model.metadata.IMetadataColumn
        org.talend.core.model.metadata.types.JavaTypesManager
        org.talend.core.model.metadata.types.JavaType 
        org.talend.core.model.metadata.MappingTypeRetriever
        org.talend.core.model.metadata.MetadataTalendType        
        java.util.List
        java.util.ArrayList
        java.util.Map
        java.util.HashMap
        java.util.LinkedList 
" 
skeleton="../templates/db_output_bulk.skeleton"
%>

<%
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();
    
    String cid = node.getUniqueName();
    
    List<Map<String, String>> addCols =
            (List<Map<String,String>>)ElementParameterParser.getObjectValue(
                node,"__ADD_COLS__" );

    boolean useFieldOptions = ("true").equals(ElementParameterParser.getValue(node, "__USE_FIELD_OPTIONS__"));
    
    List<Map<String, String>> fieldOptions = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__FIELD_OPTIONS__");    
    
    String dbname= ElementParameterParser.getValue(node, "__DBNAME__");
    
    String dbproperties = ElementParameterParser.getValue(node, "__PROPERTIES__");
    
    String dbhost = ElementParameterParser.getValue(node, "__HOST__");
        
    String dbport = ElementParameterParser.getValue(node, "__PORT__");

    String dbschema = ElementParameterParser.getValue(node, "__DB_SCHEMA__");
    
    String dbuser= ElementParameterParser.getValue(node, "__USER__");
    
    String dbpwd= ElementParameterParser.getValue(node, "__PASS__");
    
    String table = ElementParameterParser.getValue(node,"__TABLE__");
    
    String dbmsId = ElementParameterParser.getValue(node,"__MAPPING__");
    
    getManager(dbmsId, cid, node);//register the MSSQLManager
    
    String dataAction = ElementParameterParser.getValue(node,"__DATA_ACTION__");
    
    String tableAction = ElementParameterParser.getValue(node,"__TABLE_ACTION__");
    
    boolean isSpecifyIdentityField = ("true").equals(ElementParameterParser.getValue(node,"__SPECIFY_IDENTITY_FIELD__"));
    
    String identityField = ElementParameterParser.getValue(node, "__IDENTITY_FIELD__");
    
    int startValue = Integer.parseInt(ElementParameterParser.getValue(node, "__START_VALUE__"));
    
    int step = Integer.parseInt(ElementParameterParser.getValue(node, "__STEP__"));
    
    String commitEvery = ElementParameterParser.getValue(node, "__COMMIT_EVERY__");
    
    String identityInsert = ElementParameterParser.getValue(node, "__IDENTITY_INSERT__");

    boolean isEnableDebug = ("true").equals(ElementParameterParser.getValue(node,"__ENABLE_DEBUG_MODE__"));
    
    String useBatchSize = ElementParameterParser.getValue(node,"__USE_BATCH_SIZE__");
	String batchSize=ElementParameterParser.getValue(node,"__BATCH_SIZE__");
%>
int nb_line_<%=cid%> = 0;
int nb_line_update_<%=cid%> = 0;
int nb_line_inserted_<%=cid%> = 0;
int nb_line_deleted_<%=cid%> = 0;

int deletedCount_<%=cid%>=0;
int updatedCount_<%=cid%>=0;
int insertedCount_<%=cid%>=0;
String dbschema_<%=cid%> = null;
String tableName_<%=cid%> = null;
boolean whetherReject_<%=cid%> = false;

<%
List<IMetadataColumn> columnList = getColumnList(node);
List<Column> stmtStructure = null;
Manager manager = null;
if(columnList != null && columnList.size() > 0) {
    stmtStructure = getManager(dbmsId, cid).createColumnList(columnList, useFieldOptions, fieldOptions, addCols, isSpecifyIdentityField, identityField, startValue, step);
}
%>

<%
if(("UPDATE").equals(dataAction) || ("INSERT_OR_UPDATE").equals(dataAction) || ("UPDATE_OR_INSERT").equals(dataAction)) {
    int updateKeyCount = 0;
    if(stmtStructure != null) {
        for(Column column : stmtStructure) {
            if(column.isUpdateKey()) {
                updateKeyCount++;
            }
        }
        %>
        int updateKeyCount_<%=cid%> = <%=updateKeyCount%>;
        if(updateKeyCount_<%=cid%> < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
        <%
    }
} else if(("DELETE").equals(dataAction)) {
    int deleteKeyCount = 0;
    if(stmtStructure != null) {
        for(Column column : stmtStructure) {
            if(column.isDeleteKey()) {
                deleteKeyCount++;
            }
        }
        %>
        int deleteKeyCount_<%=cid%> = <%=deleteKeyCount%>;
        if(deleteKeyCount_<%=cid%> < 1) {
            throw new RuntimeException("For delete, Schema must have a key");
        }
        <%
    }
} else if (("INSERT_IF_NOT_EXIST").equals(dataAction)){
	int insertKeyCount = 0;
    if(stmtStructure != null) {
        for(Column column : stmtStructure) {
            if(column.isUpdateKey()) {
                insertKeyCount++;
            }
        }
       %>
        int insertKeyCount_<%=cid%> = <%=insertKeyCount%>;
        if(insertKeyCount_<%=cid%> < 1) {
            throw new RuntimeException("For insert if not exist, Schema must have a key");
        }      	
       <%
    }	
}
%>
	<%@ include file="../templates/tMSSql/_tMSSqlConnection.javajet"%>
<%
if(!useExistingConnection) {
    if(!("").equals(commitEvery) && !("0").equals(commitEvery)) {
        %>
        conn_<%=cid%>.setAutoCommit(false);
        int commitEvery_<%=cid%> = <%=commitEvery%>;            
        int commitCounter_<%=cid%> = 0;
                    
        <%
    }
}

if (("true").equals(useBatchSize)) {
    if(!("").equals(batchSize)&&!("0").equals(batchSize)) {
%>
   int batchSize_<%=cid%> = <%=batchSize%>;
   int batchSizeCounter_<%=cid%>=0;
<%   
   }
}
%> 

if(dbschema_<%=cid%> == null || dbschema_<%=cid%>.trim().length() == 0) {
    tableName_<%=cid%> = <%=table%>;
} else {
    tableName_<%=cid%> = dbschema_<%=cid%> + "].[" + <%=table%>;
}
<%
if(columnList != null && columnList.size()>0) {    
   %>
   <%@ include file="../templates/_tableAction.javajet"%>
   <%
    Map<String, StringBuilder> actionSQLMap = getManager(dbmsId, cid).createProcessSQL(stmtStructure);
    StringBuilder insertColName = actionSQLMap.get(INSERT_COLUMN_NAME);   
    StringBuilder insertValueStmt = actionSQLMap.get(INSERT_VALUE_STMT);    
    StringBuilder updateSetStmt = actionSQLMap.get(UPDATE_SET_STMT);    
    StringBuilder updateWhereStmt = actionSQLMap.get(UPDATE_WHERE_STMT);
    StringBuilder deleteWhereStmt = actionSQLMap.get(DELETE_WHERE_STMT);
    
    if(("INSERT").equals(dataAction)) {
        %>  
        String insert_<%=cid%> = "INSERT INTO [" + tableName_<%=cid%> + "] (<%=insertColName.toString()%>) VALUES (<%=insertValueStmt.toString()%>)";
        java.sql.PreparedStatement pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(insert_<%=cid%>);
        <%
    } else if (("UPDATE").equals(dataAction)) {
        %>
        String update_<%=cid%> = "UPDATE [" + tableName_<%=cid%> + "] SET <%=updateSetStmt.toString()%> WHERE <%=updateWhereStmt.toString()%>";
        java.sql.PreparedStatement pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(update_<%=cid%>);
        <%      
    } else if (("INSERT_OR_UPDATE").equals(dataAction)) {
        %>
        java.sql.PreparedStatement pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement("SELECT COUNT(1) FROM [" + tableName_<%=cid%> + "] WHERE <%=updateWhereStmt.toString()%>"); 
        String insert_<%=cid%> = "INSERT INTO [" + tableName_<%=cid%> + "] (<%=insertColName.toString()%>) VALUES (<%=insertValueStmt.toString()%>)";
        java.sql.PreparedStatement pstmtInsert_<%=cid %> = conn_<%=cid%>.prepareStatement(insert_<%=cid%>);
        String update_<%=cid%> = "UPDATE [" + tableName_<%=cid%> + "] SET <%=updateSetStmt.toString()%> WHERE <%=updateWhereStmt.toString()%>";
        java.sql.PreparedStatement pstmtUpdate_<%=cid %> = conn_<%=cid%>.prepareStatement(update_<%=cid%>);    
        <%
    } else if (("UPDATE_OR_INSERT").equals(dataAction)) {
        %>
        String update_<%=cid%> = "UPDATE [" + tableName_<%=cid%> + "] SET <%=updateSetStmt.toString()%> WHERE <%=updateWhereStmt.toString()%>";
        java.sql.PreparedStatement pstmtUpdate_<%=cid %> = conn_<%=cid%>.prepareStatement(update_<%=cid%>);
        String insert_<%=cid%> = "INSERT INTO [" + tableName_<%=cid%> + "] (<%=insertColName.toString()%>) VALUES (<%=insertValueStmt.toString()%>)";
        java.sql.PreparedStatement pstmtInsert_<%=cid %> = conn_<%=cid%>.prepareStatement(insert_<%=cid%>);        
        <%            
    } else if (("DELETE").equals(dataAction)) {
        %>
        String delete_<%=cid%> = "DELETE FROM [" + tableName_<%=cid%> + "] WHERE <%=deleteWhereStmt.toString()%>";
        java.sql.PreparedStatement pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(delete_<%=cid%>);
        <%      
    } else if (("INSERT_IF_NOT_EXIST").equals(dataAction)) {
    	%>
        java.sql.PreparedStatement pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement("SELECT COUNT(1) FROM [" + tableName_<%=cid%> + "] WHERE <%=updateWhereStmt.toString()%>"); 
        String insert_<%=cid%> = "INSERT INTO [" + tableName_<%=cid%> + "] (<%=insertColName.toString()%>) VALUES (<%=insertValueStmt.toString()%>)";
        java.sql.PreparedStatement pstmtInsert_<%=cid %> = conn_<%=cid%>.prepareStatement(insert_<%=cid%>);
    <%
    }
    if(isEnableDebug) {
        %>
        String query_<%=cid%> = null;
        <%
    }
    if(("true").equals(identityInsert)) {
        %>
        java.sql.Statement stmt_<%=cid %> = conn_<%=cid%>.createStatement();
        stmt_<%=cid %>.execute("SET IDENTITY_INSERT ["+ tableName_<%=cid%> +"] ON");
        <%
    }    
}
%>
