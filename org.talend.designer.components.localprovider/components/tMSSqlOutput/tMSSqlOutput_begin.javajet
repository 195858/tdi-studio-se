<%@ jet 
imports="
        org.talend.designer.codegen.config.CodeGeneratorArgument
        org.talend.core.model.process.INode
        org.talend.core.model.process.ElementParameterParser  
        org.talend.core.model.metadata.IMetadataTable 
        org.talend.core.model.metadata.IMetadataColumn
        org.talend.core.model.metadata.types.JavaTypesManager
        org.talend.core.model.metadata.types.JavaType 
        org.talend.core.model.metadata.MappingTypeRetriever
        org.talend.core.model.metadata.MetadataTalendType        
        java.util.List
        java.util.ArrayList
        java.util.Map
        java.util.HashMap
        java.util.LinkedList 
" 
skeleton="../templates/db_output_bulk.skeleton"
%>

<%
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();
    
    String cid = node.getUniqueName();
    
    List<Map<String, String>> addCols =
            (List<Map<String,String>>)ElementParameterParser.getObjectValue(
                node,"__ADD_COLS__" );

    boolean useFieldOptions = ElementParameterParser.getValue(node, "__USE_FIELD_OPTIONS__").equals("true");
    
    List<Map<String, String>> fieldOptions = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__FIELD_OPTIONS__");    
    
    String dbname= ElementParameterParser.getValue(node, "__DBNAME__");
    
    String dbproperties = ElementParameterParser.getValue(node, "__PROPERTIES__");
    
    String dbhost = ElementParameterParser.getValue(node, "__HOST__");
        
    String dbport = ElementParameterParser.getValue(node, "__PORT__");

    String dbschema = ElementParameterParser.getValue(node, "__DB_SCHEMA__");
    
    String dbuser= ElementParameterParser.getValue(node, "__USER__");
    
    String dbpwd= ElementParameterParser.getValue(node, "__PASS__");
    
    String tableName = ElementParameterParser.getValue(node,"__TABLE__");
    
    String dbmsId = ElementParameterParser.getValue(node,"__MAPPING__");
    
    String dataAction = ElementParameterParser.getValue(node,"__DATA_ACTION__");
    
    String tableAction = ElementParameterParser.getValue(node,"__TABLE_ACTION__");
    
    String commitEvery = ElementParameterParser.getValue(node, "__COMMIT_EVERY__");
    
    String identityInsert = ElementParameterParser.getValue(node, "__IDENTITY_INSERT__");

    boolean isEnableDebug = ElementParameterParser.getValue(node,"__ENABLE_DEBUG_MODE__").equals("true");
%>
int nb_line_<%=cid%> = 0;
int nb_line_update_<%=cid%> = 0;
int nb_line_inserted_<%=cid%> = 0;
int nb_line_deleted_<%=cid%> = 0;

int deletedCount_<%=cid%>=0;
int updatedCount_<%=cid%>=0;
int insertedCount_<%=cid%>=0;
String dbschema_<%=cid%> = null;
String tableName_<%=cid%> = null;
boolean whetherReject_<%=cid%> = false;

<%
List<IMetadataColumn> columnList = getColumnList(node);
List<Column> stmtStructure = null;
if(columnList != null && columnList.size() > 0) {
    stmtStructure = getManager(dbmsId, cid).createColumnList(columnList, useFieldOptions, fieldOptions, addCols);
}
%>

<%
if(dataAction.equals("UPDATE") || dataAction.equals("INSERT_OR_UPDATE") || dataAction.equals("UPDATE_OR_INSERT")) {
    int updateKeyCount = 0;
    if(stmtStructure != null) {
        for(Column column : stmtStructure) {
            if(column.isUpdateKey()) {
                updateKeyCount++;
            }
        }
        %>
        int updateKeyCount_<%=cid%> = <%=updateKeyCount%>;
        if(updateKeyCount_<%=cid%> < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
        <%
    }
} else if(dataAction.equals("DELETE")) {
    int deleteKeyCount = 0;
    if(stmtStructure != null) {
        for(Column column : stmtStructure) {
            if(column.isDeleteKey()) {
                deleteKeyCount++;
            }
        }
        %>
        int deleteKeyCount_<%=cid%> = <%=deleteKeyCount%>;
        if(deleteKeyCount_<%=cid%> < 1) {
            throw new RuntimeException("For delete, Schema must have a key");
        }
        <%
    }
}
String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");
if(useExistingConn.equals("true")) {
    String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
    String conn = "conn_" + connection;
    String schema = "dbschema_" + connection;
    %>
    dbschema_<%=cid%> = (String)globalMap.get("<%=schema%>");
    java.sql.Connection conn_<%=cid%> = (java.sql.Connection)globalMap.get("<%=conn%>");
    <%
} else {
    %>
    dbschema_<%=cid%> = <%=dbschema%>;
    java.lang.Class.forName("net.sourceforge.jtds.jdbc.Driver");
    String url_<%=cid %> = "jdbc:jtds:sqlserver://" + <%=dbhost%> + ":" + <%=dbport%> + "//" + <%=dbname%> + ";appName=" + projectName + ";" + <%=dbproperties%>;        
    String dbUser_<%=cid %> = <%=dbuser%>;
    String dbPwd_<%=cid %> = <%=dbpwd%>;
    java.sql.Connection conn_<%=cid%> = java.sql.DriverManager.getConnection(url_<%=cid %>,dbUser_<%=cid%>,dbPwd_<%=cid%>);
    conn_<%=cid%>.setAutoCommit(false);
    <%
}
%>
if(dbschema_<%=cid%> == null || dbschema_<%=cid%>.trim().length() == 0) {
    tableName_<%=cid%> = <%=tableName%>;
} else {
    tableName_<%=cid%> = dbschema_<%=cid%> + "].[" + <%=tableName%>;
}
<%
if(columnList != null && columnList.size()>0) {    
    if(!tableAction.equals("NONE")) {
        Manager manager = getManager(dbmsId, cid);
        if(tableAction.equals("DROP_CREATE")) {
            %>
            java.sql.Statement stmtDrop_<%=cid%> = conn_<%=cid%>.createStatement();
            stmtDrop_<%=cid%>.execute("<%=manager.getDropTableSQL()%>");
            java.sql.Statement stmtCreate_<%=cid%> = conn_<%=cid%>.createStatement();
            stmtCreate_<%=cid%>.execute("<%=manager.getCreateTableSQL(stmtStructure)%>");
            <%
        } else if(tableAction.equals("CREATE")) {
            %>
            java.sql.Statement stmtCreate_<%=cid%> = conn_<%=cid%>.createStatement();
            stmtCreate_<%=cid%>.execute("<%=manager.getCreateTableSQL(stmtStructure)%>");
            <%
        } else if(tableAction.equals("CREATE_IF_NOT_EXISTS") || tableAction.equals("DROP_IF_EXISTS_AND_CREATE")) {
            %>
            java.sql.DatabaseMetaData dbMetaData_<%=cid%> = conn_<%=cid%>.getMetaData();
            java.sql.ResultSet rsTable_<%=cid%> = null;
            if(dbschema_<%=cid%> != null && dbschema_<%=cid%>.trim().length() > 0) {
                rsTable_<%=cid%> = dbMetaData_<%=cid%>.getTables(null, dbschema_<%=cid%>, <%=tableName%>, new String[]{"TABLE"});
            } else {
                rsTable_<%=cid%> = dbMetaData_<%=cid%>.getTables(null, "dbo", <%=tableName%>, new String[]{"TABLE"});
            }
            boolean whetherExist_<%=cid%> = false;
            while(rsTable_<%=cid%>.next()) {
                String table_<%=cid%> = rsTable_<%=cid%>.getString("TABLE_NAME");
                if(table_<%=cid%>.equalsIgnoreCase(<%=tableName%>)) {
                    whetherExist_<%=cid%> = true;
                    break;
                }
            }
            <%
            if(tableAction.equals("CREATE_IF_NOT_EXISTS")) {
                %>
                if(!whetherExist_<%=cid%>) {
                    java.sql.Statement stmtCreate_<%=cid%> = conn_<%=cid%>.createStatement();
                    stmtCreate_<%=cid%>.execute("<%=manager.getCreateTableSQL(stmtStructure)%>");            
                }                
                <%
            } else {
                %>
                if(whetherExist_<%=cid%>) {
                    java.sql.Statement stmtDrop_<%=cid%> = conn_<%=cid%>.createStatement();
                    stmtDrop_<%=cid%>.execute("<%=manager.getDropTableSQL()%>");
                }
                java.sql.Statement stmtCreate_<%=cid%> = conn_<%=cid%>.createStatement();
                stmtCreate_<%=cid%>.execute("<%=manager.getCreateTableSQL(stmtStructure)%>");                
            <%
            }
        } else if(tableAction.equals("CLEAR")) {
            %>
            java.sql.Statement stmtClearCount_<%=cid%> = conn_<%=cid%>.createStatement();
            java.sql.ResultSet rsClearCount_<%=cid%> = stmtClearCount_<%=cid%>.executeQuery("<%=manager.getSelectionSQL()%>");
            java.sql.Statement stmtClear_<%=cid%> = conn_<%=cid%>.createStatement();
            stmtClear_<%=cid%>.executeUpdate("<%=manager.getTruncateTableSQL()%>");
            while(rsClearCount_<%=cid%>.next()) {
                deletedCount_<%=cid%> += rsClearCount_<%=cid%>.getInt(1);
            }
            <%
        }
    }    
    Map<String, StringBuilder> actionSQLMap = getManager(dbmsId, cid).createProcessSQL(stmtStructure);
    StringBuilder insertColName = actionSQLMap.get(INSERT_COLUMN_NAME);   
    StringBuilder insertValueStmt = actionSQLMap.get(INSERT_VALUE_STMT);    
    StringBuilder updateSetStmt = actionSQLMap.get(UPDATE_SET_STMT);    
    StringBuilder updateWhereStmt = actionSQLMap.get(UPDATE_WHERE_STMT);
    StringBuilder deleteWhereStmt = actionSQLMap.get(DELETE_WHERE_STMT);

    if(dataAction.equals("INSERT")) {
        %>  
        String insert_<%=cid%> = "INSERT INTO [" + tableName_<%=cid%> + "] (<%=insertColName.toString()%>) VALUES (<%=insertValueStmt.toString()%>)";
        java.sql.PreparedStatement pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(insert_<%=cid%>);
        <%
    } else if (dataAction.equals("UPDATE")) {
        %>
        String update_<%=cid%> = "UPDATE [" + tableName_<%=cid%> + "] SET <%=updateSetStmt.toString()%> WHERE <%=updateWhereStmt.toString()%>";
        java.sql.PreparedStatement pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(update_<%=cid%>);
        <%      
    } else if (dataAction.equals("INSERT_OR_UPDATE")) {
        %>
        java.sql.PreparedStatement pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement("SELECT COUNT(1) FROM [" + tableName_<%=cid%> + "] WHERE <%=updateWhereStmt.toString()%>"); 
        String insert_<%=cid%> = "INSERT INTO [" + tableName_<%=cid%> + "] (<%=insertColName.toString()%>) VALUES (<%=insertValueStmt.toString()%>)";
        java.sql.PreparedStatement pstmtInsert_<%=cid %> = conn_<%=cid%>.prepareStatement(insert_<%=cid%>);
        String update_<%=cid%> = "UPDATE [" + tableName_<%=cid%> + "] SET <%=updateSetStmt.toString()%> WHERE <%=updateWhereStmt.toString()%>";
        java.sql.PreparedStatement pstmtUpdate_<%=cid %> = conn_<%=cid%>.prepareStatement(update_<%=cid%>);    
        <%
    } else if (dataAction.equals("UPDATE_OR_INSERT")) {
        %>
        String update_<%=cid%> = "UPDATE [" + tableName_<%=cid%> + "] SET <%=updateSetStmt.toString()%> WHERE <%=updateWhereStmt.toString()%>";
        java.sql.PreparedStatement pstmtUpdate_<%=cid %> = conn_<%=cid%>.prepareStatement(update_<%=cid%>);
        String insert_<%=cid%> = "INSERT INTO [" + tableName_<%=cid%> + "] (<%=insertColName.toString()%>) VALUES (<%=insertValueStmt.toString()%>)";
        java.sql.PreparedStatement pstmtInsert_<%=cid %> = conn_<%=cid%>.prepareStatement(insert_<%=cid%>);        
        <%            
    } else if (dataAction.equals("DELETE")) {
        %>
        String delete_<%=cid%> = "DELETE FROM [" + tableName_<%=cid%> + "] WHERE <%=deleteWhereStmt.toString()%>";
        java.sql.PreparedStatement pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(delete_<%=cid%>);
        <%      
    }
    if(isEnableDebug) {
        %>
        String query_<%=cid%> = null;
        <%
    }
    if(!useExistingConn.equals("true")) {
        if(!commitEvery.equals("") && !commitEvery.equals("0")) {
            %>            
            int commitEvery_<%=cid%> = <%=commitEvery%>;            
            int commitCounter_<%=cid%> = 0;
                        
            <%
        }
    }
    if(identityInsert.equals("true")) {
        %>
        java.sql.Statement stmt_<%=cid %> = conn_<%=cid%>.createStatement();
        stmt_<%=cid %>.execute("SET IDENTITY_INSERT ["+ tableName_<%=cid%> +"] ON");
        <%
    }    
}
%>
