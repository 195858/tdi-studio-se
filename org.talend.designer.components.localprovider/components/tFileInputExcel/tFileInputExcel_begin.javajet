<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn 
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.designer.codegen.config.CodeGeneratorArgument
		java.util.List
		java.util.Map
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
	" 
%>	
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();
List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
	IMetadataTable metadata = metadatas.get(0);
	if (metadata!=null) {
		boolean version07 = ("true").equals(ElementParameterParser.getValue(node,"__VERSION_2007__"));
	
		String fileName = ElementParameterParser.getValue(node,"__FILENAME__");
	
    	String header = ElementParameterParser.getValue(node, "__HEADER__");
    	String limit = ElementParameterParser.getValue(node, "__LIMIT__");
    	String footer = ElementParameterParser.getValue(node, "__FOOTER__");
    	String firstColumn = ElementParameterParser.getValue(node, "__FIRST_COLUMN__");
    	String lastColumn = ElementParameterParser.getValue(node, "__LAST_COLUMN__");
    	String dieOnErrorStr = ElementParameterParser.getValue(node, "__DIE_ON_ERROR__");
		boolean dieOnError = (dieOnErrorStr!=null&&!("").equals(dieOnErrorStr))?("true").equals(dieOnErrorStr):false;
		String encoding = ElementParameterParser.getValue(node,"__ENCODING__");
		
		String allSheets = ElementParameterParser.getValue(node, "__ALL_SHEETS__");
		boolean isAllSheets = (allSheets!=null&&!("").equals(allSheets))?("true").equals(allSheets):false;
		List<Map<String, String>> sheetNameList = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__SHEETLIST__");
		
		String advancedSeparatorStr = ElementParameterParser.getValue(node, "__ADVANCED_SEPARATOR__");
		boolean advancedSeparator = (advancedSeparatorStr!=null&&!("").equals(advancedSeparatorStr))?("true").equals(advancedSeparatorStr):false;
		String thousandsSeparator = ElementParameterParser.getValueWithJavaType(node, "__THOUSANDS_SEPARATOR__", JavaTypesManager.CHARACTER);
		String decimalSeparator = ElementParameterParser.getValueWithJavaType(node, "__DECIMAL_SEPARATOR__", JavaTypesManager.CHARACTER);
		
		boolean affect = ("true").equals(ElementParameterParser.getValue(node,"__AFFECT_EACH_SHEET__"));
		boolean stopOnEmptyRow = ("true").equals(ElementParameterParser.getValue(node,"__STOPREAD_ON_EMPTYROW__"));
		
		List<Map<String, String>> trimSelects = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__TRIMSELECT__");
		String isTrimAllStr = ElementParameterParser.getValue(node,"__TRIMALL__");
		boolean isTrimAll = (isTrimAllStr!=null&&!("").equals(isTrimAllStr))?("true").equals(isTrimAllStr):true;
		
		if(!version07){//version judgement
			boolean bReadRealValue = ("true").equals(ElementParameterParser.getValue(node, "__READ_REAL_VALUE__"));
			boolean notNeedValidateOnCell = !("false").equals(ElementParameterParser.getValue(node,"__NOVALIDATE_ON_CELL__"));//make wizard work
			boolean suppressWarn = !("false").equals(ElementParameterParser.getValue(node,"__SUPPRESS_WARN__"));//make wizard work
%>

			class RegexUtil_<%=cid %> {
				
		    	public java.util.List<jxl.Sheet> getSheets(jxl.Workbook workbook, String oneSheetName, boolean useRegex) {
			        
			        java.util.List<jxl.Sheet> list = new java.util.ArrayList<jxl.Sheet>();
			        
			        if(useRegex){//this part process the regex issue
			        	
				        jxl.Sheet[] sheets = workbook.getSheets();
				        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
				        for (int i = 0; i < sheets.length; i++) {
				            String sheetName = sheets[i].getName();
				            java.util.regex.Matcher matcher = pattern.matcher(sheetName);
				            if (matcher.matches()) {
				            	jxl.Sheet sheet = workbook.getSheet(sheetName);
				            	if(sheet != null){
				                	list.add(sheet);
				                }	
				            }
				        }
				        
			        }else{	
			        	jxl.Sheet sheet = workbook.getSheet(oneSheetName);
		            	if(sheet != null){
		                	list.add(sheet);
		                }
			        	
			        }
			        
			        return list;
			    }
		    	
			    public java.util.List<jxl.Sheet> getSheets(jxl.Workbook workbook, int index, boolean useRegex) {
			    	java.util.List<jxl.Sheet> list =  new java.util.ArrayList<jxl.Sheet>();
			    	jxl.Sheet sheet = workbook.getSheet(index);
	            	if(sheet != null){
	                	list.add(sheet);
	                }
			    	return list;
			    }
			    
			}
			
			
		RegexUtil_<%=cid %> regexUtil_<%=cid %> = new RegexUtil_<%=cid %>();
		final jxl.WorkbookSettings workbookSettings_<%= cid %> = new jxl.WorkbookSettings();
<%
		if(notNeedValidateOnCell==true){
%>
		workbookSettings_<%= cid %>.setCellValidationDisabled(true);
<%
		}
		if(suppressWarn ==true){
%>
		workbookSettings_<%= cid %>.setSuppressWarnings(true);
<%
		}
%>		
        workbookSettings_<%= cid %>.setEncoding(<%=encoding %>);
        
        Object source_<%=cid %> =<%=fileName%>;
        final jxl.Workbook workbook_<%= cid %>;
        
        if(source_<%=cid %> instanceof java.io.InputStream){
        	workbook_<%= cid %> = jxl.Workbook.getWorkbook(new java.io.BufferedInputStream((java.io.InputStream)source_<%=cid %>), workbookSettings_<%= cid %>);
        }else if(source_<%=cid %> instanceof String){
        	workbook_<%= cid %> = jxl.Workbook.getWorkbook(new java.io.BufferedInputStream(new java.io.FileInputStream(
        							source_<%=cid %>.toString())), workbookSettings_<%= cid %>);
        }else{
        	workbook_<%= cid %> = null;
        	throw new Exception("The data source should be specified as Inputstream or File Path!");
        }
        try {
<%      
		if(isAllSheets){
%>
		java.util.List<jxl.Sheet> sheetList_<%= cid %> = java.util.Arrays.<jxl.Sheet> asList(workbook_<%= cid %>.getSheets());
<%
		}else{
%>
		java.util.List<jxl.Sheet> sheetList_<%= cid %> = new java.util.ArrayList<jxl.Sheet>();
<%
			for(Map<String, String> tmp:sheetNameList){
%>
        sheetList_<%= cid %>.addAll(regexUtil_<%=cid %>.getSheets(workbook_<%= cid %>, <%=tmp.get("SHEETNAME")%>, <%=(tmp.get("USE_REGEX")!=null&&!"".equals(tmp.get("USE_REGEX")))?"true".equals(tmp.get("USE_REGEX")):false%>));
<%
			}
		}
%>
        if(sheetList_<%= cid %>.size() <= 0){
        	throw new RuntimeException("Special sheets not exist!");
        }
        
        int nb_line_<%= cid %> = 0;            

        int begin_line_<%= cid %> = <%if(("").equals(header.trim())){%>0<%}else{%><%= header %><%}%>;
        
        int footer_input_<%= cid %> = <%if(("").equals(footer.trim())){%>0<%}else{%><%=footer%><%}%>;
        
        int end_line_<%= cid %>=0;
        for(jxl.Sheet sheet_<%=cid%>:sheetList_<%= cid %>){
        	end_line_<%= cid %>+=sheet_<%=cid%>.getRows();
        }
        end_line_<%= cid %> -= footer_input_<%= cid %>;
        int limit_<%= cid %> = <%if(("").equals(limit.trim())){%>-1<%}else{%><%=limit%><%}%>;
        int start_column_<%= cid %> = <%if(("").equals(firstColumn.trim())){%>0<%}else{%><%=firstColumn%>-1<%}%>;
        int end_column_<%= cid %> = sheetList_<%= cid %>.get(0).getColumns();
        <%if(lastColumn!=null && !("").equals(lastColumn.trim())){%>
        Integer lastColumn_<%=cid %> = <%=lastColumn%>;
        if(lastColumn_<%=cid %>!=null){
        	end_column_<%= cid %> = lastColumn_<%=cid %>.intValue();
        }
        <%}%>
        jxl.Cell[] row_<%= cid %> = null;
        jxl.Sheet sheet_<%= cid %> = sheetList_<%= cid %>.get(0);
        int rowCount_<%= cid %> = 0;
        int sheetIndex_<%= cid %> = 0;
        int currentRows_<%= cid %> = sheetList_<%= cid %>.get(0).getRows();
        
        for(int i_<%= cid %> = begin_line_<%= cid %>; i_<%= cid %> < end_line_<%= cid %>; i_<%= cid %>++){
        
        	int emptyColumnCount_<%= cid %> = 0;

        	if (limit_<%= cid %> != -1 && nb_line_<%= cid %> >= limit_<%= cid %>) {
        		break;
        	}
        	
            while (i_<%= cid %> >= rowCount_<%= cid %> + currentRows_<%= cid %>) {
                rowCount_<%= cid %> += currentRows_<%= cid %>;
                sheet_<%= cid %> = sheetList_<%= cid %>.get(++sheetIndex_<%= cid %>);
                currentRows_<%= cid %> = sheet_<%= cid %>.getRows();
            }
<%
	if(!affect){
%>
            if (rowCount_<%= cid %> <= i_<%= cid %>) {
                row_<%= cid %> = sheet_<%= cid %>.getRow(i_<%= cid %> - rowCount_<%= cid %>);
            }
<%
	}else{
%>
            if (rowCount_<%= cid %> <= i_<%= cid %> && i_<%= cid %> - rowCount_<%= cid %> >= begin_line_<%= cid %> && currentRows_<%= cid %> - footer_input_<%= cid %> > i_<%= cid %> - rowCount_<%= cid %>) {
                row_<%= cid %> = sheet_<%= cid %>.getRow(i_<%= cid %> - rowCount_<%= cid %>);
            }else{
            	continue;
            }
<%
    }
%>               
        	globalMap.put("<%=cid %>_CURRENT_SHEET",sheet_<%=cid %>.getName());
<%
//begin
//
	List< ? extends IConnection> conns = node.getOutgoingSortedConnections();

    String rejectConnName = "";
    List<? extends IConnection> rejectConns = node.getOutgoingConnections("REJECT");
    if(rejectConns != null && rejectConns.size() > 0) {
        IConnection rejectConn = rejectConns.get(0);
        rejectConnName = rejectConn.getName();
    }
    List<IMetadataColumn> rejectColumnList = null;
    IMetadataTable metadataTable = node.getMetadataFromConnector("REJECT");
    if(metadataTable != null) {
        rejectColumnList = metadataTable.getListColumns();      
    }

    	if (conns!=null) {
    		if (conns.size()>0) {
    			for (int i=0;i<conns.size();i++) {
    				IConnection connTemp = conns.get(i);
    				if (connTemp.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
%>
    		<%=connTemp.getName() %> = null;			
<%
    				}
    			}
    		}
    	}
    	
		String firstConnName = "";
		if (conns!=null) {
			if (conns.size()>0) {
				IConnection conn = conns.get(0);
				firstConnName = conn.getName();
				List<IMetadataColumn> listColumns = metadata.getListColumns();
				int size = listColumns.size();
				if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
//
//end%>
			String[] temp_row_<%= cid %> = new String[<%=listColumns.size()%>];
			int actual_end_column_<%= cid %> = end_column_<%= cid %> >	row_<%= cid %>.length ? row_<%= cid %>.length : end_column_<%= cid %>;
			java.text.DecimalFormat df = new java.text.DecimalFormat("#.####################################");
			for(int i=0;i<<%=size%>;i++){
				
				if(i + start_column_<%= cid %> < actual_end_column_<%= cid %>){
				
				  jxl.Cell cell_<%=cid%> = row_<%= cid %>[i + start_column_<%= cid %>];
				  
				  if (<%=bReadRealValue%> && jxl.CellType.NUMBER == cell_<%=cid%>.getType()){				   
				  	temp_row_<%= cid %>[i] = String.valueOf(((jxl.NumberCell)cell_<%=cid%>).getValue());
					String content = cell_<%=cid%>.getContents();
					if(content!=null && content.indexOf(".")==-1) {
						temp_row_<%=cid%>[i] = content;
					} else {
    					String literal = temp_row_<%=cid%>[i];
    					if(literal!=null && (literal.indexOf("E")!=-1)) {
    						literal = df.format(((jxl.NumberCell)cell_<%=cid%>).getValue());
    					}
    					temp_row_<%=cid%>[i] = literal;
					}
				  } else{
				    temp_row_<%= cid %>[i] = cell_<%=cid%>.getContents();
				    if(cell_<%=cid%>.getType() == jxl.CellType.NUMBER) {
						String content = cell_<%=cid%>.getContents();
						if(content!=null && content.indexOf(".")!=-1) {
							jxl.NumberCell nc = (jxl.NumberCell)cell_<%=cid%>;
							String literal = String.valueOf(nc.getValue());
							if(literal!=null && (literal.indexOf("E")!=-1)) {
								literal = df.format(nc.getValue());
							}
							temp_row_<%=cid%>[i] = literal;
						}
					}
				  }
					
				}else{
					temp_row_<%= cid %>[i]="";
				}								
			}
			
			boolean whetherReject_<%=cid %> = false;
			<%=firstConnName %> = new <%=conn.getName() %>Struct();
			int curColNum_<%=cid %> = -1;
			String curColName_<%=cid %> = "";
			try {			
<%
//start
//
					for (int i=0; i<size; i++) {
						IMetadataColumn column = listColumns.get(i);
						String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
						JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
						String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
//
//end%>					
			if(temp_row_<%=cid %>[<%=i%>]<%=(isTrimAll || (!trimSelects.isEmpty() && ("true").equals(trimSelects.get(i).get("TRIM"))))?".trim()":"" %>.length() > 0) {
				curColNum_<%=cid %>=<%=i%> + start_column_<%= cid %> + 1;
				curColName_<%=cid %> = "<%=column.getLabel() %>";
<%
//start
//

						if(javaType == JavaTypesManager.STRING || javaType == JavaTypesManager.OBJECT) {
//
//end%>
			<%=firstConnName %>.<%=column.getLabel() %> = temp_row_<%=cid %>[<%=i%>]<%=(isTrimAll || (!trimSelects.isEmpty() && ("true").equals(trimSelects.get(i).get("TRIM"))))?".trim()":"" %>;
<%		
//start
			} else if(javaType == JavaTypesManager.DATE) {
//
//end%>		
			if(<%= i%><actual_end_column_<%= cid %>){
				try{
					java.util.Date dateGMT_<%=cid %> = ((jxl.DateCell)row_<%= cid %>[<%=i%> + start_column_<%= cid %>]).getDate();
					<%=firstConnName %>.<%=column.getLabel() %> = new java.util.Date(dateGMT_<%=cid %>.getTime() - java.util.TimeZone.getDefault().getOffset(dateGMT_<%=cid %>.getTime()));
				}catch(Exception e){
					throw new RuntimeException("The cell format is not Date in row "+(nb_line_<%= cid %>+1));
				}
			}
<%
//start			
			}else if(advancedSeparator && JavaTypesManager.isNumberType(javaType)) { 
%>
		<%=firstConnName %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%= typeToGenerate %>(ParserUtils.parseTo_Number(temp_row_<%=cid %>[<%=i%>]<%=(isTrimAll || (!trimSelects.isEmpty() && ("true").equals(trimSelects.get(i).get("TRIM"))))?".trim()":"" %>, <%= thousandsSeparator %>, <%= decimalSeparator %>));
<%
					} else if(javaType == JavaTypesManager.BYTE_ARRAY) { 
	%>							
			<%=firstConnName %>.<%=column.getLabel() %> = temp_row_<%=cid %>[<%=i%>]<%=(isTrimAll || (!trimSelects.isEmpty() && ("true").equals(trimSelects.get(i).get("TRIM"))))?".trim()":"" %>.getBytes(<%=encoding %>);
	<%
			} else {
//
//end%>
			<%=firstConnName %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%= typeToGenerate %>(temp_row_<%=cid %>[<%=i%>]<%=(isTrimAll || (!trimSelects.isEmpty() && ("true").equals(trimSelects.get(i).get("TRIM"))))?".trim()":"" %>);
<%
//start
//
						}
//
//end%>					
			}else {
<%
//start
//
						String defaultValue = JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate, column.getDefault());
						if(defaultValue == null) {
//
//end%>
				throw new RuntimeException("Value is empty for column : '<%= column.getLabel() %>' in '<%=firstConnName%>' connection, value is invalid or this column should be nullable or have a default value.");
<%
//start
//
						} else {
//
//end%>
				<%=firstConnName %>.<%=column.getLabel() %> = <%=defaultValue%>;
				emptyColumnCount_<%= cid %>++;
<%
//start
//
						}
//
//end%>
		}
<%
//start
//
					}%>
					
<%if(rejectConnName.equals(firstConnName)) {%> <%=firstConnName %> = null; <%}%>

<%
	if(stopOnEmptyRow){
%>
        if(emptyColumnCount_<%= cid %> == <%=size %>){
        	break; //if meet the empty row, there will break the iterate.
        }
<%
	}
%>  
					
    } catch (Exception e) {
        whetherReject_<%=cid%> = true;
        <%
        if (dieOnError) {
            %>
            throw(e);
            <%
        } else {
            if(!("").equals(rejectConnName)&&!rejectConnName.equals(firstConnName)&&rejectColumnList != null && rejectColumnList.size() > 0) {

                %>
                    <%=rejectConnName %> = new <%=rejectConnName %>Struct();
                <%
                for(IMetadataColumn column : metadata.getListColumns()) {
                    %>
                    <%=rejectConnName%>.<%=column.getLabel()%> = <%=firstConnName%>.<%=column.getLabel()%>;
                    <%
                }
                %>
                <%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>+ " column: " + curColName_<%=cid %> + " (No. " + curColNum_<%=cid %> + ")";
                <%=firstConnName %> = null;
                <%
            } else if(("").equals(rejectConnName)){
                %>
                System.err.println(e.getMessage());
                <%=firstConnName %> = null;
                <%
            } else if(rejectConnName.equals(firstConnName)){%>
            	<%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>+ " column: " + curColName_<%=cid %> + " (No. " + curColNum_<%=cid %> + ")";
            <%}
        } 
        %>
    }					
					
					<%
				}
			}
		if (conns.size()>0) {	
			boolean isFirstEnter = true;
			for (int i=0;i<conns.size();i++) {
				IConnection conn = conns.get(i);
				if ((conn.getName().compareTo(firstConnName)!=0)&&(conn.getName().compareTo(rejectConnName)!=0)&&(conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA))) {
%>
		<% if(isFirstEnter) {%>if(!whetherReject_<%=cid%>) { <% isFirstEnter = false; } %>      
             if(<%=conn.getName() %> == null){ 
            	 <%=conn.getName() %> = new <%=conn.getName() %>Struct();
             }				
<%
			    	 for (IMetadataColumn column: metadata.getListColumns()) {
%>
	    	 <%=conn.getName() %>.<%=column.getLabel() %> = <%=firstConnName %>.<%=column.getLabel() %>;    				
<%
				 	}
				}
			}
%>
		<% if(!isFirstEnter) {%> } <% } %>	
<%
		}
		}
%>
<%	
		}//version judgement /***excel 2007 xlsx*****/
		else{
%>
			org.apache.log4j.Logger logger_<%=cid%> = org.apache.log4j.Logger.getLogger("org.openxml4j.opc");
	        logger_<%=cid%>.setLevel(org.apache.log4j.Level.WARN);
			class RegexUtil_<%=cid %> {
				
		    	public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName, boolean useRegex) {
			        
			        java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
			        
			        if(useRegex){//this part process the regex issue
			        	
				        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
				        for (org.apache.poi.xssf.usermodel.XSSFSheet sheet : workbook) {
				            String sheetName = sheet.getSheetName();
				            java.util.regex.Matcher matcher = pattern.matcher(sheetName);
				            if (matcher.matches()) {
				            	if(sheet != null){
				                	list.add(sheet);
				                }	
				            }
				        }
				        
			        }else{	
			        	org.apache.poi.xssf.usermodel.XSSFSheet sheet = workbook.getSheet(oneSheetName);
		            	if(sheet != null){
		                	list.add(sheet);
		                }
			        	
			        }
			        
			        return list;
			    }
		    	
			    public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
			    	java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list =  new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
			    	org.apache.poi.xssf.usermodel.XSSFSheet sheet = workbook.getSheetAt(index);
	            	if(sheet != null){
	                	list.add(sheet);
	                }
			    	return list;
			    }
			    
			}
		RegexUtil_<%=cid %> regexUtil_<%=cid %> = new RegexUtil_<%=cid %>();
		
		Object source_<%=cid %> = <%=fileName%>;
		org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_<%=cid%> = null;
		
		if(source_<%=cid %> instanceof java.io.InputStream || source_<%=cid %> instanceof String){
			workbook_<%=cid%> = new org.apache.poi.xssf.usermodel.XSSFWorkbook(<%=fileName%>);
		}else{
			workbook_<%=cid%> = null;
			throw new Exception("The data source should be specified as Inputstream or File Path!");
		}
		try {
		
<%
		if(isAllSheets){
%>
    	java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_<%= cid %> = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
    	for(org.apache.poi.xssf.usermodel.XSSFSheet sheet_<%=cid%>:workbook_<%=cid%>){
    		sheetList_<%= cid %>.add(sheet_<%=cid%>);
    	}
<%
		}else{
%>
		java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_<%= cid %> = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
<%
			for(Map<String, String> tmp:sheetNameList){
%>
        sheetList_<%= cid %>.addAll(regexUtil_<%=cid %>.getSheets(workbook_<%= cid %>, <%=tmp.get("SHEETNAME")%>, <%=(tmp.get("USE_REGEX")!=null&&!"".equals(tmp.get("USE_REGEX")))?"true".equals(tmp.get("USE_REGEX")):false%>));
<%
			}
		}
%>
    	if(sheetList_<%= cid %>.size() <= 0){
            throw new RuntimeException("Special sheets not exist!");
        }
		
		int nb_line_<%= cid %> = 0;            

        int begin_line_<%= cid %> = <%if(("").equals(header.trim())){%>0<%}else{%><%= header %><%}%>;
        
        int footer_input_<%= cid %> = <%if(("").equals(footer.trim())){%>0<%}else{%><%=footer%><%}%>;
        
        int end_line_<%= cid %>=0;
        for(org.apache.poi.xssf.usermodel.XSSFSheet sheet_<%=cid%>:sheetList_<%= cid %>){
        	end_line_<%= cid %>+=(sheet_<%=cid%>.getLastRowNum()+1);
        }
        end_line_<%= cid %> -= footer_input_<%= cid %>;
        int limit_<%= cid %> = <%if(("").equals(limit.trim())){%>-1<%}else{%><%=limit%><%}%>;
        int start_column_<%= cid %> = <%if(("").equals(firstColumn.trim())){%>0<%}else{%><%=firstColumn%>-1<%}%>;
        int end_column_<%= cid %> = -1;
        <%if(lastColumn!=null && !("").equals(lastColumn.trim())){%>       
        Integer lastColumn_<%=cid %> = <%=lastColumn%>;
        if(lastColumn_<%=cid %>!=null){
        	end_column_<%= cid %> = lastColumn_<%=cid %>.intValue();
        }        
        <%}%>;
        
        org.apache.poi.xssf.usermodel.XSSFRow row_<%= cid %> = null;
        org.apache.poi.xssf.usermodel.XSSFSheet sheet_<%= cid %> = sheetList_<%= cid %>.get(0);
        int rowCount_<%= cid %> = 0;
        int sheetIndex_<%= cid %> = 0;
        int currentRows_<%= cid %> = (sheetList_<%= cid %>.get(0).getLastRowNum()+1);
        
        for(int i_<%= cid %> = begin_line_<%= cid %>; i_<%= cid %> < end_line_<%= cid %>; i_<%= cid %>++){
       
        	int emptyColumnCount_<%= cid %> = 0;

        	if (limit_<%= cid %> != -1 && nb_line_<%= cid %> >= limit_<%= cid %>) {
        		break;
        	}
        	
            while (i_<%= cid %> >= rowCount_<%= cid %> + currentRows_<%= cid %>) {
                rowCount_<%= cid %> += currentRows_<%= cid %>;
                sheet_<%= cid %> = sheetList_<%= cid %>.get(++sheetIndex_<%= cid %>);
                currentRows_<%= cid %> = (sheet_<%= cid %>.getLastRowNum()+1);
            }
            globalMap.put("<%=cid %>_CURRENT_SHEET",sheet_<%=cid %>.getSheetName());
<%
	if(!affect){
%>
            if (rowCount_<%= cid %> <= i_<%= cid %>) {
                row_<%= cid %> = sheet_<%= cid %>.getRow(i_<%= cid %> - rowCount_<%= cid %>);
            }
<%
	}else{
%>
            if (rowCount_<%= cid %> <= i_<%= cid %> && i_<%= cid %> - rowCount_<%= cid %> >= begin_line_<%= cid %> && currentRows_<%= cid %> - footer_input_<%= cid %> > i_<%= cid %> - rowCount_<%= cid %>) {
                row_<%= cid %> = sheet_<%= cid %>.getRow(i_<%= cid %> - rowCount_<%= cid %>);
            }else{
            	continue;
            }
<%
    }
%>          
<%
		List< ? extends IConnection> conns = node.getOutgoingSortedConnections();
		String rejectConnName = "";
		List<? extends IConnection> rejectConns = node.getOutgoingConnections("REJECT");
		if(rejectConns != null && rejectConns.size() > 0) {
			IConnection rejectConn = rejectConns.get(0);
			rejectConnName = rejectConn.getName();
		}
		List<IMetadataColumn> rejectColumnList = null;
		IMetadataTable metadataTable = node.getMetadataFromConnector("REJECT");
		if(metadataTable != null) {
			 rejectColumnList = metadataTable.getListColumns();      
		}
		if (conns!=null) {
			if (conns.size()>0) {
		    	for (int i=0;i<conns.size();i++) {
		    		IConnection connTemp = conns.get(i);
		    		if (connTemp.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
%>
		    <%=connTemp.getName() %> = null;			
<%
		    		}
		    	}
		    }
		}
		String firstConnName = "";
		if (conns!=null) {//3	 
			if (conns.size()>0) {//4
				IConnection conn = conns.get(0);
				firstConnName = conn.getName();
				List<IMetadataColumn> listColumns = metadata.getListColumns();
				int size = listColumns.size();
				if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {//5
%>
			String[] temp_row_<%= cid %> = new String[<%=listColumns.size()%>];
			int excel_end_column_<%=cid%>;
			if(row_<%= cid %>==null){
				excel_end_column_<%=cid%>=0;
			}else{
				excel_end_column_<%=cid%>=row_<%= cid %>.getLastCellNum();
			}
			int actual_end_column_<%= cid %>;
			if(end_column_<%=cid%> == -1){
				actual_end_column_<%= cid %> = excel_end_column_<%=cid%>;
			}
			else{
				actual_end_column_<%= cid %> = end_column_<%= cid %> >	excel_end_column_<%=cid%> ? excel_end_column_<%=cid%> : end_column_<%= cid %>;
			}
			for(int i=0;i<<%=size%>;i++){
				if(i + start_column_<%= cid %> < actual_end_column_<%= cid %>){
					org.apache.poi.ss.usermodel.Cell cell_<%=cid%> = row_<%= cid %>.getCell(i + start_column_<%= cid %>);
					if(cell_<%=cid%>!=null){
					switch (cell_<%=cid%>.getCellType()) {
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING:
                            temp_row_<%= cid %>[i] = cell_<%=cid%>.getRichStringCellValue().getString();
                            break;
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC:
                            if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_<%=cid%>)) {
                                temp_row_<%= cid %>[i] =cell_<%=cid%>.getDateCellValue().toString();
                            } else {
                                temp_row_<%= cid %>[i] =new java.math.BigDecimal(cell_<%=cid%>.getNumericCellValue()).toPlainString();
                            }
                            break;
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN:
                            temp_row_<%= cid %>[i] =String.valueOf(cell_<%=cid%>.getBooleanCellValue());
                            break;
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_FORMULA:
        					switch (cell_<%=cid%>.getCachedFormulaResultType()) {
                                case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING:
                                    temp_row_<%= cid %>[i] = cell_<%=cid%>.getRichStringCellValue().getString();
                                    break;
                                case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC:
                                    if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_<%=cid%>)) {
                                        temp_row_<%= cid %>[i] =cell_<%=cid%>.getDateCellValue().toString();
                                    } else {
                                        temp_row_<%= cid %>[i] =new java.math.BigDecimal(cell_<%=cid%>.getNumericCellValue()).toPlainString();
                                    }
                                    break;
                                case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN:
                                    temp_row_<%= cid %>[i] =String.valueOf(cell_<%=cid%>.getBooleanCellValue());
                                    break;
                                default:
                            		temp_row_<%= cid %>[i] = "";
                            }
                            break;
                        default:
                            temp_row_<%= cid %>[i] = "";
                        }
                	}
                	else{
                		temp_row_<%=cid%>[i]="";
                	}
					
				}else{
					temp_row_<%= cid %>[i]="";
				}								
			}
			boolean whetherReject_<%=cid %> = false;
			<%=firstConnName%> = new <%=conn.getName()%>Struct();
			int curColNum_<%=cid %> = -1;
			String curColName_<%=cid %> = "";
			try{
<%
					for (int i=0; i<size; i++) {//5
						IMetadataColumn column = listColumns.get(i);
						String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
						JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
						String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
%>
			if(temp_row_<%=cid %>[<%=i%>]<%=(isTrimAll || (!trimSelects.isEmpty() && ("true").equals(trimSelects.get(i).get("TRIM"))))?".trim()":"" %>.length() > 0) {
				curColNum_<%=cid %>=<%=i%> + start_column_<%= cid %> + 1;
				curColName_<%=cid %> = "<%=column.getLabel() %>";
								
<%		
						if (javaType == JavaTypesManager.STRING || javaType == JavaTypesManager.OBJECT) {
%>		
				<%=firstConnName %>.<%=column.getLabel() %> = temp_row_<%=cid %>[<%=i%>]<%=(isTrimAll || (!trimSelects.isEmpty() && ("true").equals(trimSelects.get(i).get("TRIM"))))?".trim()":"" %>;
<%		
						} else if(javaType == JavaTypesManager.DATE) {						
%>		
				if(<%= i%><actual_end_column_<%= cid %>){
					try{
						if(row_<%= cid %>.getCell(<%=i%>+ start_column_<%= cid %>).getCellType() == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC && org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(row_<%= cid %>.getCell(<%=i%>+ start_column_<%= cid %>))){
							<%=firstConnName %>.<%=column.getLabel() %> = row_<%= cid %>.getCell(<%=i%>+ start_column_<%= cid %>).getDateCellValue();
						}
						else{
							<%=firstConnName %>.<%=column.getLabel() %> = ParserUtils.parseTo_Date(temp_row_<%=cid %>[<%=i%>]<%=(isTrimAll || (!trimSelects.isEmpty() && ("true").equals(trimSelects.get(i).get("TRIM"))))?".trim()":"" %>, <%= patternValue %>);
						}
					}catch(Exception e){
						throw new RuntimeException("The cell format is not Date in row "+(nb_line_<%= cid %>+1));
					}
				}
				
<%		
						}else if(advancedSeparator && JavaTypesManager.isNumberType(javaType)) { 
%>
				<%=firstConnName %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%= typeToGenerate %>(ParserUtils.parseTo_Number(temp_row_<%=cid %>[<%=i%>]<%=(isTrimAll || (!trimSelects.isEmpty() && ("true").equals(trimSelects.get(i).get("TRIM"))))?".trim()":"" %>, <%= thousandsSeparator %>, <%= decimalSeparator %>));
<%
						} else if(javaType == JavaTypesManager.BYTE_ARRAY) { 
%>							
				<%=firstConnName %>.<%=column.getLabel() %> = temp_row_<%=cid %>[<%=i%>]<%=(isTrimAll || (!trimSelects.isEmpty() && ("true").equals(trimSelects.get(i).get("TRIM"))))?".trim()":"" %>.getBytes(<%=encoding %>);
<%
						} else {
%>
				<%=firstConnName %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%= typeToGenerate %>(temp_row_<%=cid %>[<%=i%>]<%=(isTrimAll || (!trimSelects.isEmpty() && ("true").equals(trimSelects.get(i).get("TRIM"))))?".trim()":"" %>);
<%
						}
%>
			}else{
<%
						String defaultValue = JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate, column.getDefault());
						if(defaultValue == null) {
%>
					throw new RuntimeException("Value is empty for column : '<%= column.getLabel() %>' in '<%=firstConnName%>' connection, value is invalid or this column should be nullable or have a default value.");
<%
						} else {
%>
				<%=firstConnName %>.<%=column.getLabel() %> = <%=defaultValue%>;
				emptyColumnCount_<%= cid %>++;
<%
						}
%>
			}
<%
					}
%>
<%if(rejectConnName.equals(firstConnName)) {%> <%=firstConnName %> = null; <%}%>

<%
	if(stopOnEmptyRow){
%>
        if(emptyColumnCount_<%= cid %> == <%=size %>){
        	break; //if meet the empty row, there will break the iterate.
        }
<%
	}
%>  
			}catch(Exception e){
			whetherReject_<%=cid%> = true;
<%
		        if (dieOnError) {
%>
	            throw(e);
<%
		        }
		        else{
					if(!("").equals(rejectConnName)&&!rejectConnName.equals(firstConnName)&&rejectColumnList != null && rejectColumnList.size() > 0) {//15
%>
					<%=rejectConnName %> = new <%=rejectConnName %>Struct();
<%
						for(IMetadataColumn column : metadata.getListColumns()) {//16
%>
					<%=rejectConnName%>.<%=column.getLabel()%> = <%=firstConnName%>.<%=column.getLabel()%>;
<%
					    }//16
%>
					<%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>+ " column: " + curColName_<%=cid %> + " (No. " + curColNum_<%=cid %> + ")";
					<%=firstConnName %> = null;
<%
					} else if(("").equals(rejectConnName)){
%>
					 System.err.println(e.getMessage());
					 <%=firstConnName %> = null;
<%
					} else if(rejectConnName.equals(firstConnName)){
%>
					<%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>+ " column: " + curColName_<%=cid %> + " (No. " + curColNum_<%=cid %> + ")";
<%
					}//15
				}
%>
			}	
							
							
<%
				}
			}
		if (conns.size()>0) {	
			boolean isFirstEnter = true;
			for (int i=0;i<conns.size();i++) {
				IConnection conn = conns.get(i);
				if ((conn.getName().compareTo(firstConnName)!=0)&&(conn.getName().compareTo(rejectConnName)!=0)&&(conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA))) {
%>
		<% if(isFirstEnter) {%>if(!whetherReject_<%=cid%>) { <% isFirstEnter = false; } %>      
             if(<%=conn.getName() %> == null){ 
            	 <%=conn.getName() %> = new <%=conn.getName() %>Struct();
             }				
<%
			    	 for (IMetadataColumn column: metadata.getListColumns()) {
%>
	    	 <%=conn.getName() %>.<%=column.getLabel() %> = <%=firstConnName %>.<%=column.getLabel() %>;    				
<%
				 	}
				}
			}
%>
		<% if(!isFirstEnter) {%> } <% } %>	
<%
		}
		}
%>
<%
		}//end version judgement
%>

<%
	}
}
//
//end%>

