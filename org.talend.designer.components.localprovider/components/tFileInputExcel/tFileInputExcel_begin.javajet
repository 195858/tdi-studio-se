<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn 
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.designer.codegen.config.CodeGeneratorArgument
		java.util.List
		java.util.Map
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
	" 
%>	
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();
List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
	IMetadataTable metadata = metadatas.get(0);
	if (metadata!=null) {
    	String header = ElementParameterParser.getValue(node, "__HEADER__");
    	String limit = ElementParameterParser.getValue(node, "__LIMIT__");
    	String footer = ElementParameterParser.getValue(node, "__FOOTER__");
    	String firstColumn = ElementParameterParser.getValue(node, "__FIRST_COLUMN__");
    	String lastColumn = ElementParameterParser.getValue(node, "__LAST_COLUMN__");
    	String dieOnErrorStr = ElementParameterParser.getValue(node, "__DIE_ON_ERROR__");
		boolean dieOnError = (dieOnErrorStr!=null&&!dieOnErrorStr.equals(""))?dieOnErrorStr.equals("true"):false;
		String encoding = ElementParameterParser.getValue(node,"__ENCODING__");
		
		String allSheets = ElementParameterParser.getValue(node, "__ALL_SHEETS__");
		boolean isAllSheets = (allSheets!=null&&!allSheets.equals(""))?allSheets.equals("true"):false;
		List<Map<String, String>> sheetNameList = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__SHEETLIST__");
		
		String advancedSeparatorStr = ElementParameterParser.getValue(node, "__ADVANCED_SEPARATOR__");
		boolean advancedSeparator = (advancedSeparatorStr!=null&&!advancedSeparatorStr.equals(""))?advancedSeparatorStr.equals("true"):false;
		String thousandsSeparator = ElementParameterParser.getValueWithJavaType(node, "__THOUSANDS_SEPARATOR__", JavaTypesManager.CHARACTER);
		String decimalSeparator = ElementParameterParser.getValueWithJavaType(node, "__DECIMAL_SEPARATOR__", JavaTypesManager.CHARACTER);		    	
%>
		
		final jxl.WorkbookSettings workbookSettings_<%= cid %> = new jxl.WorkbookSettings();
        workbookSettings_<%= cid %>.setEncoding(<%=encoding %>);
        final jxl.Workbook workbook_<%= cid %> = jxl.Workbook.getWorkbook(new java.io.BufferedInputStream(new java.io.FileInputStream(
        						<%=ElementParameterParser.getValue(node,"__FILENAME__")%>)), workbookSettings_<%= cid %>);
<%
		if(isAllSheets){
%>
		java.util.List<jxl.Sheet> sheetList_<%= cid %> = java.util.Arrays.<jxl.Sheet> asList(workbook_<%= cid %>.getSheets());
<%
		}else{
%>
		java.util.List<jxl.Sheet> sheetList_<%= cid %> = new java.util.ArrayList<jxl.Sheet>();
		jxl.Sheet sh_<%=cid%> = null;
<%
			for(Map<String, String> tmp:sheetNameList){
%>
		sh_<%=cid%> = workbook_<%= cid %>.getSheet(<%=tmp.get("SHEETNAME")%>);
        if (sh_<%=cid%> != null) {
            sheetList_<%= cid %>.add(sh_<%=cid%>);
        }
<%
			}
		}
%>
        if(sheetList_<%= cid %>.size() <= 0){
        	throw new RuntimeException("Special sheets not exist!");
        }
        
        int nb_line_<%= cid %> = 0;            

        int begin_line_<%= cid %> = <%if(header.trim().equals("")){%>0<%}else{%><%= header %><%}%>;
        int end_line_<%= cid %>=0;
        for(jxl.Sheet sheet_<%=cid%>:sheetList_<%= cid %>){
        	end_line_<%= cid %>+=sheet_<%=cid%>.getRows();
        }
        end_line_<%= cid %> -= <%if(footer.trim().equals("")){%>0<%}else{%><%=footer%><%}%>;
        int limit_<%= cid %> = <%if(limit.trim().equals("")){%>-1<%}else{%><%=limit%><%}%>;
        int start_column_<%= cid %> = <%if(firstColumn.trim().equals("")){%>0<%}else{%><%=firstColumn%>-1<%}%>;
        int end_column_<%= cid %> = <%if(lastColumn.trim().equals("")){%>sheetList_<%= cid %>.get(0).getColumns()<%}else{%><%=lastColumn%><%}%>;

        jxl.Cell[] row_<%= cid %> = null;
        jxl.Sheet sheet_<%= cid %> = sheetList_<%= cid %>.get(0);
        int rowCount_<%= cid %> = 0;
        int sheetIndex_<%= cid %> = 0;
        int currentRows_<%= cid %> = sheetList_<%= cid %>.get(0).getRows();
        
        for(int i_<%= cid %> = begin_line_<%= cid %>; i_<%= cid %> < end_line_<%= cid %>; i_<%= cid %>++){

        	if (limit_<%= cid %> != -1 && nb_line_<%= cid %> >= limit_<%= cid %>) {
        		break;
        	}
        	
            while (i_<%= cid %> >= rowCount_<%= cid %> + currentRows_<%= cid %>) {
                rowCount_<%= cid %> += currentRows_<%= cid %>;
                sheet_<%= cid %> = sheetList_<%= cid %>.get(++sheetIndex_<%= cid %>);
                currentRows_<%= cid %> = sheet_<%= cid %>.getRows();
            }

            if (rowCount_<%= cid %> <= i_<%= cid %>) {
                row_<%= cid %> = sheet_<%= cid %>.getRow(i_<%= cid %> - rowCount_<%= cid %>);
            }   
        
<%
//begin
//
	List< ? extends IConnection> conns = node.getOutgoingSortedConnections();

    String rejectConnName = "";
    List<? extends IConnection> rejectConns = node.getOutgoingConnections("REJECT");
    if(rejectConns != null && rejectConns.size() > 0) {
        IConnection rejectConn = rejectConns.get(0);
        rejectConnName = rejectConn.getName();
    }
    List<IMetadataColumn> rejectColumnList = null;
    IMetadataTable metadataTable = node.getMetadataFromConnector("REJECT");
    if(metadataTable != null) {
        rejectColumnList = metadataTable.getListColumns();      
    }

    	if (conns!=null) {
    		if (conns.size()>0) {
    			for (int i=0;i<conns.size();i++) {
    				IConnection connTemp = conns.get(i);
    				if (connTemp.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
%>
    		<%=connTemp.getName() %> = null;			
<%
    				}
    			}
    		}
    	}
    	
		String firstConnName = "";
		if (conns!=null) {
			if (conns.size()>0) {
				IConnection conn = conns.get(0);
				firstConnName = conn.getName();
				List<IMetadataColumn> listColumns = metadata.getListColumns();
				int size = listColumns.size();
				if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
//
//end%>
			String[] temp_row_<%= cid %> = new String[<%=listColumns.size()%>];
			int actual_end_column_<%= cid %> = end_column_<%= cid %> >	row_<%= cid %>.length ? row_<%= cid %>.length : end_column_<%= cid %>;
			for(int i=0;i<<%=size%>;i++){							
				if(i + start_column_<%= cid %> < actual_end_column_<%= cid %>){
					temp_row_<%= cid %>[i] = row_<%= cid %>[i + start_column_<%= cid %>].getContents();
				}else{
					temp_row_<%= cid %>[i]="";
				}								
			}
			
			boolean whetherReject_<%=cid %> = false;
			<%=firstConnName %> = new <%=conn.getName() %>Struct();
			try {			
<%
//start
//
					for (int i=0; i<size; i++) {
						IMetadataColumn column = listColumns.get(i);
						String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
						JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
						String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
//
//end%>					
			if(temp_row_<%=cid %>[<%=i%>].length() > 0) {
<%
//start
//

						if(javaType == JavaTypesManager.STRING || javaType == JavaTypesManager.OBJECT) {
//
//end%>
			<%=firstConnName %>.<%=column.getLabel() %> = temp_row_<%=cid %>[<%=i%>];
<%		
//start
			} else if(javaType == JavaTypesManager.DATE) {
//
//end%>		
			if(<%= i%><actual_end_column_<%= cid %>){
				try{
					java.util.Date dateGMT_<%=cid %> = ((jxl.DateCell)row_<%= cid %>[<%=i%> + start_column_<%= cid %>]).getDate();
					<%=firstConnName %>.<%=column.getLabel() %> = new java.util.Date(dateGMT_<%=cid %>.getTime() - java.util.TimeZone.getDefault().getRawOffset());
				}catch(Exception e){
					throw new RuntimeException("The cell format is not Date in row "+(nb_line_<%= cid %>+1)+" column "+(<%=i%> + start_column_<%= cid %>+1));
				}
			}
<%
//start			
			}else if(advancedSeparator && JavaTypesManager.isNumberType(javaType, column.isNullable())) { 
%>
		<%=firstConnName %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%= typeToGenerate %>(ParserUtils.parseTo_Number(temp_row_<%=cid %>[<%=i%>], <%= thousandsSeparator %>, <%= decimalSeparator %>));
<%
					} else if(javaType == JavaTypesManager.BYTE_ARRAY) { 
	%>							
			<%=firstConnName %>.<%=column.getLabel() %> = temp_row_<%=cid %>[<%=i%>].getBytes(<%=encoding %>);
	<%
			} else {
//
//end%>
			<%=firstConnName %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%= typeToGenerate %>(temp_row_<%=cid %>[<%=i%>]);
<%
//start
//
						}
//
//end%>					
			}else {
<%
//start
//
						String defaultValue = JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate, column.getDefault());
						if(defaultValue == null) {
//
//end%>
				throw new RuntimeException("Value is empty for column : '<%= column.getLabel() %>' in '<%=firstConnName%>' connection, value is invalid or this column should be nullable or have a default value.");
<%
//start
//
						} else {
//
//end%>
				<%=firstConnName %>.<%=column.getLabel() %> = <%=defaultValue%>;
<%
//start
//
						}
//
//end%>
		}
<%
//start
//
					}%>
					
<%if(rejectConnName.equals(firstConnName)) {%> <%=firstConnName %> = null; <%}%>
					
    } catch (Exception e) {
        whetherReject_<%=cid%> = true;
        <%
        if (dieOnError) {
            %>
            throw(e);
            <%
        } else {
            if(!rejectConnName.equals("")&&!rejectConnName.equals(firstConnName)&&rejectColumnList != null && rejectColumnList.size() > 0) {

                %>
                    <%=rejectConnName %> = new <%=rejectConnName %>Struct();
                <%
                for(IMetadataColumn column : metadata.getListColumns()) {
                    %>
                    <%=rejectConnName%>.<%=column.getLabel()%> = <%=firstConnName%>.<%=column.getLabel()%>;
                    <%
                }
                %>
                <%=rejectConnName%>.errorMessage = e.getMessage();
                <%=firstConnName %> = null;
                <%
            } else if(rejectConnName.equals("")){
                %>
                System.err.println(e.getMessage());
                <%=firstConnName %> = null;
                <%
            } else if(rejectConnName.equals(firstConnName)){%>
            	<%=rejectConnName%>.errorMessage = e.getMessage();
            <%}
        } 
        %>
    }					
					
					<%
				}
			}
		if (conns.size()>0) {	
			boolean isFirstEnter = true;
			for (int i=0;i<conns.size();i++) {
				IConnection conn = conns.get(i);
				if ((conn.getName().compareTo(firstConnName)!=0)&&(conn.getName().compareTo(rejectConnName)!=0)&&(conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA))) {
%>
		<% if(isFirstEnter) {%>if(!whetherReject_<%=cid%>) { <% isFirstEnter = false; } %>      
             if(<%=conn.getName() %> == null){ 
            	 <%=conn.getName() %> = new <%=conn.getName() %>Struct();
             }				
<%
			    	 for (IMetadataColumn column: metadata.getListColumns()) {
%>
	    	 <%=conn.getName() %>.<%=column.getLabel() %> = <%=firstConnName %>.<%=column.getLabel() %>;    				
<%
				 	}
				}
			}
%>
		<% if(!isFirstEnter) {%> } <% } %>	
<%
		}
		}
	}
}
//
//end%>