<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn 
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.designer.codegen.config.CodeGeneratorArgument
		java.util.List
		java.util.Map
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
	" 
%>	
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();
List<IMetadataTable> metadatas = node.getMetadataList();

if ((metadatas == null) || metadatas.isEmpty()) {
	return "";
}
IMetadataTable metadata = metadatas.get(0);

if (metadata == null) {
	return "";
}
boolean version07 = "true".equals(ElementParameterParser.getValue(node, "__VERSION_2007__"));
boolean dieOnError = "true".equals(ElementParameterParser.getValue(node, "__DIE_ON_ERROR__"));
boolean isAllSheets = "true".equals(ElementParameterParser.getValue(node, "__ALL_SHEETS__"));
boolean advancedSeparator = "true".equals(ElementParameterParser.getValue(node, "__ADVANCED_SEPARATOR__"));
boolean affect = "true".equals(ElementParameterParser.getValue(node, "__AFFECT_EACH_SHEET__"));
boolean stopOnEmptyRow = "true".equals(ElementParameterParser.getValue(node, "__STOPREAD_ON_EMPTYROW__"));
boolean isTrimAll = "true".equals(ElementParameterParser.getValue(node,"__TRIMALL__"));
String fileName = ElementParameterParser.getValue(node, "__FILENAME__");
String header = ElementParameterParser.getValue(node, "__HEADER__");
String limit = ElementParameterParser.getValue(node, "__LIMIT__");
String footer = ElementParameterParser.getValue(node, "__FOOTER__");
String firstColumn = ElementParameterParser.getValue(node, "__FIRST_COLUMN__");
String lastColumn = ElementParameterParser.getValue(node, "__LAST_COLUMN__");
String encoding = ElementParameterParser.getValue(node, "__ENCODING__");
String thousandsSeparator = ElementParameterParser.getValueWithJavaType(node, "__THOUSANDS_SEPARATOR__", JavaTypesManager.CHARACTER);
String decimalSeparator = ElementParameterParser.getValueWithJavaType(node, "__DECIMAL_SEPARATOR__", JavaTypesManager.CHARACTER);
List<Map<String, String>> sheetNameList = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__SHEETLIST__");
List<Map<String, String>> trimSelects = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__TRIMSELECT__");

if (!version07) { // version judgement
	boolean bReadRealValue = "true".equals(ElementParameterParser.getValue(node, "__READ_REAL_VALUE__"));
	boolean notNeedValidateOnCell = "true".equals(ElementParameterParser.getValue(node,"__NOVALIDATE_ON_CELL__"));  // make wizard work
	boolean suppressWarn = "true".equals(ElementParameterParser.getValue(node,"__SUPPRESS_WARN__"));  // make wizard work
	%>

	class RegexUtil_<%=cid %> {

		public java.util.List<jxl.Sheet> getSheets(jxl.Workbook workbook, String oneSheetName, boolean useRegex) {
			java.util.List<jxl.Sheet> list = new java.util.ArrayList<jxl.Sheet>();

			if (useRegex) {//this part process the regex issue
				jxl.Sheet[] sheets = workbook.getSheets();
				java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);

				for (int i = 0; i < sheets.length; i++) {
					String sheetName = sheets[i].getName();
					java.util.regex.Matcher matcher = pattern.matcher(sheetName);

					if (matcher.matches()) {
						jxl.Sheet sheet = workbook.getSheet(sheetName);

						if (sheet != null)  
							list.add(sheet);
					}
				}

			} else {	
				jxl.Sheet sheet = workbook.getSheet(oneSheetName);

				if (sheet != null) 
					list.add(sheet);
			}
			return list;
		}

		public java.util.List<jxl.Sheet> getSheets(jxl.Workbook workbook, int index, boolean useRegex) {
			java.util.List<jxl.Sheet> list =  new java.util.ArrayList<jxl.Sheet>();
			jxl.Sheet sheet = workbook.getSheet(index);

			if (sheet != null) 
				list.add(sheet);
			
			return list;
		}
	}
	RegexUtil_<%=cid %> regexUtil_<%=cid %> = new RegexUtil_<%=cid %>();
	final jxl.WorkbookSettings workbookSettings_<%= cid %> = new jxl.WorkbookSettings();

	<%if (notNeedValidateOnCell) {%>
		workbookSettings_<%= cid %>.setCellValidationDisabled(true);
	<%
	}

	if (suppressWarn) {
	%>
		workbookSettings_<%= cid %>.setSuppressWarnings(true);
	<%}%>
	workbookSettings_<%= cid %>.setEncoding(<%=encoding %>);
	Object source_<%=cid %> =<%=fileName%>;
	final jxl.Workbook workbook_<%= cid %>;

	if (source_<%=cid %> instanceof java.io.InputStream) {
		workbook_<%= cid %> = jxl.Workbook.getWorkbook(new java.io.BufferedInputStream((java.io.InputStream)source_<%=cid %>), workbookSettings_<%= cid %>);
	} else if (source_<%=cid %> instanceof String){
		workbook_<%= cid %> = jxl.Workbook.getWorkbook(new java.io.BufferedInputStream(new java.io.FileInputStream(
		source_<%=cid %>.toString())), workbookSettings_<%= cid %>);
	} else {
		workbook_<%= cid %> = null;
		throw new Exception("The data source should be specified as Inputstream or File Path!");
	}

	<%if (isAllSheets) {%>
		java.util.List<jxl.Sheet> sheetList_<%= cid %> = java.util.Arrays.<jxl.Sheet> asList(workbook_<%= cid %>.getSheets());
	<%} else {%>
		java.util.List<jxl.Sheet> sheetList_<%= cid %> = new java.util.ArrayList<jxl.Sheet>();

		<%for (Map<String, String> tmp : sheetNameList) {%>
			sheetList_<%= cid %>.addAll(regexUtil_<%=cid %>.getSheets(workbook_<%= cid %>, <%=tmp.get("SHEETNAME")%>, <%=(tmp.get("USE_REGEX")!=null&&!"".equals(tmp.get("USE_REGEX")))?"true".equals(tmp.get("USE_REGEX")):false%>));
		<%}
	}%>

	if (sheetList_<%= cid %>.size() <= 0) {
		throw new RuntimeException("Special sheets not exist!");
	}
	int nb_line_<%= cid %> = 0;            
	int begin_line_<%= cid %> = <%if (("").equals(header.trim())) {%>0<%} else {%><%= header %><%}%>;
	int footer_input_<%= cid %> = <%if (("").equals(footer.trim())) {%>0<%} else {%><%=footer%><%}%>;
	int end_line_<%= cid %>=0;

	for (jxl.Sheet sheet_<%=cid%> : sheetList_<%= cid %>){
		end_line_<%= cid %>+=sheet_<%=cid%>.getRows();
	}
	end_line_<%= cid %> -= footer_input_<%= cid %>;
	int limit_<%= cid %> = <%if(("").equals(limit.trim())){%>-1<%}else{%><%=limit%><%}%>;
	int start_column_<%= cid %> = <%if(("").equals(firstColumn.trim())){%>0<%}else{%><%=firstColumn%>-1<%}%>;
	int end_column_<%= cid %> = sheetList_<%= cid %>.get(0).getColumns();

	<%if (lastColumn != null && !("").equals(lastColumn.trim())){%>
		Integer lastColumn_<%=cid %> = <%=lastColumn%>;

		if (lastColumn_<%=cid %> != null) {
			end_column_<%= cid %> = lastColumn_<%=cid %>.intValue();
		}
	<%}%>
	jxl.Cell[] row_<%= cid %> = null;
	jxl.Sheet sheet_<%= cid %> = sheetList_<%= cid %>.get(0);
	int rowCount_<%= cid %> = 0;
	int sheetIndex_<%= cid %> = 0;
	int currentRows_<%= cid %> = sheetList_<%= cid %>.get(0).getRows();

	for (int i_<%= cid %> = begin_line_<%= cid %>; i_<%= cid %> < end_line_<%= cid %>; i_<%= cid %>++) {
		int emptyColumnCount_<%= cid %> = 0;

		if (limit_<%= cid %> != -1 && nb_line_<%= cid %> >= limit_<%= cid %>) {
			break;
		}

		while (i_<%= cid %> >= rowCount_<%= cid %> + currentRows_<%= cid %>) {
			rowCount_<%= cid %> += currentRows_<%= cid %>;
			sheet_<%= cid %> = sheetList_<%= cid %>.get(++sheetIndex_<%= cid %>);
			currentRows_<%= cid %> = sheet_<%= cid %>.getRows();
		}
		<%if (!affect) {%>
			if (rowCount_<%= cid %> <= i_<%= cid %>) {
				row_<%= cid %> = sheet_<%= cid %>.getRow(i_<%= cid %> - rowCount_<%= cid %>);
			}
		<%} else {%>
			if (rowCount_<%= cid %> <= i_<%= cid %> && i_<%= cid %> - rowCount_<%= cid %> >= begin_line_<%= cid %> && currentRows_<%= cid %> - footer_input_<%= cid %> > i_<%= cid %> - rowCount_<%= cid %>) {
				row_<%= cid %> = sheet_<%= cid %>.getRow(i_<%= cid %> - rowCount_<%= cid %>);
			}else{
				continue;
			}
		<%}%>
		globalMap.put("<%=cid %>_CURRENT_SHEET",sheet_<%=cid %>.getName());
		<%
		List< ? extends IConnection> conns = node.getOutgoingSortedConnections();
		String rejectConnName = "";
		List<? extends IConnection> rejectConns = node.getOutgoingConnections("REJECT");

		if (rejectConns != null && rejectConns.size() > 0) {
			IConnection rejectConn = rejectConns.get(0);
			rejectConnName = rejectConn.getName();
		}
		List<IMetadataColumn> rejectColumnList = null;
		IMetadataTable metadataTable = node.getMetadataFromConnector("REJECT");

		if (metadataTable != null) {
			rejectColumnList = metadataTable.getListColumns();      
		}

		if (conns != null && conns.size() > 0) { // B_01_01
			for (int i = 0; i < conns.size(); i++) {
				IConnection connTemp = conns.get(i);

				if (connTemp.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
				%>
					<%=connTemp.getName() %> = null;
				<%
				}
			}
			IConnection conn = conns.get(0);
			String firstConnName = conn.getName();
			List<IMetadataColumn> listColumns = metadata.getListColumns();
			int size = listColumns.size();

			if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) { // B_01_02
			%>
				String[] temp_row_<%= cid %> = new String[<%=listColumns.size()%>];
				int actual_end_column_<%= cid %> = end_column_<%= cid %> >	row_<%= cid %>.length ? row_<%= cid %>.length : end_column_<%= cid %>;
				
				for (int i=0; i<<%=size%>; i++) {

					if (i + start_column_<%= cid %> < actual_end_column_<%= cid %>) {
						jxl.Cell cell_<%=cid%> = row_<%= cid %>[i + start_column_<%= cid %>];

						if (<%=bReadRealValue%> && jxl.CellType.NUMBER == cell_<%=cid%>.getType()) {				   
							temp_row_<%= cid %>[i] = String.valueOf(((jxl.NumberCell)cell_<%=cid%>).getValue());
						} else {
							temp_row_<%= cid %>[i] = cell_<%=cid%>.getContents();
						}

					} else {
						temp_row_<%= cid %>[i]="";
					}								
				}
				boolean whetherReject_<%=cid %> = false;
				<%=firstConnName %> = new <%=conn.getName() %>Struct();
				int curColNum_<%=cid %> = -1;
				String curColName_<%=cid %> = "";

				try {			
					<%
					for (int i = 0; i < size; i++) {
						IMetadataColumn column = listColumns.get(i);
						String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
						JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
						String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
						%>

						if (temp_row_<%=cid %>[<%=i%>]<%=(isTrimAll || (!trimSelects.isEmpty() && ("true").equals(trimSelects.get(i).get("TRIM"))))?".trim()":"" %>.length() > 0) {
							curColNum_<%=cid %>=<%=i%> + start_column_<%= cid %> + 1;
							curColName_<%=cid %> = "<%=column.getLabel() %>";

							<%if (javaType == JavaTypesManager.STRING || javaType == JavaTypesManager.OBJECT) {%>
								<%=firstConnName %>.<%=column.getLabel() %> = temp_row_<%=cid %>[<%=i%>]<%=(isTrimAll || (!trimSelects.isEmpty() && ("true").equals(trimSelects.get(i).get("TRIM"))))?".trim()":"" %>;
							<%} else if (javaType == JavaTypesManager.DATE) {%>		
								if(<%= i%> < actual_end_column_<%= cid %>){
									try{
										java.util.Date dateGMT_<%=cid %> = ((jxl.DateCell)row_<%= cid %>[<%=i%> + start_column_<%= cid %>]).getDate();
										<%=firstConnName %>.<%=column.getLabel() %> = new java.util.Date(dateGMT_<%=cid %>.getTime() - java.util.TimeZone.getDefault().getOffset(dateGMT_<%=cid %>.getTime()));
									}catch(Exception e){
										throw new RuntimeException("The cell format is not Date in row "+(nb_line_<%= cid %>+1));
									}
								}
							<%} else if (advancedSeparator && JavaTypesManager.isNumberType(javaType)) {%>
								<%=firstConnName %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%= typeToGenerate %>(ParserUtils.parseTo_Number(temp_row_<%=cid %>[<%=i%>]<%=(isTrimAll || (!trimSelects.isEmpty() && ("true").equals(trimSelects.get(i).get("TRIM"))))?".trim()":"" %>, <%= thousandsSeparator %>, <%= decimalSeparator %>));
							<%} else if (javaType == JavaTypesManager.BYTE_ARRAY) { %>							
								<%=firstConnName %>.<%=column.getLabel() %> = temp_row_<%=cid %>[<%=i%>]<%=(isTrimAll || (!trimSelects.isEmpty() && ("true").equals(trimSelects.get(i).get("TRIM"))))?".trim()":"" %>.getBytes(<%=encoding %>);
							<%} else {%>
								<%=firstConnName %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%= typeToGenerate %>(temp_row_<%=cid %>[<%=i%>]<%=(isTrimAll || (!trimSelects.isEmpty() && ("true").equals(trimSelects.get(i).get("TRIM"))))?".trim()":"" %>);
							<%}%>
						} else {
							<%
							String defaultValue = JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate, column.getDefault());

							if (defaultValue == null) {
							%>
								throw new RuntimeException("Value is empty for column : '<%= column.getLabel() %>' in '<%=firstConnName%>' connection, value is invalid or this column should be nullable or have a default value.");
							<%} else {%>
								<%=firstConnName %>.<%=column.getLabel() %> = <%=defaultValue%>;
								emptyColumnCount_<%= cid %>++;
							<%}%>
						}
					<%
					}

					if (rejectConnName.equals(firstConnName)) {
					%> 
						<%=firstConnName %> = null; 
					<%
					}

					if (stopOnEmptyRow) {
					%>
						if (emptyColumnCount_<%= cid %> == <%=size %>){
							break; //if meet the empty row, there will break the iterate.
						}
					<%
					}
					%>  
				} catch (Exception e) {
					whetherReject_<%=cid%> = true;

					<%if (dieOnError) {%>
						throw(e);
					<%} else {
						if (!("").equals(rejectConnName) && !rejectConnName.equals(firstConnName)&&rejectColumnList != null && rejectColumnList.size() > 0) {
						%>
							<%=rejectConnName %> = new <%=rejectConnName %>Struct();

							<%for (IMetadataColumn column : metadata.getListColumns()) {%>
								<%=rejectConnName%>.<%=column.getLabel()%> = <%=firstConnName%>.<%=column.getLabel()%>;
							<%}%>
							<%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>+ " column: " + curColName_<%=cid %> + " (No. " + curColNum_<%=cid %> + ")";
							<%=firstConnName %> = null;
						<%
						} else if ("".equals(rejectConnName)) {
						%>
							System.err.println(e.getMessage());
							<%=firstConnName %> = null;
						<%
						} else if (rejectConnName.equals(firstConnName)) {%>
							<%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>+ " column: " + curColName_<%=cid %> + " (No. " + curColNum_<%=cid %> + ")";
						<%
						}
					} %>
				}					
			<%
			} // B_01_02
			boolean isFirstEnter = true;

			for (IConnection otherConn : conns) {

				if ((otherConn.getName().compareTo(firstConnName) != 0)&&(otherConn.getName().compareTo(rejectConnName) != 0)&&(otherConn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA))) {
				
					if (isFirstEnter) {%>	if (!whetherReject_<%=cid%>) { <% isFirstEnter = false; } %>  

					if (<%=otherConn.getName() %> == null) { 
						<%=otherConn.getName() %> = new <%=otherConn.getName() %>Struct();
					}

					<%for (IMetadataColumn column: metadata.getListColumns()) {%>
						<%=otherConn.getName() %>.<%=column.getLabel() %> = <%=firstConnName %>.<%=column.getLabel() %>;    				
					<%}
				}
			}
			
			if (!isFirstEnter) {%> } <%	} 
		} // B_01_01
	// here no close brace, since HAS_CONDITIONAL_OUTPUTS="true" 
} else { /***excel 2007 xlsx*****/
%>
	org.apache.log4j.Logger logger_<%=cid%> = org.apache.log4j.Logger.getLogger("org.openxml4j.opc");
	logger_<%=cid%>.setLevel(org.apache.log4j.Level.WARN);

	class RegexUtil_<%=cid %> {
		public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName, boolean useRegex) {
			java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

			if (useRegex) {//this part process the regex issue
				java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);

				for (org.apache.poi.xssf.usermodel.XSSFSheet sheet : workbook) {
					String sheetName = sheet.getSheetName();
					java.util.regex.Matcher matcher = pattern.matcher(sheetName);

					if (matcher.matches()) {
						if(sheet != null){
							list.add(sheet);
						}	
					}
				}
			} else {	
				org.apache.poi.xssf.usermodel.XSSFSheet sheet = workbook.getSheet(oneSheetName);

				if (sheet != null) {
					list.add(sheet);
				}
			}
			return list;
		}

		public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
			java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list =  new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
			org.apache.poi.xssf.usermodel.XSSFSheet sheet = workbook.getSheetAt(index);

			if (sheet != null) {
				list.add(sheet);
			}
			return list;
		}
	}
	RegexUtil_<%=cid %> regexUtil_<%=cid %> = new RegexUtil_<%=cid %>();
	Object source_<%=cid %> = <%=fileName%>;
	org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_<%=cid%> = null;

	if (source_<%=cid %> instanceof java.io.InputStream || source_<%=cid %> instanceof String) {
		workbook_<%=cid%> = new org.apache.poi.xssf.usermodel.XSSFWorkbook(<%=fileName%>);
	}else{
		workbook_<%=cid%> = null;
		throw new Exception("The data source should be specified as Inputstream or File Path!");
	}
	java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_<%= cid %> = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
	
	<%if (isAllSheets) {%>
		for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_<%=cid%> : workbook_<%=cid%>) {
			sheetList_<%= cid %>.add(sheet_<%=cid%>);
		}
	<% } else {
		for (Map<String, String> tmp : sheetNameList) {
		%>
			sheetList_<%= cid %>.addAll(regexUtil_<%=cid %>.getSheets(workbook_<%= cid %>, <%=tmp.get("SHEETNAME")%>, <%=(tmp.get("USE_REGEX") != null && !"".equals(tmp.get("USE_REGEX"))) ? "true".equals(tmp.get("USE_REGEX")) : false%>));
		<%
		}
	}%>

	if (sheetList_<%= cid %>.size() <= 0) {
		throw new RuntimeException("Special sheets not exist!");
	}
	int nb_line_<%= cid %> = 0;
	int header_<%= cid %> = <%if(("").equals(header.trim())){%>0<%}else{%><%= header %><%}%>;
	int footer_<%= cid %> = <%if(("").equals(footer.trim())){%>0<%}else{%><%=footer%><%}%>;
	int limit_<%= cid %> = <%if(("").equals(limit.trim())){%>-1<%}else{%><%=limit%><%}%>;
	int total_nb_<%= cid %> = 0;
	int sheetIndex_<%= cid %> = 0;

	for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_<%=cid%> : sheetList_<%= cid %>){
		total_nb_<%= cid %> += (sheet_<%=cid%>.getLastRowNum() + 1);
	}
	total_nb_<%= cid %> -= footer_<%= cid %>;
	org.apache.poi.xssf.usermodel.XSSFRow row_<%= cid %> = null;
	org.apache.poi.xssf.usermodel.XSSFSheet sheet_<%= cid %> = sheetList_<%= cid %>.get(0);
	int sheet_nb_<%= cid %> = sheet_<%= cid %>.getLastRowNum() + 1;
	// nb of previous sheets.
	int pre_sheets_nb_<%= cid %> = 0; 
	// nb of previous sheets and current sheets.
	int sheets_nb_<%= cid %> = sheet_nb_<%= cid %>; 

	for (int i_<%= cid %> = header_<%= cid %>; i_<%= cid %> < total_nb_<%= cid %>; i_<%= cid %>++) {
		int emptyColumnCount_<%= cid %> = 0;
		// index of row in current sheet
		int indexInSheet_<%=cid%> = 0; 

		if (limit_<%= cid %> != -1 && nb_line_<%= cid %> >= limit_<%= cid %>) {
			break;
		}
		
		// get next sheet
		while (i_<%= cid %> >= sheets_nb_<%= cid %> ) {
			pre_sheets_nb_<%= cid %> += sheet_nb_<%= cid %>;
			sheet_<%= cid %> = sheetList_<%= cid %>.get(++sheetIndex_<%= cid %>);
			sheet_nb_<%= cid %> = sheet_<%= cid %>.getLastRowNum() + 1;
			sheets_nb_<%= cid %> = pre_sheets_nb_<%= cid %> + sheet_nb_<%= cid %>;
		}
		globalMap.put("<%=cid %>_CURRENT_SHEET", sheet_<%=cid %>.getSheetName());
		indexInSheet_<%=cid%> = i_<%= cid %> - pre_sheets_nb_<%= cid %>;
		
		// fetch row
		<%if (!affect) {%>
			if (indexInSheet_<%=cid%> >= 0 ) {
				row_<%= cid %> = sheet_<%= cid %>.getRow(indexInSheet_<%=cid%>);
			}
		<%} else {%>
			if (indexInSheet_<%=cid%> >= 0
					&& indexInSheet_<%=cid%> >= header_<%= cid %> 
						&& sheet_nb_<%= cid %> - footer_<%= cid %> > indexInSheet_<%=cid%>) {
				row_<%= cid %> = sheet_<%= cid %>.getRow(indexInSheet_<%=cid%>);
			} else {
				continue; // skip row
			}
		<%}
		List< ? extends IConnection> conns = node.getOutgoingSortedConnections();
		String rejectConnName = "";
		List<? extends IConnection> rejectConns = node.getOutgoingConnections("REJECT");

		if (rejectConns != null && rejectConns.size() > 0) {
			IConnection rejectConn = rejectConns.get(0);
			rejectConnName = rejectConn.getName();
		}
		List<IMetadataColumn> rejectColumnList = null;
		IMetadataTable metadataTable = node.getMetadataFromConnector("REJECT");

		if (metadataTable != null) {
			rejectColumnList = metadataTable.getListColumns();      
		}

		if (conns != null && conns.size() > 0) { //B_02_01
			for (int i = 0; i < conns.size(); i++) {
				IConnection connTemp = conns.get(i);

				if (connTemp.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
				%>
					<%=connTemp.getName() %> = null;			
				<%
				}
			}
			IConnection conn = conns.get(0);
			String firstConnName = conn.getName();
			List<IMetadataColumn> listColumns = metadata.getListColumns();
			int size = listColumns.size();

			if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) { //B_02_02  
			%>
				int indexOfStartCol_<%= cid %> = <%if ("".equals(firstColumn)) {%>0<%} else {%><%=firstColumn%> - 1<%}%>;
				int indexOfEndCol_<%= cid %> = <%if ("".equals(lastColumn)) {%>-1<%} else {%><%=lastColumn%> - 1<%}%>;
				int indexOfLastCol_<%=cid%> = (row_<%= cid %> == null) ? 0 : row_<%= cid %>.getLastCellNum();
				int cols_nb_<%=cid%> = (indexOfEndCol_<%=cid%> == -1) ? indexOfLastCol_<%=cid%> + 1 : Math.min(indexOfEndCol_<%= cid %> - indexOfStartCol_<%= cid %> + 1, indexOfLastCol_<%=cid%> + 1);
				// to fetch less cells
				cols_nb_<%=cid%> = Math.min(cols_nb_<%=cid%>, <%=size%>);  
				String[] temp_row_<%= cid %> = new String[cols_nb_<%=cid%>];
				
				// no needed to cache all fields of a row

				for (int i = 0; i < cols_nb_<%=cid%>; i++) {
				
					if (row_<%= cid %> != null) {
						org.apache.poi.ss.usermodel.Cell cell_<%=cid%> = row_<%= cid %>.getCell(i + indexOfStartCol_<%= cid %>);
	
						if (cell_<%=cid%> != null) {
	
							switch (cell_<%=cid%>.getCellType()) {
								case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING:
									temp_row_<%= cid %>[i] = cell_<%=cid%>.getRichStringCellValue().getString();
									break;
								case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC:
									if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_<%=cid%>)) {
										temp_row_<%= cid %>[i] =cell_<%=cid%>.getDateCellValue().toString();
									} else {
										temp_row_<%= cid %>[i] =new java.math.BigDecimal(cell_<%=cid%>.getNumericCellValue()).toPlainString();
									}
									break;
								case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN:
									temp_row_<%= cid %>[i] =String.valueOf(cell_<%=cid%>.getBooleanCellValue());
									break;
								case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_FORMULA:
	
									switch (cell_<%=cid%>.getCachedFormulaResultType()) {
										case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING:
											temp_row_<%= cid %>[i] = cell_<%=cid%>.getRichStringCellValue().getString();
											break;
										case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC:
											if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_<%=cid%>)) {
												temp_row_<%= cid %>[i] =cell_<%=cid%>.getDateCellValue().toString();
											} else {
												temp_row_<%= cid %>[i] =new java.math.BigDecimal(cell_<%=cid%>.getNumericCellValue()).toPlainString();
											}
											break;
										case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN:
											temp_row_<%= cid %>[i] =String.valueOf(cell_<%=cid%>.getBooleanCellValue());
											break;
										default:
											temp_row_<%= cid %>[i] = "";
									}
									break;
								default:
									temp_row_<%= cid %>[i] = "";
							}
						} else {
							temp_row_<%=cid%>[i]="";
						}
					} else {
						temp_row_<%=cid%>[i]="";
					}
				}
				boolean whetherReject_<%=cid %> = false;
				<%=firstConnName%> = new <%=conn.getName()%>Struct();
				int indexOfCurCol_<%=cid%> = 0;
				String curColName_<%=cid %> = "";
				String valueOfCol_<%=cid%> = "";

				try {
					<%
					// no need to output all.
					int partSize = 0;
					
					if (!"".equals(lastColumn) && !"".equals(lastColumn)){
						partSize = Math.min(size, Integer.valueOf(lastColumn) - Integer.valueOf(firstColumn) + 1);
					} else {
						partSize = size;
					}
					
					for (int i = 0; i < partSize; i++) {
						IMetadataColumn column = listColumns.get(i);
						String colName = column.getLabel();
						String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
						JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
						String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
						boolean bTrim = isTrimAll || (!trimSelects.isEmpty() && "true".equals(trimSelects.get(i).get("TRIM")));
						%>
						if (<%=i%> < cols_nb_<%= cid %>) {
							indexOfCurCol_<%=cid%> = indexOfStartCol_<%= cid %> + <%=i%>;
							valueOfCol_<%=cid%> = temp_row_<%=cid %>[<%=i%>]<%=bTrim ? ".trim()" : ""%>;
							
							if (valueOfCol_<%=cid%>.length() > 0) {
								curColName_<%=cid %> = "<%=colName%>";
	
								<%if (javaType == JavaTypesManager.STRING || javaType == JavaTypesManager.OBJECT) {%>		
									<%=firstConnName %>.<%=colName%> = valueOfCol_<%=cid%>;
								<%} else if(javaType == JavaTypesManager.DATE) {%>
									try{
										if (row_<%= cid %>.getCell(<%=i%> + indexOfStartCol_<%= cid %>).getCellType() == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC && org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(row_<%= cid %>.getCell(<%=i%>+ indexOfStartCol_<%= cid %>))){
											<%=firstConnName %>.<%=colName%> = row_<%= cid %>.getCell(<%=i%> + indexOfStartCol_<%= cid %>).getDateCellValue();
										} else {
											<%=firstConnName %>.<%=colName%> = ParserUtils.parseTo_Date(valueOfCol_<%=cid%>, <%= patternValue %>);
										}
									} catch (Exception e) {
										throw new RuntimeException("The cell format is not Date in row " + (nb_line_<%= cid %> + 1));
									}
								<%} else if (advancedSeparator && JavaTypesManager.isNumberType(javaType)) { %>
									<%=firstConnName %>.<%=colName%> = ParserUtils.parseTo_<%= typeToGenerate %>(ParserUtils.parseTo_Number(valueOfCol_<%=cid%>, <%= thousandsSeparator %>, <%= decimalSeparator %>));
								<%} else if (javaType == JavaTypesManager.BYTE_ARRAY) { %>							
									<%=firstConnName %>.<%=colName%> = valueOfCol_<%=cid%>.getBytes(<%=encoding %>);
								<%} else {%>
									<%=firstConnName %>.<%=colName%> = ParserUtils.parseTo_<%= typeToGenerate %>(valueOfCol_<%=cid%>);
								<%}%>
							} else {
								<%
								String defaultValue = JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate, column.getDefault());
	
								if (defaultValue == null) {
								%>
									throw new RuntimeException("Value is empty for column : '<%= colName%>' in '<%=firstConnName%>' connection, value is invalid or this column should be nullable or have a default value.");
								<%} else {%>
									<%=firstConnName %>.<%=colName%> = <%=defaultValue%>;
									emptyColumnCount_<%= cid %>++;
								<%}%>
							}
						}
					<%
					}

					if (rejectConnName.equals(firstConnName)) {
					%> 
						<%=firstConnName %> = null; 
					<%
					}

					if (stopOnEmptyRow) {
					%>
						if(emptyColumnCount_<%= cid %> == cols_nb_<%= cid %>){
							break;
						}
					<%}%>  
				} catch (Exception e) {
					whetherReject_<%=cid%> = true;

					<%if (dieOnError) {%>
						throw(e);
					<%} else {
						if (!"".equals(rejectConnName) && !rejectConnName.equals(firstConnName) && rejectColumnList != null && rejectColumnList.size() > 0) {//15
						%>
							<%=rejectConnName %> = new <%=rejectConnName %>Struct();

							<%for(IMetadataColumn column : metadata.getListColumns()) {%>
								<%=rejectConnName%>.<%=column.getLabel()%> = <%=firstConnName%>.<%=column.getLabel()%>;
							<%}%>
							<%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>+ " column: " + curColName_<%=cid %> + " (No. " + (indexOfCurCol_<%=cid%> + 1) + ")";
							<%=firstConnName %> = null;
						<%} else if(("").equals(rejectConnName)){%>
							System.err.println(e.getMessage());
							<%=firstConnName %> = null;
						<%} else if(rejectConnName.equals(firstConnName)){%>
							<%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>+ " column: " + curColName_<%=cid %> + " (No. " + (indexOfCurCol_<%=cid%> + 1) + ")";
						<%
						}
					}
					%>
				}	
			<%
			} //B_02_02

			boolean isFirstEnter = true;

			for (IConnection otherConn : conns) {

				if ((otherConn.getName().compareTo(firstConnName) != 0) && (otherConn.getName().compareTo(rejectConnName) != 0) && (otherConn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA))) {

					if(isFirstEnter) {	%>if (!whetherReject_<%=cid%>) { <% 	isFirstEnter = false; 	} %>  

					if (<%=otherConn.getName() %> == null) { 
						<%=otherConn.getName() %> = new <%=otherConn.getName() %>Struct();
					}

					<%for (IMetadataColumn column: metadata.getListColumns()) {%>
						<%=otherConn.getName() %>.<%=column.getLabel() %> = <%=firstConnName %>.<%=column.getLabel() %>;    				
					<%
					}
				}
			}

			if (!isFirstEnter) { %>  } <%  } 
		} //B_02_01
	// here no close brace, since HAS_CONDITIONAL_OUTPUTS="true" 
}
%>

