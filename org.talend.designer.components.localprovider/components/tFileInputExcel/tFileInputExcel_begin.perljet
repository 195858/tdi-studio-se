<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn 
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.List
    java.util.Map
" 
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

List<Map<String, String>> sheetlist =
    (List<Map<String,String>>)ElementParameterParser.getObjectValue(
        node,
        "__SHEETLIST__"
    );

List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
    IMetadataTable metadata = metadatas.get(0);
    if (metadata!=null) {
        int nbFields = metadata.getListColumns().size();

        Boolean withformat = new Boolean(
            ElementParameterParser.getValue(node, "__WITH_FORMAT__")
        );

        String filename = ElementParameterParser.getValue(
            node,
            "__FILENAME__"
        );

        Boolean allSheets = new Boolean(
            ElementParameterParser.getValue(node, "__ALL_SHEETS__")
        );
%>

use FileHandle;
use List::Util qw/min/;
use Spreadsheet::ParseExcel;
use List::MoreUtils qw/first_index/;
use talend::filesOp;

my %desc_<%=cid%> = (
    filename      => <%=filename %>,
    header        => <%=ElementParameterParser.getValue(node, "__HEADER__") %>,
    footer        => <% String myFooter = ElementParameterParser.getValue(node, "__FOOTER__"); if (myFooter.equals("")) myFooter = null; %><%=myFooter%>,
    limit         => <% String myLimit = ElementParameterParser.getValue(node, "__LIMIT__"); if (myLimit.equals("")) myLimit = null; %><%=myLimit%>,
    first_column  => <% String myFirstColumn = ElementParameterParser.getValue(node, "__FIRST_COLUMN__"); if (myFirstColumn.equals("")) myFirstColumn = null; %><%=myFirstColumn%>,
    last_column  => <% String myLastColumn = ElementParameterParser.getValue(node, "__LAST_COLUMN__"); if (myLastColumn.equals("")) myLastColumn = null; %><%=myLastColumn%>,
    schema        => [
    <%
		for (IMetadataColumn column: metadata.getListColumns()) {
    %>
    	{
            name    => '<%=column.getLabel() %>',
            key     => <%=column.isKey() %>,
            type    => '<%=column.getSourceType() %>',
            len     => <%=column.getLength() %>,
            null    => <%=column.isNullable() %>,
            default => '<%=column.getDefault() %>',
            comment => '<%=column.getComment() %>',
		},
	<%
		}
    %>
    ]
);


our @book_worksheets_<%=cid%>;

my $oExcel_<%=cid%> = Spreadsheet::ParseExcel->new(
    CellHandler => \&CellHandler_<%=cid%>,
    NotSetCell  => 1,
);

my $book_<%=cid%> = $oExcel_<%=cid%>->Parse(
    $desc_<%=cid%>{filename}
);


sub CellHandler_<%=cid%> {
    my ( $wb, $wsindex, $row, $col, $cell ) = @_;
    $book_worksheets_<%=cid%>[$wsindex] = $wb->{Worksheet}[$wsindex]->{Name} ;
<%
        if (withformat) {
%>          
    $wb->{Worksheet}[$wsindex]->{Cells}[$row][$col] = $cell->Value;
<%
        } 
        else {
%>
    $wb->{Worksheet}[$wsindex]->{Cells}[$row][$col] = $cell->{Val};
<%
        }
%>
}



<%
        if (allSheets) {
%>
my @sheetlist = @book_worksheets_<%=cid%>;
<%
        }
        else {
%>
my @sheetlist = (
<%
        for (Map<String, String> sheet : sheetlist) {
%>
    <%=sheet.get("SHEETNAME")%>,
<%
        }
%>
);

foreach my $sheet (@sheetlist) {
    # user can also provide a sheet position
    if ($sheet =~ m/^\d+$/) {
        my $position = $sheet;
        if ($position >= scalar @book_worksheets_<%=cid%>) {
            die(
                sprintf(
                    '[<%=cid%>] worksheet position "%s" does exist, existing worksheet position {%s}',
                    $sheet,
                    join(
                        ',',
                        map {$i++} @book_worksheets_<%=cid%>
                    )
                )
            );
        }
    }
    elsif (not grep /^$sheet$/, @book_worksheets_<%=cid%>) {
        die(
            sprintf(
                '[<%=cid%>] worksheet "%s" does not exists, existing worksheets {%s}',
                $sheet,
                join(
                    ',',
                    @book_worksheets_<%=cid%>
                )
            ),
            "\n"
        );
    }
}
<%
        }
%>
$nb_line_<%=cid%> = 0;

foreach my $sheet (@sheetlist) {
    my $sheet_position = undef;
    my $sheet_name = undef;

    if ($sheet =~ m/^\d+$/) {
        $sheet_position = $sheet;
        $sheet_name = $book_worksheets_<%=cid%>[$sheet_position];
    }
    else {
        $sheet_position = first_index { $_ eq $sheet } @book_worksheets_<%=cid%>;
        $sheet_name = $sheet;
    }

    $_globals{<%=cid%>}{CURRENT_SHEET} = $sheet;
    $_globals{<%=cid%>}{CURRENT_SHEET_POSITION} = $sheet_position;
    $_globals{<%=cid%>}{CURRENT_SHEET_NAME} = $sheet_name;

    my $worksheet_<%=cid%> = $book_<%=cid%>->Worksheet($sheet);

    my $total_line_<%=cid%> =
        $worksheet_<%=cid%>->{MaxRow} - $worksheet_<%=cid%>->{MinRow} + 1;

    my ($first_row_<%=cid%>, $last_row_<%=cid%>) = getFirstAndLastRowNumber(
        header  => $worksheet_<%=cid%>->{MinRow} + $desc_<%=cid%>{header},
        footer  => $desc_<%=cid%>{footer},
        limit   => $desc_<%=cid%>{limit},
        total   => $total_line_<%=cid%>,
    );
    
    my ($first_column_<%=cid%>, $last_column_<%=cid%>) =
        ($worksheet_<%=cid%>->{MinCol}, $worksheet_<%=cid%>->{MaxCol});
    
    if (defined $desc_<%=cid%>{first_column}
        and $desc_<%=cid%>{first_column} >= 1) {
        $first_column_<%=cid%> = $desc_<%=cid%>{first_column} - 1;
    }
    
    if (defined $desc_<%=cid%>{last_column}
        and $desc_<%=cid%>{last_column} < $worksheet_<%=cid%>->{MaxCol} + 1) {
        $last_column_<%=cid%> = $desc_<%=cid%>{last_column} - 1;
    }
    
    for ($first_row_<%=cid%> .. $last_row_<%=cid%>) {
        my $current_row = $_ - 1;
        my $<%=cid%> = [];
        $nb_line_<%=cid%>++;
    
        for (my $current_column = $first_column_<%=cid%>;
             $current_column <= $last_column_<%=cid%>;
             $current_column++) {
             my $current_cell = $worksheet_<%=cid%>->{Cells}[$current_row][$current_column];
             push(@$<%=cid%>, $current_cell ? 
                 $current_cell 
                 : undef );
        }
        $current_row++;
    
        if (<%=nbFields%> != scalar(@$<%=cid%>)) {
            @$<%=cid%> = (@$<%=cid%>)<% if ( nbFields > 0) { %>[0 .. <%=nbFields -1%>]<% } %>;
        }
<%
		}
	}
%>
