<%@ jet
imports="
	org.talend.designer.codegen.config.CodeGeneratorArgument
	org.talend.core.model.process.INode
	org.talend.core.model.process.ElementParameterParser
	org.talend.core.model.process.IConnection
	org.talend.core.model.metadata.IMetadataTable
	org.talend.core.model.metadata.types.JavaTypesManager
	org.talend.core.model.metadata.MappingTypeRetriever
	org.talend.core.model.metadata.MetadataTalendType
	org.talend.core.model.process.IConnectionCategory
	java.util.List
	java.util.ArrayList
	java.util.Map
	java.util.HashMap
	"
skeleton="../templates/db_output_bulk.skeleton"
%>
<%@ include file="../templates/DB/Output/HelpClass.javajet"%>
<%
	class DBOutputMainUtil extends DefaultDBOutputUtil{
		public void beforeComponentProcess(INode node){
			super.beforeComponentProcess(node);
			executeBatch = useBatchSize && !"".equals(batchSize) && !"0".equals(batchSize);
		}
		public boolean addBatch(){
			boolean addBatch = rejectConnName == null && useBatchSize && "INSERT".equals(dataAction);
			return addBatch;
		}
		public void executeBatch(INode node){
			if (addBatch() && executeBatch) {
			%>
				if (batchSize_<%=cid%> <= batchSizeCounter_<%=cid%>) {
					try {
						int countSum_<%=cid%> = 0;
						<%log4jCodeGenerateUtil.logInfo(node,"debug",cid+" - Executing the "+dataAction+" batch.");%>
						for(int countEach_<%=cid%>: pstmt_<%=cid %>.executeBatch()) {
							if(countEach_<%=cid%> == -2 || countEach_<%=cid%> == -3) {
								break;
							}
							countSum_<%=cid%> += countEach_<%=cid%>;
						}
						<%log4jCodeGenerateUtil.logInfo(node,"debug",cid+" - The "+dataAction+" batch execution has succeeded.");%>
						insertedCount_<%=cid%> += countSum_<%=cid%>;
						batchSizeCounter_<%=cid%> = 0;
					}catch (java.sql.BatchUpdateException e){
						<%if(("true").equals(dieOnError)) {
							log4jCodeGenerateUtil.logError(node,"fatal");
						%>
							throw(e);
						<%
						}else {
							log4jCodeGenerateUtil.logError(node,"error");
						%>
							int countSum_<%=cid%> = 0;
							for(int countEach_<%=cid%>: e.getUpdateCounts()) {
								countSum_<%=cid%> += (countEach_<%=cid%> < 0 ? 0 : countEach_<%=cid%>);
							}
							insertedCount_<%=cid%> += countSum_<%=cid%>;
							System.err.println(e.getMessage());
						<%
						}
						%>
					}
				}
			<%
			}
		}
		public void commitEvery(INode node){
			if(!("true").equals(useExistingConn)) {
				if(!("").equals(commitEvery) && !("0").equals(commitEvery)) {
				%>
					commitCounter_<%=cid%>++;
					if(commitEvery_<%=cid%> <= commitCounter_<%=cid%>) {
						<%
						if (addBatch()) {
						%>
							try {
								<%log4jCodeGenerateUtil.logInfo(node,"debug",cid+" - Executing the "+dataAction+" batch.");%>
								int countSum_<%=cid%> = 0;
								for(int countEach_<%=cid%>: pstmt_<%=cid %>.executeBatch()) {
									if(countEach_<%=cid%> == -2 || countEach_<%=cid%> == -3) {
										break;
									}
									countSum_<%=cid%> += countEach_<%=cid%>;
								}
								insertedCount_<%=cid%> += countSum_<%=cid%>;
								<%log4jCodeGenerateUtil.logInfo(node,"debug",cid+" - The "+dataAction+" batch execution has succeeded.");%>
							}catch (java.sql.BatchUpdateException e){
								<%if(("true").equals(dieOnError)) {
									log4jCodeGenerateUtil.logError(node,"fatal");
								%>
									throw(e);
								<%
								}else {
									log4jCodeGenerateUtil.logError(node,"error");
								%>
									int countSum_<%=cid%> = 0;
									for(int countEach_<%=cid%>: e.getUpdateCounts()) {
										countSum_<%=cid%> += (countEach_<%=cid%> < 0 ? 0 : countEach_<%=cid%>);
									}
									insertedCount_<%=cid%> += countSum_<%=cid%>;
									System.out.println(e.getMessage());
								<%
								}
								%>
							}
						<%
						}
						log4jCodeGenerateUtil.commit(node);
						%>
						commitCounter_<%=cid%>=0;
					}
				<%
				}
			}
		}
	}
	dbOutputBeginUtil = new DBOutputMainUtil();
%>
<%@ include file="../templates/DB/Output/AbstractDBOutputMain.javajet"%>
