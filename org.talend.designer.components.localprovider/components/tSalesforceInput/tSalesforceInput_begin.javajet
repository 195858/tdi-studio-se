<%@ jet 
package="org.talend.designer.codegen.translators" 
imports="
    	org.talend.core.model.process.INode 
    	org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.EConnectionType
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType		
		java.util.List
		"
class="tSalesforceInputBegin" 
%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();    

	String modulename = ElementParameterParser.getValue(node, "__MODULENAME__");

	String username = ElementParameterParser.getValue(node, "__USER__");
	String password = ElementParameterParser.getValue(node, "__PASS__");
	
	String condition = ElementParameterParser.getValue(node, "__CONDITION__");
%>

<%
List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
    IMetadataTable metadata = metadatas.get(0);
    if (metadata!=null) {
    
    //get the select fields from schema
    List<IMetadataColumn> columnsFields=metadata.getListColumns();
    StringBuffer sb = new StringBuffer();
    for (int i=0;i < columnsFields.size();i++) {//4
		IMetadataColumn column=columnsFields.get(i);
		sb.append(column.getLabel());
		if (i == columnsFields.size()-1) break;
		sb.append(",");
	}	
%>
////////////////////////////
        
        int nb_line_<%=cid %> = 0;
        org.talend.salesforce.SforceManagement sforceManagement_<%=cid %> = new org.talend.salesforce.SforceManagementImpl();
        
        sforceManagement_<%=cid %>.login(<%=username %>, <%=password %>);
        
        StringBuffer sb_<%=cid %> = new StringBuffer();
        sb_<%=cid %>.append("SELECT ");
        sb_<%=cid %>.append("<%=sb.toString() %>");
        sb_<%=cid %>.append(" From ");
        sb_<%=cid %>.append("<%=modulename %>");
<%
        if(condition!=null && condition.trim().length()!=0)     {
%>
           sb_<%=cid %>.append(" WHERE ");
           sb_<%=cid %>.append(<%=condition%>);        
<%
        }
%>         

  		java.util.List<com.sforce.soap.partner.sobject.SObject> list_<%=cid %> = sforceManagement_<%=cid %>.query(sb_<%=cid %>.toString());
  		
		for (com.sforce.soap.partner.sobject.SObject object_<%=cid %> : list_<%=cid %>) {
            org.apache.axis.message.MessageElement[] _any_<%=cid %> = object_<%=cid %>.get_any();
            nb_line_<%=cid %>++;
                
//////////       

<%
	List< ? extends IConnection> conns = node.getOutgoingSortedConnections();
	String firstConnName = "";
	if (conns!=null) {//1
		if (conns.size()>0) {//2
		
			IConnection conn = conns.get(0); //the first connection
			firstConnName = conn.getName();			
			if ((conn.getLineStyle().equals(EConnectionType.FLOW_MAIN))||(conn.getLineStyle().equals(EConnectionType.FLOW_REF))) {//3

				%>

			
<%
			List<IMetadataColumn> columns=metadata.getListColumns();
			int columnSize = columns.size();
			for (int i=0;i<columnSize;i++) {//4
					IMetadataColumn column=columns.get(i);
					String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
					JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
					String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
			%>
						
			
				if(<%=i %> < _any_<%=cid %>.length && _any_<%=cid %>[<%=i %>].getValue()!=null){

								
<%
					if(javaType == JavaTypesManager.STRING || javaType == JavaTypesManager.OBJECT) { //String or Object
%>
					<%=conn.getName() %>.<%=column.getLabel() %> = _any_<%=cid %>[<%=i %>].getValue();
<%
					} else if(javaType == JavaTypesManager.DATE) { //Date
%>
					<%=conn.getName() %>.<%=column.getLabel() %> = ParserUtils.parseTo_Date(_any_<%=cid %>[<%=i %>].getValue(), <%= patternValue %>);
<%
					} else if(javaType == JavaTypesManager.BYTE_ARRAY) { //byte[]
%>
					<%=conn.getName() %>.<%=column.getLabel() %> = _any_<%=cid %>[<%=i %>].getValue().getBytes();
	
<%
					} else  { //other
%>						
					<%=conn.getName() %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%= typeToGenerate %>(_any_<%=cid %>[<%=i %>].getValue());
<%
					}
%>


			
			} else { 
			
					<%=conn.getName() %>.<%=column.getLabel() %> = <%=JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate)%>;
			}
			
			
<%			
			} //4
		}//3
		
		
		if (conns.size()>1) {
			for (int i=1;i<conns.size();i++) {
				IConnection conn2 = conns.get(i);
				if ((conn2.getName().compareTo(firstConnName)!=0)&&((conn2.getLineStyle().equals(EConnectionType.FLOW_MAIN))||(conn2.getLineStyle().equals(EConnectionType.FLOW_REF)))) {
			    	for (IMetadataColumn column: metadata.getListColumns()) {%>
      			<%=conn2.getName() %>.<%=column.getLabel() %> = <%=firstConnName %>.<%=column.getLabel() %>;
				 <%
				 	}
				}
			}
		}
		
		
	}//2
	
}//1

%> 
////////////////////////////
<%
  }
}
%>