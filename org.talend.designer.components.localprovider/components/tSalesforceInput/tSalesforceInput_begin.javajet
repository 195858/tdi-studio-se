<%@ jet 
imports="
        java.util.List
        
        org.talend.core.model.metadata.IMetadataColumn
        org.talend.core.model.metadata.IMetadataTable
        org.talend.core.model.metadata.types.JavaType
        org.talend.core.model.metadata.types.JavaTypesManager
        org.talend.core.model.process.ElementParameterParser
        org.talend.core.model.process.IConnection
        org.talend.core.model.process.IConnectionCategory
        org.talend.core.model.process.INode
        org.talend.designer.codegen.config.CodeGeneratorArgument
		"
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;

INode node = (INode)codeGenArgument.getArgument();

	boolean useProxy = ("true").equals(ElementParameterParser.getValue(node,"__USE_PROXY__"));
	String proxyHost = ElementParameterParser.getValue(node,"__PROXY_HOST__");
   	String proxyPort = ElementParameterParser.getValue(node,"__PROXY_PORT__");
   	String proxyUsername = ElementParameterParser.getValue(node,"__PROXY_USERNAME__");
   	String proxyPassword = ElementParameterParser.getValue(node,"__PROXY_PASSWORD__");
   	String batchSize = ElementParameterParser.getValue(node,"__BATCH_SIZE__");
	boolean needCompression = ("true").equals(ElementParameterParser.getValue(node,"__NEED_COMPRESSION__"));
String cid = node.getUniqueName();

   	String limit = ElementParameterParser.getValue(node,"__LIMIT__");
%>

int nb_line_<%=cid%> = 0;
int limit_<%=cid %> = <%=limit %>;

<%
if(useProxy){
%>
    java.util.Properties props = System.getProperties();
    props.put("socksProxyHost",<%=proxyHost %>);  
    props.put("socksProxyPort",<%=proxyPort %>);
    props.put("java.net.socks.username", <%=proxyUsername %>);
    props.put("java.net.socks.password", <%=proxyPassword %>); 
    
<%
}
%>

<%
List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas != null) && (metadatas.size() > 0)) {
	IMetadataTable metadata = metadatas.get(0);
	
	if (metadata != null) {
	
		List<IMetadataColumn> columnList = metadata.getListColumns();
		int nbSchemaColumns = columnList.size();			
		List<? extends IConnection> outgoingConns = node.getOutgoingSortedConnections();

		// if output columns are defined
		if (nbSchemaColumns > 0 && outgoingConns != null && outgoingConns.size() > 0){
			boolean useExistingConn = ("true").equals(ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__"));
			String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
			
			String endpoint = ElementParameterParser.getValue(node, "__ENDPOINT__");
			String username = ElementParameterParser.getValue(node, "__USER__");
			String password = ElementParameterParser.getValue(node, "__PASS__");
			
			String normalize_delimiter = ElementParameterParser.getValue(node, "__NORMALIZE_DELIMITER__");
			String columnname_delimiter = ElementParameterParser.getValue(node, "__COLUMNNAME_DELIMITER__");
%>
			org.talend.salesforce.SforceManagement sfMgr_<%=cid%> = new org.talend.salesforce.SforceManagementImpl();
			<%if(useExistingConn){%>
			((org.talend.salesforce.SforceManagementImpl)sfMgr_<%=cid%>).setSforceService((com.sforce16.soap.partner.SforceService)globalMap.get("sforceService_<%=connection  %>"));
			sfMgr_<%=cid%>.login((com.sforce16.soap.partner.SoapBindingStub)globalMap.get("binding_<%=connection %>"));
			<%}else{%>
			sfMgr_<%=cid%>.setNeedCompression(<%=needCompression%>);
			sfMgr_<%=cid%>.login(<%=username%>, <%=password%>, <%=endpoint%>);
			<%}%>
			
			
<%			
			boolean bIsManualQuery = ("true").equals(ElementParameterParser.getValue(node, "__MANUAL_QUERY__"));
			String sql = "";
			
			if (bIsManualQuery){

				sql = ElementParameterParser.getValue(node, "__QUERY__");
				sql = sql.replaceAll("\n", " ").replaceAll("\r", " ");

			} else{
				
				String modulename = ElementParameterParser.getValue(node, "__MODULENAME__").trim();
				String customModulename = ElementParameterParser.getValue(node, "__CUSTOM_MODULE__").trim();
				String condition = ElementParameterParser.getValue(node, "__CONDITION__").trim();

				StringBuilder sb = new StringBuilder("\"select ");

				for (IMetadataColumn column: columnList){
					sb.append(column.getLabel());
					sb.append(",");
				}
				sb.deleteCharAt(sb.lastIndexOf(","));
				sb.append(" from ").append((("CustomModule").equals(modulename)) ? customModulename.replaceAll("\"","") : modulename);
				if (condition !=null && condition.length() > 3){
					sb.append(" where ").append(condition.substring(1, condition.length() - 1));
				}
				sb.append("\"");
				
				sql = sb.toString();
			}

			IConnection outgoingConn = outgoingConns.get(0);
			if(outgoingConn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) { // start 1
%>					
					
				com.sforce16.soap.partner.SoapBindingStub binding_<%=cid %> = sfMgr_<%=cid%>.getBinding();
				com.sforce16.soap.partner.QueryResult qr_<%=cid %> = null;
				com.sforce16.soap.partner.QueryOptions qo_<%=cid %> = new com.sforce16.soap.partner.QueryOptions();
				qo_<%=cid %>.setBatchSize(new Integer(<%=batchSize%>));
				binding_<%=cid %>.setHeader(sfMgr_<%=cid%>.getSforceService().getServiceName().getNamespaceURI(), "QueryOptions", qo_<%=cid %>);
				
				qr_<%=cid %> = binding_<%=cid %>.query(<%=sql %>);
				
				org.talend.TopConfig.VALUE_DELIMITER = <%=normalize_delimiter %>;
				org.talend.TopConfig.COLUMNNAME_DELIMTER = <%=columnname_delimiter %>;
				
    			org.talend.TopQueryResult topqr_<%=cid %> = null;    			
    			topqr_<%=cid %> = new org.talend.TopQueryResult();
    			topqr_<%=cid %>.processTopQueryResult(qr_<%=cid %>);				
				
				boolean bContinue_<%=cid %> = true;
				
				while (bContinue_<%=cid %> && qr_<%=cid %> != null && qr_<%=cid %>.getRecords() != null) {
					
					java.util.List<org.talend.TopRecord> allTopRecords_<%=cid %> = topqr_<%=cid %>.getAllTopRecords();
				    // process the query results
				    for (int i_<%=cid %> = 0; i_<%=cid %> < allTopRecords_<%=cid %>.size(); i_<%=cid %>++) {					
								
						nb_line_<%=cid%> ++;
						
						org.talend.TopRecord topRecord_<%=cid%> = allTopRecords_<%=cid%>.get(i_<%=cid%>);
						Object value_<%=cid%> = null;
<%
						for( int i = 0; i < columnList.size(); i++) {
						
							IMetadataColumn column = columnList.get(i);
							
							String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
							
							JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
							
							String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
%>						
							//get the real value according the columnName
							value_<%=cid%> = topRecord_<%=cid%>.getValue("<%=columnList.get(i).getLabel()%>");
							
							if (value_<%=cid%> != null){
							 	String valueStr_<%=cid%> = (String) value_<%=cid%>;
<%
								if (javaType == JavaTypesManager.STRING || javaType == JavaTypesManager.OBJECT) { // String or Object
%>
									<%=outgoingConn.getName()%>.<%=columnList.get(i).getLabel()%> = valueStr_<%=cid%>;
<%
								} else if(javaType == JavaTypesManager.DATE) { // Date
%>
									<%=outgoingConn.getName()%>.<%=columnList.get(i).getLabel()%> = ParserUtils.parseTo_Date(valueStr_<%=cid%>, <%= patternValue %>);
<%
								} else if(javaType == JavaTypesManager.BYTE_ARRAY) { // byte[]
%>
									<%=outgoingConn.getName()%>.<%=columnList.get(i).getLabel()%> = valueStr_<%=cid%>.getBytes();
<%
								} else  { // other
%>						
									<%=outgoingConn.getName()%>.<%=columnList.get(i).getLabel()%> = ParserUtils.parseTo_<%= typeToGenerate %>(valueStr_<%=cid%>);
<%
								}
%>			
							} else {
								<%=outgoingConn.getName()%>.<%=columnList.get(i).getLabel()%> = <%=JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate)%>;
							}
<%
						}
												
					// ending port of for... (move to tSalesforceInput_end.javajet)
					
				}// end 1
%>
				
<%
		}
	}
}
%>
