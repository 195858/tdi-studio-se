<%@ jet
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.IMetadataTable 
    	org.talend.core.model.metadata.IMetadataColumn 
    	org.talend.core.model.process.IConnection
    	java.util.List
	"
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	
	String command = ElementParameterParser.getValue(node, "__COMMAND__");
		
	String outputAction  = ElementParameterParser.getValue(node, "__OUTPUT__");
	
	// To launch an internal command to cmd.exe (XP), you have to call :
	// cmd.exe /c dir (for example)

	if (outputAction.equals("NORMAL_OUTPUT")) {
%>
final java.util.Vector<String> output_<%=cid%> = new java.util.Vector<String>();
<%
	}
%>
Runtime runtime_<%=cid %> = Runtime.getRuntime();
final Process ps_<%=cid %> = runtime_<%=cid %>.exec(<%=command %>);
Thread normal_<%=cid %> = new Thread() {
	public void run() {
		try {
			java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(ps_<%=cid %>.getInputStream()));
			String line = "";
			try {
				while((line = reader.readLine()) != null) {
<%
	if (outputAction.equals("OUTPUT_TO_CONSOLE")) {
%>
					System.out.println(line);
<%
	} else if (outputAction.equals("RETRIEVE_OUTPUT")) {
%>
					if (globalMap.get("<%=cid %>_OUTPUT") != null) {
						globalMap.put("<%=cid %>_OUTPUT", (String)globalMap.get("<%=cid %>_OUTPUT")+"\n"+line);
					} else {
						globalMap.put("<%=cid %>_OUTPUT", line);
					}
<%
	} else if (outputAction.equals("NORMAL_OUTPUT")) {
%>
					output_<%=cid%>.add(line);
<%
	}
%>
				}
			} finally {
				reader.close();
			}
		} catch(java.io.IOException ioe) {
			ioe.printStackTrace();
		}
	}
};
normal_<%=cid %>.start();

Thread error_<%=cid %> = new Thread() {
	public void run() {
		try {
			java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(ps_<%=cid %>.getErrorStream()));
			String line = "";
			try {
				while((line = reader.readLine()) != null) {
<%
	if (outputAction.equals("OUTPUT_TO_CONSOLE")) {
%>
					System.err.println(line);
<%
	} else if (outputAction.equals("RETRIEVE_OUTPUT")) {
%>
					if (globalMap.get("<%=cid %>_OUTPUT") != null) {
						globalMap.put("<%=cid %>_OUTPUT", (String)globalMap.get("<%=cid %>_OUTPUT")+"\n"+line);
					} else {
						globalMap.put("<%=cid %>_OUTPUT", line);
					}
<%
	} else if (outputAction.equals("NORMAL_OUTPUT")) {
%>
					output_<%=cid%>.add(line);
<%
	}
%>
				}
			} finally {
				reader.close();
			}
		} catch(java.io.IOException ioe) {
			ioe.printStackTrace();
		}
	}
};
error_<%=cid %>.start();

ps_<%=cid %>.waitFor();
normal_<%=cid %>.join(10000);
error_<%=cid %>.join(10000);

<%
if(outputAction.equals("NORMAL_OUTPUT")){
	List<IMetadataTable> metadatas = node.getMetadataList();
    if ((metadatas!=null)&&(metadatas.size()>0)) {
    	IMetadataTable metadata = metadatas.get(0);
    	if (metadata!=null) {
    		List<IMetadataColumn> columns=metadata.getListColumns();
    		List<? extends IConnection> conns = node.getOutgoingSortedConnections();
    		if (conns!=null && conns.size()>0) {
				IConnection conn = conns.get(0);  
%>
for(String tmp:output_<%=cid%>){
<%
				for(IMetadataColumn column:columns) {
%>
	<%=conn.getName()%>.<%=column.getLabel()%> = tmp;				
<%
				}
			}
		}
	}
}
%>
