<%@ jet 
imports="
	org.talend.core.model.process.INode
	org.talend.core.model.process.ElementParameterParser
	org.talend.core.model.metadata.IMetadataTable
	org.talend.core.model.metadata.IMetadataColumn
	org.talend.core.model.metadata.types.JavaTypesManager
	org.talend.core.model.metadata.types.JavaType
    org.talend.core.model.process.IConnection
	org.talend.core.model.process.IConnectionCategory
	org.talend.designer.codegen.config.CodeGeneratorArgument
	java.util.List
	java.util.Map
" 
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode) codeGenArgument.getArgument();
String cid = node.getUniqueName();

// Search outgoing schema
IMetadataTable metadata = null;

List<IMetadataTable> metadatas = node.getMetadataList();
if (metadatas != null && metadatas.size() > 0) {
    metadata = metadatas.get(0);
}

// Inner class (see tCreateTable_main#Transfer)
class Transfer{
	public String dbDriver(INode node){
		String dbType = ElementParameterParser.getValue(node,"__DBTYPE__");
		if(dbType.equals("MSSQL")){
			return "net.sourceforge.jtds.jdbc.Driver";
		}else if(dbType.equals("MySQL")){
			return "org.gjt.mm.mysql.Driver";
		}else if(dbType.equals("Oracle")){
			return "oracle.jdbc.driver.OracleDriver";
		}else if(dbType.equals("Postgre")){
			return "org.postgresql.Driver";
		}else if(dbType.equals("Access")){
			return "sun.jdbc.odbc.JdbcOdbcDriver";
		}else if(dbType.equals("DB2")){
			return "com.ibm.db2.jcc.DB2Driver";
		}else if(dbType.equals("Firebird")){
			return "org.firebirdsql.jdbc.FBDriver";
		}else if(dbType.equals("Informix")){
			return "com.informix.jdbc.IfxDriver";
		}else if(dbType.equals("Ingres")){
			return "com.ingres.jdbc.IngresDriver";
		}else if(dbType.equals("JavaDB")){
			String frameworkType=ElementParameterParser.getValue(node,"__JAVADBFRAME__");
			if(frameworkType.equals("Embeded")){
				return "org.apache.derby.jdbc.EmbeddedDriver";
			}else if(frameworkType.equals("JCCJDBC")){
				return "com.ibm.db2.jcc.DB2Driver";
			}else if(frameworkType.equals("DERBYCLIENT")){
				return "org.apache.derby.jdbc.ClientDriver";
			}
		}else if(dbType.equals("SQLite")){
			return "org.sqlite.JDBC";
		}else if(dbType.equals("Sybase")){
			return "com.sybase.jdbc3.jdbc.SybDriver";
		}else if(dbType.equals("ODBC")){
			return "sun.jdbc.odbc.JdbcOdbcDriver";
		}else if(dbType.equals("HSQLdb")){
			return "org.hsqldb.jdbcDriver";
		}else if(dbType.equals("Interbase")){
			return "interbase.interclient.Driver";
		}
		return null;
	}
	
	
	public String url(INode node){	
		String dbType = ElementParameterParser.getValue(node,"__DBTYPE__");
		String host = ElementParameterParser.getValue(node,"__HOST__");
		String port = ElementParameterParser.getValue(node,"__PORT__");
		String dbname = ElementParameterParser.getValue(node,"__DBNAME__");
		String user = ElementParameterParser.getValue(node,"__USER__");
		String pass = ElementParameterParser.getValue(node,"__PASS__");
		String oraType = ElementParameterParser.getValue(node,"__ORACLETYPE__");

		if(dbType.equals("MSSQL")){
			return "\"jdbc:jtds:sqlserver://\"+"+host+"+\":\"+"+port+"+\"//\"+"+dbname;
		}else if(dbType.equals("MySQL")){
			return "\"jdbc:mysql://\"+"+host+"+\":\"+"+port+"+\"/\"+"+dbname+ "+\"?noDatetimeStringSync=true\"";
		}else if(dbType.equals("Oracle")){//depends on SID/Service
					if(oraType.equals("Oracle SID")){
						return "\"jdbc:oracle:thin:@\"+"+host+"+\":\"+" + port + "+\":\"+" + dbname;
					}else{
						return "\"dbc:oracle:thin:@(description=(address=(protocol=tcp)(host=\"+" + host + "+\")(port=\"+" + port + "+\"))(connect_data=(service_name=\"+" + dbname +"+\")))\"";			
					}
		}else if(dbType.equals("Postgre")){
			return "\"jdbc:postgresql://\"+"+host+"+\":\"+"+port+"+\"/\"+"+dbname;
		}else if(dbType.equals("Access")){
		String accessDbname = ElementParameterParser.getValue(node,"__ACCESSDBNAME__");
			return "\"jdbc:odbc:Driver={Microsoft Access Driver (*.mdb)};DBQ=\"+"+accessDbname;
		}else if(dbType.equals("DB2")){
			return "\"jdbc:db2://\"+"+host+"+\":\"+"+port+"+\"/\"+"+dbname;
		}else if(dbType.equals("Firebird")){			
			String firebirdDB=ElementParameterParser.getValue(node,"__FIREBIRDDBNAME__");
			return "\"jdbc:firebirdsql:\"+"+host+"+\":\"+"+firebirdDB;
		}else if(dbType.equals("Informix")){
			String server=ElementParameterParser.getValue(node,"__INFORMIXSERVER__");			
			return "\"jdbc:informix-sqli://\"+"+host+ "+\":\"+"+port+"+\"/\"+"+dbname+"+\":informixserver=\"+"+server;
		}else if(dbType.equals("Ingres")){
			return "\"jdbc:ingres://\"+"+host+"+\":\"+"+port+"+\"/\"+"+dbname;
		}else if(dbType.equals("JavaDB")){
			String frameworkType=ElementParameterParser.getValue(node,"__JAVADBFRAME__");
			if(frameworkType.equals("Embeded")){
				return "\"jdbc:derby:\"+" + dbname;
			}else if(frameworkType.equals("JCCJDBC")){
				return "\"+jdbc:derby:net://\"+"+host+"+\":\"+"+port+"+\"/\"+"+dbname;
			}else if(frameworkType.equals("DERBYCLIENT")){
				return "\"+jdbc:derby://\"+"+host+"+\":\"+"+port+"+\"/\"+"+dbname;
			}
		}else if(dbType.equals("SQLite")){		
			String sqliteDB=ElementParameterParser.getValue(node,"__SQLITEDBNAME__");
			return "\"jdbc:sqlite:/\"+" +sqliteDB.toLowerCase();
		}else if(dbType.equals("Sybase")){
			return "\"jdbc:sybase:Tds:\"+"+host+"+\":\"+"+port+"+\"/\"+"+dbname;
		}else if(dbType.equals("ODBC")){
			return "\"jdbc:odbc:\" + " + dbname;
		}else if(dbType.equals("HSQLdb")){
			String runningMode=ElementParameterParser.getValue(node,"__HSQLMODE__");
			String tls=ElementParameterParser.getValue(node,"__TLS__");
			String dbalias=ElementParameterParser.getValue(node,"__HSQLDATABASEALIAS__");
			if(runningMode.equals("SERVER")){
				if(tls.equals("true")){
					return "\"jdbc:hsqldb:hsqls://\"+" + host + "+\":\"+" + port + "+\"/\"+" + dbalias;
				}else{
					return "\"jdbc:hsqldb:hsql://\"+" + host + "+\":\"+" + port + "+\"/\"+" + dbalias;
				}
			}else if(runningMode.equals("WEBSERVER")){
				if(tls.equals("true")){
					return "\"jdbc:hsqldb:https://\"+" + host + "+\":\"+" + port + "+\"/\"+" + dbalias;
				}else{
					return  "\"jdbc:hsqldb:http://\"+" + host + "+\":\"+" + port + "+\"/\"+" + dbalias;
				}
			}else if(runningMode.equals("PROCESS")){
				String dbpath=ElementParameterParser.getValue(node,"__HSQLDATABASEPATH__");
				String hdbname=ElementParameterParser.getValue(node,"__HSQLDATABASE__");
				return "\"jdbc:hsqldb:file:\"+" + dbpath + "+\"/\"+" + hdbname + "+\";ifexists=true\"";
			}
		}else if(dbType.equals("Interbase")){
			return "\"jdbc:interbase://\"+"+host+"+\"/\"+"+dbname;
		}
		return null;
	}
}

if (metadata != null) {
	String dbuser = ElementParameterParser.getValue(node,"__USER__");
	String dbpwd = ElementParameterParser.getValue(node,"__PASS__");
	Transfer transfer = new Transfer();
	String catalog = ElementParameterParser.getValue(node, "__CATALOG__");
	String dbquery = ElementParameterParser.getValue(node, "__QUERY__");
	dbquery = dbquery.replaceAll("\n", " ");
	dbquery = dbquery.replaceAll("\r", " ");
	String dbencoding = ElementParameterParser.getValue(node, "__ENCODING__");
	
	%>
	mondrian.olap.Connection connection_<%=cid%> = mondrian.olap.DriverManager.getConnection(
		"Provider=mondrian;" +
		"Jdbc='" + <%=transfer.url(node)%> + "';" +
		"Catalog='" + <%=catalog%> + "';" +
	    "JdbcDrivers=<%=transfer.dbDriver(node)%>;"<%
	if (!dbuser.equals("\"\"")) {
		%> +
		"JdbcUser=" + <%=dbuser%> + ";"<%
	}
	if (!dbpwd.equals("\"\"")) {
		%> +
		"JdbcPassword=" + <%=dbpwd%> + ";"<%
	}
	%>, null, true);
	
	mondrian.olap.Query query_<%=cid%> = connection_<%=cid%>.parseQuery(<%=dbquery%>);
	mondrian.olap.Result result_<%=cid%> = connection_<%=cid%>.execute(query_<%=cid%>);
	
	mondrian.olap.Axis[] axes_<%=cid%> = result_<%=cid%>.getAxes();
	if (axes_<%=cid%>.length != 2) {
		throw new Exception("Only two dimensional results are supported");
	}
	
	mondrian.olap.Axis columns_<%=cid%> = axes_<%=cid%>[0];
	mondrian.olap.Axis rows_<%=cid%> = axes_<%=cid%>[1];
	
	int columnsCount_<%=cid%> = columns_<%=cid%>.getPositions().size();
	int y_<%=cid%> = 0, pos_<%=cid%>;
	int[] coords_<%=cid%> = {0, 0};
	
	globalMap.put("<%=cid %>_QUERY", <%=dbquery%>);
	globalMap.put("<%=cid %>_NB_LINE", rows_<%=cid%>.getPositions().size());
	
	<%
	List<? extends IConnection> outConnections = node.getOutgoingConnections();
	IConnection firstOutConnection = null;
	
	if (outConnections != null) {
		// Search first outgoing connection, if exists
		int connectionIndex = -1;
		for (int i = 0; i < outConnections.size(); i++) {
			IConnection connection = outConnections.get(i);
			if (connection.getLineStyle().hasConnectionCategory(
					IConnectionCategory.DATA)) {
				firstOutConnection = connection;
				connectionIndex = i;
				break;
			}
		}
		
		if (firstOutConnection != null) {
			%>
			for (mondrian.olap.Position position_<%=cid%> : rows_<%=cid%>.getPositions()) {
				coords_<%=cid%>[1] = y_<%=cid%>++;
				
				pos_<%=cid%> = 0;
				for (mondrian.olap.Member member_<%=cid%> : position_<%=cid%>) {
					<%
					for (int i = 0; i < metadata.getListColumns().size(); i++) {
						IMetadataColumn column = metadata.getListColumns().get(i);
						
						String colname = column.getLabel();
						String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
					    
					    if (typeToGenerate.equals("String")) {
						    %>
						    if (pos_<%=cid%> == <%=i%>) {
						    	<%=firstOutConnection.getName()%>.<%=colname%> = member_<%=cid%>.getUniqueName();
						    }
						    <%
					    } else {
					    	break;
					    }
					}
					%>
					
					pos_<%=cid%>++;
				}
				
				for (int x_<%=cid%> = 0; x_<%=cid%> < columnsCount_<%=cid%>; x_<%=cid%>++) {
					coords_<%=cid%>[0] = x_<%=cid%>;
					
					<%
					for (int i = 0; i < metadata.getListColumns().size(); i++) {
						IMetadataColumn column = metadata.getListColumns().get(i);
						
						String colname = column.getLabel();
						JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
				        
					    %>
					    if (x_<%=cid%> + pos_<%=cid%> == <%=i%>) {
					    	Object value_<%=cid%> = result_<%=cid%>.getCell(coords_<%=cid%>).getValue();
					    	<%
					    	if (column.isNullable()) {
					    		%>
					    		if (value_<%=cid%>.equals(mondrian.olap.Util.nullValue)) {
						    		<%=firstOutConnection.getName()%>.<%=colname%> = null;
						    	} else {
					    		<%
					    	}
					    	
					    	if (javaType == JavaTypesManager.STRING) {
					    		%>
						    	<%=firstOutConnection.getName()%>.<%=colname%> = value_<%=cid%>.toString();
					    		<%
					    	} else if (javaType == JavaTypesManager.BYTE ||
						    		   javaType == JavaTypesManager.SHORT ||
						    		   javaType == JavaTypesManager.INTEGER ||
						    		   javaType == JavaTypesManager.LONG) {
					        	String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), false);
					    		%>
					    		if (value_<%=cid%> instanceof Integer) {
					    			<%=firstOutConnection.getName()%>.<%=colname%> = (<%=typeToGenerate%>) ((Integer) value_<%=cid%>).intValue();
					    		} else if (value_<%=cid%> instanceof java.math.BigDecimal) {
					    			<%=firstOutConnection.getName()%>.<%=colname%> = (<%=typeToGenerate%>) ((java.math.BigDecimal) value_<%=cid%>).longValue();
					    		} else if (value_<%=cid%> instanceof Double) {
					    			<%=firstOutConnection.getName()%>.<%=colname%> = (<%=typeToGenerate%>) ((Double) value_<%=cid%>).doubleValue();
					    		} else if (value_<%=cid%> instanceof String) {
					    			<%=firstOutConnection.getName()%>.<%=colname%> = (<%=typeToGenerate%>) Integer.parseInt(value_<%=cid%>.toString());
					    		}
					    		<%
					    	} else if (javaType == JavaTypesManager.FLOAT ||
					    			   javaType == JavaTypesManager.DOUBLE) {
					    		String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), false);
					    		%>
					    		if (value_<%=cid%> instanceof Double) {
					    			<%=firstOutConnection.getName()%>.<%=colname%> = (<%=typeToGenerate%>) ((Double) value_<%=cid%>).doubleValue();
					    		} else if (value_<%=cid%> instanceof Integer) {
					    			<%=firstOutConnection.getName()%>.<%=colname%> = (<%=typeToGenerate%>) ((Integer) value_<%=cid%>).intValue();
					    		} else if (value_<%=cid%> instanceof java.math.BigDecimal) {
					    			<%=firstOutConnection.getName()%>.<%=colname%> = (<%=typeToGenerate%>) ((java.math.BigDecimal) value_<%=cid%>).longValue();
					    		} else if (value_<%=cid%> instanceof String) {
					    			<%=firstOutConnection.getName()%>.<%=colname%> = (<%=typeToGenerate%>) Double.parseDouble(value_<%=cid%>.toString());
					    		}
					    		<%
					    	}
					    	
					    	if (column.isNullable()) {
					    		%>
					    		}
					    		<%
					    	}
					    %>
						}
						<%
					}
					%>
				}
			<%
			
			for (int i = connectionIndex + 1; i < outConnections.size(); i++) {
				IConnection connection = outConnections.get(i);
				if (connection.getLineStyle().hasConnectionCategory(
						IConnectionCategory.DATA)) {
					for (IMetadataColumn column : metadata.getListColumns()) {
						%>
						<%=connection.getName()%>.<%=column.getLabel()%> = <%=firstOutConnection.getName()%>.<%=column.getLabel()%>;
						<%
					}
				}
			}
		} else {
			%>
			{
			<%
		}
	} else {
		%>
		{
		<%
	}
} else {
	%>
	// No code generated: define input and output schema first
	
	{
	<%
}
%>