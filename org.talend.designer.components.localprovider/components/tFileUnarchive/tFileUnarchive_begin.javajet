<%@ jet 
	imports="
		org.talend.core.model.process.INode
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.ElementParameterParser
	"
%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();	

	String directory = ElementParameterParser.getValue(node, "__DIRECTORY__");
	String zipFile = ElementParameterParser.getValue(node, "__ZIPFILE__").toLowerCase();
	boolean rootName = ElementParameterParser.getValue(node, "__ROOTNAME__").equals("true");
	boolean extractPath = ElementParameterParser.getValue(node, "__EXTRACTPATH__").equals("true");	
%>      


 			class Util_<%=cid %>
            {
                    public void deleteDir(java.io.File dir) {
                        if (dir.isDirectory()) {
                            String[] children = dir.list();
                            for (int i = 0; i < children.length; i++) {
                               deleteDir(new java.io.File(dir, children[i]));               
                            }
                        }
                        dir.delete();
                    }

                    public void repairDir(java.io.File dir) {
                        java.io.File parentFile = dir.getParentFile();
                
                        if (parentFile != null) {                            
                            if (parentFile.exists() && parentFile.isFile())
                                parentFile.delete();
                               
                                repairDir(parentFile);
                        }
                    }
    
                    public void checkDir(java.io.File file)
                    {
                        if (file.exists()) {
                            if (file.isDirectory())
                                deleteDir(file);
                        } else {
                            repairDir(file);
                        }
                    }
            } 
            
		Util_<%=cid %> util_<%=cid %> = new Util_<%=cid %>();
		
        
        String zipFileURL_<%=cid %> = <%=zipFile %>;
        String outputPath_<%=cid %> = <%=directory %>;
        
        
		
<%
	//get the zip file name
	if (rootName==true) {
%>        
        java.io.File file_<%=cid %> = new java.io.File(zipFileURL_<%=cid %>);        
        String name_<%=cid %> = file_<%=cid %>.getName();        
<%
	if (zipFile.toLowerCase().endsWith(".tar.gz\""))  {
%> 
		String root_<%=cid %> = name_<%=cid %>.substring(0, name_<%=cid %>.length()-7);
<%
   } else {   
%>         
        int i_<%=cid %> = name_<%=cid %>.lastIndexOf('.');        
        String root_<%=cid %> = name_<%=cid %>.substring(0, i_<%=cid %>!=-1? i_<%=cid %> : name_<%=cid %>.length());        
<%
  }
%>        
        new java.io.File(outputPath_<%=cid %>, root_<%=cid %>).mkdir();
        outputPath_<%=cid %> = outputPath_<%=cid %> +"/" + root_<%=cid %>;
<%
  }
%>
  
<%
	if (zipFile.endsWith(".tar.gz\"") || zipFile.endsWith(".tgz\"")){   
%>        
        org.apache.tools.tar.TarInputStream zip_<%=cid %> = new org.apache.tools.tar.TarInputStream(new java.util.zip.GZIPInputStream(new java.io.FileInputStream(zipFileURL_<%=cid %>)));
        
        org.apache.tools.tar.TarEntry entry_<%=cid %> = null;
        while ((entry_<%=cid %> = zip_<%=cid %>.getNextEntry()) != null) { 
             if (!entry_<%=cid %>.isDirectory()) {
                 java.io.InputStream is_<%=cid %> = zip_<%=cid %>;
<%
  } else if (zipFile.endsWith(".tar\"")){ 
%>
        org.apache.tools.tar.TarInputStream zip_<%=cid %> = new org.apache.tools.tar.TarInputStream(new java.io.FileInputStream(zipFileURL_<%=cid %>));
        
        org.apache.tools.tar.TarEntry entry_<%=cid %> = null;
        while ((entry_<%=cid %> = zip_<%=cid %>.getNextEntry()) != null) {             
             if (!entry_<%=cid %>.isDirectory()) {
                 java.io.InputStream is_<%=cid %> = zip_<%=cid %>;
        
<%
  } else if (zipFile.endsWith(".gz\"")){ 
%>
        java.util.zip.GZIPInputStream zip_<%=cid %> = new java.util.zip.GZIPInputStream(new java.io.FileInputStream(new java.io.File(zipFileURL_<%=cid %>)));
       		
       		{
       			{
            		java.io.InputStream is_<%=cid %> = zip_<%=cid %>;      
<%
  }	else { 
  //the others all use the ZIP to decompression
%>
 		org.apache.tools.zip.ZipFile zip_<%=cid %> = new org.apache.tools.zip.ZipFile(zipFileURL_<%=cid %>);
        java.util.Enumeration enuFiles_<%=cid %> = zip_<%=cid %>.getEntries();
        while (enuFiles_<%=cid %>.hasMoreElements()) {
            org.apache.tools.zip.ZipEntry entry_<%=cid %> = (org.apache.tools.zip.ZipEntry) enuFiles_<%=cid %>.nextElement();          
            if (!entry_<%=cid %>.isDirectory()) {
                //get the input stream
                java.io.InputStream is_<%=cid %> = zip_<%=cid %>.getInputStream(entry_<%=cid %>);

<%
	}
%>


<% 
   if (zipFile.endsWith(".gz\"")&& !zipFile.endsWith(".tar.gz\"")) { 
%>       
    			String fullName_<%=cid %> = new java.io.File(zipFileURL_<%=cid %>).getName();  
				String filename_<%=cid %> =  fullName_<%=cid %>.substring(0, fullName_<%=cid %>.length()-3);
<%
  } else {
%>
 				String filename_<%=cid %> =  entry_<%=cid %>.getName();
<%
  }
%>
           
<%
	//deal with the path issue and get the outputstream
	if (extractPath==true) {
%>          
               java.io.File f_<%=cid %> = new java.io.File(outputPath_<%=cid %>,filename_<%=cid %>);
<%
  }  else {
%>            
                String tempName_<%=cid %> = filename_<%=cid %>.replaceAll("\\\\", "/");
                int m_<%=cid %> = tempName_<%=cid %>.lastIndexOf('/');        
                String shortName_<%=cid %> = tempName_<%=cid %>.substring(m_<%=cid %>!=-1? m_<%=cid %>+1 : 0);  
  				java.io.File f_<%=cid %> = new java.io.File(outputPath_<%=cid %>,shortName_<%=cid %>);  				
<%
  }
%>
				
				util_<%=cid %>.checkDir(f_<%=cid %>);
             
                f_<%=cid %>.getParentFile().mkdirs();
                f_<%=cid %>.createNewFile();                
                java.io.FileOutputStream fos_<%=cid %> = new java.io.FileOutputStream(f_<%=cid %>);
                
                
                byte[] buffer_<%=cid %> = new byte[1024];
                
                for (int len_<%=cid %> = is_<%=cid %>.read(buffer_<%=cid %>, 0, 1024); len_<%=cid %> != -1; len_<%=cid %> = is_<%=cid %>.read(buffer_<%=cid %>, 0, 1024)) {
                    fos_<%=cid %>.write(buffer_<%=cid %>, 0, len_<%=cid %>);
                }
                fos_<%=cid %>.close();
                
                String currentFileName_<%=cid %> = f_<%=cid %>.getName(); 
                String currentFilePath_<%=cid %> = f_<%=cid %>.getAbsolutePath();
                
                globalMap.put("<%=cid %>_CURRENT_FILE", currentFileName_<%=cid %>);
                globalMap.put("<%=cid %>_CURRENT_FILEPATH", currentFilePath_<%=cid %>);