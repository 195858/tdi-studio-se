<%@ jet 
	imports="
		org.talend.core.model.process.INode
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.ElementParameterParser
	"
%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();	

	String directory = ElementParameterParser.getValue(node, "__DIRECTORY__");
	String zipFile = ElementParameterParser.getValue(node, "__ZIPFILE__");
	boolean rootName = ElementParameterParser.getValue(node, "__ROOTNAME__").equals("true");
	boolean extractPath = ElementParameterParser.getValue(node, "__EXTRACTPATH__").equals("true");	
%>      
		class UnzippedFile_<%=cid %> {
			public String fileName;
			public String filePath;
			
			public UnzippedFile_<%=cid %>(String fileName, String filePath) {
				this.fileName = fileName;
				this.filePath = filePath;				
			} 
			
		}
		
		class Util_<%=cid %>
        {
        	public java.util.List<UnzippedFile_<%=cid %>> unzippedFiles = new java.util.ArrayList<UnzippedFile_<%=cid %>>();
        	
            public void deleteDir(java.io.File dir) {
                if (dir.isDirectory()) {
                    String[] children = dir.list();
                    for (int i = 0; i < children.length; i++) {
                       deleteDir(new java.io.File(dir, children[i]));               
                    }
                }
                dir.delete();
            }

            public void repairDir(java.io.File dir) {
                java.io.File parentFile = dir.getParentFile();
        
                if (parentFile != null) {                            
                    if (parentFile.exists() && parentFile.isFile())
                        parentFile.delete();
                       
                        repairDir(parentFile);
                }
            }

            public void checkDir(java.io.File file)
            {
                if (file.exists()) {
                    if (file.isDirectory())
                        deleteDir(file);
                } else {
                    repairDir(file);
                }
            }
            
            public void output(String path, String fileName, java.io.InputStream is) throws Exception
            {
<%
	//deal with the path issue and get the outputstream
	if (extractPath==true) {
%>          
               java.io.File f = new java.io.File(path,fileName);
<%
  	}else{
%>            
                String tempName = fileName.replaceAll("\\\\", "/");
                int m = tempName.lastIndexOf('/');        
                String shortName = tempName.substring(m!=-1? m+1 : 0);  
  				java.io.File f = new java.io.File(path,shortName);  				
<%
	}
%>
				checkDir(f);
             
                f.getParentFile().mkdirs();
                f.createNewFile();                
                java.io.FileOutputStream fos = new java.io.FileOutputStream(f);
                
                
                byte[] buffer = new byte[1024];
                
                for (int len = is.read(buffer, 0, 1024); len != -1; len = is.read(buffer, 0, 1024)) {
                    fos.write(buffer, 0, len);
                }
                fos.close();
                unzippedFiles.add(new UnzippedFile_<%=cid %>(f.getName(), f.getAbsolutePath()));
            }
        } 
       
		Util_<%=cid %> util_<%=cid %> = new Util_<%=cid %>();
        
        String zipFileURL_<%=cid %> = <%=zipFile %>;
        zipFileURL_<%=cid %> = zipFileURL_<%=cid %>.toLowerCase();
        String outputPath_<%=cid %> = <%=directory %>;
        
        
		
<%
	if (rootName==true) {
%>        
        java.io.File file_<%=cid %> = new java.io.File(zipFileURL_<%=cid %>);        
        String name_<%=cid %> = file_<%=cid %>.getName();        
		int i_<%=cid %> = 0;
		if (zipFileURL_<%=cid %>.endsWith(".tar.gz"))  {
			i_<%=cid %> = name_<%=cid %>.length()-7;
   		} else {           
            i_<%=cid %> = name_<%=cid %>.lastIndexOf('.');        
            i_<%=cid %> = i_<%=cid %>!=-1? i_<%=cid %> : name_<%=cid %>.length();        
        }    
        String root_<%=cid %> = name_<%=cid %>.substring(0, i_<%=cid %>);   
        new java.io.File(outputPath_<%=cid %>, root_<%=cid %>).mkdir();
        outputPath_<%=cid %> = outputPath_<%=cid %> +"/" + root_<%=cid %>;
<%
  }
%>

	if (zipFileURL_<%=cid %>.endsWith(".tar.gz") || zipFileURL_<%=cid %>.endsWith(".tgz")){   
      
        org.apache.tools.tar.TarInputStream zip_<%=cid %> = new org.apache.tools.tar.TarInputStream(new java.util.zip.GZIPInputStream(new java.io.FileInputStream(zipFileURL_<%=cid %>)));
        
        org.apache.tools.tar.TarEntry entry_<%=cid %> = null;
        while ((entry_<%=cid %> = zip_<%=cid %>.getNextEntry()) != null) { 
			if (!entry_<%=cid %>.isDirectory()) {
                java.io.InputStream is_<%=cid %> = zip_<%=cid %>;
                String filename_<%=cid %> =  entry_<%=cid %>.getName();
				util_<%=cid %>.output(outputPath_<%=cid %>, filename_<%=cid %>,is_<%=cid%>);
			}
		}
		zip_<%=cid %>.close();

	} else if (zipFileURL_<%=cid %>.endsWith(".tar")){ 

        org.apache.tools.tar.TarInputStream zip_<%=cid %> = new org.apache.tools.tar.TarInputStream(new java.io.FileInputStream(zipFileURL_<%=cid %>));
        
        org.apache.tools.tar.TarEntry entry_<%=cid %> = null;
        while ((entry_<%=cid %> = zip_<%=cid %>.getNextEntry()) != null) {             
            if (!entry_<%=cid %>.isDirectory()) {
                java.io.InputStream is_<%=cid %> = zip_<%=cid %>;
                String filename_<%=cid %> =  entry_<%=cid %>.getName();
				util_<%=cid %>.output(outputPath_<%=cid %>, filename_<%=cid %>,is_<%=cid%>);
			}
		}
		zip_<%=cid %>.close();
  	}else if (zipFileURL_<%=cid %>.endsWith(".gz")){ 
        java.util.zip.GZIPInputStream zip_<%=cid %> = new java.util.zip.GZIPInputStream(new java.io.FileInputStream(new java.io.File(zipFileURL_<%=cid %>)));
        java.io.InputStream is_<%=cid %> = zip_<%=cid %>;
        String fullName_<%=cid %> = new java.io.File(zipFileURL_<%=cid %>).getName();  
		String filename_<%=cid %> =  fullName_<%=cid %>.substring(0, fullName_<%=cid %>.length()-3);  
		util_<%=cid %>.output(outputPath_<%=cid %>, filename_<%=cid %>,is_<%=cid%>);
		zip_<%=cid %>.close();
	}else { 
		//the others all use the ZIP to decompression
 		org.apache.tools.zip.ZipFile zip_<%=cid %> = new org.apache.tools.zip.ZipFile(zipFileURL_<%=cid %>);
        java.util.Enumeration enuFiles_<%=cid %> = zip_<%=cid %>.getEntries();
        while (enuFiles_<%=cid %>.hasMoreElements()) {
            org.apache.tools.zip.ZipEntry entry_<%=cid %> = (org.apache.tools.zip.ZipEntry) enuFiles_<%=cid %>.nextElement();          
            if (!entry_<%=cid %>.isDirectory()) {
                //get the input stream
                java.io.InputStream is_<%=cid %> = zip_<%=cid %>.getInputStream(entry_<%=cid %>);
				String filename_<%=cid %> =  entry_<%=cid %>.getName();
				util_<%=cid %>.output(outputPath_<%=cid %>, filename_<%=cid %>,is_<%=cid%>);
			}
		}
		zip_<%=cid %>.close();
	}

<%
	// iterate output
%>
	for (UnzippedFile_<%=cid %> uf<%=cid %> : util_<%=cid %>.unzippedFiles) {
		globalMap.put("<%=cid %>_CURRENT_FILE", uf<%=cid %>.fileName);
		globalMap.put("<%=cid %>_CURRENT_FILEPATH", uf<%=cid %>.filePath);
	