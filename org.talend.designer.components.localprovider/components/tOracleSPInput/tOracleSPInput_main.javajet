<%@ jet 
package="org.talend.designer.codegen.translators" 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.process.IConnection
	java.util.Map
	java.util.List
	org.talend.core.model.metadata.IMetadataTable
	org.talend.core.model.metadata.IMetadataColumn

"
class="OracleSPInput"
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	String dbsp= ElementParameterParser.getValue(node, "__SPNAME__");
	String outpara= ElementParameterParser.getValue(node, "__OUTPARA__");
	List<Map<String, String>>  addCols =
            (List<Map<String,String>>)ElementParameterParser.getObjectValue(node,"__ADD_COLS__");	

	String incomingConnName = null;
	List<IMetadataColumn> columnList = null;
	List<IMetadataColumn> incomeColumnList = null;
	IConnection conn=null;
	List< ? extends IConnection> conns = node.getIncomingConnections();
	IMetadataTable inputMetadata;
	
	if(conns!=null && conns.size()>0){
		conn = conns.get(0);
		incomingConnName = conn.getName();
		inputMetadata = conn.getMetadataTable();
		incomeColumnList=inputMetadata.getListColumns();
	}	
	
		


%>
java.sql.CallableStatement  stmt<%=cid%> = conn_<%=cid%>.prepareCall("{call <%=dbsp%>(
<% for (int i = 0; i < addCols.size(); i++){
	if(i<addCols.size()-1){
%>?,<%}else{%>?<% }}%> )}");

StringBuffer strBuffer_<%=cid%> = new StringBuffer();


	<%
	
/////////////////Inner Class Convert///////////////////////	
class Convert{
	public String genVarType(String pType){
	if(pType.equals("id_String")){
		return "String";
	}
	else if(pType.equals("id_Integer")){
		return "int";
	}
	else if(pType.equals("id_Boolean")){
		return "Boolean";
	}
	else if(pType.equals("id_Byte")){
		return "Byte";
	}
	else if(pType.equals("id_byte[]")){
		return "Bytes";
	}
	else if(pType.equals("id_Date")){
		return "Date";
	}
	else if(pType.equals("id_Double")){
		return "Double";
	}
	else if(pType.equals("id_Float")){
		return "Float";
	}
	else if(pType.equals("id_Long")){
		return "Long";
	}
	else if(pType.equals("id_Object")){
		return "Object";
	}
	else if(pType.equals("id_Short")){
		return "Short";
	}
	else if(pType.equals("id_Character")){
		return "String";
	}
	return null;
	}



	public String genConvert(String pType){
	if(pType.equals("id_String")){
		return "String";
	}
	else if(pType.equals("id_Integer")){
		return "Int";
	}
	else if(pType.equals("id_Boolean")){
		return "Boolean";
	}
	else if(pType.equals("id_Byte")){
		return "Byte";
	}
	else if(pType.equals("id_byte[]")){
		return "Bytes";
	}
	else if(pType.equals("id_Date")){
		return "Date";
	}
	else if(pType.equals("id_Double")){
		return "Double";
	}
	else if(pType.equals("id_Float")){
		return "Float";
	}
	else if(pType.equals("id_Long")){
		return "Long";
	}
	else if(pType.equals("id_Object")){
		return "Object";
	}
	else if(pType.equals("id_Short")){
		return "Short";
	}
	else if(pType.equals("id_Character")){
		return "String";
	}
	return null;
	}
	
	
	
	public String genOUTConvert(String pType){
	if(pType.equals("id_String")){
		return "VARCHAR";
	}
	else if(pType.equals("id_Integer")){
		return "INTEGER";
	}
	else if(pType.equals("id_Boolean")){
		return "BOOLEAN";
	}
	else if(pType.equals("id_Byte")){
		return "BIT";
	}
	else if(pType.equals("id_byte[]")){
		return "ARRAY";
	}
	else if(pType.equals("id_Date")){
		return "DATE";
	}
	else if(pType.equals("id_Double")){
		return "DOUBLE";
	}
	else if(pType.equals("id_Float")){
		return "FLOAT";
	}
	else if(pType.equals("id_Long")){
		return "LONGVARCHAR";
	}
	else if(pType.equals("id_Object")){
		return "JAVA_OBJECT";
	}
	else if(pType.equals("id_Short")){
		return "SMALLINT";
	}
	else if(pType.equals("id_Character")){
		return "CHAR";
	}
	return null;
	}	
	
	
}
	
	Convert convert=new Convert();	
	IMetadataColumn incomeColumn=null;	
	int count=0;
    for (Map<String, String> addCol:addCols) {//5 
    count=count+1; 			
  	if(addCol.get("TYPE").equals("OUT")){
  	%>
  		stmt<%=cid%>.registerOutParameter(<%=count%>,<%if(addCol.get("DATATYPE").equals("Basic")){%>java.sql.Types.<%=convert.genOUTConvert(incomeColumnList.get(count-1).getTalendType())%><%}else{%>oracle.jdbc.driver.OracleTypes.CURSOR<%}%>);
  	<%
  	}else{
%>
  		stmt<%=cid%>.set<%=convert.genConvert(incomeColumnList.get(count-1).getTalendType())%>(<%=count%>, <%=incomingConnName %>.<%=incomeColumnList.get(count-1).getLabel() %>);																					    			 	
  	<%
  	}

				}//5	
%> 

			   try{		    			      
				    stmt<%=cid%>.executeQuery();	
				   }
				   catch(java.sql.SQLException ex){
				    System.err.println(ex.getMessage()+"Error on Connecting Database!");
				   }				   

<%
//output
int outNum=1;
String outColumnType=null;
for (Map<String, String> addCol:addCols) {
	if(addCol.get("NAME").equals(outpara)){
		if(!(addCol.get("DATATYPE").equals("Basic"))){
%>
	java.sql.ResultSet var<%=cid%>=((oracle.jdbc.driver.OracleCallableStatement) stmt<%=cid%>).getCursor(<%=outNum%>);	
	java.sql.ResultSetMetaData md<%=cid%> = var<%=cid%>.getMetaData();
	int nColumns<%=cid%> = md<%=cid%>.getColumnCount();
<%
		List< ? extends IConnection> outConns = node.getOutgoingConnections();
 		  IConnection conn2 = outConns.get(0);
 		  IMetadataTable outputMetadata = conn2.getMetadataTable();
 		  List<IMetadataColumn> outputColumnList = outputMetadata.getListColumns();
 		  int i=1;
 		  %>
		    while(var<%=cid%>.next()){
	    
		    <%
		    		i=1;
		     		  for(IMetadataColumn column:outputColumnList){
		    %>
		     System.out.print("   "+var<%=cid%>.getString(<%=i%>));	     
		     <%
		      		  i=i+1;
		     }
		     %>
		     		     System.out.println("");
		     <%
		     %>
		     }

		globalMap.put("<%=cid %>_RESULTSET", var<%=cid%>); 
		globalMap.put("<%=cid %>_RESULTTYPE","SetType");


<%
		}else
		{
outColumnType=incomeColumnList.get(outNum).getTalendType();
  					
%>

	<%=convert.genVarType(outColumnType)%> var<%=cid%>=stmt<%=cid%>.get<%=convert.genConvert(outColumnType)%>(<%=outNum%>);	
	System.out.println("<%=outpara%> = "+var<%=cid%>);
	globalMap.put("<%=cid %>_RESULTSET", var<%=cid%>); 
	globalMap.put("<%=cid %>_RESULTTYPE","SimType");
<%
  		}
  				break;	
	}
	outNum=outNum+1;

}
%>

	









					 

		



