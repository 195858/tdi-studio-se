<%@ jet
imports="
	org.talend.designer.codegen.config.CodeGeneratorArgument
	org.talend.core.model.process.INode
	org.talend.core.model.process.ElementParameterParser
	org.talend.core.model.process.IConnection
	org.talend.core.model.metadata.IMetadataTable
	org.talend.core.model.metadata.types.JavaTypesManager
	org.talend.core.model.metadata.MappingTypeRetriever
	org.talend.core.model.metadata.MetadataTalendType
	org.talend.core.model.process.IConnectionCategory
	java.util.List
	java.util.ArrayList
	java.util.Map
	java.util.HashMap
	"
skeleton="../templates/db_output_bulk.skeleton"
%>
<%@ include file="../templates/DB/Output/HelpClass.javajet"%>
<%
	class DBOutputMainUtil extends DefaultDBOutputUtil{
		private boolean isUseBatchByDBVersion;
		private boolean convertToUppercase;
		private boolean extendedInsert;
		private String numPerInsert;
		public void beforeComponentProcess(INode node){
			super.beforeComponentProcess(node);
			isUseBatchByDBVersion = !"ORACLE_8".equalsIgnoreCase(dbVersion);
			convertToUppercase = ("true").equals(ElementParameterParser.getValue(node, "__CONVERT_COLUMN_TABLE_TO_UPPERCASE__"));
			extendedInsert = ("true").equals(ElementParameterParser.getValue(node, "__EXTENDINSERT__"));
			if((cid.equals("talendLogs_DB") || cid.equals("talendStats_DB") || cid.equals("talendMeter_DB"))||(!("INSERT").equals(dataAction))){
				extendedInsert = false;
			}
			String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
			if(("true").equals(useExistingConn)) {
				List<? extends INode> nodes = node.getProcess().getNodesOfType("tAmazonMysqlConnection");
				for (INode ne:nodes) {
					if (connection.equals(ne.getUniqueName())) {
						dbVersion = ElementParameterParser.getValue(ne, "__DB_VERSION__");
					}
				}
			} else {
				dbVersion = ElementParameterParser.getValue(node, "__DB_VERSION__");
			}
			executeBatch = false;
			numPerInsert = ElementParameterParser.getValue(node, "__NB_ROWS_PER_INSERT__");
			if ("MYSQL_5".equals(dbVersion) && rejectConnName==null){
				if(extendedInsert  && ("INSERT").equals(dataAction) && !("").equals(numPerInsert ) && !("0").equals(numPerInsert )) {
					executeBatch = true;
				}
				if(useBatchSize && !("").equals(batchSize) && !("0").equals(batchSize) && (("UPDATE").equals(dataAction) || ("DELETE").equals(dataAction))){
					executeBatch = true;
				}
			}
		}
		public void preparedStatInsert(INode node,Manager manager,StringBuilder insertColName,StringBuilder insertValueStmt,IMetadataColumn talendDynCol,boolean isDynamic){
			boolean supportDuplicateUpdate = "true".equalsIgnoreCase(ElementParameterParser.getValue(node,"__ON_DUPLICATE_KEY_UPDATE__"));
			if (supportDuplicateUpdate) {
					List<Map<String, String>> duplicateKeys = (List<Map<String,String>>)ElementParameterParser.getObjectValue( node,"__DUPLICATED_KEYS__" );
					if (duplicateKeys.size() > 0) {
					%>
					StringBuffer duplidateClause_<%=cid%> = new StringBuffer(" ON DUPLICATE KEY UPDATE ");
						<%
						for (int i=0; i< duplicateKeys.size() ; i++) {
							if (i >0) {
							%>
								duplidateClause_<%=cid%>.append(",");
							<%
							}
							%>
								duplidateClause_<%=cid%>.append ("`" + <%=duplicateKeys.get(i).get("DUPLICATED_KEY")%> + "`");
								duplidateClause_<%=cid%>.append ("=");
								duplidateClause_<%=cid%>.append (<%=duplicateKeys.get(i).get("DUPLICATED_VALUE")%>);
						<%
						}
					}
				}
				if(!extendedInsert) {
					List< ? extends IConnection> conns_dynamic = node.getIncomingConnections();
					if(conns_dynamic!=null && conns_dynamic.size()>0){
						IConnection conn = conns_dynamic.get(0);
						if(!("".equals(insertColName.toString()))) {
						%>
							String insert_<%=cid%> = "INSERT INTO  <%=manager.getLProtectedChar()%>" + tableName_<%=cid%> + "<%=manager.getRProtectedChar()%>  (<%=insertColName.toString()%>, "+DynamicUtils.getInsertIntoStmtColumnsList(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>")+") VALUES (<%=insertValueStmt.toString()%>, "+DynamicUtils.getInsertIntoStmtValuesList(<%=conn.getName()%>.<%=getDynamicColumn()%>)+")";
						<%
						} else {
						%>
							String insert_<%=cid%> = "INSERT INTO  <%=manager.getLProtectedChar()%>" + tableName_<%=cid%> + "<%=manager.getRProtectedChar()%>  ("+DynamicUtils.getInsertIntoStmtColumnsList(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>")+") VALUES ("+DynamicUtils.getInsertIntoStmtValuesList(<%=conn.getName()%>.<%=getDynamicColumn()%>)+")";
						<%
						}
					}
					if (supportDuplicateUpdate) {
					%>
					insert_<%=cid%> += 	duplidateClause_<%=cid%>.toString();
					<%
					}
					%>
					<%@ include file="../templates/_hintInsert.javajet" %>
					<%
					//to fixed: bug8422
					if(!(cid.equals("talendLogs_DB") || cid.equals("talendStats_DB") || cid.equals("talendMeter_DB"))){%>
							pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(insert_<%=cid%>);
					<%}%>
					<%
				//to fixed: bug8422
					if((cid.equals("talendLogs_DB") || cid.equals("talendStats_DB") || cid.equals("talendMeter_DB"))){ %>
							pstmt_<%=cid %> = null;
							// [%connection%][psmt][tableName]
							String keyPsmt_<%=cid %> = conn_<%=cid%> + "[psmt]" + "[" + tableName_<%=cid%> + "]";
							if(GlobalResource.resourceMap.get(keyPsmt_<%=cid %>)== null){
								pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(insert_<%=cid%>);
								GlobalResource.resourceMap.put(keyPsmt_<%=cid %>, pstmt_<%=cid %>);
							}else{
								pstmt_<%=cid %> = (java.sql.PreparedStatement)GlobalResource.resourceMap.get(keyPsmt_<%=cid %>);
							}
					<%}%>
				<%
				} else {//extended-insert mode(begin)
					if ("MYSQL_4".equals(dbVersion)) {
				%>
				////////////////////////////////////////////////////////////////////////////////////////////
						StringBuilder extendInsertValueStmt_<%=cid%> = new StringBuilder();
						for(int i=0;i < <%=numPerInsert%>;i++){
							<%
							if(isDynamic) {
								List< ? extends IConnection> conns_dynamic = node.getIncomingConnections();
								if(conns_dynamic!=null && conns_dynamic.size()>0){
									IConnection conn = conns_dynamic.get(0);
									%>
									extendInsertValueStmt_<%=cid%>.append("(<%=insertValueStmt.toString()%>,"+DynamicUtils.getInsertIntoStmtValuesList(<%=conn.getName()%>.<%=getDynamicColumn()%>)+")");
								<%
								}
							} else {
							%>
									extendInsertValueStmt_<%=cid%>.append("(<%=insertValueStmt.toString()%>)");
							<%
							}
							%>
							if (i!=<%=numPerInsert%>-1) extendInsertValueStmt_<%=cid%>.append(",");
						}
						<%
						List< ? extends IConnection> conns_dynamic = node.getIncomingConnections();
						if(conns_dynamic!=null && conns_dynamic.size()>0){
							IConnection conn = conns_dynamic.get(0);
							if(!("".equals(insertColName.toString()))) {
							%>
								insert_<%=cid%> = "INSERT INTO `" + tableName_<%=cid%> + "` (<%=insertColName.toString()%>, "+DynamicUtils.getInsertIntoStmtColumnsList(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>")+") VALUES " + extendInsertValueStmt_<%=cid%>.toString();
							<%
							} else {
							%>
								insert_<%=cid%> = "INSERT INTO `" + tableName_<%=cid%> + "` ("+DynamicUtils.getInsertIntoStmtColumnsList(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>")+") VALUES " + extendInsertValueStmt_<%=cid%>.toString();
							<%
							}
							if (supportDuplicateUpdate) {
							%>
								insert_<%=cid%> += 	duplidateClause_<%=cid%>.toString();
							<%
							}
							%>
							<%@ include file="../templates/_hintInsert.javajet" %>
							pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(insert_<%=cid%>);
							<%
							if(!("".equals(insertColName.toString()))) {
							%>
							insertColName<%=cid%> = "<%=insertColName.toString()%>, "+DynamicUtils.getInsertIntoStmtColumnsList(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>");
							insertColValue<%=cid%> = "<%=insertValueStmt.toString()%>, "+DynamicUtils.getInsertIntoStmtValuesList(<%=conn.getName()%>.<%=getDynamicColumn()%>);
							<%
							} else {
							%>
								insertColName<%=cid%> = DynamicUtils.getInsertIntoStmtColumnsList(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>");
							insertColValue<%=cid%> = DynamicUtils.getInsertIntoStmtValuesList(<%=conn.getName()%>.<%=getDynamicColumn()%>);
							<%
							}
						}
						if(isDynamic) {
						%>
							rowCount<%=cid%> = 0;
						<%
						} else {
						%>
							int rowCount<%=cid%> = 0;
						<%
						}
					} else if ("MYSQL_5".equals(dbVersion)) {
						List< ? extends IConnection> conns_dynamic = node.getIncomingConnections();
						if(conns_dynamic!=null && conns_dynamic.size()>0){
							IConnection conn = conns_dynamic.get(0);
							if(!("".equals(insertColName.toString()))) {
							%>
								String insert_<%=cid%> = "INSERT INTO `" + tableName_<%=cid%> + "` (<%=insertColName.toString()%>, "+DynamicUtils.getInsertIntoStmtColumnsList(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>")+") VALUES (<%=insertValueStmt.toString()%>, "+DynamicUtils.getInsertIntoStmtValuesList(<%=conn.getName()%>.<%=getDynamicColumn()%>)+")";
							<%
							} else {
							%>
								String insert_<%=cid%> = "INSERT INTO `" + tableName_<%=cid%> + "` ("+DynamicUtils.getInsertIntoStmtColumnsList(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>")+") VALUES ("+DynamicUtils.getInsertIntoStmtValuesList(<%=conn.getName()%>.<%=getDynamicColumn()%>)+")";
							<%
							}
						}
						if (supportDuplicateUpdate) {
						%>
							insert_<%=cid%> += 	duplidateClause_<%=cid%>.toString();
						<%
						}
						if(isDynamic) {
						%>
							batchSize_<%=cid%> = <%=numPerInsert%>;
							batchSizeCounter_<%=cid%>=0;
						<%
						} else {
						%>
							int batchSize_<%=cid%> = <%=numPerInsert%>;
							int batchSizeCounter_<%=cid%>=0;
						<%
						}
						%>
						<%@ include file="../templates/_hintInsert.javajet" %>
						pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(insert_<%=cid%>);
					<%
					}
				}//extended-insert mode(end)
		}
		public void insertData(INode node,List<Column> colStruct,Manager manager,String incomingConnName,boolean isDynamic,int actionType,List<IMetadataColumn> rejectColumnList,List<IMetadataColumn> columnList,IMetadataColumn talendDynCol){
			if(extendedInsert) {//extended-insert mode(begin)
				if ("MYSQL_4".equals(dbVersion)) {
					int insertableCount = 0;
					for(Column column : colStruct) {
						if(column.isInsertable()) {
							insertableCount++;
						}
					}
					if(!isDynamic) {
					%>
						int counter<%=cid%> = rowCount<%=cid%> * <%=insertableCount%> + 1;
					<%
					}
					for(Column column : colStruct) {
						if(column.isInsertable()) {
							String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
							generateSetStmt(typeToGenerate,column,incomingConnName,cid);
							%>
							counter<%=cid%>++;
							<%
						}
					}
					if(isDynamic) {
						Column dynamicColumn = getColumn(getDynamicColumn());
						String typeToGenerate = JavaTypesManager.getTypeToGenerate(dynamicColumn.getColumn().getTalendType(), dynamicColumn.getColumn().isNullable());
						if("Dynamic".equals(typeToGenerate)) {
						%>
							int count_dyn_<%=cid%>=DynamicUtils.writeColumnsToDatabse(<%=incomingConnName%>.<%=dynamicColumn.getName()%>, pstmt_<%=cid%>, counter<%=cid%>-1, "<%=dbmsId%>");
							counter<%=cid%>+=count_dyn_<%=cid%>;
						<%
						}
					}
					%>
					exInsertColValue<%=cid%> = new BufferLine_<%=cid%>(
						<%
						int count =0;
						for(Column column : colStruct) {
							if(column.isInsertable()) {
								if(count != 0) {
									%>
									,
									<%
								}
								%>
								<%=incomingConnName%>.<%=column.getName()%>
								<%
								count++;
							}
						}
						if(isDynamic) {
							Column dynamicColumn = getColumn(getDynamicColumn());
							String typeToGenerate = JavaTypesManager.getTypeToGenerate(dynamicColumn.getColumn().getTalendType(), dynamicColumn.getColumn().isNullable());
							if("Dynamic".equals(typeToGenerate)) {
							%>
								, <%=incomingConnName%>.<%=dynamicColumn.getName()%>
							<%
							}
						}
					%>
					);
					exInsertColValueList<%=cid%>.add(exInsertColValue<%=cid%>);
					rowCount<%=cid%>++;
					<%
					if(isDynamic) {
					%>
						nb_line_<%=cid%>++;
					<%
					}
					%>
					if(rowCount<%=cid%> == <%=numPerInsert%>){
						<%
						log4jCodeGenerateUtil.defineDataOperationPrefix(node,"Inserting");
						%>
						insertedCount_<%=cid%> = insertedCount_<%=cid%> + pstmt_<%=cid %>.executeUpdate();
						exInsertColValueList<%=cid%>.clear();
						rowCount<%=cid%> = 0;
						counter<%=cid%>=1;
					}
				<%
				} else if ("MYSQL_5".equals(dbVersion)) {
	 				int counter = 1;
					for(Column column : colStruct) {
						if(column.isInsertable()) {
							String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
							%>
							<%=manager.generateSetStmt(typeToGenerate, column, counter, incomingConnName, cid, NORMAL_TYPE,null)%>
							<%
							if(isEnableDebug) {
								%>
								query_<%=cid%> = <%=manager.retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counter, "insertSQLSplits_")%>;
								<%
							}
							counter++;
						}
					}
					if(isDynamic) {
						Column dynamicColumn = getColumn(getDynamicColumn());
						String typeToGenerate = JavaTypesManager.getTypeToGenerate(dynamicColumn.getColumn().getTalendType(), dynamicColumn.getColumn().isNullable());
						if("Dynamic".equals(typeToGenerate)) {
						%>
							DynamicUtils.writeColumnsToDatabse(<%=incomingConnName%>.<%=dynamicColumn.getName()%>, pstmt_<%=cid%>, <%=counter-1%>, "<%=dbmsId%>");
						<%
						}
					}
					if(isEnableDebug) {
						%>
						globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
						<%
					}
					%>
					<%if (rejectConnName == null) { // modification one
						log4jCodeGenerateUtil.defineDataOperationPrefix(node,"Adding");
						%>
						pstmt_<%=cid %>.addBatch();
						nb_line_<%=cid%>++;
						<%if (!("").equals(numPerInsert ) && !("0").equals(numPerInsert )) {
						%>
							batchSizeCounter_<%=cid%>++;
						<%
						}
					}else {
						log4jCodeGenerateUtil.defineDataOperationPrefix(node,"Inserting");
						%>
						try {
							nb_line_<%=cid%>++;
							insertedCount_<%=cid%> = insertedCount_<%=cid%> + pstmt_<%=cid %>.executeUpdate();
						} catch(java.lang.Exception e) {
							whetherReject_<%=cid%> = true;
							<%
							if (("true").equals(dieOnError)) {
								log4jCodeGenerateUtil.logError(node,"fatal");
								%>
								throw(e);
								<%
							} else {
								log4jCodeGenerateUtil.logError(node,"error");
								if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {%>
									<%=rejectConnName %> = new <%=rejectConnName %>Struct();
									<%
									for(IMetadataColumn column : columnList) {
									 %>
										<%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
									<%
									}
									%>
									rejectedCount_<%=cid%> = rejectedCount_<%=cid%>+ 1;
									<%=rejectConnName%>.errorCode = ((java.sql.SQLException)e).getSQLState();
									<%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
									<%
								} else {
									%>
									System.err.print(e.getMessage());
									<%
								}
							}
							%>
						}
					<%
					}
				}
			} else {//extended-insert mode(end)
				int counter = 1;
				for(Column column : colStruct) {
					if(column.isInsertable()) {
						String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
						%>
						<%=manager.generateSetStmt(typeToGenerate, column, counter, incomingConnName, cid, NORMAL_TYPE,null)%>
						<%
						if(isEnableDebug) {
							%>
							query_<%=cid%> = <%=manager.retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counter, "insertSQLSplits_")%>;
							<%
						}
						counter++;
					}
				}
				if(isDynamic) {
					Column dynamicColumn = getColumn(getDynamicColumn());
					String typeToGenerate = JavaTypesManager.getTypeToGenerate(dynamicColumn.getColumn().getTalendType(), dynamicColumn.getColumn().isNullable());
					if("Dynamic".equals(typeToGenerate)) {
					%>
						DynamicUtils.writeColumnsToDatabse(<%=incomingConnName%>.<%=dynamicColumn.getName()%>, pstmt_<%=cid%>, <%=counter-1%>, "<%=dbmsId%>");
					<%
					}
				}
				if(isEnableDebug) {
					%>
					globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
					<%
				}
				log4jCodeGenerateUtil.defineDataOperationPrefix(node,"Inserting");
			%>
				try {
					nb_line_<%=cid%>++;
					insertedCount_<%=cid%> = insertedCount_<%=cid%> + pstmt_<%=cid %>.executeUpdate();
				} catch(java.lang.Exception e) {
					whetherReject_<%=cid%> = true;
					<%
					if (("true").equals(dieOnError)) {
						log4jCodeGenerateUtil.logError(node,"fatal");
						%>
						throw(e);
						<%
					} else {
						log4jCodeGenerateUtil.logError(node,"error");
						if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {%>
							<%=rejectConnName %> = new <%=rejectConnName %>Struct();
							<%
							for(IMetadataColumn column : columnList) {
								%>
								<%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
								<%
							}
							%>
							rejectedCount_<%=cid%> = rejectedCount_<%=cid%>+ 1;
							<%=rejectConnName%>.errorCode = ((java.sql.SQLException)e).getSQLState();
							<%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
							<%
						} else {
							%>
							System.err.print(e.getMessage());
							<%
						}
					}
					%>
				}
				<%
			}
		}
		public boolean addBatch(){
			boolean addBatch = rejectConnName == null && useBatchSize && "MYSQL_5".equals(dbVersion);
			return addBatch;
		}
		public Map<String, String> hint(INode node){
			///// hint options/////
			useHintOptions = ("true").equals(ElementParameterParser.getValue(node,"__USE_HINT_OPTIONS__"));
			if (useHintOptions) {
				List<Map<String, String>> hintOptions = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__HINT_OPTIONS__");
				hintsValues = new HashMap<String, String>();
				String hintValue = null;
				boolean firstInsert = true;
				boolean firstUpdate = true;
				boolean firstDelete = true;
				boolean firstTableName = true;
				for(java.util.Map<String, String> option : hintOptions) {
					//get
					if(option.get("HINT").matches("\"/\\*NORMALIZED_HINT\\*/\"")) {
						String id = cid.replace(node.getComponent().getName() + "_", "");
						hintValue = "\"/*\"+" + table + "+\".\" + "  + "\"" + option.get("SQL_STMT")+ ".\"" + "+" +  id	+  "+\"*/\" " ;
					}else if (option.get("HINT").matches("\"/\\*+.*\\*/\"")) {
						hintValue = option.get("HINT");
					}
					//set
					if ("INSERT".equalsIgnoreCase(option.get("SQL_STMT"))){
						if(firstInsert){
							hintsValues.put("INSERT", hintValue) ;
							firstInsert = false;
						}else {
							hintsValues.put("INSERT", hintsValues.get("INSERT") + "+" + hintValue) ;
						}
					}else if ("UPDATE".equalsIgnoreCase(option.get("SQL_STMT"))) {
						if(firstUpdate){
							hintsValues.put("UPDATE", hintValue) ;
							firstUpdate = false;
						}else {
							hintsValues.put("UPDATE", hintsValues.get("UPDATE") + "+" + hintValue) ;
						}
					}else if ("DELETE".equalsIgnoreCase(option.get("SQL_STMT"))) {
						if (firstDelete){
							hintsValues.put("DELETE", hintValue) ;
							firstDelete =false;
						}else {
							hintsValues.put("DELETE", hintsValues.get("DELETE") + "+" + hintValue) ;
						}
					}else if ("TABLE_NAME".equalsIgnoreCase(option.get("SQL_STMT"))){
						if (firstTableName){
							hintsValues.put("TABLE_NAME", hintValue) ;
							firstTableName = false;
						}else {
							hintsValues.put("TABLE_NAME", hintsValues.get("TABLE_NAME") + "+" + hintValue) ;
						}
					}
				}
			}
			return hintsValues;
			//// hint options end ////
		}
		public void prepareDataActionMore(INode node,Manager manager,StringBuilder insertColName,StringBuilder insertValueStmt,StringBuilder updateSetStmt,StringBuilder updateWhereStmt){
			if(("REPLACE").equals(dataAction)) {
				%>
				String replace_<%=cid%> = "REPLACE INTO `" + tableName_<%=cid%> + "` (<%=insertColName.toString()%>) VALUES (<%=insertValueStmt.toString()%>)";
				pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(replace_<%=cid%>);
				<%
			} else if(("INSERT_ON_DUPLICATE_KEY_UPDATE").equals(dataAction)) {
				%>
				String insertIgnore_<%=cid%> = "INSERT IGNORE INTO `" + tableName_<%=cid%> + "` (<%=insertColName.toString()%>) VALUES (<%=insertValueStmt.toString()%>) ON DUPLICATE KEY UPDATE <%=updateSetStmt.toString()%>";
				pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(insertIgnore_<%=cid%>);
				<%
			} else if(("INSERT_IGNORE").equals(dataAction)) {
				%>
				String insert_<%=cid%> = "INSERT IGNORE INTO `" + tableName_<%=cid%> + "` (<%=insertColName.toString()%>) VALUES (<%=insertValueStmt.toString()%>)";
				<%@ include file="../templates/_hintInsert.javajet" %>
				pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(insert_<%=cid%>);
				<%
			}
		}
		public void dataActionMore(INode node,List<Column> colStruct,Manager manager,String incomingConnName,List<IMetadataColumn> rejectColumnList,List<IMetadataColumn> columnList){
			if(("REPLACE").equals(dataAction)) {
				int counter = 1;
				for(Column column : colStruct) {
					if(column.isInsertable()) {
						String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
						%>
						<%=manager.generateSetStmt(typeToGenerate, column, counter, incomingConnName, cid,0,null)%>
						<%
						if(isEnableDebug) {
							%>
							query_<%=cid%> = <%=manager.retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counter, "replaceSQLSplits_")%>;
							<%
						}
						counter++;
					}
				}
				if(isEnableDebug) {
					%>
					globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
					<%
				}
				log4jCodeGenerateUtil.defineDataOperationPrefix(node,"Replacing");
				%>
				int replaceCount_<%=cid%> = 0;
				try {
					replaceCount_<%=cid%> = pstmt_<%=cid %>.executeUpdate();
				} catch(java.lang.Exception e) {
					whetherReject_<%=cid%> = true;
					<%
					if (("true").equals(dieOnError)) {
						log4jCodeGenerateUtil.logError(node,"fatal");
						%>
						throw(e);
						<%
					} else {
						log4jCodeGenerateUtil.logError(node,"error");
						if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
							%>
							<%=rejectConnName %> = new <%=rejectConnName %>Struct();
							<%
							for(IMetadataColumn column : columnList) {
								%>
								<%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
								<%
							}
							%>
							rejectedCount_<%=cid%> = rejectedCount_<%=cid%>+ 1;
							<%=rejectConnName%>.errorCode = ((java.sql.SQLException)e).getSQLState();
							<%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
						<%
						} else {
						%>
							System.err.print(e.getMessage());
						<%
						}
					}
					%>
				}
				if(replaceCount_<%=cid%> == 1) {
					insertedCount_<%=cid%> += replaceCount_<%=cid%>;
				} else {
					insertedCount_<%=cid%> += 1;
					deletedCount_<%=cid%> += replaceCount_<%=cid%> - 1;
				}
			<%
			} else if(("INSERT_ON_DUPLICATE_KEY_UPDATE").equals(dataAction)) {
				int counter = 1;
				for(Column column : colStruct) {
					if(column.isInsertable()) {
						String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
						%>
						<%=manager.generateSetStmt(typeToGenerate, column, counter, incomingConnName, cid, 0,null)%>
						<%
						if(isEnableDebug) {
						%>
							query_<%=cid%> = <%=manager.retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counter, "insertIgnoreSQLSplits_")%>;
						<%
						}
						counter++;
					}
				}
				for(Column column : colStruct) {
					if(column.isUpdatable()) {
						String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
						%>
						<%=manager.generateSetStmt(typeToGenerate, column, counter, incomingConnName, cid, NORMAL_TYPE,null)%>
						<%
						if(isEnableDebug) {
						%>
							query_<%=cid%> = <%=manager.retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counter, "insertIgnoreSQLSplits_")%>;
						<%
						}
						counter++;
					}
				}
				if(isEnableDebug) {
				%>
					globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
				<%
				}
				log4jCodeGenerateUtil.defineDataOperationPrefix(node,"Counting on duplicate key");
				%>
				int count_on_duplicate_key_<%=cid%> = 0;
				try {
					count_on_duplicate_key_<%=cid%> = pstmt_<%=cid %>.executeUpdate();
				} catch(java.lang.Exception e) {
					whetherReject_<%=cid%> = true;
					<%
					if (("true").equals(dieOnError)) {
						log4jCodeGenerateUtil.logError(node,"fatal");
					%>
						throw(e);
					<%
					} else {
						log4jCodeGenerateUtil.logError(node,"error");
						if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
						%>
							<%=rejectConnName %> = new <%=rejectConnName %>Struct();
							<%
							for(IMetadataColumn column : columnList) {
								%>
								<%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
								<%
							}
							%>
							rejectedCount_<%=cid%> = rejectedCount_<%=cid%>+ 1;
							<%=rejectConnName%>.errorCode = ((java.sql.SQLException)e).getSQLState();
							<%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
							<%
						} else {
							%>
							System.err.print(e.getMessage());
							<%
						}
					}
					%>
				}
				if(count_on_duplicate_key_<%=cid%> == 1) {
					insertedCount_<%=cid%> += count_on_duplicate_key_<%=cid%>;
				} else {
					insertedCount_<%=cid%> += 1;
					updatedCount_<%=cid%> += count_on_duplicate_key_<%=cid%> - 1;
				}
			<%
			}else if(("INSERT_IGNORE").equals(dataAction)) {
				int counter = 1;
				for(Column column : colStruct) {
					if(column.isInsertable()) {
						String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
						%>
						<%=manager.generateSetStmt(typeToGenerate, column, counter, incomingConnName, cid, 0,null)%>
						<%
						if(isEnableDebug) {
							%>
							query_<%=cid%> = <%=manager.retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counter, "insertSQLSplits_")%>;
							<%
						}
						counter++;
					}
				}
				if(isEnableDebug) {
					%>
					globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
					<%
				}
				log4jCodeGenerateUtil.defineDataOperationPrefix(node,"Inserting");
				%>
				try {
					nb_line_<%=cid%>++;
					insertedCount_<%=cid%> = insertedCount_<%=cid%> + pstmt_<%=cid %>.executeUpdate();
				} catch(java.lang.Exception e) {
					whetherReject_<%=cid%> = true;
					<%
					if (("true").equals(dieOnError)) {
						log4jCodeGenerateUtil.logError(node,"fatal");
						%>
						throw(e);
						<%
					} else {
						log4jCodeGenerateUtil.logError(node,"error");
						if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {%>
							<%=rejectConnName %> = new <%=rejectConnName %>Struct();
							<%
							for(IMetadataColumn column : columnList) {
								%>
								<%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
								<%
							}
							%>
							rejectedCount_<%=cid%> = rejectedCount_<%=cid%>+ 1;
							<%=rejectConnName%>.errorCode = ((java.sql.SQLException)e).getSQLState();
							<%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
							<%
						} else {
							%>
							System.err.print(e.getMessage());
							<%
						}
					}
					%>
				}
			<%
			}
		}
		public void executeBatch(INode node){
			if (executeBatch) {
			%>
				if ( batchSize_<%=cid%> <= batchSizeCounter_<%=cid%>) {
					try {
						<%
						log4jCodeGenerateUtil.executeBatch(node,2);
						if (("INSERT").equals(dataAction)) {
						%>
							insertedCount_<%=cid%> += countSum_<%=cid%>;
						<%
						}if (("UPDATE").equals(dataAction)) {
						%>
							updatedCount_<%=cid%> += countSum_<%=cid%>;
						<%
						}else if (("DELETE").equals(dataAction)) {
						%>
							deletedCount_<%=cid%> += countSum_<%=cid%>;
						<%
						}
						%>
					}catch (java.sql.BatchUpdateException e){
						<%if(("true").equals(dieOnError)) {
							log4jCodeGenerateUtil.logError(node,"fatal");
						%>
							throw(e);
						<%
						}else {
							log4jCodeGenerateUtil.logError(node,"error");
						%>
							int countSum_<%=cid%> = 0;
							for(int countEach_<%=cid%>: e.getUpdateCounts()) {
								countSum_<%=cid%> += (countEach_<%=cid%> < 0 ? 0 : countEach_<%=cid%>);
							}
							<%if (("INSERT").equals(dataAction)) {
							%>
								insertedCount_<%=cid%> += countSum_<%=cid%>;
							<%
							}else if (("UPDATE").equals(dataAction)) {
							%>
								updatedCount_<%=cid%> += countSum_<%=cid%>;
							<%
							}else if (("DELETE").equals(dataAction)) {
							%>
								deletedCount_<%=cid%> += countSum_<%=cid%>;
							<%
							}
							%>
							System.err.println(e.getMessage());
						<%
						}
						%>
					}
					batchSizeCounter_<%=cid%> = 0;
				}
			<%
			}
		}
		public void commitEvery(INode node){
			////////////commit every////////////
			if(!("true").equals(useExistingConn)) {
				if(!("").equals(commitEvery) && !("0").equals(commitEvery)) {
					%>
					commitCounter_<%=cid%>++;
					if(commitEvery_<%=cid%> <= commitCounter_<%=cid%>) {
						<%if ((rejectConnName==null && useBatchSize && "MYSQL_5".equals(dbVersion)) && (("INSERT").equals(dataAction) || ("UPDATE").equals(dataAction) || ("DELETE").equals(dataAction)) ) {
						%>
							try {
								<%
								log4jCodeGenerateUtil.executeBatch(node,2);
								if (("INSERT").equals(dataAction)) {
								%>
									insertedCount_<%=cid%> += countSum_<%=cid%>;
								<%
								}else if (("UPDATE").equals(dataAction)) {
								%>
									updatedCount_<%=cid%> += countSum_<%=cid%>;
								<%
								}else if (("DELETE").equals(dataAction)) {
								%>
									deletedCount_<%=cid%> += countSum_<%=cid%>;
								<%
								}%>
							}catch (java.sql.BatchUpdateException e){
								<%if(("true").equals(dieOnError)) {
									log4jCodeGenerateUtil.logError(node,"fatal");
								%>
									throw(e);
								<%
								}else {
									log4jCodeGenerateUtil.logError(node,"error");
								%>
									int countSum_<%=cid%> = 0;
									for(int countEach_<%=cid%>: e.getUpdateCounts()) {
										countSum_<%=cid%> += (countEach_<%=cid%> < 0 ? 0 : countEach_<%=cid%>);
									}
									<%if (("INSERT").equals(dataAction)) {
									%>
										insertedCount_<%=cid%> += countSum_<%=cid%>;
									<%
									}else if (("UPDATE").equals(dataAction)) {
									%>
										updatedCount_<%=cid%> += countSum_<%=cid%>;
									<%
									}else if (("DELETE").equals(dataAction)) {
									%>
										deletedCount_<%=cid%> += countSum_<%=cid%>;
									<%
									}%>
									System.out.println(e.getMessage());
								<%
								}
								%>
							}
						<%
						}
						log4jCodeGenerateUtil.commit();
						%>
						commitCounter_<%=cid%>=0;
					}
				<%
				}
			}
		}
		public String generateType(String typeToGenerate){
			if(("byte[]").equals(typeToGenerate)){
				typeToGenerate = "Bytes";
			}else if(("java.util.Date").equals(typeToGenerate)){
				typeToGenerate = "Date";
			}else if(("Integer").equals(typeToGenerate)){
				typeToGenerate = "Int";
			}else if(("List").equals(typeToGenerate)){
				typeToGenerate = "Object";
			}else{
				typeToGenerate=typeToGenerate.substring(0,1).toUpperCase()+typeToGenerate.substring(1);
			}
			return typeToGenerate;
		}
		 public void generateSetStmt(String typeToGenerate, Column column, String incomingConnName, String cid){
			boolean isObject = false;
			String prefix = "pstmt_";
			%>
			<%
			if(("Character").equals(typeToGenerate)){
				isObject = true;
				%>
				if(<%=incomingConnName%>.<%=column.getName()%>==null){
					<%=prefix+cid%>.setNull(counter<%=cid%>,java.sql.Types.CHAR);
					<%
			}else if(("Date").equals(typeToGenerate)){
				isObject = true;
				%>
				if(<%=incomingConnName%>.<%=column.getName()%>==null){
					<%=prefix+cid%>.setNull(counter<%=cid%>,java.sql.Types.DATE);
					<%
			}else if(("byte[]").equals(typeToGenerate)){
				isObject = true;
				%>
				if(<%=incomingConnName%>.<%=column.getName()%>==null){
					<%=prefix+cid%>.setNull(counter<%=cid%>,java.sql.Types.ARRAY);
					<%
			}else if(("Long").equals(typeToGenerate)||("Byte").equals(typeToGenerate)||("Integer").equals(typeToGenerate)||("Short").equals(typeToGenerate)){
				isObject = true;
				%>
				if(<%=incomingConnName%>.<%=column.getName()%>==null){
					<%=prefix+cid%>.setNull(counter<%=cid%>,java.sql.Types.INTEGER);
					<%
			}else if(("String").equals(typeToGenerate)){
				isObject = true;
				%>
				if(<%=incomingConnName%>.<%=column.getName()%>==null){
					<%=prefix+cid%>.setNull(counter<%=cid%>,java.sql.Types.VARCHAR);
					<%
			}else if(("Object").equals(typeToGenerate)){
				isObject = true;
				%>
				if(<%=incomingConnName%>.<%=column.getName()%>==null){
					<%=prefix+cid%>.setNull(counter<%=cid%>,java.sql.Types.OTHER);
					<%
			}else if(("Boolean").equals(typeToGenerate)){
				isObject = true;
				%>
				if(<%=incomingConnName%>.<%=column.getName()%>==null){
					<%=prefix+cid%>.setNull(counter<%=cid%>,java.sql.Types.BOOLEAN);
					<%
			}else if(("Double").equals(typeToGenerate)){
				isObject = true;
				%>
				if(<%=incomingConnName%>.<%=column.getName()%>==null){
					<%=prefix+cid%>.setNull(counter<%=cid%>,java.sql.Types.DOUBLE);
					<%
			}else if(("Float").equals(typeToGenerate)){
				isObject = true;
				%>
				if(<%=incomingConnName%>.<%=column.getName()%>==null){
					<%=prefix+cid%>.setNull(counter<%=cid%>,java.sql.Types.FLOAT);
					<%
			}
			if(isObject){
				%>
				}else{
				<%
			}
			typeToGenerate = generateType(typeToGenerate);
			if(("Char").equals(typeToGenerate)||("Character").equals(typeToGenerate)){
				%>
				<%
				if(isObject) {
					%>
					if(<%=incomingConnName%>.<%=column.getName()%>==null){
					<%
				} else {
					%>
					if(("null").equals(String.valueOf(<%=incomingConnName%>.<%=column.getName()%>).toLowerCase())){
					<%
				}
				%>
				<%=prefix+cid%>.setNull(counter<%=cid%>,java.sql.Types.CHAR);
				}else if(<%=incomingConnName%>.<%=column.getName()%> == '\0'){
					<%=prefix+cid%>.setString(counter<%=cid%>,"");
				}else{
					<%=prefix+cid%>.setString(counter<%=cid%>,String.valueOf(<%=incomingConnName%>.<%=column.getName()%>));
				}
				<%
			}else if(("Date").equals(typeToGenerate)){
				%>
				if(<%=incomingConnName%>.<%=column.getName()%>!=null){
					// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
					date_<%=cid %> = <%=incomingConnName%>.<%=column.getName()%>.getTime();
					if (date_<%=cid %> < year1_<%=cid %> || date_<%=cid %> >= year10000_<%=cid %>) {
						<%=prefix+cid%>.setString(counter<%=cid%>, "0000-00-00 00:00:00");
					} else {
						<%=prefix+cid%>.setTimestamp(counter<%=cid%>, new java.sql.Timestamp(date_<%=cid %>));
					}
				}else{
					<%=prefix+cid%>.setNull(counter<%=cid%>,java.sql.Types.DATE);
				}
				<%
			}else{
				%>
				<%=prefix+cid%>.set<%=typeToGenerate%>(counter<%=cid%>,<%=incomingConnName%>.<%=column.getName()%>);
				<%
			}
			if(isObject){
				%>
				}
			<%
			}
		}
	}
	dbOutputBeginUtil = new DBOutputMainUtil();
%>
<%@ include file="../templates/DB/Output/AbstractDBOutputMain.javajet"%>
