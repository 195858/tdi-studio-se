<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn 
		org.talend.designer.codegen.config.CodeGeneratorArgument
		java.util.List
	" 
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

	List<IMetadataTable> metadatas = node.getMetadataList();
	if ((metadatas!=null)&&(metadatas.size()>0)) {
		IMetadataTable metadata = metadatas.get(0);
		if (metadata!=null) {
                        int nbFields = metadata.getListColumns().size();
%>

use FileHandle;
use List::Util qw/min/;
use Text::CSV_XS;
use talend::filesOp;

my %desc_<%=cid%> = (
    filename      => <%=ElementParameterParser.getValue(node, "__FILENAME__") %>,
    row_separator => <%=ElementParameterParser.getValue(node, "__ROWSEPARATOR__") %>,
    header        => <%=ElementParameterParser.getValue(node, "__HEADER__") %>,
    footer        => <% String myFooter = ElementParameterParser.getValue(node, "__FOOTER__"); if (myFooter.equals("")) myFooter = null; %><%=myFooter%>,
    limit         => <% String myLimit = ElementParameterParser.getValue(node, "__LIMIT__"); if (myLimit.equals("")) myLimit = null; %><%=myLimit%>,
    schema        => [
    <%
		for (IMetadataColumn column: metadata.getListColumns()) {
    %>
    	{
            name    => '<%=column.getLabel() %>',
            key     => <%=column.isKey() %>,
            type    => '<%=column.getType() %>',
            len     => <%=column.getLength() %>,
            null    => <%=column.isNullable() %>,
            default => '<%=column.getDefault() %>',
            comment => '<%=column.getComment() %>',
		},
	<%
		}
    %>
    ]
);

use constant INPUT_FIELD_SEPARATOR_<%=cid%> => <%=ElementParameterParser.getValue(node, "__FIELDSEPARATOR__") %>;
$/ = $desc_<%=cid%>{row_separator};
my $nb_fields_<%=cid%> = scalar @{ $desc_<%=cid%>{schema} };

my $input_FH_<%=cid%> = new FileHandle;
open($input_FH_<%=cid%>, '<', $desc_<%=cid%>{filename})
    or die 'cannot open file "' . $desc_<%=cid%>{filename} . '"';

my $csv_<%=cid%> = Text::CSV_XS->new({
    sep_char     => <%=ElementParameterParser.getValue(node, "__FIELDSEPARATOR__") %>,
    escape_char  => <%=ElementParameterParser.getValue(node, "__ESCAPE_CHAR__") %>,
    quote_char   => <%=ElementParameterParser.getValue(node, "__TEXT_ENCLOSURE__") %>,
    binary       => 1,
});

<%
  if ((!ElementParameterParser.getValue(node, "__HEADER__").equals(""))
      && (!ElementParameterParser.getValue(node, "__HEADER__").equals("0")))
  {
%>

# move to the first useful line
if ($desc_<%=cid%>{header} > 0) {
    for (1..$desc_<%=cid%>{header}) {
        my $useless_line_<%=cid%> = <$input_FH_<%=cid%>>;
    }
}

<%
  }
%>

$nb_line_<%=cid%> = 0;

<%
  if (((!ElementParameterParser.getValue(node, "__FOOTER__").equals(""))
        && (!ElementParameterParser.getValue(node, "__FOOTER__").equals("0")))
      || (!ElementParameterParser.getValue(node, "__LIMIT__").equals("")))
  {
%>

# as we have a limit and/or a footer, we need to know the number of rows in
# the input file
my $total_line_<%=cid%> = tFileRowCount(
    filename => $desc_<%=cid%>{filename},
    rowseparator => $desc_<%=cid%>{row_separator},
    buffersize => 4096,
);

my ($first_row_<%=cid%>, $last_row_<%=cid%>) = getFirstAndLastRowNumber(
    header  => $desc_<%=cid%>{header},
    footer  => $desc_<%=cid%>{footer},
    limit   => $desc_<%=cid%>{limit},
    total   => $total_line_<%=cid%>,
);

for ($first_row_<%=cid%> .. $last_row_<%=cid%>) {
    my $_<%=cid%> = <$input_FH_<%=cid%>>;
<%
  }
  else
  {
%>

while (my $_<%=cid%> = <$input_FH_<%=cid%>>) {

<%
  }
%>

    chomp $_<%=cid%>;

<%
    if (ElementParameterParser.getValue(node, "__REMOVE_EMPTY_ROW__").equals("true")) {
%>
    next if ($_<%=cid%> eq '');
<%
    }
%>

    # increase number of line really extracted
    $nb_line_<%=cid%>++;

    if (not $csv_<%=cid%>->parse($_<%=cid%>)) {
        warn "A problem has happened parsing the following input line\n";
        warn "====\n";
        warn $csv_<%=cid%>->error_input();
        warn "====\n";
        next;
    }
    my $<%=cid%> = [ ($csv_<%=cid%>->fields()) ];
    if( <%=nbFields%> != scalar(@$<%=cid%>) ){
        @$<%=cid %> = (@$<%=cid%>)<% if (nbFields>0) { %>[0 .. <%=nbFields - 1%> ]<% } %>;
    }

<%
		}
	}
%>
