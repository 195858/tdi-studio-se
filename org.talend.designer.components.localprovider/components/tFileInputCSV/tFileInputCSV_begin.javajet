<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn 
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.EConnectionType
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.List
    org.talend.core.model.metadata.types.JavaTypesManager
	org.talend.core.model.metadata.types.JavaType
" 
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
    IMetadataTable metadata = metadatas.get(0);
    if (metadata!=null) {
        String cid = node.getUniqueName();
        
        String filename = ElementParameterParser.getValueWithUIFieldKey(node,"__FILENAME__", "FILENAME");
    	String encoding = ElementParameterParser.getValue(node,"__ENCODING__");
    	String header = ElementParameterParser.getValue(node, "__HEADER__");
    	String footer = ElementParameterParser.getValue(node, "__FOOTER__");
    	String limit = ElementParameterParser.getValue(node, "__LIMIT__");
    	if(limit.equals("")){
    		limit="-1";
    	}
    	String delim1 = ElementParameterParser.getValue(node, "__FIELDSEPARATOR__");
    	String delim = delim1.substring(1,delim1.length()-1);
    	String rowSeparator1 = ElementParameterParser.getValue(node, "__ROWSEPARATOR__");
    	String rowSeparator = rowSeparator1.substring(1,rowSeparator1.length()-1);
    	String escapeChar1 = ElementParameterParser.getValue(node, "__ESCAPE_CHAR__");
    	String escapeChar = escapeChar1.substring(1,escapeChar1.length()-1);
    	String textEnclosure1 = ElementParameterParser.getValue(node, "__TEXT_ENCLOSURE__");
    	String textEnclosure = textEnclosure1.substring(1,textEnclosure1.length()-1);
    	if ("".equals(textEnclosure)) textEnclosure = "\0";
    	String removeEmptyRow = ElementParameterParser.getValue(node, "__REMOVE_EMPTY_ROW__");
%>		
		int nb_line_<%=cid%> = 0;
		int footer_<%=cid %> = <%= footer%>;
		int totalLine<%=cid %> = 0;
		int limit<%=cid %> = <%= limit %>;
		int lastLine<%=cid %> = -1;	
		
		com.csvreader.CsvReader csvReader<%=cid %>=new com.csvreader.CsvReader(new java.io.BufferedReader(new java.io.InputStreamReader(
                new java.io.FileInputStream(<%=filename %>),<%=encoding %>)), '<%=delim %>');
                
<%          	if(!rowSeparator.equals("\\n") && !rowSeparator.equals("\\r")){%>
          	csvReader<%=cid %>.setRecordDelimiter('<%=rowSeparator  %>');
<%				}
%>
        csvReader<%=cid %>.setSkipEmptyRecords(<%=removeEmptyRow %>);
        csvReader<%=cid %>.setTextQualifier('<%=textEnclosure %>');                

<%
        if(escapeChar.equals("\\\\")){
        %>
            csvReader<%=cid %>.setEscapeMode(com.csvreader.CsvReader.ESCAPE_MODE_BACKSLASH);
<%
        }else if(escapeChar.equals(textEnclosure)){
        %>
            csvReader<%=cid %>.setEscapeMode(com.csvreader.CsvReader.ESCAPE_MODE_DOUBLED);
<%
        }else{
        %>
            //?????doesn't work for other escapeChar
<%
        }
        %>       

		String[] row<%=cid %>=null;
		
		if(footer_<%=cid %> > 0){
		
            while (csvReader<%=cid %>.readRecord()) {
<%            	if(removeEmptyRow.equals("true")){%>
				row<%=cid %>=csvReader<%=cid %>.getValues();
				if(!(row<%=cid %>.length == 1 && row<%=cid %>[0].equals("\015"))){//empty line when row separator is '\n'
<%				}%>
                
                	totalLine<%=cid %>++;
                
<%            	if(removeEmptyRow.equals("true")){%>
				}
<%				}%>
                
            }
            int lastLineTemp<%=cid %> = totalLine<%=cid %> - footer_<%=cid %>   < 0? 0 : totalLine<%=cid %> - footer_<%=cid %> ;
            if(lastLine<%=cid %> > 0){
                lastLine<%=cid %> = lastLine<%=cid %> < lastLineTemp<%=cid %> ? lastLine<%=cid %> : lastLineTemp<%=cid %>; 
            }else {
                lastLine<%=cid %> = lastLineTemp<%=cid %>;
            }
         
          	csvReader<%=cid %>.close();
          
         	csvReader<%=cid %>=new com.csvreader.CsvReader(new java.io.BufferedReader(new java.io.InputStreamReader(
                  new java.io.FileInputStream(<%=filename %>),<%=encoding %>)), '<%=delim %>');
<%          	if(!rowSeparator.equals("\\n") && !rowSeparator.equals("\\r")){%>
          	csvReader<%=cid %>.setRecordDelimiter('<%=rowSeparator  %>');
<%				}
%>
        csvReader<%=cid %>.setSkipEmptyRecords(<%=removeEmptyRow %>);
        csvReader<%=cid %>.setTextQualifier('<%=textEnclosure %>');                

<%
        if(escapeChar.equals("\\\\")){
        %>
            csvReader<%=cid %>.setEscapeMode(com.csvreader.CsvReader.ESCAPE_MODE_BACKSLASH);
<%
        }else if(escapeChar.equals(textEnclosure)){
        %>
            csvReader<%=cid %>.setEscapeMode(com.csvreader.CsvReader.ESCAPE_MODE_DOUBLED);
<%
        }else{
        %>
            //?????doesn't work for other escapeChar
<%
        }
        %>  
          
        }
        
        
        
        int currentLine<%=cid %> = 0;
        int outputLine<%=cid %> = 0;
            
        while (csvReader<%=cid %>.readRecord()) { 
        
        	row<%=cid %>=csvReader<%=cid %>.getValues();
        	
 <%
   		if(removeEmptyRow.equals("true")){%>
        	if(row<%=cid %>.length == 1 && row<%=cid %>[0].equals("\015")){//empty line when row separator is '\n'
        		continue;
        	}
<%		}%>
        	
        	
        	currentLine<%=cid %>++;
        	if(currentLine<%=cid %> < <%= header %>+1) {
                continue;
            }
            
            if(lastLine<%=cid %> > -1 && currentLine<%=cid %> > lastLine<%=cid %>) {
                break;
            }
            outputLine<%=cid %>++;
            if(limit<%=cid %>!=-1&& outputLine<%=cid %> > limit<%=cid %>){
                break;
            }  
                                                                      
<%
	List< ? extends IConnection> conns = node.getOutgoingSortedConnections();
	String firstConnName = "";
	if (conns!=null) {
		if (conns.size()>0) {
			IConnection conn = conns.get(0);
			firstConnName = conn.getName();
			
			if ((conn.getLineStyle().equals(EConnectionType.FLOW_MAIN))||(conn.getLineStyle().equals(EConnectionType.FLOW_REF))) {
				List<IMetadataColumn> columns=metadata.getListColumns();
				int columnSize = columns.size();
				%>				
				
			if(row<%=cid %>.length == 1 && row<%=cid %>[0].equals("\015")){//empty line when row separator is '\n'
				
<%
		for (IMetadataColumn column1: metadata.getListColumns()) {%>

				<%=conn.getName() %>.<%=column1.getLabel() %> = <%=JavaTypesManager.getDefaultValueFromJavaIdType(column1.getTalendType(), column1.isNullable())%>;
				
<%		}%>
				
			}else{
			
<%
			for (int i=0;i<columnSize;i++) {
					IMetadataColumn column=columns.get(i);
					String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
					JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
					String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
			%>
						
			
				if(<%=i %> < row<%=cid %>.length){				
<%
					if(javaType == JavaTypesManager.STRING || javaType == JavaTypesManager.OBJECT) {
%>
					<%=conn.getName() %>.<%=column.getLabel() %> = row<%=cid %>[<%=i %>];
<%
					} else {
%>
						if(row<%=cid %>[<%=i %>].length() > 0) {
	<%
							if(javaType == JavaTypesManager.DATE) {
	%>
								<%=conn.getName() %>.<%=column.getLabel() %> = ParserUtils.parseTo_Date(row<%=cid %>[<%=i %>], <%= patternValue %>);
	<%
							} else {
	%>
								<%=conn.getName() %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%= typeToGenerate %>(row<%=cid %>[<%=i %>]);
	<%
							}
	%>					
						}else{
							<%=conn.getName() %>.<%=column.getLabel() %> = <%=JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate)%>;
						}
	<%					
					}%>	
								
				}else{										

				<%=conn.getName() %>.<%=column.getLabel() %> = <%=JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate)%>;

				}

<%			}%>

			}


<%			
			}
		}
		if (conns.size()>1) {
			for (int i=1;i<conns.size();i++) {
				IConnection conn = conns.get(i);
				if ((conn.getName().compareTo(firstConnName)!=0)&&((conn.getLineStyle().equals(EConnectionType.FLOW_MAIN))||(conn.getLineStyle().equals(EConnectionType.FLOW_REF)))) {
			    	for (IMetadataColumn column: metadata.getListColumns()) {%>
      			<%=conn.getName() %>.<%=column.getLabel() %> = <%=firstConnName %>.<%=column.getLabel() %>;
				 <%
				 	}
				}
			}
		}
	}
		}
	}
%>