<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser
		org.talend.core.model.metadata.IMetadataTable
		org.talend.designer.codegen.config.CodeGeneratorArgument
		java.util.List
		java.util.Map
	"
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();	
	String host = ElementParameterParser.getValue(node, "__HOST__");
	String port = ElementParameterParser.getValue(node, "__PORT__");
	String user = ElementParameterParser.getValue(node, "__USERNAME__");
	String pass = ElementParameterParser.getValue(node, "__PASSWORD__");
	String remotedir = ElementParameterParser.getValue(node, "__REMOTEDIR__");
	boolean dirFull = ("true").equals(ElementParameterParser.getValue(node, "__DIR_FULL__"));
	String cid = node.getUniqueName();
	
	boolean sftp = ("true").equals(ElementParameterParser.getValue(node, "__SFTP__"));	

	String authMethod = ElementParameterParser.getValue(node,"__AUTH_METHOD__");
	String privateKey = ElementParameterParser.getValue(node,"__PRIVATEKEY__");
	String passPhrase = ElementParameterParser.getValue(node,"__PASSPHRASE__");
	
	boolean useProxy = ("true").equals(ElementParameterParser.getValue(node,"__UES_PROXY__"));
	String proxyHost = ElementParameterParser.getValue(node,"__PROXY_HOST__");
	String proxyPort = ElementParameterParser.getValue(node,"__PROXY_PORT__");
	String proxyUser = ElementParameterParser.getValue(node,"__PROXY_USERNAME__");
	String proxyPassword = ElementParameterParser.getValue(node,"__PROXY_PASSWORD__");		
	String connectMode = ElementParameterParser.getValue(node,"__CONNECT_MODE__");	
%>

<%
//The following part support the socks proxy for FTP and SFTP (Socks V4 or V5, they are all OK). 
//And it can not work with the FTP proxy directly, only support the socks proxy.
if(useProxy){
%>
        java.util.Properties props = System.getProperties();
        props.put("socksProxyPort", <%=proxyPort %>);
        props.put("socksProxyHost", <%=proxyHost %>);
        props.put("java.net.socks.username", <%=proxyUser %>);
        props.put("java.net.socks.password", <%=proxyPassword %>);        
<%}%>	

<%if(sftp){%>

	class MyUserInfo implements com.jcraft.jsch.UserInfo, com.jcraft.jsch.UIKeyboardInteractive {
    	String passphrase_<%=cid %> = <%=passPhrase %>;
        public String getPassphrase() { return passphrase_<%=cid %>; }
        
        public String getPassword() { return null; } 
        
        public boolean promptPassword(String arg0) { return true; } 
        
        public boolean promptPassphrase(String arg0) { return true; } 
        
        public boolean promptYesNo(String arg0) { return true; } 
        
        public void showMessage(String arg0) { } 
        
        public String[] promptKeyboardInteractive(String destination, String name, String instruction, String[] prompt,
                boolean[] echo) {
           String[] password<%=cid%> = {<%=pass%>};
           return password<%=cid%>;
        }
    }; 
    
    final com.jcraft.jsch.UserInfo defaultUserInfo<%=cid%> = new MyUserInfo();
    
    
    class MyProgressMonitor implements com.jcraft.jsch.SftpProgressMonitor {

        public void init(int op, String src, String dest, long max) {}
 		
 		public boolean count(long count) { return true;}

        public void end() {}
    }
    
    com.jcraft.jsch.JSch jsch<%=cid%>=new com.jcraft.jsch.JSch(); 
    <%if(("PUBLICKEY").equals(authMethod)){%>
    jsch<%=cid%>.addIdentity(<%=privateKey %>, defaultUserInfo<%=cid%>.getPassphrase());
    <%}%>
    com.jcraft.jsch.Session session<%=cid%>=jsch<%=cid%>.getSession(<%=user%>, <%=host%>, <%=port%>); 
    <%if(("PASSWORD").equals(authMethod)){%> 
	session<%=cid%>.setPassword(<%=pass%>); 
    <%}%>
    session<%=cid%>.setUserInfo(defaultUserInfo<%=cid%>); 
    session<%=cid%>.connect(); 
    
    com.jcraft.jsch. Channel channel<%=cid%>=session<%=cid%>.openChannel("sftp"); 
    channel<%=cid%>.connect();
     
    com.jcraft.jsch.ChannelSftp c_<%=cid%>=(com.jcraft.jsch.ChannelSftp)channel<%=cid%>; 
    String remotedir_<%=cid %> = <%=remotedir %>.replaceAll("\\\\","/");
    
    
	java.util.Vector sftpFiles_<%=cid %> = c_<%=cid%>.ls(remotedir_<%=cid %>);
	int nb_file_<%=cid%> = 0;
	
	for(Object sftpFile_<%=cid %> : sftpFiles_<%=cid %>){
		
		com.jcraft.jsch.ChannelSftp.LsEntry lsEntry_<%=cid %> = (com.jcraft.jsch.ChannelSftp.LsEntry) sftpFile_<%=cid %>;
		//com.jcraft.jsch.SftpATTRS attrs_<%=cid %> = lsEntry_<%=cid %>.getAttrs();
		
		if ((".").equals(lsEntry_<%=cid %>.getFilename()) || ("..").equals(lsEntry_<%=cid %>.getFilename())) {
			continue;
		}
		
        String currentFileName_<%=cid%> = lsEntry_<%=cid %>.getFilename(); 
        String currentFilePath_<%=cid%> = remotedir_<%=cid %> + "/" + lsEntry_<%=cid %>.getFilename();
 
        globalMap.put("<%=cid %>_CURRENT_FILE", currentFileName_<%=cid%>);
        globalMap.put("<%=cid %>_CURRENT_FILEPATH", currentFilePath_<%=cid%>);
        
        nb_file_<%=cid%>++;
    	
<%}else{%>
	int nb_file_<%=cid%> = 0;
	
	com.enterprisedt.net.ftp.FTPClient ftp<%=cid %> =null;
	
	<%
	String useExistingConn = ElementParameterParser.getValue(node, "__USE_EXISTING_CONNECTION__");
	
	if(("true").equals(useExistingConn)){
		String connection = ElementParameterParser.getValue(node, "__CONNECTION__");
		String conn= "conn_" + connection;
	%>
	
	ftp<%=cid %> = (com.enterprisedt.net.ftp.FTPClient)globalMap.get("<%=conn %>");
	
	<%}else{%>		
	ftp<%=cid %> = new com.enterprisedt.net.ftp.FTPClient();
	ftp<%=cid %>.setRemoteHost(<%=host %>);
	ftp<%=cid %>.setRemotePort(<%=port %>);
<%
	if(("ACTIVE").equals(connectMode)){
%>
		ftp<%=cid %>.setConnectMode(com.enterprisedt.net.ftp.FTPConnectMode.ACTIVE);
<%
	}else{
%>
		ftp<%=cid %>.setConnectMode(com.enterprisedt.net.ftp.FTPConnectMode.PASV);
<%
	}
%>		
	ftp<%=cid %>.connect();	
	ftp<%=cid %>.login(<%=user %>, <%=pass %>); 
	<%} %>	    
	
	String remotedir_<%=cid %> = <%=remotedir%>;
	//ftp_<%=cid %>.chdir(remotedir_<%=cid %>);
    
    String[] fileList_<%=cid %>;
    if (<%=dirFull %>) {
        fileList_<%=cid %> = ftp<%=cid %>.dir(remotedir_<%=cid %>, true);
    }
    else {
        fileList_<%=cid %> = ftp<%=cid %>.dir(remotedir_<%=cid %>, false);
    }
    
    int i<%=cid %> = -1;
    int size<%=cid %> = fileList_<%=cid %>.length;
    
    while(++i<%=cid %> < size<%=cid %>) {
        String currentFileName_<%=cid%> = fileList_<%=cid %>[i<%=cid %>]; 
        String currentFilePath_<%=cid%> = remotedir_<%=cid %> + "/" + fileList_<%=cid %>[i<%=cid %>];
 
        globalMap.put("<%=cid %>_CURRENT_FILE", currentFileName_<%=cid%>);
        globalMap.put("<%=cid %>_CURRENT_FILEPATH", currentFilePath_<%=cid%>);
        
        nb_file_<%=cid%>++;
<%}%>
