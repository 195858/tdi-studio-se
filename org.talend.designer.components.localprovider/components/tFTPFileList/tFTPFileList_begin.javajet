<%@ jet 
  imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.metadata.IMetadataTable
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.List
    java.util.Map
  "
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();  
String host = ElementParameterParser.getValue(node, "__HOST__");
String port = ElementParameterParser.getValue(node, "__PORT__");
String user = ElementParameterParser.getValue(node, "__USERNAME__");
String pass = ElementParameterParser.getValue(node, "__PASSWORD__");
String remotedir = ElementParameterParser.getValue(node, "__REMOTEDIR__");
boolean dirFull = ("true").equals(ElementParameterParser.getValue(node, "__DIR_FULL__"));
String cid = node.getUniqueName();
String encoding = ElementParameterParser.getValue(node, "__ENCODING__");
String authMethod = ElementParameterParser.getValue(node, "__AUTH_METHOD__");
String privateKey = ElementParameterParser.getValue(node, "__PRIVATEKEY__");
String passPhrase = ElementParameterParser.getValue(node, "__PASSPHRASE__");
boolean useProxy = ("true").equals(ElementParameterParser.getValue(node, "__USE_PROXY__"));
String proxyHost = ElementParameterParser.getValue(node, "__PROXY_HOST__");
String proxyPort = ElementParameterParser.getValue(node, "__PROXY_PORT__");
String proxyUser = ElementParameterParser.getValue(node, "__PROXY_USERNAME__");
String proxyPassword = ElementParameterParser.getValue(node, "__PROXY_PASSWORD__");    
String connectMode = ElementParameterParser.getValue(node, "__CONNECT_MODE__");  
List<Map<String, String>> files = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__FILES__");
String connection = ElementParameterParser.getValue(node, "__CONNECTION__");
String conn= "conn_" + connection;
String useExistingConn = ElementParameterParser.getValue(node, "__USE_EXISTING_CONNECTION__");
boolean sftp = false;

if (("true").equals(useExistingConn)) {
  List<? extends INode> nodeList = node.getProcess().getGeneratingNodes();

  for (INode n : nodeList) {
    if (n.getUniqueName().equals(connection)) {
      sftp = ("true").equals(ElementParameterParser.getValue(n, "__SFTP__"));
    }
  }
} else {
  sftp = ("true").equals(ElementParameterParser.getValue(node, "__SFTP__"));
}
%>
java.util.List<String> maskList_<%=cid %> = new java.util.ArrayList<String>();

<%
if (files.size() == 0) {
%>
  maskList_<%=cid %>.add("*");
<%
} else {
  for (int i = 0; i < files.size(); i++) {
    Map<String, String> line = files.get(i);
    %> 
    maskList_<%=cid %>.add(<%= line.get("FILEMASK") %>); 
  <%
  }
}

//The following part support the socks proxy for FTP and SFTP (Socks V4 or V5, they are all OK). 
//And it can not work with the FTP proxy directly, only support the socks proxy.
if (useProxy) {
%>
  java.util.Properties props_<%=cid%> = System.getProperties();
  props_<%=cid%>.put("socksProxyPort", <%=proxyPort %>);
  props_<%=cid%>.put("socksProxyHost", <%=proxyHost %>);
  props_<%=cid%>.put("java.net.socks.username", <%=proxyUser %>);
  props_<%=cid%>.put("java.net.socks.password", <%=proxyPassword %>);        
<%
}

if (sftp) {

  if (("false").equals(useExistingConn)) {
  %>
    class MyUserInfo_<%=cid%> implements com.jcraft.jsch.UserInfo, com.jcraft.jsch.UIKeyboardInteractive {
      String passphrase_<%=cid %> = <%=passPhrase %>;

      public String getPassphrase() { return passphrase_<%=cid %>; }

      public String getPassword() { return null; } 

      public boolean promptPassword(String arg0) { return true; } 

      public boolean promptPassphrase(String arg0) { return true; } 

      public boolean promptYesNo(String arg0) { return true; } 

      public void showMessage(String arg0) { } 

      public String[] promptKeyboardInteractive(String destination, String name, String instruction, String[] prompt,
        boolean[] echo) {
        String[] password_<%=cid%> = {<%=pass%>};
        return password_<%=cid%>;
      }
    }; 
    final com.jcraft.jsch.UserInfo defaultUserInfo_<%=cid%> = new MyUserInfo_<%=cid%>();
    com.jcraft.jsch.JSch jsch_<%=cid%>=new com.jcraft.jsch.JSch(); 

    <%if (("PUBLICKEY").equals(authMethod)) {%>
      jsch_<%=cid%>.addIdentity(<%=privateKey %>, defaultUserInfo_<%=cid%>.getPassphrase());
    <%}%>
    com.jcraft.jsch.Session session_<%=cid%>=jsch_<%=cid%>.getSession(<%=user%>, <%=host%>, <%=port%>);

    <%if (("PASSWORD").equals(authMethod)) {%> 
      session_<%=cid%>.setPassword(<%=pass%>); 
    <%}%>
    session_<%=cid%>.setUserInfo(defaultUserInfo_<%=cid%>); 
	<%if (!useProxy) {%>
  	if(("true").equals(System.getProperty("http.proxySet")) ){
  		com.jcraft.jsch.ProxyHTTP proxy_<%=cid%> = new com.jcraft.jsch.ProxyHTTP(System.getProperty("http.proxyHost"),Integer.parseInt(System.getProperty("http.proxyPort")));
  		proxy_<%=cid%>.setUserPasswd(System.getProperty("http.proxyUser"),System.getProperty("http.proxyPassword"));
  		session_<%=cid%>.setProxy(proxy_<%=cid%>);
  	}
	<%}%>
    session_<%=cid%>.connect();
    com.jcraft.jsch. Channel channel_<%=cid%>=session_<%=cid%>.openChannel("sftp");
    channel_<%=cid%>.connect();
    com.jcraft.jsch.ChannelSftp c_<%=cid%>=(com.jcraft.jsch.ChannelSftp)channel_<%=cid%>;
    c_<%=cid%>.setFilenameEncoding(<%=encoding%>);
  <%
  } else {
  %>    
    com.jcraft.jsch.ChannelSftp c_<%=cid%> = (com.jcraft.jsch.ChannelSftp)globalMap.get("<%=conn %>");
    if(c_<%=cid%>.getHome()!=null && !c_<%=cid%>.getHome().equals(c_<%=cid%>.pwd())){
  		c_<%=cid%>.cd(c_<%=cid%>.getHome());
  	}
  <%
  }
  %>
  String remotedir_<%=cid %> = <%=remotedir %>.replaceAll("\\\\", "/");
  java.util.Vector<com.jcraft.jsch.ChannelSftp.LsEntry> vector_<%=cid %> = c_<%=cid%>.ls(remotedir_<%=cid %>);
  com.jcraft.jsch.ChannelSftp.LsEntry[] sftpFiles_<%=cid %> = vector_<%=cid %>.toArray(new com.jcraft.jsch.ChannelSftp.LsEntry[0]);
  int nb_file_<%=cid%> = 0;  
  List<String> fileListTemp_<%=cid %> = new java.util.ArrayList<String>();

  for (String filemask_<%=cid %> : maskList_<%=cid %>) {
    java.util.regex.Pattern fileNamePattern_<%=cid %> = java.util.regex.Pattern.compile(filemask_<%=cid %>.replaceAll("\\.", "\\\\.").replaceAll("\\*", ".*"));
    
    for (com.jcraft.jsch.ChannelSftp.LsEntry filemaskTemp_<%=cid %> : sftpFiles_<%=cid %>) {
      if (fileNamePattern_<%=cid %>.matcher(filemaskTemp_<%=cid %>.getFilename()).matches()) {
        fileListTemp_<%=cid %>.add(filemaskTemp_<%=cid %>.getFilename());
      }
    }
  }    

  for (String sftpFile_<%=cid %> : fileListTemp_<%=cid %>) {

    if ((".").equals(sftpFile_<%=cid %>) || ("..").equals(sftpFile_<%=cid %>)) {
      continue;
    }
    String currentFileName_<%=cid%> = sftpFile_<%=cid %>; 
    String currentFilePath_<%=cid%> = remotedir_<%=cid %> + "/" + sftpFile_<%=cid %>;
    globalMap.put("<%=cid %>_CURRENT_FILE", currentFileName_<%=cid%>);
    globalMap.put("<%=cid %>_CURRENT_FILEPATH", currentFilePath_<%=cid%>);
    nb_file_<%=cid%>++;

<%} else {%>
  int nb_file_<%=cid%> = 0;
  com.enterprisedt.net.ftp.FTPClient ftp_<%=cid %> =null;

  <%if (("true").equals(useExistingConn)) {%>
    ftp_<%=cid %> = (com.enterprisedt.net.ftp.FTPClient)globalMap.get("<%=conn %>");
  <%} else {%>    
    ftp_<%=cid %> = new com.enterprisedt.net.ftp.FTPClient();
    ftp_<%=cid %>.setRemoteHost(<%=host %>);
    ftp_<%=cid %>.setRemotePort(<%=port %>);

    <%if (("ACTIVE").equals(connectMode)) {%>
      ftp_<%=cid %>.setConnectMode(com.enterprisedt.net.ftp.FTPConnectMode.ACTIVE);
    <%} else {%>
      ftp_<%=cid %>.setConnectMode(com.enterprisedt.net.ftp.FTPConnectMode.PASV);
    <%}%>
    ftp_<%=cid %>.setControlEncoding(<%=encoding%>);
    ftp_<%=cid %>.connect();  
    ftp_<%=cid %>.login(<%=user %>, <%=pass %>); 
  <%}%>      
  String remotedir_<%=cid %> = <%=remotedir%>;
  ftp_<%=cid %>.chdir(remotedir_<%=cid %>);
  String[] fileList_<%=cid %>;

  if (<%=dirFull %>) {
    fileList_<%=cid %> = ftp_<%=cid %>.dir(null, true);
  } else {
    fileList_<%=cid %> = ftp_<%=cid %>.dir(null, false);
  }
  List<String> fileListTemp_<%=cid %> = new java.util.ArrayList<String>();

  for (String filemask_<%=cid %> : maskList_<%=cid %>) {
    java.util.regex.Pattern fileNamePattern_<%=cid %> = java.util.regex.Pattern.compile(filemask_<%=cid %>.replaceAll("\\.", "\\\\.").replaceAll("\\*", ".*"));

    for (String filemaskTemp_<%=cid %> : fileList_<%=cid %>) {
      if (fileNamePattern_<%=cid %>.matcher(filemaskTemp_<%=cid %>).matches()) {
        fileListTemp_<%=cid %>.add(filemaskTemp_<%=cid %>);
      }
    }
  }    
  int i_<%=cid %> = -1;

  while (++i_<%=cid %> < fileListTemp_<%=cid %>.size()) {
    String currentFileName_<%=cid%> = fileListTemp_<%=cid %>.get(i_<%=cid %>); 
    String currentFilePath_<%=cid%> = remotedir_<%=cid %> + "/" + fileListTemp_<%=cid %>.get(i_<%=cid %>);
    globalMap.put("<%=cid %>_CURRENT_FILE", currentFileName_<%=cid%>);
    globalMap.put("<%=cid %>_CURRENT_FILEPATH", currentFilePath_<%=cid%>);
    nb_file_<%=cid%>++;
<%}%>