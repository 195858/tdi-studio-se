<%@ jet 
imports="
    	org.talend.core.model.process.INode 
    	org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.IConnection
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
		org.talend.core.model.process.IConnectionCategory
		java.util.List
		"
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();

	boolean useProxy = ("true").equals(ElementParameterParser.getValue(node,"__USE_PROXY__"));
	String proxyHost = ElementParameterParser.getValue(node,"__PROXY_HOST__");
   	String proxyPort = ElementParameterParser.getValue(node,"__PROXY_PORT__");
   	String proxyUsername = ElementParameterParser.getValue(node,"__PROXY_USERNAME__");
   	String proxyPassword = ElementParameterParser.getValue(node,"__PROXY_PASSWORD__");
   	boolean needCompression = ("true").equals(ElementParameterParser.getValue(node,"__NEED_COMPRESSION__"));

String cid = node.getUniqueName();
%>

int nb_line_<%=cid%> = 0;

<%
if(useProxy){
%>
    java.util.Properties props_<%=cid%> = System.getProperties();
    props_<%=cid%>.put("socksProxyHost",<%=proxyHost %>);  
    props_<%=cid%>.put("socksProxyPort",<%=proxyPort %>);
    props_<%=cid%>.put("java.net.socks.username", <%=proxyUsername %>);
    props_<%=cid%>.put("java.net.socks.password", <%=proxyPassword %>); 
    
<%
}
%>

<%
List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas != null) && (metadatas.size() > 0)) {
	IMetadataTable metadata = metadatas.get(0);
	
	if (metadata != null) {
	
		List<IMetadataColumn> columnList = metadata.getListColumns(); 
		List<? extends IConnection> outgoingConns = node.getOutgoingSortedConnections();

		if (outgoingConns != null && outgoingConns.size() > 0){
			
			String sd = ElementParameterParser.getValue(node, "__START_DATE__");
			String ed = ElementParameterParser.getValue(node, "__END_DATE__");

			String username = ElementParameterParser.getValue(node, "__USER__");
			String password = ElementParameterParser.getValue(node, "__PASS__");
			String timeout = ElementParameterParser.getValue(node,"__TIMEOUT__");
			String module = ElementParameterParser.getValue(node, "__MODULENAME__");
			String customModulename = ElementParameterParser.getValue(node, "__CUSTOM_MODULE_NAME__").trim();
			module = (("CustomModule").equals(module)) ? customModulename.replaceAll("\"","") : module;
			String endPoint = ElementParameterParser.getValue(node, "__ENDPOINT__");
			boolean useExistingConn = ("true").equals(ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__"));
			String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
%>
	java.text.SimpleDateFormat startdf_<%=cid%> = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    java.text.SimpleDateFormat enddf_<%=cid%> = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	
	startdf_<%=cid%>.parse(<%=sd%>);
    enddf_<%=cid%>.parse(<%=ed%>);
    
    java.util.Calendar startCal_<%=cid%> = startdf_<%=cid%>.getCalendar();
    java.util.Calendar endCal_<%=cid%> = enddf_<%=cid%>.getCalendar();
	
    java.util.GregorianCalendar startDate_<%=cid%> = (java.util.GregorianCalendar) startCal_<%=cid%>;
    java.util.GregorianCalendar endDate_<%=cid%> = (java.util.GregorianCalendar) endCal_<%=cid%>;
    
	org.talend.salesforce.SforceManagement sfMgr_<%=cid%> = new org.talend.salesforce.SforceManagementImpl();
	<%if(useExistingConn){%>
	sfMgr_<%=cid%>.login((com.salesforce.soap.partner.SoapBindingStub)globalMap.get("binding_<%=connection %>"));
	<%}else{%>
	sfMgr_<%=cid%>.setTimeout(<%=timeout%>);
	sfMgr_<%=cid%>.setNeedCompression(<%=needCompression%>);
	boolean result_<%=cid%> = sfMgr_<%=cid%>.login(<%=username%>, <%=password%>, <%=endPoint%>);
	if(!result_<%=cid%>){
		throw new RuntimeException("Login failed! Please check the username,password and endpoint");
	}
	<%}%>		
	com.salesforce.soap.partner.SoapBindingStub binding_<%=cid%> = sfMgr_<%=cid%>.getBinding();
	
<%
			java.lang.StringBuilder sb = new java.lang.StringBuilder();
			for (IMetadataColumn column: columnList){
				if(sb.length() == 0){
					sb.append(column.getLabel());
				}else{
					sb.append(","+column.getLabel());
				}
			}
			
			String fieldlist = sb.toString();
			
			IConnection outgoingConn = outgoingConns.get(0);
			
			if(outgoingConn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) { // start 1
%>				

	com.salesforce.soap.partner.GetUpdatedResult mr_<%=cid%> = binding_<%=cid%>.getUpdated("<%=module%>", startDate_<%=cid%>, endDate_<%=cid%>);
	com.salesforce.soap.partner.sobject.SObject[] so_<%=cid%> = null;
	String[] ids_<%=cid %> = mr_<%=cid%>.getIds();
	
	if(ids_<%=cid %> !=null && ids_<%=cid %>.length > 0){
						
		int newMax_<%=cid %> = 0;
		int newBase_<%=cid %> = 0;
		
		while (newMax_<%=cid %> < ids_<%=cid %>.length){
		
			newBase_<%=cid %> = newMax_<%=cid %>;
			newMax_<%=cid %> += 2000;
			
			if (newMax_<%=cid %> > ids_<%=cid %>.length){
				newMax_<%=cid %> = ids_<%=cid %>.length;
			}
			
			String[] localIds_<%=cid %> = new String[newMax_<%=cid %>-newBase_<%=cid %>];

			for (int i_<%=cid %>=newBase_<%=cid %>;i_<%=cid %> < newMax_<%=cid %>;i_<%=cid %>++){
				localIds_<%=cid %>[i_<%=cid %>-newBase_<%=cid %>] = ids_<%=cid %>[i_<%=cid %>];
			}
			
			so_<%=cid %> = binding_<%=cid %>.retrieve("<%=fieldlist %>","<%=module %>",localIds_<%=cid %>);
    		
    		if(so_<%=cid%> != null){
    		
			for (int i_<%=cid %>=0;i_<%=cid %><so_<%=cid%>.length;i_<%=cid %>++){
				nb_line_<%=cid%> ++;
				org.apache.axis.message.MessageElement[] fields_<%=cid %> = so_<%=cid%>[i_<%=cid %>].get_any();
				int len_<%=cid%> = fields_<%=cid %>.length;
<% 
						for( int i = 0; i < columnList.size(); i++) {
						
							IMetadataColumn column = columnList.get(i);
							
							String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
							
							JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
							
							String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
%>						
				if (<%=i %> < len_<%=cid%> && fields_<%=cid %>[<%=i%>].getValue() != null){
<%
									if (javaType == JavaTypesManager.STRING || javaType == JavaTypesManager.OBJECT) { // String or Object
%>
					<%=outgoingConn.getName()%>.<%=columnList.get(i).getLabel()%> = fields_<%=cid %>[<%=i%>].getValue();
<%
									} else if(javaType == JavaTypesManager.DATE) { // Date
%>
					<%=outgoingConn.getName()%>.<%=columnList.get(i).getLabel()%> = ParserUtils.parseTo_Date(fields_<%=cid %>[<%=i%>].getValue(), <%= patternValue %>);
<%
									} else if(javaType == JavaTypesManager.BYTE_ARRAY) { // byte[]
%>
					<%=outgoingConn.getName()%>.<%=columnList.get(i).getLabel()%> = fields_<%=cid %>[<%=i%>].getValue().getBytes();
<%
									} else  { // other
%>						
					<%=outgoingConn.getName()%>.<%=columnList.get(i).getLabel()%> = ParserUtils.parseTo_<%= typeToGenerate %>(fields_<%=cid %>[<%=i%>].getValue());
<% 
									}
%>			
					} else {
						<%=outgoingConn.getName()%>.<%=columnList.get(i).getLabel()%> = <%=JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate)%>;
					}
<% 
						}
			}
		
		}
	}
}
%>
