<%@ jet 
imports="
    	org.talend.core.model.process.INode 
    	org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.EConnectionType
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType			
		java.util.List
" 
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();

List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {//1
    IMetadataTable metadata = metadatas.get(0);
    if (metadata!=null) {//2
    
String cid = node.getUniqueName();

//get the input Main and Lookup connection
IConnection inMainCon = null;
IConnection inRefCon = null;   
List< ? extends IConnection> connsIn = node.getIncomingConnections();     
for (IConnection conn : connsIn) {//3
	if (conn.getLineStyle().equals(EConnectionType.FLOW_MAIN)) {
		inMainCon = conn;
	}
	else if(conn.getLineStyle().equals(EConnectionType.FLOW_REF))
	{
		inRefCon = conn;
	}
}//3


String minNameOrigi = ElementParameterParser.getValue(node, "__LOOKUP_MIN__");
String maxNameOrigi = ElementParameterParser.getValue(node, "__LOOKUP_MAX__");
boolean minBounds = ElementParameterParser.getValue(node, "__LOOKUP_MIN_BOUNDS__").equals("false");
boolean maxBounds = ElementParameterParser.getValue(node, "__LOOKUP_MAX_BOUNDS__").equals("false");
String lookupNameOrigi = ElementParameterParser.getValue(node, "__LOOKUP_COLUMN__");
String mainName = ElementParameterParser.getValue(node, "__MAIN_COLUMN__");
String minName = minNameOrigi.substring(minNameOrigi.lastIndexOf('.')+1);
String maxName = maxNameOrigi.substring(maxNameOrigi.lastIndexOf('.')+1);
String lookupName = lookupNameOrigi.substring(lookupNameOrigi.lastIndexOf('.')+1);
String lookupConName = inRefCon.getName();
String mainConName = inMainCon.getName();


String returnClassName = "Object";
JavaType mainjavaType = JavaTypesManager.STRING;
List<IMetadataColumn> columns = metadata.getListColumns();
int sizeColumns = columns.size();			
for (int i = 0; i < sizeColumns; i++) {//5

	IMetadataColumn column = columns.get(i);
	if(column.getLabel().equals("LOOKUP")) 
	{
    	returnClassName = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());    	
	}
	
	if(column.getLabel().equals(mainName)) 
	{
    	mainjavaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());  	
	}
}//5	
%> 

int nb_line_<%= cid %> = 0; 
final java.util.List<<%=lookupConName %>Struct> list_<%=cid %> = new java.util.ArrayList(((java.util.Map<<%=lookupConName %>Struct, <%=lookupConName %>Struct>) globalMap.get("tHash_<%=lookupConName %>")).keySet());
java.util.Collections.sort((java.util.List<<%=lookupConName %>Struct>) list_tIntervalMatch_1, new java.util.Comparator<<%=lookupConName %>Struct>(){

	public int compare(<%=lookupConName %>Struct o1, <%=lookupConName %>Struct o2) {
		
	<% 
   if(mainjavaType == JavaTypesManager.DATE ) {
%>
            if (o1.<%=minName%>.before(o2.<%=minName%>)) 
           
<%
  } else if(mainjavaType == JavaTypesManager.BYTE || 
            mainjavaType == JavaTypesManager.SHORT || 
            mainjavaType == JavaTypesManager.FLOAT ||
            mainjavaType == JavaTypesManager.DOUBLE ||
            mainjavaType == JavaTypesManager.LONG ||
            mainjavaType == JavaTypesManager.INTEGER){
%> 
            if (o1.<%=minName%> < o2.<%=minName%>) 
<%
  } else {
%>
            String o1_min = <% if (mainjavaType == JavaTypesManager.BYTE_ARRAY) {%> java.nio.charset.Charset.defaultCharset().decode(java.nio.ByteBuffer.wrap(o1.<%=minName%>)).toString()<%}else {%>String.valueOf(o1.<%=minName%>) <%}%>;
            String o2_min =  <% if (mainjavaType == JavaTypesManager.BYTE_ARRAY) {%> java.nio.charset.Charset.defaultCharset().decode(java.nio.ByteBuffer.wrap(o2.<%=minName%>)).toString()<%}else {%>String.valueOf(o2.<%=minName%>) <%}%>;
            
            if (o1_min.compareTo(o2_min) < 0) 

<%
  }
%>         
            {
                return -1;
            } else {
                return 1;
            }	
	}
	
});

final <%=lookupConName %>Struct[] array_<%=cid %> = (<%=lookupConName %>Struct[])list_<%=cid %>.toArray(new <%=lookupConName %>Struct[list_<%=cid %>.size()]);

class Util_<%= cid %> {

    public <%=returnClassName%> getLookup(<%=mainConName %>Struct row_Main) {
    
    		int binf = 0;
    	    int bsup = array_<%=cid %>.length-1;
    	    int current = 0;
    	    int differ = 0;
    		boolean forceIncrease = false;
    		
            for (int index=0; index <= bsup; index++){
            differ = bsup - binf;
			if(differ==1){
				if(forceIncrease){
					current = binf + differ / 2 + 1;
				} else {
					current = binf + differ / 2;
					forceIncrease = true;
				}
			} else {
			        current = binf + differ / 2;
			}
			
            <%=lookupConName %>Struct row_Lookup = array_<%=cid %>[current];

<% 
   if(mainjavaType == JavaTypesManager.DATE ) {
%>
            if(row_Main.<%=mainName %>.before(row_Lookup.<%=maxName%>))
            {
            	bsup = current;
            	continue;
            }else 
            {
            	binf = current;
            }
            
            if ((row_Main.<%=mainName %>.after(row_Lookup.<%=minName%>)<% if (minBounds) { %> ||row_Main.<%=mainName %>.equals(row_Lookup.<%=minName%>) <% } %>)
                    && (row_Main.<%=mainName %>.before(row_Lookup.<%=maxName%>)<% if (maxBounds) { %> ||row_Main.<%=mainName %>.equals(row_Lookup.<%=maxName%>) <% } %>))
                     
           
<%
  } else if(mainjavaType == JavaTypesManager.BYTE || 
            mainjavaType == JavaTypesManager.SHORT || 
            mainjavaType == JavaTypesManager.FLOAT ||
            mainjavaType == JavaTypesManager.DOUBLE ||
            mainjavaType == JavaTypesManager.LONG ||
            mainjavaType == JavaTypesManager.INTEGER){
%> 
            if(row_Main.<%=mainName %> < row_Lookup.<%=minName%>)
            {
            	bsup = current;
            	continue;
            }else 
            {
            	binf = current;
            }
            
            if ((row_Main.<%=mainName %> ><%=minBounds? "=":"" %> row_Lookup.<%=minName%>)
                    && (row_Main.<%=mainName %> <<%=maxBounds? "=":"" %> row_Lookup.<%=maxName%>)) 
<%
  } else {
%>
            String main = <% if (mainjavaType == JavaTypesManager.BYTE_ARRAY) {%> java.nio.charset.Charset.defaultCharset().decode(java.nio.ByteBuffer.wrap(row_Main.<%=mainName %>)).toString()<%}else {%>String.valueOf(row_Main.<%=mainName %>) <%}%>;
            String min =  <% if (mainjavaType == JavaTypesManager.BYTE_ARRAY) {%> java.nio.charset.Charset.defaultCharset().decode(java.nio.ByteBuffer.wrap(row_Lookup.<%=minName %>)).toString()<%}else {%>String.valueOf(row_Lookup.<%=minName %>) <%}%>;
            String max =  <% if (mainjavaType == JavaTypesManager.BYTE_ARRAY) {%> java.nio.charset.Charset.defaultCharset().decode(java.nio.ByteBuffer.wrap(row_Lookup.<%=maxName %>)).toString()<%}else {%>String.valueOf(row_Lookup.<%=maxName %>) <%}%>;
                        
            if(main.compareTo(min) < 0)
            {
            	bsup = current;
            	continue;
            }else 
            {
            	binf = current;
            }
            
            if ((main.compareTo(min) ><%=minBounds? "=":"" %> 0)
                    && (main.compareTo(max) <<%=maxBounds? "=":"" %> 0)) 

<%
  }
%>         
            {
                return row_Lookup.<%=lookupName %>;
            }
        
         }
        
        return <%=JavaTypesManager.getDefaultValueFromJavaType(returnClassName)%>;
    }
}
        
Util_<%= cid %> util_<%= cid %> = new Util_<%= cid %>();

<%
    }//2
}//1
%>