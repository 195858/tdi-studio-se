<%@ jet 
imports="
    	org.talend.core.model.process.INode 
    	org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.EConnectionType
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType			
		java.util.List
" 
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();

List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {//1
    IMetadataTable metadata = metadatas.get(0);
    if (metadata!=null) {//2
    
        String cid = node.getUniqueName();

        //get the input Main and Lookup connection
        IConnection inMainCon = null;
        IConnection inRefCon = null;   
        List< ? extends IConnection> connsIn = node.getIncomingConnections();     
        for (IConnection conn : connsIn) {//3
        	if (conn.getLineStyle().equals(EConnectionType.FLOW_MAIN)) {
        		inMainCon = conn;
        	}
        	else if(conn.getLineStyle().equals(EConnectionType.FLOW_REF))
        	{
        		inRefCon = conn;
        	}
        }//3


        String minNameOrigi = ElementParameterParser.getValue(node, "__LOOKUP_MIN__");
        String maxNameOrigi = ElementParameterParser.getValue(node, "__LOOKUP_MAX__");
        boolean minBounds = ElementParameterParser.getValue(node, "__LOOKUP_MIN_BOUNDS__").equals("true");
        boolean maxBounds = ElementParameterParser.getValue(node, "__LOOKUP_MAX_BOUNDS__").equals("true");
        String lookupNameOrigi = ElementParameterParser.getValue(node, "__LOOKUP_COLUMN__");
        String mainName = ElementParameterParser.getValue(node, "__MAIN_COLUMN__");
        String minName = minNameOrigi.substring(minNameOrigi.lastIndexOf('.')+1);
        String maxName = maxNameOrigi.substring(maxNameOrigi.lastIndexOf('.')+1);
        String lookupName = lookupNameOrigi.substring(lookupNameOrigi.lastIndexOf('.')+1);
        String lookupConName = inRefCon.getName();
        String mainConName = inMainCon.getName();


        String returnClassName = "Object";
        JavaType mainjavaType = JavaTypesManager.STRING;
        List<IMetadataColumn> columns = metadata.getListColumns();
        int sizeColumns = columns.size();			
        for (int i = 0; i < sizeColumns; i++) {//5
        
        	IMetadataColumn column = columns.get(i);
        	if(column.getLabel().equals("LOOKUP")) 
        	{
            	returnClassName = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());    	
        	}
        	
        	if(column.getLabel().equals(mainName)) 
        	{
            	mainjavaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());  	
        	}
        }//5	
        %> 

        int nb_line_<%= cid %> = 0; 
        final java.util.List<<%=lookupConName %>Struct> list_<%=cid %> = new java.util.ArrayList(((java.util.Map<<%=lookupConName %>Struct, <%=lookupConName %>Struct>) globalMap.get("tHash_<%=lookupConName %>")).keySet());
        java.util.Collections.sort((java.util.List<<%=lookupConName %>Struct>) list_<%=cid%>, new java.util.Comparator<<%=lookupConName %>Struct>(){

            public int compare(<%=lookupConName %>Struct o1, <%=lookupConName %>Struct o2) {
		
                <% 
                if(mainjavaType == JavaTypesManager.DATE ) {
                %>
                    if (o1.<%=minName%>.before(o2.<%=minName%>)) 
           
                <%
                } else if(mainjavaType == JavaTypesManager.BYTE || 
                        mainjavaType == JavaTypesManager.SHORT || 
                        mainjavaType == JavaTypesManager.FLOAT ||
                        mainjavaType == JavaTypesManager.DOUBLE ||
                        mainjavaType == JavaTypesManager.LONG ||
                        mainjavaType == JavaTypesManager.INTEGER){
                %> 
                    if (o1.<%=minName%> < o2.<%=minName%>) 
                <%
                } else {
                %>
                    String o1_min = <% if (mainjavaType == JavaTypesManager.BYTE_ARRAY) {%> java.nio.charset.Charset.defaultCharset().decode(java.nio.ByteBuffer.wrap(o1.<%=minName%>)).toString()<%}else {%>String.valueOf(o1.<%=minName%>) <%}%>;
                    String o2_min =  <% if (mainjavaType == JavaTypesManager.BYTE_ARRAY) {%> java.nio.charset.Charset.defaultCharset().decode(java.nio.ByteBuffer.wrap(o2.<%=minName%>)).toString()<%}else {%>String.valueOf(o2.<%=minName%>) <%}%>;
            
                    if (o1_min.compareTo(o2_min) < 0) 
    
                <%
                }
                %>         
                {
                    return -1;
                } else {
                    return 1;
                }	
            }
	
        });

        final <%=lookupConName %>Struct[] array_<%=cid %> = (<%=lookupConName %>Struct[])list_<%=cid %>.toArray(new <%=lookupConName %>Struct[list_<%=cid %>.size()]);

        class Util_<%= cid %> {
        
            public <%=returnClassName%> getLookup(<%=mainConName %>Struct row_Main) {
                <%
                if(!mainjavaType.isPrimitive()) {
                    %>
                    if(row_Main.<%=mainName%> == null) {
                        return <%=JavaTypesManager.getDefaultValueFromJavaType(returnClassName)%>;
                    }                    
                    <%
                }%>

                int lowerBound = 0;
                int upperBound = array_<%=cid%>.length - 1;
                <%
                String minEqual = minBounds ? "=" : "";
                String maxEqual = maxBounds ? "=" : "";
                %>
                String main = null;
                String min = null;
                String max = null;                
                while(true) {
                    int currentIndex = (lowerBound + upperBound)/2;
                    <%
                    if(mainjavaType == JavaTypesManager.DATE) {
                        %>
                        if(row_Main.<%=mainName%>.after(array_<%=cid%>[currentIndex].<%=minName%>) && 
                                row_Main.<%=mainName%>.before(array_<%=cid%>[currentIndex].<%=maxName%>)) {
                            return array_<%=cid%>[currentIndex].<%=lookupName %>;
                        <%
                    } else if (mainjavaType == JavaTypesManager.BYTE || 
                            mainjavaType == JavaTypesManager.SHORT || 
                            mainjavaType == JavaTypesManager.FLOAT ||
                            mainjavaType == JavaTypesManager.DOUBLE ||
                            mainjavaType == JavaTypesManager.LONG ||
                            mainjavaType == JavaTypesManager.INTEGER) {
                        %>
                        if(row_Main.<%=mainName%> ><%=minEqual%> array_<%=cid%>[currentIndex].<%=minName%> && 
                                row_Main.<%=mainName%> <<%=maxEqual%> array_<%=cid%>[currentIndex].<%=maxName%>) {
                            return array_<%=cid%>[currentIndex].<%=lookupName %>;
                        <%
                    } else if (mainjavaType == JavaTypesManager.BYTE_ARRAY) {
                        %>
                        main = java.nio.charset.Charset.defaultCharset().decode(java.nio.ByteBuffer.wrap(row_Main.<%=mainName%>)).toString();
                        min = java.nio.charset.Charset.defaultCharset().decode(java.nio.ByteBuffer.wrap(array_<%=cid%>[currentIndex].<%=minName%>)).toString();
                        max = java.nio.charset.Charset.defaultCharset().decode(java.nio.ByteBuffer.wrap(array_<%=cid%>[currentIndex].<%=maxName%>)).toString();
                        if(main.compareTo(min) ><%=minEqual%> 0 && main.compareTo(max) <<%=maxEqual%> 0) {
                            return array_<%=cid%>[currentIndex].<%=lookupName %>;
                        <%
                    } else {
                        %>
                        main = String.valueOf(row_Main.<%=mainName%>);
                        min = String.valueOf(array_<%=cid%>[currentIndex].<%=minName%>);
                        max = String.valueOf(array_<%=cid%>[currentIndex].<%=maxName%>);
                        if(main.compareTo(min) ><%=minEqual%> 0 && main.compareTo(max) <<%=maxEqual%> 0) {
                            return array_<%=cid%>[currentIndex].<%=lookupName %>;
                        <%
                    }
                    %>
                    } else if (lowerBound > upperBound) {
                        return <%=JavaTypesManager.getDefaultValueFromJavaType(returnClassName)%>;
                    } else {
                        <%
                        if(mainjavaType == JavaTypesManager.DATE) {
                            %>
                            if(row_Main.<%=mainName%>.before(array_<%=cid%>[currentIndex].<%=minName%>)) {
                                upperBound = currentIndex - 1;
                            } else if (row_Main.<%=mainName%>.after(array_<%=cid%>[currentIndex].<%=minName%>)) {
                                lowerBound = currentIndex + 1;
                            } else {
                                upperBound = currentIndex - 1;
                            }
                            <%
                        } else if (mainjavaType == JavaTypesManager.BYTE || 
                                mainjavaType == JavaTypesManager.SHORT || 
                                mainjavaType == JavaTypesManager.FLOAT ||
                                mainjavaType == JavaTypesManager.DOUBLE ||
                                mainjavaType == JavaTypesManager.LONG ||
                                mainjavaType == JavaTypesManager.INTEGER) {
                            %>
                            if(row_Main.<%=mainName%> < array_<%=cid%>[currentIndex].<%=minName%>) {
                                upperBound = currentIndex - 1;                            
                            } else if(row_Main.<%=mainName%> > array_<%=cid%>[currentIndex].<%=minName%>) {
                                lowerBound = currentIndex + 1;
                            } else {
                                upperBound = currentIndex - 1;
                            }
                            <%
                        } else {
                            %>
                            if(main.compareTo(min) < 0) {
                                upperBound = currentIndex - 1;
                            } else if(main.compareTo(min) > 0) {
                                lowerBound = currentIndex + 1;
                            } else {
                                upperBound = currentIndex - 1;
                            }
                            <%
                        }
                        %>
                    }
                }
            }
        }
        
        Util_<%= cid %> util_<%= cid %> = new Util_<%= cid %>();

<%
    }//2
}//1
%>