/**
 * add by xzhang
 */
public class CLASS {


// *************************************************************************
//  the following part is for NULL
//*************************************************************************
    static class HL7Node {

        // table parameter of component

        public String path = null;

        public String column = null;
        
        public String defaultValue = "";
        
        public String connName = "";
        
        public String hl7Type = "";

        // column
        public IMetadataColumn relatedColumn = null;


        public HL7Node(String path, String column, String value) {
            String[] paths = path.split("/");
            String xpath= paths[paths.length-1];
            if (xpath.contains("[")) {
                xpath = xpath.substring(0, xpath.indexOf("["));
            }
            this.path = xpath;
            this.hl7Type = this.path.split("-")[0];
            this.column = column;
            if(this.column.contains(":")) {
                this.connName = this.column.substring(0, this.column.indexOf(":"));
            } else {
                this.connName = this.column;
            }
            if(value!=null){
                this.defaultValue = value;
            }
        }
       
    }
    

    
   
    // return [0] is root(HL7Node), [1] is groups(List<HL7Node>), [2] loop(HL7Node)
    public List<HL7Node> getTree(List<Map<String, String>> rootTable, List<IMetadataColumn> colList, String incomingName) {
        
        List<HL7Node> nodes = new java.util.ArrayList<HL7Node>();

        List<Map<String, String>> maps = getTable(rootTable, incomingName);

        Map<String, String> prevMap = null;
        for (Map<String, String> tmpMap : maps) {
            if (prevMap!=null) {
                if (!tmpMap.get("PATH").startsWith(prevMap.get("PATH"))) {
                    HL7Node node = new HL7Node(prevMap.get("PATH"),prevMap.get("COLUMN"),prevMap.get("VALUE"));
                    setIMetadataColumn(node, colList);
                    nodes.add(node);
                }
            }
            prevMap = tmpMap;
        }
        HL7Node node = new HL7Node(prevMap.get("PATH"),prevMap.get("COLUMN"),prevMap.get("VALUE"));
        setIMetadataColumn(node, colList);
        nodes.add(node);

        return nodes;
    }

    private void setIMetadataColumn(HL7Node node, List<IMetadataColumn> colList) {
        String value = null;
        JavaType javaType = null;
        String[] str = node.column.split(":");
        if (node.column != null && node.column.length() > 0 && node.column.indexOf(":")>0) {
            for (IMetadataColumn column : colList) {
                if (column.getLabel().equals(node.column.substring(node.column.indexOf(":")+1))) {
                    node.relatedColumn = column;
                    break;
                }
            }
        }
        // test
//        System.out.println("xpath:"+node.path+",column:"+node.column+"relatedColumn:"+node.relatedColumn+",defaultValue="+node.defaultValue);
    }
    
// *************************************************************************
//                      the following part is for HAPI
// *************************************************************************
    static class XMLNode {

        // table parameter of component
        public String name = null;

        public String path = null;

        public String type = null;

        public String column = null;
        
        public String defaultValue = null;
        
        public boolean hasDefaultValue = false;
        
        public String currConnName = null;
        
        public boolean isRepeatable = false;


        // column
        public IMetadataColumn relatedColumn = null;

        public List<IMetadataColumn> childrenColumnList = new ArrayList<IMetadataColumn>();

        // tree variable
        public XMLNode parent = null;

        public XMLNode attribute = null;

        public List<XMLNode> elements = new LinkedList<XMLNode>(); 

        public XMLNode(String path, String type, XMLNode parent, String column, String value) {
            this.path = path;
            this.parent = parent;
            this.type = type;
            this.column = column;
            if(value!=null && !"".equals(value)){
            	this.defaultValue = value;
            }
            if (type.equals("ELEMENT")) {
                this.name = path.substring(path.lastIndexOf("/") + 1);
            } else {
                this.name = path;
            }
        }
       
    }
    
    /**
    * return the table which is related to the connection name
    */
    public List<Map<String, String>> getTable(List<Map<String, String>> rootTable, String connName){
    	List<Map<String, String>> resultTable = new ArrayList<Map<String, String>>();
    	for(Map<String, String> map: rootTable){
    		if(map.get("COLUMN").contains(connName)){
    			resultTable.add(map);
    		}
    	}
    	return resultTable;
    }
    
    public List<String> getAllConnNameInTree(List<Map<String, String>> rootTable){
    	List<String> result = new ArrayList<String>();
    	for(Map<String, String> map: rootTable){
    		if(map.get("PATH").lastIndexOf("/")==0){
    			result.add(map.get("COLUMN"));
    		}
    	} 
    	return result;
    }

    
    // return [0] is root(XMLNode), [1] is groups(List<XMLNode>), [2] loop(XMLNode)
    public Object[] getTree(List<Map<String, String>> rootTable, List<IMetadataColumn> colList) {
        XMLNode root = null;
        XMLNode segment = null;
        XMLNode tmpParent = null;
        
            for (Map<String, String> tmpMap : rootTable) {
                XMLNode tmpNew = null;
                if (tmpMap.get("ATTRIBUTE").equals("attri")) {// Only segment could be able to have an attribute
                    tmpNew = new XMLNode(tmpMap.get("PATH"), "ATTRIBUTE", tmpParent, tmpMap.get("COLUMN"), tmpMap.get("VALUE"));
                    tmpParent.attribute = tmpNew;
                }else {
                    if (tmpParent == null) {
                        tmpNew = new XMLNode(tmpMap.get("PATH"), "ELEMENT", tmpParent, tmpMap.get("COLUMN"), tmpMap.get("VALUE"));
                        root = tmpNew;
                    } else {
                        String tmpParentPath = tmpMap.get("PATH").substring(0, tmpMap.get("PATH").lastIndexOf("/"));
                        while (tmpParent != null && !tmpParentPath.equals(tmpParent.path)) {
                            tmpParent = tmpParent.parent;
                        }
                        tmpNew = new XMLNode(tmpMap.get("PATH"), "ELEMENT", tmpParent, tmpMap.get("COLUMN"), tmpMap.get("VALUE"));
                        tmpParent.elements.add(tmpNew);
                        if (tmpMap.get("REPEATABLE").equals("true")) {
                        	tmpNew.isRepeatable = true;
                        }
                    }
                    tmpParent = tmpNew;
                }
	            if (tmpNew != root && tmpNew.name.indexOf("-") > 0
	                    && tmpNew.name.substring(0, tmpNew.name.indexOf("-")).equals(tmpNew.parent.name)) {
	                segment = tmpNew.parent;
	            }
                setIMetadataColumn(tmpNew, colList);
//                setDefaultValues(tmpNew);//add by wliu
            }
        buildSegmentPath(segment);        
        
        return new Object[] { root, segment };
    }
    
    private void buildSegmentPath(XMLNode segment){
        if (segment == null || segment.parent==null)
            return;
		XMLNode tmpNode = segment;
		// remove the root tage part
		String tmpPath =tmpNode.parent.path.substring(1);
		if(tmpPath.indexOf("/")>=0){
			tmpPath = tmpPath.substring(tmpPath.indexOf("/"));
		}else{
			tmpPath = "";
		}
		if(tmpNode.parent!=null && !tmpNode.parent.isRepeatable && tmpPath.indexOf("/")>=0){
			tmpPath = tmpPath.substring(0, tmpPath.lastIndexOf(tmpNode.name+"/") - 1);
		}
		setSubFieldPath(tmpNode, tmpPath);	
		tmpNode.currConnName = searchCurConnenctName(tmpNode);
    }
    
    private void setSubFieldPath(XMLNode node, String tmpPath){
    	if(node==null) return;
    	for(XMLNode tmpNode : node.elements){
    		tmpNode.path = tmpPath;
    		setSubFieldPath(tmpNode, tmpPath);
    	}
    }
    
    private String searchCurConnenctName(XMLNode segment){
    	for(XMLNode node : segment.elements){
    		if(node.column!=null && node.column.indexOf(":")>0){
    			return node.column.substring(0,node.column.indexOf(":"));
    		}else{
    			String tmpName = searchCurConnenctName(node);
    			if(tmpName!=null) return tmpName; 
    		}
    	}
    	
    	return null;
    }
    
    private void setDefaultValues(XMLNode node){
    	if(node.defaultValue != null && !"".equals(node.defaultValue)){
    		XMLNode tmp = node;
    		while(tmp !=null){
    			tmp.hasDefaultValue = true;
    			break;
    		}
    	}
    }

    private void setIMetadataColumn(XMLNode node, List<IMetadataColumn> colList) {
        String value = null;
        JavaType javaType = null;
        String[] str = node.column.split(":");
        if (node.column != null && node.column.length() > 0 && node.column.indexOf(":")>0) {
            for (IMetadataColumn column : colList) {
                if (column.getLabel().equals(node.column.substring(node.column.indexOf(":")+1))) {
                    node.relatedColumn = column;
                    XMLNode tmp = node;
                    while (tmp != null) {
                        if (!tmp.childrenColumnList.contains(column)) {
                            tmp.childrenColumnList.add(column);
                        }
                        break;
                    }
                }
            }
        }
    }

    public String generate(Object argument) {
        return "";
    }
}
