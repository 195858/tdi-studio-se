<%@ jet
imports="
        java.util.ArrayList
        java.util.LinkedList
        java.util.List
        java.util.Map
        org.talend.core.model.metadata.IMetadataColumn
        org.talend.core.model.metadata.IMetadataTable
        org.talend.core.model.metadata.types.JavaType
        org.talend.core.model.metadata.types.JavaTypesManager
        org.talend.core.model.process.EConnectionType
        org.talend.core.model.process.ElementParameterParser
        org.talend.core.model.process.IConnection
        org.talend.core.model.process.IConnectionCategory
        org.talend.core.model.process.INode
        org.talend.designer.codegen.config.CodeGeneratorArgument
"
skeleton="tHL7Output_java.skeleton"
%>
<%
class GenerateCode{
	private String incomingName = null;
	public void generate(XMLNode currSeg){
		for(XMLNode tmpNode : currSeg.elements){
			if(tmpNode.elements==null || tmpNode.elements.size()==0){
				IMetadataColumn column = tmpNode.relatedColumn;
				if(column==null) continue;
				JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
				boolean isPrimitive = JavaTypesManager.isJavaPrimitiveType( javaType, column.isNullable());
    			if(!isPrimitive) {
%>   				
	if(<%=incomingName %>.<%=column.getLabel() %> != null) {
<%
    			} 
%>
tmpValue_<%=cid %> =
 <%
    			        String pattern = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
    			        if (javaType == JavaTypesManager.DATE && pattern != null && pattern.trim().length() != 0) {
    			            %>
    						FormatterUtils.format_Date(<%=incomingName %>.<%=column.getLabel() %>, <%= pattern %>);
    						<%	
						} else if(javaType == JavaTypesManager.BIGDECIMAL){
    						%>
    						<%=column.getPrecision() == null? incomingName + "." + column.getLabel() : incomingName + "." + column.getLabel() + ".setScale(" + column.getPrecision() + ", java.math.RoundingMode.HALF_UP)" %>.toPlainString();
							<%
						} else if(javaType == JavaTypesManager.BYTE_ARRAY){
    						%>
    						java.nio.charset.Charset.forName(<%=encoding %>).decode(java.nio.ByteBuffer.wrap(<%=incomingName %>.<%=column.getLabel() %>)).toString();
    						<%
    			        } else {
    			            %>
    						String.valueOf(<%=incomingName %>.<%=column.getLabel() %>);
    						<%				
    			        }
    			        %>

terser_<%=cid %>.set("<%=tmpNode.path %><%if(currSeg.parent!=null && currSeg.parent.isRepeatable){%>("
 + i_<%=incomingName%>_<%=cid %> + ")<%}%><%="/"+tmpNode.name %>", tmpValue_<%=cid %>);
<%
				if(!isPrimitive) {
%>   				
	}
<%
				}
			}else{
				generate(tmpNode);
			} // if
		} // for
		
	}
}

boolean hasDataLink = false;
if(incomingConns!=null){
	for(int i=0;i<incomingConns.size();i++){
		IConnection connTemp = incomingConns.get(i);
	    if (connTemp.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
	   		hasDataLink = true;
	   		break;
	    }
	}
}
    
if(hasDataLink){//HSS_____0

    if (incomingName == null && incomingConns.size() > 0) {
    	   incomingName = incomingConns.get(0).getName(); 
    }
    
	IMetadataTable preMetadataTable = null;
	for (IConnection incomingConn : incomingConns) {
		if ( incomingConn.getLineStyle().equals(EConnectionType.FLOW_MERGE) && incomingConn.getName().equals(incomingName)) {
			preMetadataTable = incomingConn.getMetadataTable();
		    break;
		}
	}
	
	if(preMetadataTable==null){
		return "";
	}

    List<Map<String, String>> currTable = getTable(rootTable, incomingName);
    
    Object[] treeObjs = getTree(currTable, preMetadataTable.getListColumns());
    
    if(treeObjs==null || treeObjs.length < 2){
    	return "";
    }
    
   
    XMLNode root = (XMLNode)treeObjs[0];
    // get all the segments in the xml structure
    XMLNode currSeg = (XMLNode)treeObjs[1];
    
    if(currSeg==null){
    	return "";
    	
    }
    
    List<String> existOrderConns = getAllConnNameInTree(rootTable);

    int i = 0;
    for(; i<existOrderConns.size(); i++){
    	if(existOrderConns.get(i).equals(incomingName)){
    		break;
    	}
    }
    if(i==0){
%>
if(msg_<%=cid %>==null){
	msg_<%=cid %>= new ca.uhn.hl7v2.model.v<%=hl7Version%>.message.<%=root.name%>();
	terser_<%=cid %> = new ca.uhn.hl7v2.util.Terser(msg_<%=cid %>);
}
	
<%
	}
%>
<%
	GenerateCode codeGen = new GenerateCode();
	codeGen.incomingName = incomingName;
	codeGen.generate(currSeg);

%>
	i_<%=incomingName%>_<%=cid %>++;
<%
}//HSS_____0
%>
