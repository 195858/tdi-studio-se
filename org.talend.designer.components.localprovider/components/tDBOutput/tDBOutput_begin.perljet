<%@ jet 
package="org.talend.designer.codegen.translators" 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.metadata.MetadataTalendType
    java.util.List
    java.util.Map
    java.util.ArrayList
    org.talend.commons.utils.StringUtils
" 
class="DBOutputBegin" 
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
boolean stats = codeGenArgument.isStatistics();

List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
    IMetadataTable metadata = metadatas.get(0);
    if (metadata!=null) {
        String cid = metadata.getTableName();

        String dataAction = ElementParameterParser.getValue(
            node,
            "__DATA_ACTION__"
        );

        String commitEvery = ElementParameterParser.getValue(
            node,
            "__COMMIT_EVERY__"
        );

        List<Map<String, String>> addCols =
            (List<Map<String,String>>)ElementParameterParser.getObjectValue(
                node,
                "__ADD_COLS__"
            );

        String tableAction = ElementParameterParser.getValue(
            node,
            "__TABLE_ACTION__"
        );
%>

use DBI;
use talend::dbOp;

my %desc_<%=cid %> = (
    dbname   => <%=ElementParameterParser.getValue(node, "__DBNAME__") %>,
    dbtable  => <%=ElementParameterParser.getValue(node, "__TABLE__") %>,
    dbuser   => <%=ElementParameterParser.getValue(node, "__USER__") %>,
    dbpass   => <%=ElementParameterParser.getValue(node, "__PASS__") %>,
    encoding => <%=ElementParameterParser.getValue(node, "__ENCODING__") %>,
    commit_every  => <%=commitEvery %>,
    schema => [
<%
        for (IMetadataColumn column: metadata.getListColumns()) {
%>
    	{
            name    => '<%=column.getLabel() %>',
            key     => <%=column.isKey() %>,
            type    => '<%=column.getTalendType() %>',
            len     => <%=column.getLength() %>,
            precision => <%=column.getPrecision() %>,
            null    => <%=column.isNullable() %>,
            default => '<%=column.getDefault() %>',
            comment => '<%=column.getComment() %>',
        },
<%
        }
%>
    ]
);

my $nb_fields_<%=cid %> = scalar @{ $desc_<%=cid %>{schema} };

<%
        if (stats) {
%>
UpdateStat('<%=cid %>', 0);
<%
        }
%>

my $dbh_<%=cid %> = DBI->connect(
    'DBI:ODBC:'.$desc_<%=cid %>{dbname},
    $desc_<%=cid %>{dbuser},
    $desc_<%=cid %>{dbpass},
    {
        AutoCommit => 0,
<%
        if (dataAction.equals("INSERT_OR_UPDATE")) {
%>
        PrintError => 0,
<%
        }
%>
    }
)
    or die "can't connect to database";

my $sth_<%=cid %>;
my $query;

<%
        if (tableAction.equals("CLEAR")) {
%>
$query = '
DELETE
  FROM '.$desc_<%=cid %>{dbtable}.'
';

$sth_<%=cid %> = $dbh_<%=cid %>->prepare($query);

$sth_<%=cid %>->execute()
    or die "can't clear table";
<%
        }
%>

my @colnames = map { $_->{name} } @{ $desc_<%=cid %>{schema} };
my $query = '';

<%
if ((dataAction.equals("UPDATE"))
    || (dataAction.equals("UPDATE_OR_INSERT"))
    || (dataAction.equals("INSERT_OR_UPDATE"))
    || (dataAction.equals("DELETE"))) {
    List updateCols  = new ArrayList();
    List keyCols     = new ArrayList();

    for (IMetadataColumn column: metadata.getListColumns()) {
        for(int i = 0; i < addCols.size(); i++) {
            Map<String, String> addCol = addCols.get(i);
            if (addCol.get("REFCOL").equals(column.getLabel())) {
                if (addCol.get("POS").equals("BEFORE")) {
                    updateCols.add(
                        "'.sprintf('%s = %s', "
                        + addCol.get("NAME")
                        + ", "
                        + addCol.get("SQL")
                        + ").'"
                    );
                }
            }
        }

        String currentQueryPart = column.getLabel() + " = ?";

        for(int i = 0; i < addCols.size(); i++) {
            Map<String, String> addCol = addCols.get(i);
            if (addCol.get("REFCOL").equals(column.getLabel())) {
                if (addCol.get("POS").equals("REPLACE")) {
                    currentQueryPart =
                        "'.sprintf('%s = %s', "
                        + addCol.get("NAME")
                        + ", "
                        + addCol.get("SQL")
                        + ").'"
                    ;
                }
            }
        }

        if (column.isKey()) {
            keyCols.add(currentQueryPart);
        }
        else {
            updateCols.add(currentQueryPart);
        }

        for(int i = 0; i < addCols.size(); i++) {
            Map<String, String> addCol = addCols.get(i);
            if (addCol.get("REFCOL").equals(column.getLabel())) {
                if (addCol.get("POS").equals("AFTER")) {
                    updateCols.add(
                        "'.sprintf('%s = %s', "
                        + addCol.get("NAME")
                        + ", "
                        + addCol.get("SQL")
                        + ").'"
                    );
                }
            }
        }
    }

    String keyString = StringUtils.join(keyCols.toArray(), " AND ");
    String updateString = StringUtils.join(updateCols.toArray(), ", ");

    if ((dataAction.equals("UPDATE"))
        || (dataAction.equals("UPDATE_OR_INSERT"))
        || (dataAction.equals("INSERT_OR_UPDATE"))) {
%>

$query = '
UPDATE '.$desc_<%=cid %>{dbtable}.'
  SET <%=updateString%>
  WHERE <%=keyString%>
';

my $usth_<%=cid %> = $dbh_<%=cid %>->prepare($query);

<%
    }

    if (dataAction.equals("DELETE")) {
%>

$query = '
DELETE FROM '.$desc_<%=cid %>{dbtable}.'
  WHERE <%=keyString%>
';

my $dsth_<%=cid %> = $dbh_<%=cid %>->prepare($query);

<%
    }
}

if ((dataAction.equals("INSERT"))
    || (dataAction.equals("UPDATE_OR_INSERT"))
    || (dataAction.equals("INSERT_OR_UPDATE"))) {

    List keys = new ArrayList();
    List parameters = new ArrayList();

    for (IMetadataColumn column: metadata.getListColumns()) {
        for(int i = 0; i < addCols.size(); i++) {
            Map<String, String> addCol = addCols.get(i);
            if (addCol.get("REFCOL").equals(column.getLabel())) {
                if (addCol.get("POS").equals("BEFORE")) {
                    keys.add("'." + addCol.get("NAME") + ".'");
                    parameters.add("'." + addCol.get("SQL") + ".'");
                }
            }
        }

        String currentParameter = "?";
        String currentKey = column.getLabel();
        for(int i = 0; i < addCols.size(); i++) {
            Map<String, String> addCol = addCols.get(i);
            if (addCol.get("REFCOL").equals(column.getLabel())) {
                if (addCol.get("POS").equals("REPLACE")) {
                    currentKey = "'." + addCol.get("NAME") + ".'";
                    currentParameter = "'." + addCol.get("SQL") + ".'";
                }
            }
        }
        keys.add(currentKey);
        parameters.add(currentParameter);

        for(int i = 0; i < addCols.size(); i++) {
            Map<String, String> addCol = addCols.get(i);
            if (addCol.get("REFCOL").equals(column.getLabel())) {
                if (addCol.get("POS").equals("AFTER")) {
                    keys.add("'." + addCol.get("NAME") + ".'");
                    parameters.add("'." + addCol.get("SQL") + ".'");
                }
            }
        }
    }

    // String keyString = StringUtils.join(keys.toArray(), ".','.");
    String keyString = StringUtils.join(keys.toArray(), ",");
    String parametersString = StringUtils.join(parameters.toArray(), ",");
%>

$query = '
INSERT
  INTO '.$desc_<%=cid %>{dbtable}.'
  (<%=keyString%>)
  VALUES
  (<%=parametersString%>)
';

my $isth_<%=cid %> = $dbh_<%=cid %>->prepare($query);

<%
}
%>

my $nb_line_<%=cid%> = 0;
my $nb_line_updated_<%=cid%>  = 0;
my $nb_line_inserted_<%=cid%> = 0;
my $nb_line_deleted_<%=cid%>  = 0;

my $nb_line_current_commit_<%=cid%> = 0;
<%
    }
}
%>
