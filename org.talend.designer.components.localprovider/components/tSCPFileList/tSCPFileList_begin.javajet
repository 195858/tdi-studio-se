<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser
    org.talend.designer.codegen.config.CodeGeneratorArgument
    
    java.util.List
    java.util.Map
"
%>

<%
        CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
        INode node = (INode)codeGenArgument.getArgument();
        String cid = node.getUniqueName();

        String host = ElementParameterParser.getValue(
            node,
            "__HOST__"
        );

        String port = ElementParameterParser.getValue(
            node,
            "__PORT__"
        );

        String user = ElementParameterParser.getValue(
            node,
            "__USERNAME__"
        );

        String authMethod = ElementParameterParser.getValue(
            node,
            "__AUTH_METHOD__"
        );

        String privatekey = ElementParameterParser.getValue(
            node,
            "__PRIVATEKEY__"
        );

        String password = ElementParameterParser.getValue(
            node,
            "__PASSWORD__"
        );
        
        String passphrase = ElementParameterParser.getValue(
            node,
            "__PASSPHRASE__"
        );
        
       	String commandSeparator = ElementParameterParser.getValue(node, "__COMMANDSEPARATOR__");        
        
        List<Map<String, String>> filelist = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__FILELIST__");       
 %>

    /* Create a connection instance */
	<%
	String useExistingConn = ElementParameterParser.getValue(node, "__USE_EXISTING_CONNECTION__");
	
	if(("true").equals(useExistingConn)){
		String connection = ElementParameterParser.getValue(node, "__CONNECTION__");
		String conn= "conn_" + connection;
	%>
	
	ch.ethz.ssh2.Connection conn_<%=cid %> = (ch.ethz.ssh2.Connection)globalMap.get("<%=conn %>");
	
<%}else{%>

    String hostname_<%=cid%> = <%=host%>;
    String username_<%=cid%> = <%=user%>;
    
<%
        if(("").equals(port)){
%>
              ch.ethz.ssh2.Connection conn_<%=cid%> = new ch.ethz.ssh2.Connection(hostname_<%=cid%>);
<%
        } else {
%>
              ch.ethz.ssh2.Connection conn_<%=cid%> = new ch.ethz.ssh2.Connection(hostname_<%=cid%>,<%=port%>);
<%
        }
%>
              /* Now connect */
        conn_<%=cid%>.connect();
<%        
        if (("PUBLICKEY").equals(authMethod)) {
%>
        java.io.File keyfile_<%=cid%> = new java.io.File(<%=privatekey%>); 
            boolean isAuthenticated_<%=cid%> = conn_<%=cid%>.authenticateWithPublicKey(username_<%=cid%>, keyfile_<%=cid%>, <%=passphrase%>);
              if (isAuthenticated_<%=cid%> == false)
                      throw new RuntimeException("Authentication failed.");
<%
        }
        if (("PASSWORD").equals(authMethod)) {
%>
        boolean isAuthenticated_<%=cid%> = conn_<%=cid%>.authenticateWithPassword(username_<%=cid%>, <%=password%>);
        if (isAuthenticated_<%=cid%> == false)
            throw new RuntimeException("Authentication failed.");
<%
        }
        if (("KEYBOARDINTERACTIVE").equals(authMethod)) {
%>
        boolean isAuthenticated_<%=cid%> = conn_<%=cid%>.authenticateWithKeyboardInteractive(username_<%=cid%>, 
            new ch.ethz.ssh2.InteractiveCallback() {
        
        		public String[] replyToChallenge(String name,
        				String instruction, int numPrompts,
        				String[] prompt, boolean[] echo)
        				throws Exception {
        			// TODO Auto-generated method stub
        			String[] reply = new String[numPrompts];
        			for (int i = 0; i < reply.length; i++) {
        				reply[i] = <%=password%>;
        			}
        
        			return reply;
        		}
        	}	
        );
        if (isAuthenticated_<%=cid%> == false)
            throw new RuntimeException("Authentication failed.");
<%
        } 
	}//if(useExistingConn)       
%>     

		//initial the command
		StringBuilder command_<%=cid %> = new StringBuilder();
         <%
             for (Map<String, String> file : filelist) {
         %>
         	if(command_<%=cid %>.length() > 0){
         		command_<%=cid %>.append(<%=commandSeparator %>);
         	} 
            command_<%=cid %>.append(<%=file.get("SOURCE")%>);
            
         <%          
            }
         %>
       
		/* Create a session */
		ch.ethz.ssh2.Session sess_<%=cid%> = conn_<%=cid%>.openSession();
		
		//execute the command
		sess_<%=cid%>.execCommand((command_<%=cid %>).toString());
		
		int nb_line_<%=cid %> = 0;
		
		//get the return info
		java.io.InputStream stdout_<%=cid%> = sess_<%=cid%>.getStdout();
		java.io.BufferedReader brout_<%=cid%>= new java.io.BufferedReader(new java.io.InputStreamReader(stdout_<%=cid%>));
        String line_out_<%=cid%> = "";
        StringBuilder stringStdout_<%=cid%> =new StringBuilder();
		while((line_out_<%=cid%> = brout_<%=cid%>.readLine()) != null) {
