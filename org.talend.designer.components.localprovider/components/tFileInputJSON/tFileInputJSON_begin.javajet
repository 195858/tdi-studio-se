<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn 
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.IConnectionCategory
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.Map
    java.util.List
    org.talend.core.model.metadata.types.JavaTypesManager
	org.talend.core.model.metadata.types.JavaType
	org.talend.core.model.utils.NodeUtil
" 
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();

String cid = node.getUniqueName();

List<Map<String, String>> mapping = (List<Map<String,String>>)ElementParameterParser.getObjectValueXML(node, "__MAPPING__");
String encoding = ElementParameterParser.getValue(node, "__ENCODING__");

String useUrl = ElementParameterParser.getValue(node, "__USEURL__");
boolean isUseUrl = "true".equals(useUrl);
String urlpath = ElementParameterParser.getValue(node, "__URLPATH__");

String filename = ElementParameterParser.getValue(node, "__FILENAME__");

String advancedSeparatorStr = ElementParameterParser.getValue(node, "__ADVANCED_SEPARATOR__");
boolean advancedSeparator = (advancedSeparatorStr!=null&&!("").equals(advancedSeparatorStr))?("true").equals(advancedSeparatorStr):false;
String thousandsSeparator = ElementParameterParser.getValueWithJavaType(node, "__THOUSANDS_SEPARATOR__", JavaTypesManager.CHARACTER);
String decimalSeparator = ElementParameterParser.getValueWithJavaType(node, "__DECIMAL_SEPARATOR__", JavaTypesManager.CHARACTER);

List< ? extends IConnection> conns = NodeUtil.getOutgoingConnections(node, IConnectionCategory.DATA);
String firstConnName = "";
List<IMetadataTable> metadatas = node.getMetadataList();
%>
  class JSONUtil_<%=cid%>{
      public int getData(String query,javax.script.Invocable invocableEngine,java.util.List<org.json.simple.JSONArray> jsonResultList,int recordMaxSize){
          try{
              //only 2 types: String/Boolean
              String resultObj = invocableEngine.invokeFunction("jsonPath",query).toString();
              if(!"false".equals(resultObj)){
	              org.json.simple.JSONArray resultArray= (org.json.simple.JSONArray)org.json.simple.JSONValue.parse(resultObj);
	              jsonResultList.add(resultArray);
	              if(recordMaxSize != -1 && recordMaxSize != resultArray.size()){
		             //just give an error, don't stop
		              System.err.println("The Json resource datas maybe have some problems, please make sure the data structure with the same fields.");
	               }
	               recordMaxSize = Math.max(recordMaxSize, resultArray.size());
               }else{
	               System.err.println("Can't find any data with JSONPath " + query);
	               //add null to take a place in List(buffer)
	               jsonResultList.add(null); 
               }
          }catch(Exception e){
              e.printStackTrace();
          }
          return recordMaxSize;
      }

<%
if ((metadatas!=null)&&(metadatas.size()>0)) {
	IMetadataTable metadata = metadatas.get(0);
	if (metadata!=null) {
		List<IMetadataColumn> columns=metadata.getListColumns();
		if (conns!=null) {
			if (conns.size()>0) {
				IConnection conn = conns.get(0);
				firstConnName = conn.getName();
				for (int i=0;i<mapping.size();i++) {
    				if(i % 100 == 0){
%>
	void setRowValue_<%=(i/100) %>(<%=firstConnName %>Struct <%=firstConnName %>, java.util.List<org.json.simple.JSONArray> JSONResultList_<%=cid%>, int nbResultArray_<%=cid%>) throws java.io.UnsupportedEncodingException{
<%
    				}
%>
<%
					for(IMetadataColumn column:columns) {
						if (mapping.get(i).get("SCHEMA_COLUMN")!=null) {
							if (column.getLabel().compareTo(mapping.get(i).get("SCHEMA_COLUMN"))==0) {
								String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
								JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
								String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
%>
								if(JSONResultList_<%=cid%>.get(<%=i%>) != null && nbResultArray_<%=cid%><JSONResultList_<%=cid%>.get(<%=i%>).size() && JSONResultList_<%=cid%>.get(<%=i%>).get(nbResultArray_<%=cid%>)!=null){
									<%		
						if (javaType == JavaTypesManager.STRING || javaType == JavaTypesManager.OBJECT) {
%>		
				<%=firstConnName %>.<%=column.getLabel() %> = JSONResultList_<%=cid%>.get(<%=i%>).get(nbResultArray_<%=cid%>).toString();
<%		
						} else if(javaType == JavaTypesManager.DATE) {						
%>					
				<%=firstConnName %>.<%=column.getLabel() %> = ParserUtils.parseTo_Date(JSONResultList_<%=cid%>.get(<%=i%>).get(nbResultArray_<%=cid%>).toString(), <%= patternValue %>);				
<%		
						}else if(advancedSeparator && JavaTypesManager.isNumberType(javaType)) { 
%>
				<%=firstConnName %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%= typeToGenerate %>(ParserUtils.parseTo_Number(JSONResultList_<%=cid%>.get(<%=i%>).get(nbResultArray_<%=cid%>).toString(), <%= thousandsSeparator %>, <%= decimalSeparator %>));
<%
						} else if(javaType == JavaTypesManager.BYTE_ARRAY) { 
%>							
				<%=firstConnName %>.<%=column.getLabel() %> = JSONResultList_<%=cid%>.get(<%=i%>).get(nbResultArray_<%=cid%>).toString().getBytes(<%=encoding %>);
<%
						} else {
%>
				<%=firstConnName %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%= typeToGenerate %>(JSONResultList_<%=cid%>.get(<%=i%>).get(nbResultArray_<%=cid%>).toString());
<%
						}
%>
								}else{

<%
						String defaultValue = JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate, column.getDefault());
						if(defaultValue == null) {
%>
					throw new RuntimeException("Value is empty for column : '<%= column.getLabel() %>' in '<%=firstConnName%>' connection, value is invalid or this column should be nullable or have a default value.");
<%
						} else {
%>
				<%=firstConnName %>.<%=column.getLabel() %> = <%=defaultValue%>;
			
<%
						}
%>
			}
<%

}
						}
					}
    				if((i + 1) % 100 == 0){
%>
			}
<%
    				}
				} // for (int i=0)
  				if(mapping.size() > 0 && mapping.size() % 100 > 0){
%>
			}
<%
 				 }
			}

		}

	}
}
%>
  }
int nb_line_<%=cid%> = 0;

javax.script.ScriptEngineManager scriptEngineMgr_<%=cid%> = new javax.script.ScriptEngineManager();
javax.script.ScriptEngine jsEngine_<%=cid%> = scriptEngineMgr_<%=cid%>.getEngineByName("JavaScript");
if (jsEngine_<%=cid%> == null) {
    System.err.println("No script engine found for JavaScript");
}
java.io.InputStream jsonis_<%=cid%> = com.jsonpath.test.ReadJar.class.getResource("json.js").openStream();
jsEngine_<%=cid%>.eval( new java.io.BufferedReader(new java.io.InputStreamReader(jsonis_<%=cid%>)));

java.io.InputStream jsonpathis_<%=cid%> = com.jsonpath.test.ReadJar.class.getResource("jsonpath.js").openStream();
jsEngine_<%=cid%>.eval(new java.io.BufferedReader(new java.io.InputStreamReader(jsonpathis_<%=cid%>)));

<%if(!isUseUrl){//read from a file%>
java.io.BufferedReader fr_<%=cid%> = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(<%=filename %>),<%=encoding %>));
<%}else{ //read from internet%>
java.net.URL url_<%=cid %> = new java.net.URL(<%=urlpath %>);
java.net.URLConnection urlConn_<%=cid %> = url_<%=cid %>.openConnection();
java.io.InputStreamReader fr_<%=cid %> = new java.io.InputStreamReader(urlConn_<%=cid %>.getInputStream(),<%=encoding %>);
<%}%>
java.lang.Object jsonText_<%=cid%> = org.json.simple.JSONValue.parse(fr_<%=cid%>);
jsEngine_<%=cid%>.eval("var obj="+jsonText_<%=cid%>.toString());

java.util.List<org.json.simple.JSONArray> JSONResultList_<%=cid%> = new java.util.ArrayList<org.json.simple.JSONArray>();

int recordMaxSize_<%=cid%> = -1;
javax.script.Invocable invocableEngine_<%=cid%> = (javax.script.Invocable)jsEngine_<%=cid%>;

JSONUtil_<%=cid%> jsonUtil_<%=cid%>=new JSONUtil_<%=cid%>();
<%
	for(Map<String,String> path:mapping){
		String column = path.get("SCHEMA_COLUMN");
		String query = path.get("QUERY");
%>

recordMaxSize_<%=cid%>=jsonUtil_<%=cid%>.getData(<%=query%>,invocableEngine_<%=cid%>,JSONResultList_<%=cid%>,recordMaxSize_<%=cid%>);

<%
	}
%>


	for(int nbResultArray_<%=cid%> = 0; nbResultArray_<%=cid%> < recordMaxSize_<%=cid%>; nbResultArray_<%=cid%>++){
	
		nb_line_<%=cid%>++;
<%
if ((metadatas!=null)&&(metadatas.size()>0)) {
	IMetadataTable metadata = metadatas.get(0);
	if (metadata!=null) {
		List<IMetadataColumn> columns=metadata.getListColumns();
		if (conns!=null) {
			if (conns.size()>0) {
				IConnection conn = conns.get(0);
				firstConnName = conn.getName();
				for (int i=0;i<mapping.size();i++) {
					if(i % 100 == 0){
%>
	jsonUtil_<%=cid%>.setRowValue_<%= (i/100) %>(<%=firstConnName %>,JSONResultList_<%=cid%>,nbResultArray_<%=cid%>);
<%
					}
				}// for
			}// conns.size()>0
			/**
			have no idea what the following code is used for
			*/
			if (conns.size()>1) {
				for (int i=1;i<conns.size();i++) {
					IConnection conn = conns.get(i);
					if ((conn.getName().compareTo(firstConnName)!=0)&&(conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA))) {
						for (IMetadataColumn column: metadata.getListColumns()) {
%>
	<%=conn.getName() %>.<%=column.getLabel() %> = <%=firstConnName %>.<%=column.getLabel() %>;
<%
						}
					}
				}
			}
		} // if(conns!=null)
	} // if (metadata!=null)
} // if ((metadatas!=null)&&(metadatas.size()>0))
%>
