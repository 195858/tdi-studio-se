<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn 
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.IConnectionCategory
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.Map
    java.util.List
    org.talend.core.model.metadata.types.JavaTypesManager
	org.talend.core.model.metadata.types.JavaType
" 
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();

String cid = node.getUniqueName();

List<Map<String, String>> mapping = (List<Map<String,String>>)ElementParameterParser.getObjectValueXML(node, "__MAPPING__");
String encoding = ElementParameterParser.getValue(node, "__ENCODING__");

String filename = ElementParameterParser.getValue(node, "__FILENAME__");

String advancedSeparatorStr = ElementParameterParser.getValue(node, "__ADVANCED_SEPARATOR__");
boolean advancedSeparator = (advancedSeparatorStr!=null&&!("").equals(advancedSeparatorStr))?("true").equals(advancedSeparatorStr):false;
String thousandsSeparator = ElementParameterParser.getValueWithJavaType(node, "__THOUSANDS_SEPARATOR__", JavaTypesManager.CHARACTER);
String decimalSeparator = ElementParameterParser.getValueWithJavaType(node, "__DECIMAL_SEPARATOR__", JavaTypesManager.CHARACTER);

%>
int nb_line_<%=cid%> = 0;


String filename_<%=cid %> = <%=filename %>;
if(filename_<%=cid %> != null && filename_<%=cid %>.startsWith("//")){
	filename_<%=cid %> = filename_<%=cid %>.replaceFirst("//","/");
}

javax.script.ScriptEngineManager scriptEngineMgr_<%=cid%> = new javax.script.ScriptEngineManager();
javax.script.ScriptEngine jsEngine_<%=cid%> = scriptEngineMgr_<%=cid%>.getEngineByName("JavaScript");
if (jsEngine_<%=cid%> == null) {
    System.err.println("No script engine found for JavaScript");
}
java.io.InputStream jsonis_<%=cid%> = com.jsonpath.test.ReadJar.class.getResource("json.js").openStream();
jsEngine_<%=cid%>.eval( new java.io.BufferedReader(new java.io.InputStreamReader(jsonis_<%=cid%>)));

java.io.FileReader fr_<%=cid%> = new java.io.FileReader(filename_<%=cid %>);
java.lang.Object jsonText_<%=cid%> = org.json.simple.JSONValue.parse(fr_<%=cid%>);
jsEngine_<%=cid%>.eval("var obj="+jsonText_<%=cid%>.toString());

java.io.InputStream jsonpathis_<%=cid%> = com.jsonpath.test.ReadJar.class.getResource("jsonpath.js").openStream();
jsEngine_<%=cid%>.eval(new java.io.BufferedReader(new java.io.InputStreamReader(jsonpathis_<%=cid%>)));

java.util.List<org.json.simple.JSONArray> JSONResultList_<%=cid%> = new java.util.ArrayList<org.json.simple.JSONArray>();

<%
	int invocableEngineNB = 0;
	for(Map<String,String> path:mapping){

		String query = path.get("QUERY");
%>
javax.script.Invocable invocableEngine_<%=cid%>_<%=invocableEngineNB%> = (javax.script.Invocable)jsEngine_<%=cid%>;
Object resultObj_<%=cid%>_<%=invocableEngineNB%> = invocableEngine_<%=cid%>_<%=invocableEngineNB%>.invokeFunction("jsonPath", <%=query%>);
if(!"false".equals(resultObj_<%=cid%>_<%=invocableEngineNB%>.toString())){
	org.json.simple.JSONArray resultArray_<%=cid%>_<%=invocableEngineNB%> = (org.json.simple.JSONArray)org.json.simple.JSONValue.parse(resultObj_<%=cid%>_<%=invocableEngineNB%>.toString());
	JSONResultList_<%=cid%>.add(resultArray_<%=cid%>_<%=invocableEngineNB%>);
}
else{
	throw new RuntimeException("Query '"+<%=query%>+"' is invalid,matching data can not be found");
}
<%
		invocableEngineNB++;
	}
%>
org.json.simple.JSONArray JSONResultArray_<%=cid%> ;
int maxResultArraySize_<%=cid%>=0;
for(int nbResultList_<%=cid%>=0;nbResultList_<%=cid%><JSONResultList_<%=cid%>.size();nbResultList_<%=cid%>++){

	JSONResultArray_<%=cid%> =  JSONResultList_<%=cid%>.get(nbResultList_<%=cid%>);
	maxResultArraySize_<%=cid%> = maxResultArraySize_<%=cid%>>JSONResultArray_<%=cid%>.size()?maxResultArraySize_<%=cid%>:JSONResultArray_<%=cid%>.size();
}	

	for(int nbResultArray_<%=cid%> = 0; nbResultArray_<%=cid%> < maxResultArraySize_<%=cid%>; nbResultArray_<%=cid%>++){
	
		nb_line_<%=cid%>++;

<%
List< ? extends IConnection> conns = node.getOutgoingSortedConnections();
String firstConnName = "";
List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
	IMetadataTable metadata = metadatas.get(0);
	if (metadata!=null) {
		List<IMetadataColumn> columns=metadata.getListColumns();
		if (conns!=null) {
			if (conns.size()>0) {
				IConnection conn = conns.get(0);
				firstConnName = conn.getName();
				for (int i=0;i<mapping.size();i++) { 
					for(IMetadataColumn column:columns) {
						if (mapping.get(i).get("SCHEMA_COLUMN")!=null) {
							if (column.getLabel().compareTo(mapping.get(i).get("SCHEMA_COLUMN"))==0) {
								String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
								JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
								String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
%>
								if( nbResultArray_<%=cid%><JSONResultList_<%=cid%>.get(<%=i%>).size() && JSONResultList_<%=cid%>.get(<%=i%>).get(nbResultArray_<%=cid%>)!=null){
									<%		
						if (javaType == JavaTypesManager.STRING || javaType == JavaTypesManager.OBJECT) {
%>		
				<%=firstConnName %>.<%=column.getLabel() %> = JSONResultList_<%=cid%>.get(<%=i%>).get(nbResultArray_<%=cid%>).toString();
<%		
						} else if(javaType == JavaTypesManager.DATE) {						
%>					
				<%=firstConnName %>.<%=column.getLabel() %> = ParserUtils.parseTo_Date(JSONResultList_<%=cid%>.get(<%=i%>).get(nbResultArray_<%=cid%>).toString(), <%= patternValue %>);				
<%		
						}else if(advancedSeparator && JavaTypesManager.isNumberType(javaType)) { 
%>
				<%=firstConnName %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%= typeToGenerate %>(ParserUtils.parseTo_Number(JSONResultList_<%=cid%>.get(<%=i%>).get(nbResultArray_<%=cid%>).toString(), <%= thousandsSeparator %>, <%= decimalSeparator %>));
<%
						} else if(javaType == JavaTypesManager.BYTE_ARRAY) { 
%>							
				<%=firstConnName %>.<%=column.getLabel() %> = JSONResultList_<%=cid%>.get(<%=i%>).get(nbResultArray_<%=cid%>).toString().getBytes(<%=encoding %>);
<%
						} else {
%>
				<%=firstConnName %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%= typeToGenerate %>(JSONResultList_<%=cid%>.get(<%=i%>).get(nbResultArray_<%=cid%>).toString());
<%
						}
%>
								}else{

<%
						String defaultValue = JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate, column.getDefault());
						if(defaultValue == null) {
%>
					throw new RuntimeException("Value is empty for column : '<%= column.getLabel() %>' in '<%=firstConnName%>' connection, value is invalid or this column should be nullable or have a default value.");
<%
						} else {
%>
				<%=firstConnName %>.<%=column.getLabel() %> = <%=defaultValue%>;
			
<%
						}
%>
			}
<%

}
						}
					}
				}
			}
			if (conns.size()>1) {
				for (int i=1;i<conns.size();i++) {
					IConnection conn = conns.get(i);
					if ((conn.getName().compareTo(firstConnName)!=0)&&(conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA))) {
						for (IMetadataColumn column: metadata.getListColumns()) {
%>
	<%=conn.getName() %>.<%=column.getLabel() %> = <%=firstConnName %>.<%=column.getLabel() %>;
<%
						}
					}
				}
			}
		}

		}
	}



%>