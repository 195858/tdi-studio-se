<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser
		org.talend.designer.codegen.config.CodeGeneratorArgument
		java.util.List
		java.util.Map
	"
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();

	String host = ElementParameterParser.getValue(node, "__HOST__");
    String username = ElementParameterParser.getValue(node, "__USERNAME__");
    String password = ElementParameterParser.getValue(node, "__PASSWORD__");
    String port= ElementParameterParser.getValue(node, "__PORT__");
    
    String outputDirectory = ElementParameterParser.getValue(node, "__OUTPUT_DIRECTORY__");
    String filenamePattern = ElementParameterParser.getValue(node, "__FILENAME_PATTERN__");
    String allEmails = ElementParameterParser.getValue(node, "__ALL_EMAILS__");

    String maxEmails = ElementParameterParser.getValue(node, "__MAX_EMAILS__");
    boolean bDeleteFromServer = "true".equals(ElementParameterParser.getValue(node, "__DELETE_FROM_SERVER__"));
    String protocol = ElementParameterParser.getValue(node, "__PROTOCOL__");
    
    List<Map<String, String>> filterList = 
		(List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__ADVANCED_FILTER__");
    String condition = ElementParameterParser.getValue(node, "__FILTER_RELATION__");
    	
	String cid = node.getUniqueName();
	boolean useSSL = "true".equals(ElementParameterParser.getValue(node, "__USE_SSL__"));
%>	
	String server_<%=cid %> = <%=host %>;
	
	String mbox_<%=cid%> = "INBOX";

	int port_<%=cid %> = <%=port %>;

	int nb_email_<%=cid %> = 0;

    String user_<%=cid %> = <%=username %>;

    String password_<%=cid %> = <%=password %>;

	javax.mail.Folder folder_<%=cid %>;

	javax.mail.Session session_<%=cid %>;
	
	javax.mail.Store store_<%=cid %>;

	javax.mail.URLName url_<%=cid %>;

	java.util.Properties props_<%=cid %>;
    
	try {
		props_<%=cid %> = System.getProperties();
	} catch (SecurityException sex) {
		props_<%=cid %> = new java.util.Properties();
    }
<%
	if(useSSL){
		if("pop3".equals(protocol)){
%>
			java.security.Security.addProvider(new com.sun.net.ssl.internal.ssl.Provider());
			props_<%=cid %>.setProperty("mail.pop3.socketFactory.class", "javax.net.ssl.SSLSocketFactory");			
			props_<%=cid %>.setProperty("mail.pop3.socketFactory.fallback", "false");
			props_<%=cid %>.setProperty("mail.pop3.socketFactory.port",port_<%=cid %> + "");
<%
		}else{
%>
			java.security.Security.addProvider(new com.sun.net.ssl.internal.ssl.Provider());
			props_<%=cid %>.setProperty("mail.imap.socketFactory.class", "javax.net.ssl.SSLSocketFactory");
	        props_<%=cid %>.setProperty("mail.imap.socketFactory.fallback", "false");
	        props_<%=cid %>.setProperty("mail.imap.socketFactory.port", port_<%=cid %> + "");		
<%
		}
	}
	if ("pop3".equals(protocol)){
%>
		session_<%=cid %> = javax.mail.Session.getInstance(props_<%=cid %>, null);
		store_<%=cid %> = session_<%=cid %>.getStore("<%=protocol%>");
		store_<%=cid %>.connect(server_<%=cid %>, port_<%=cid %>, user_<%=cid %>, password_<%=cid %>);

		folder_<%=cid %> = store_<%=cid %>.getDefaultFolder();

		if (folder_<%=cid %> == null)
			throw new RuntimeException("No default folder");

		// its INBOX
		folder_<%=cid %> = folder_<%=cid %>.getFolder(mbox_<%=cid%>);
		if (folder_<%=cid %> == null)
			throw new RuntimeException("No POP3 INBOX");
<%
	} else{
		if("true".equals(ElementParameterParser.getValue(node, "__SPECIFY_MAIL_FOLDER__"))){
%>
		mbox_<%=cid%> = <%=ElementParameterParser.getValue(node, "__MAIL_FOLDER__")%>;
<%
		}
%>
		url_<%=cid %> = new javax.mail.URLName("<%=protocol%>", server_<%=cid %>, -1, mbox_<%=cid%>, user_<%=cid %>, password_<%=cid %>);
		session_<%=cid %> = javax.mail.Session.getInstance(props_<%=cid %>, null);
		store_<%=cid %> = new com.sun.mail.imap.IMAPStore(session_<%=cid %>, url_<%=cid %>);
		store_<%=cid %>.connect();
		folder_<%=cid %> = store_<%=cid %>.getFolder(mbox_<%=cid%>);
<%
    }
%> 
    try{
      folder_<%=cid %>.open(javax.mail.Folder.READ_WRITE);
    } catch(Exception e){
      folder_<%=cid %>.open(javax.mail.Folder.READ_ONLY);
    }
    
    javax.mail.Message[] msgs_<%=cid %> = folder_<%=cid %>.getMessages();
    for (int counter_<%=cid %> = 0; counter_<%=cid %> < msgs_<%=cid %>.length; counter_<%=cid %>++) {
<%
   if (("false").equals(allEmails)) {
%>
    if(counter_<%=cid %> >= <%=maxEmails%>) break; 
<%
    }
%>                
    javax.mail.Message message_<%=cid %> = msgs_<%=cid %>[counter_<%=cid %>];
    boolean isMatch_<%=cid%> = <%=("&&").equals(condition)?"true":"false"%>;
<%
	for(int i=0;i<filterList.size();i++){
		String filterItem = filterList.get(i).get("FILTER_TIEM");
		String filterptn = filterList.get(i).get("PATTERN");
		if(("Subject").equals(filterItem)){
%>
	java.util.regex.Pattern pattern_<%=i%>_<%=cid %> = java.util.regex.Pattern.compile(<%=filterptn%>);
	java.util.regex.Matcher matcher_<%=i%>_<%=cid %> = pattern_<%=i%>_<%=cid %>.matcher(message_<%=cid %>.getSubject()==null?"":message_<%=cid %>.getSubject());
	isMatch_<%=cid%> = isMatch_<%=cid%> <%=condition%> matcher_<%=i%>_<%=cid %>.find();
<%
		}else if(("From").equals(filterItem)){
%>
	java.util.regex.Pattern pattern_<%=i%>_<%=cid %> = java.util.regex.Pattern.compile(<%=filterptn%>);
	java.util.regex.Matcher matcher_<%=i%>_<%=cid %> = pattern_<%=i%>_<%=cid %>.matcher(message_<%=cid %>.getFrom()[0]==null?"":message_<%=cid %>.getFrom()[0].toString());
	isMatch_<%=cid%> = isMatch_<%=cid%> <%=condition%> matcher_<%=i%>_<%=cid %>.find();
<%
		}else if(("To").equals(filterItem)){
%>
	java.util.regex.Pattern pattern_<%=i%>_<%=cid %> = java.util.regex.Pattern.compile(<%=filterptn%>);
	java.util.regex.Matcher matcher_<%=i%>_<%=cid %> = pattern_<%=i%>_<%=cid %>.matcher(message_<%=cid %>.getReplyTo()[0]==null?"":message_<%=cid %>.getReplyTo()[0].toString());
	isMatch_<%=cid%> = isMatch_<%=cid%> <%=condition%> matcher_<%=i%>_<%=cid %>.find();
<%
		}else {
%>
	java.util.Date date_<%=i%>_<%=cid%> = null;
	try{
	  date_<%=i%>_<%=cid%> = ParserUtils.parseTo_Date(<%=filterptn%>, "dd-MM-yyyy HH:mm:ss");
	} catch (Exception e){
	  date_<%=i%>_<%=cid%> = ParserUtils.parseTo_Date(<%=filterptn%>, "dd-MM-yyyy");
	}
	if(date_<%=i%>_<%=cid%> != null){
		isMatch_<%=cid%> = isMatch_<%=cid%> <%=condition%> (message_<%=cid %>.getSentDate()!=null && message_<%=cid %>.getSentDate().<%if ("BeforeDate".equals(filterItem)){%>before<%}else if("AfterDate".equals(filterItem)){%>after<%}%>(date_<%=i%>_<%=cid%>));
	}
<%
		}
	}
	if(filterList.size()>0){
%>
	  if(isMatch_<%=cid%>){
<%
	}
	if (bDeleteFromServer){
%> 
        message_<%=cid %>.setFlag(javax.mail.Flags.Flag.DELETED, true);
   <%}%>     
        String filename_<%=cid %> = <%=filenamePattern %>;
        java.io.File file_<%=cid %> = new java.io.File(<%=outputDirectory %>, filename_<%=cid %>);
        java.io.OutputStream os_<%=cid %> = new java.io.FileOutputStream(file_<%=cid %>);
        java.util.Enumeration enums_<%=cid %> = message_<%=cid %>.getAllHeaders();
        while (enums_<%=cid %>.hasMoreElements()) {
          javax.mail.Header header_<%=cid %> = (javax.mail.Header) enums_<%=cid %>.nextElement();
          os_<%=cid %>.write(new StringBuilder(header_<%=cid %>.getName()).append(": ").append(header_<%=cid %>.getValue()).append("\r\n").toString().getBytes());
        }
        os_<%=cid %>.write("\r\n".getBytes());
        java.io.InputStream in_<%=cid %> = message_<%=cid %>.getInputStream();
        byte[] buffer_<%=cid %> = new byte[1024];
        int length_<%=cid %> = 0;
        while ((length_<%=cid %> = in_<%=cid %>.read(buffer_<%=cid %>, 0, 1024)) != -1) {
          os_<%=cid %>.write(buffer_<%=cid %>, 0, length_<%=cid %>);                    
        }
        os_<%=cid %>.close();
    
        nb_email_<%=cid %>++;
        globalMap.put("<%=cid %>_CURRENT_FILE", filename_<%=cid %>);
            globalMap.put("<%=cid %>_CURRENT_FILEPATH", file_<%=cid %>.getAbsolutePath());
