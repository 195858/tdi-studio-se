<%@ jet
package="org.talend.designer.codegen.translators"
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.metadata.IMetadataTable
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.List
    java.util.Map
"
class="POPBegin"
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
boolean stats = codeGenArgument.isStatistics();

List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
    IMetadataTable metadata = metadatas.get(0);
    if (metadata!=null) {
        String cid = metadata.getTableName();

        String host = ElementParameterParser.getValue(node, "__HOST__");
        String username = ElementParameterParser.getValue(node, "__USERNAME__");
        String password = ElementParameterParser.getValue(node, "__PASSWORD__");
        String outputDirectory = ElementParameterParser.getValue(node, "__OUTPUT_DIRECTORY__");
        String filenamePattern = ElementParameterParser.getValue(node, "__FILENAME_PATTERN__");
        String allEmails = ElementParameterParser.getValue(node, "__ALL_EMAILS__");

        String maxEmails = ElementParameterParser.getValue(node, "__MAX_EMAILS__");
        String deleteFromServer = ElementParameterParser.getValue(node, "__DELETE_FROM_SERVER__");
%>

use Net::POP3;
use FileHandle;

my %desc_<%=cid %> = (
    output_directory => <%=outputDirectory %>,

    host => <%=host %>,
    username => <%=username %>,
    password => <%=password %>,

    delete_from_server => <%=deleteFromServer%>,

<%
        if (allEmails.equals("false")) {
%>
    max_emails => <%=maxEmails%>,
<%
        }
%>
);

if (not -d $desc_<%=cid%>{output_directory}) {
    use File::Path;
    eval { mkpath $desc_<%=cid%>{output_directory} };
    if ($@) {
        die 'Cannot create directory "'.$desc_<%=cid%>{output_directory}.'": '.$@;
    }
}

if (not -w $desc_<%=cid%>{output_directory}) {
    die 'Cannot write files in '.$desc_<%=cid%>{output_directory};
}

<%
        if (stats) {
%>
UpdateStat('<%=cid %>', 0);
<%
        }
%>

my @files = ();

{
    my $pop = Net::POP3->new(
        <%=host%>,
    )
        or die <%=cid%>, ' cannot connect to POP server ', <%=host%>;

    my $auth = $pop->login(<%=username%>, <%=password%>) ;
        die "Authentication error in ", <%=cid%> unless defined $auth ;

    if ( $auth > 0) {
        my $msgnums = $pop->list;
<%
        if (allEmails.equals("false")) {
%>
        my $msg_count = 0;
<%
        }
%>

        foreach my $msgnum (keys %$msgnums) {
<%
        if (allEmails.equals("false")) {
%>
            last if $msg_count++ >= <%=maxEmails%>;
<%
        }
%>
            my $msg = $pop->get($msgnum);

            my $mail_filename = <%=filenamePattern %>;

            open(EMAIL, '>'.$desc_<%=cid%>{output_directory}.'/'.$mail_filename);
            print {EMAIL} @$msg;
            close(EMAIL);

            $_globals{<%=cid %>}{NB_EMAIL}++;
            push @files, $mail_filename;
<%
        if (deleteFromServer.equals("true")) {
%>
            $pop->delete($msgnum);
<%
        }
%>
<%
        if (stats) {
%>
            UpdateStat('<%=cid %>', 1);
<%
        }
%>
        }
    }

    $pop->quit;
}

<%
        if (stats) {
%>
UpdateStat('<%=cid %>', 0, 2);
<%
        }
%>

for my $filename (@files) {
    $_globals{<%=cid %>}{CURRENT_FILE} = $filename;
    $_globals{<%=cid %>}{CURRENT_FILEPATH} = $desc_<%=cid%>{output_directory}.'/'.$filename;
<%
    }
}
%>
