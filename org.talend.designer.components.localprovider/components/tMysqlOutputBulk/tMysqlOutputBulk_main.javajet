<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.metadata.IMetadataTable
		org.talend.core.model.metadata.IMetadataColumn
    	org.talend.core.model.process.ElementParameterParser		
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory 
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
		java.util.List
	"
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();
List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
    IMetadataTable metadata = metadatas.get(0);
    if (metadata!=null) {
    
        boolean checkDiskSpace = ("true").equals(ElementParameterParser.getValue(node,"__CHECK_DISK_SPACE__"));
    	boolean flushOnRow = ("true").equals(ElementParameterParser.getValue(node, "__FLUSHONROW__"));
    	String flushMod = ElementParameterParser.getValue(node, "__FLUSHONROW_NUM__");
    	
        String encoding = ElementParameterParser.getValue(node,"__ENCODING__");    	
    	
    	List< ? extends IConnection> conns = node.getIncomingConnections();
        	if(conns!=null){
        		if (conns.size()>0){
        		    IConnection conn =conns.get(0);
            		if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
            			List<IMetadataColumn> columns = metadata.getListColumns();
                		int sizeColumns = columns.size();
            			%> 
            			StringBuilder sb_<%=cid%> = new StringBuilder();
            			String column_value_<%=cid%> = ""; 	
                    	<%
            			for (int i = 0; i < sizeColumns; i++) {
                			IMetadataColumn column = columns.get(i);
                			JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
                			String pattern = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
                			%>
                			sb_<%=cid%>.append(textEnclosure_<%=cid %>);
                			<%
                			if(JavaTypesManager.isJavaPrimitiveType( column.getTalendType(), column.isNullable())){
                			
                				if(javaType == JavaTypesManager.BOOLEAN ){
                				%>
                					column_value_<%=cid%> = String.valueOf(
                							true == <%=conn.getName() %>.<%=column.getLabel() %> ?"1":"0"
                							);
                				<%
                				} else {
                			    %>
                			    	column_value_<%=cid%> = String.valueOf(<%=conn.getName() %>.<%=column.getLabel() %>);
                			    <%
                			    }
                			}else {
                			    %>
                			    if(<%=conn.getName() %>.<%=column.getLabel() %> != null){
                			        <%					
                			        if(javaType == JavaTypesManager.STRING ){
                			            %>
                			            column_value_<%=cid%> = <%=conn.getName() %>.<%=column.getLabel() %>.replaceAll("\\\\","\\\\\\\\");
                			            if(!"\\".equals(textEnclosure_<%=cid %>+"") || !"\\".equals(escapeChar_<%=cid %>+"")){
                			            	column_value_<%=cid%> = column_value_<%=cid%>.replaceAll(""+textEnclosure_<%=cid %>,""+textEnclosure_<%=cid %>+textEnclosure_<%=cid %>);
                			            }
                			            <%
                			        }else if(javaType == JavaTypesManager.DATE && pattern != null){
                			            %>
                			            column_value_<%=cid%> = FormatterUtils.format_Date(<%=conn.getName() %>.<%=column.getLabel() %>, <%= pattern %>);
                			            <%
                			        }else if(javaType == JavaTypesManager.BYTE_ARRAY){
                			            %>
                			            column_value_<%=cid%> = java.nio.charset.Charset.forName(<%=encoding %>).decode(java.nio.ByteBuffer.wrap(<%=conn.getName() %>.<%=column.getLabel() %>)).toString();
                			            <%
                			        }else if(javaType == JavaTypesManager.BOOLEAN ){
                					%>
                						column_value_<%=cid%> = String.valueOf(
                							true == <%=conn.getName() %>.<%=column.getLabel() %> ?"1":"0"
                							);
                					<%
                					}	             			        
                			        else{
                			            %>
                			            column_value_<%=cid%> = String.valueOf(<%=conn.getName() %>.<%=column.getLabel() %>);
                			            <%
                			        }
                			        %>                			    
                			    }else{
                			    	column_value_<%=cid%> = "\\N";
                			    }
                		 <% 
                			}
						%>
                		sb_<%=cid%>.append(column_value_<%=cid%>);
                		column_value_<%=cid%>="\\N";
						sb_<%=cid%>.append(textEnclosure_<%=cid %>);
						<%
							if(i<sizeColumns-1){%>
								sb_<%=cid%>.append(fieldSeparator_<%=cid %>);
						<%
							}
            			} 
						%>
						sb_<%=cid%>.append(rowSeparator_<%=cid %>);
	            			<%if(checkDiskSpace){%>
	            				diskSpace_<%=cid%> = file_<%=cid %>.getFreeSpace();
	            				if(diskSpace_<%=cid%> <= 0){
									throw new java.io.IOException("The disk space is not enough,please check it!");
								}
	            			<%}%>
            			    out_<%=cid %>.write(sb_<%=cid%>.toString());	
	            			<%if(checkDiskSpace){%>
        			    		out_<%=cid %>.flush();
	            			<%}%>
            			    <% if(flushOnRow) { %>
        		                if(nb_line_<%=cid %>%<%=flushMod %> == 0) {            			    
            			    		out_<%=cid %>.flush();
            			    	}	 
            			    <%}%>
            				nb_line_<%=cid %>++;
            			<%   		
            		}
        		
        		}
        	}
    }
}
%>
