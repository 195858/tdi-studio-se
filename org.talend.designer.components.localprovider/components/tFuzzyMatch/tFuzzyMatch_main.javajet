<%@ jet
imports="
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.EConnectionType
    org.talend.core.model.process.IConnectionCategory
    org.talend.core.model.process.INode
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn 
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.List
"
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();
	
List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
    IMetadataTable metadata = metadatas.get(0);
    
    String colName = ElementParameterParser.getValue(node, "__MATCH__");
    String matchingType = ElementParameterParser.getValue(node, "__MATCHING_TYPE__");
    String min = ElementParameterParser.getValue(node, "__MIN__");
    if(min.equals("")){
    	min="0";
    }
    String max = ElementParameterParser.getValue(node, "__MAX__");
    if(max.equals("")){
    	max="0";
    }

	String uniqueS = ElementParameterParser.getValue(node, "__GET_UNIQUE__");
	boolean unique = uniqueS.equals("true");
	String caseS = ElementParameterParser.getValue(node, "__CASE_SENSITIVE__");
	boolean caseSens = caseS.equals("true");
	String separator = ElementParameterParser.getValue(node, "__ITEMSEPARATOR__");
	String lookUpColumn = ElementParameterParser.getValue(node, "__LOOKUP_COLUMN__");
	lookUpColumn = lookUpColumn.substring(lookUpColumn.indexOf(".") + 1);

    List< ? extends IConnection> conns = node.getIncomingConnections();
    IConnection inRefCon = null;
    IConnection inMainCon = null;
    for (IConnection connection : conns) {
        if (connection == null) {
            continue;
        }
        EConnectionType connectionType = connection.getLineStyle();
        if (connectionType == EConnectionType.FLOW_MAIN) {
            inMainCon = connection;
        } else if (connectionType == EConnectionType.FLOW_REF) {
            inRefCon = connection;
        }
    }
	conns = null;

	conns = node.getOutgoingSortedConnections();
	String firstConnName = "";
	if (conns!=null) {
		if (conns.size()>0) {
			IConnection conn = conns.get(0);
			firstConnName = conn.getName();
			
			if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
				List<IMetadataColumn> listColumns = inMainCon.getMetadataTable().getListColumns();
				int sizeListColumns = listColumns.size();
				for (int valueN=0; valueN<sizeListColumns; valueN++) {
					IMetadataColumn column = listColumns.get(valueN);%>
					<%=conn.getName() %>.<%=column.getLabel() %> = <%=inMainCon.getName() %>.<%=column.getLabel() %>;

				<%				
				}
				%>
                if(<%=conn.getName() %>.DISTANCE != null){
                
                	<%=conn.getName() %>.DISTANCE = null;
                }
                if(<%=conn.getName() %>.MATCHING != null){
                	
                <%=conn.getName() %>.MATCHING = null;
                
                }				
							
				java.util.Iterator<<%=inRefCon.getName() %>Struct> tItr_<%=inRefCon.getName() %>_<%=cid %> = tSet_<%=inRefCon.getName() %>_<%=cid %>.iterator();

                <%
                if(matchingType.equals("matchLevenshteinDistance")){
                %>
                    int value_<%=cid %> = invalid_dis_<%=cid %>;
                    
                    String tomatch_<%=cid %> = ("" + <%=inMainCon.getName() %>.<%=colName%>)<%if(!caseSens){%>.toLowerCase()<%}%>;
                
                <%
                	if(unique){
                %>
                        String matching_<%=cid %> = null;
                        
                        while(tItr_<%=inRefCon.getName() %>_<%=cid %>.hasNext()){
                        
                        	String lookUpValue_<%=cid%> = "" + tItr_<%=inRefCon.getName() %>_<%=cid %>.next().<%=lookUpColumn%>;
                        	
                        	int distance_<%=cid%> = org.apache.commons.lang.StringUtils.getLevenshteinDistance(tomatch_<%=cid %>, lookUpValue_<%=cid%><%if(!caseSens){%>.toLowerCase()<%}%>);
                        	
                        	if(distance_<%=cid%> < value_<%=cid%>){
                        		
                        		if(distance_<%=cid%> >= <%=min%>){
                        		
                        			value_<%=cid %> = distance_<%=cid%>;
                        			
                        			matching_<%=cid %> = lookUpValue_<%=cid%>;		
                        			
                        		}
                        		
                        		if(value_<%=cid %> == <%=min%>){
                        		
                        			break;
                        							
                        		}
                        	}
                        	
                        }
                        
                        if(value_<%=cid%> >= <%=min%> && value_<%=cid%> <= <%=max%>){
                        
                        	<%=conn.getName() %>.DISTANCE = value_<%=cid %> + "";
                        
                        	<%=conn.getName() %>.MATCHING = matching_<%=cid %>;
                        	
                        }
                
                <%
                	}else{
                %>
                		StringBuilder matching_<%=cid %> = new StringBuilder();
                
                        while(tItr_<%=inRefCon.getName() %>_<%=cid %>.hasNext()){
                        
                        	String lookUpValue_<%=cid%> = "" + tItr_<%=inRefCon.getName() %>_<%=cid %>.next().<%=lookUpColumn%>;
                        	
                        	int distance_<%=cid%> = org.apache.commons.lang.StringUtils.getLevenshteinDistance(tomatch_<%=cid %>, lookUpValue_<%=cid%><%if(!caseSens){%>.toLowerCase()<%}%>);
                        	
                        	if(distance_<%=cid%> < value_<%=cid%>){
                        		
                        		if(distance_<%=cid%> >= <%=min%>){
                        		
                        			value_<%=cid %> = distance_<%=cid%>;
                        			
                        			matching_<%=cid %>.append(lookUpValue_<%=cid%>);		
                        			
                        		}
                        		
                        	}else if(distance_<%=cid%> == value_<%=cid%> && value_<%=cid%> <= <%=max%>){
                        
                        		matching_<%=cid %>.append(<%=separator%>).append(lookUpValue_<%=cid%>);
                        
                        	}
                        	
                        }
                        
                        if(value_<%=cid %> >= <%=min%> && value_<%=cid %> <= <%=max%>){
                        
                        	<%=conn.getName() %>.DISTANCE = value_<%=cid %> + "";
                        
                        	<%=conn.getName() %>.MATCHING = matching_<%=cid %>.toString();
                        	
                        }
                
                <%
                	}
                }else if(matchingType.equals("matchMetaphone")){%>
                
                	<%=conn.getName()%>.DISTANCE = metaphone_<%=cid %>.metaphone("" + <%=inMainCon.getName() %>.<%=colName%>);
                
                <%
                	if(unique){
                %>
                        while(tItr_<%=inRefCon.getName() %>_<%=cid %>.hasNext()){
                        
                        	String lookUpValue_<%=cid%> = "" + tItr_<%=inRefCon.getName() %>_<%=cid %>.next().<%=lookUpColumn%>;
                        	
                        	if(metaphone_<%=cid %>.metaphone(lookUpValue_<%=cid%>).equals(<%=conn.getName()%>.DISTANCE)){
                        	
                        		<%=conn.getName() %>.MATCHING = lookUpValue_<%=cid%>;
                        		
                        		break;
                        	
                        	}
                        	
                        }
                
                <%
                	}else{
                %>
                        StringBuilder matching_<%=cid%> = null;
                        
                        while(tItr_<%=inRefCon.getName()%>_<%=cid%>.hasNext()){
                        
                        	String lookUpValue_<%=cid%> = "" + tItr_<%=inRefCon.getName() %>_<%=cid%>.next().<%=lookUpColumn%>;
                        	
                        	if(metaphone_<%=cid%>.metaphone(lookUpValue_<%=cid%>).equals(<%=conn.getName()%>.DISTANCE)){
                        	
                        		if(matching_<%=cid%> == null){
                        			
                        			matching_<%=cid%> = new StringBuilder(lookUpValue_<%=cid%>);
                        		
                        		}else{
                        		
                        			matching_<%=cid%>.append(<%=separator%>).append(lookUpValue_<%=cid%>);
                        			
                        		}
                        	
                        	}
                        	
                        }
                        
                        if(matching_<%=cid%> != null){
                        
                        	<%=conn.getName()%>.MATCHING = matching_<%=cid%>.toString();
                        	
                        }
                
                <%
                	}
                }else{%>
                	<%=conn.getName() %>.DISTANCE = doublemetaphone_<%=cid %>.doubleMetaphone("" + <%=inMainCon.getName() %>.<%=colName %>);
                
                <%
                	if(unique){
                %>
                        while(tItr_<%=inRefCon.getName() %>_<%=cid %>.hasNext()){
                        
                        	String lookUpValue_<%=cid%> = "" + tItr_<%=inRefCon.getName() %>_<%=cid %>.next().<%=lookUpColumn%>;
                        	
                        	if(doublemetaphone_<%=cid%>.doubleMetaphone(lookUpValue_<%=cid%>).equals(<%=conn.getName()%>.DISTANCE)){
                        	
                        		<%=conn.getName()%>.MATCHING = lookUpValue_<%=cid%>;
                        		
                        		break;
                        	
                        	}
                        	
                        }
                
                <%
                	}else{
                %>
                        StringBuilder matching_<%=cid %> = null;
                        
                        while(tItr_<%=inRefCon.getName() %>_<%=cid %>.hasNext()){
                        
                        	String lookUpValue_<%=cid%> = "" + tItr_<%=inRefCon.getName() %>_<%=cid %>.next().<%=lookUpColumn%>;
                        	
                        	if(doublemetaphone_<%=cid %>.doubleMetaphone(lookUpValue_<%=cid%>).equals(<%=conn.getName()%>.DISTANCE)){
                        	
                        		if(matching_<%=cid %> == null){
                        			
                        			matching_<%=cid %> = new StringBuilder(lookUpValue_<%=cid%>);
                        		
                        		}else{
                        		
                        			matching_<%=cid %>.append(<%=separator%>).append(lookUpValue_<%=cid%>);
                        			
                        		}
                        	
                        	}
                        	
                        }
                        
                        if(matching_<%=cid%> != null){
                        
                        	<%=conn.getName()%>.MATCHING = matching_<%=cid%>.toString();
                        	
                        }
                
                <%
                	}
                }%>
                nb_line_<%=cid%>++;

	
<%
			}
		}
		if (conns.size()>1) {
			for (int i=1;i<conns.size();i++) {
				IConnection conn = conns.get(i);
				if ((conn.getName().compareTo(firstConnName)!=0)&&(conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA))) {
			    	 for (IMetadataColumn column: metadata.getListColumns()) {%>
						<%=conn.getName() %>.<%=column.getLabel() %> = <%=firstConnName %>.<%=column.getLabel() %>;    				
<%
				 	}
				}
			}
		}
	}
}
%>