<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.process.ElementParameterParser
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.List
    java.util.Map
    org.talend.commons.utils.StringUtils
"
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
    IMetadataTable metadata = metadatas.get(0);
    if (metadata!=null) {
        List<Map<String, String>> operations = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__OPERATIONS__");
        List<Map<String, String>> groupbys = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__GROUPBYS__");
        String destination = ElementParameterParser.getValue(node, "__DESTINATION__");

%>
our @<%=destination%>;

<%
        String indent = new String();

        for (int keyNum = 1; keyNum <= groupbys.size(); keyNum++) {
            StringBuffer hashString = new StringBuffer();

            if (keyNum > 1) {
                hashString.append("%{$");
                hashString.append(destination);

                for (int j = 1; j < keyNum; j++) {
                    hashString.append("{$key");
                    hashString.append(j);
                    hashString.append("}");
                }

                hashString.append("}");
            }
            else {
                hashString.append("%");
                hashString.append(destination);
            }

            indent = StringUtils.repeat("    ", keyNum - 1);
%>
<%=indent%>foreach my $key<%=keyNum%> (keys <%=hashString%>) {
<%
        }
%>
<%=indent%>    my $row = [];
<%
        StringBuffer hashKey = new StringBuffer();

        for (int keyNum = 1; keyNum <= groupbys.size(); keyNum++) {
            Map<String, String> groupby = groupbys.get(keyNum - 1);

            hashKey.append("{$key");
            hashKey.append(keyNum);
            hashKey.append("}");

            StringBuffer indexName = new StringBuffer();
            indexName.append(destination);
            indexName.append("__");
            indexName.append(groupby.get("OUTPUT_COLUMN"));
%>
<%=indent%>    $row->[<%=indexName%>] = $key<%=keyNum%>;
<%
        }

        for(int opNum = 1; opNum <= operations.size(); opNum++) {
            Map<String, String> operation = operations.get(opNum - 1);
            String function = operation.get("FUNCTION");

            StringBuffer indexName = new StringBuffer();
            indexName.append(destination);
            indexName.append("__");
            indexName.append(operation.get("OUTPUT_COLUMN"));

            StringBuffer operationString = new StringBuffer();
            // operationString must contain something like:
            // $hash{ $row1[0] }{ $row1[1] }{operation1}
            operationString.append("$");
            operationString.append(destination);
            operationString.append(hashKey.toString());
            operationString.append("{operation");
            operationString.append(opNum);
            operationString.append("}");

            StringBuffer expression = new StringBuffer();
            expression.append(operationString);

            if (function.equals("sum")) {
                expression.append("{sum}");
            }
            else if (function.equals("avg")) {
                expression.append("{sum} / ");
                expression.append(operationString);
                expression.append("{cardinality}");
            }
            else if (function.equals("count")) {
                expression.append("{cardinality}");
            }
            else if (function.equals("min")) {
                expression.append("{min}");
            }
            else if (function.equals("max")) {
                expression.append("{max}");
            }
            else if (function.equals("first")) {
                expression.append("{first}");
            }
            else if (function.equals("last")) {
                expression.append("{last}");
            }
%>
<%=indent%>    $row->[<%=indexName%>] = <%=expression%>;
<%
        }
%>

<%=indent%>    push(@<%=destination%>, $row);
<%
        for (int keyNum = groupbys.size(); keyNum >= 1; keyNum--) {
            indent = StringUtils.repeat("    ", keyNum - 1);
%>
<%=indent%>}
<%
        }
%>

# use Data::Dumper;
# print Dumper(\%<%=destination%>);
# print Dumper(\@<%=destination%>);

<%
    }
}
%>
