<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.metadata.IMetadataTable
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.IConnectionCategory
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.metadata.types.JavaTypesManager
	org.talend.core.model.metadata.types.JavaType
    java.util.List
    java.util.Map
"
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();
List< ? extends IConnection> conns = node.getIncomingConnections();
for (IConnection conn : conns) {
	if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
		List<Map<String, String>> operations = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__OPERATIONS__");
        List<Map<String, String>> groupbys = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__GROUPBYS__");
        IMetadataTable inMetadata = conn.getMetadataTable();
		List<IMetadataColumn> columns = inMetadata.getListColumns();
		int sizeOperations = operations.size();
		int sizeGroupbys = groupbys.size();
		String lastInputColumn = null;
		if(sizeGroupbys>0){
			lastInputColumn = groupbys.get(sizeGroupbys-1).get("INPUT_COLUMN");
		}
		
		
		//pretreatment opreations before aggregating
		
		//modify06-05 begin
String[] groupby_type = new String[sizeGroupbys];
for(int i = 0; i < sizeGroupbys; i++){
	String columnname = groupbys.get(i).get("INPUT_COLUMN");
	List<? extends IConnection> incomingConnections = node.getIncomingConnections();
    if (incomingConnections != null && !incomingConnections.isEmpty()) {
    	for (IConnection conne : incomingConnections) {
			if (conne.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
        		IMetadataTable inMetadatat = conne.getMetadataTable();
       			for (IMetadataColumn column: inMetadatat.getListColumns()) {
            		if(column.getLabel().equals(columnname)){
						JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
						if(javaType == JavaTypesManager.BOOLEAN){
							groupby_type[i] = "Boolean";
						}else if(javaType == JavaTypesManager.BYTE){
							groupby_type[i] = "Byte";
						}else if(javaType == JavaTypesManager.BYTE_ARRAY){
							groupby_type[i] = "byte[]";
						}else if(javaType == JavaTypesManager.CHARACTER){
							groupby_type[i] = "Character";
						}else if(javaType == JavaTypesManager.DATE){
							groupby_type[i] = "java.util.Date";
						}else if(javaType == JavaTypesManager.DOUBLE){
							groupby_type[i] = "Double";
						}else if(javaType == JavaTypesManager.FLOAT){
							groupby_type[i] = "Float";
						}else if(javaType == JavaTypesManager.INTEGER){
							groupby_type[i] = "Integer";
						}else if(javaType == JavaTypesManager.LONG){
							groupby_type[i] = "Long";
						}else if(javaType == JavaTypesManager.SHORT){
							groupby_type[i] = "Short";
						}else if(javaType == JavaTypesManager.STRING){
							groupby_type[i] = "String";
						}else if(javaType == JavaTypesManager.OBJECT){
							groupby_type[i] = "Object";
						}
						break;
            		}
				}
			}
		}
  	}
}
//modify06-05 end
		
		List<String[]> funinOperations = new java.util.ArrayList<String[]>();
		next:
		for(int i=0; i<sizeOperations; i++){
			Map<String, String> operation = operations.get(i);
			String fun = operation.get("FUNCTION");
			String in = operation.get("INPUT_COLUMN");
			String ignoreNull = operation.get("IGNORE_NULL");
			if(fun.equals("sum") || fun.equals("count")){
				for(int j=0; j<sizeOperations; j++){
					Map<String, String> tOperation = operations.get(j);
					if(tOperation.get("FUNCTION").equals("avg") && tOperation.get("INPUT_COLUMN").equals(in)){
						continue next;
					}
				}
			}
			for(int j = 0; j < i; j++){//skip depulicate operation
				Map<String, String> tOperation = operations.get(j);
				if(tOperation.get("FUNCTION").equals(fun) && tOperation.get("INPUT_COLUMN").equals(in)){
					continue next;
				}
			}
			if(fun.equals("avg")){
				String[] funin = new String[3];
				funin[0]="sum";
				funin[1]=in;
				funin[2]=ignoreNull;
				funinOperations.add(funin);
				funin=new String[3];
				funin[0]="count";
				funin[1]=in;
				funin[2]=ignoreNull;
				funinOperations.add(funin);
			}else{
				String[] funin = new String[3];
				funin[0]=fun;
				funin[1]=in;
				funin[2]=ignoreNull;
				funinOperations.add(funin);
			}
		}
		int sizeOps = funinOperations.size();
		String tInputColumn =null;
		
		for (int i=0; i<sizeGroupbys; i++) {
           	Map<String, String> groupby = groupbys.get(i);
			String inputColumn = groupby.get("INPUT_COLUMN");
			String nextInputColumn = null;
			if(i==0){
//
//end%>
//String key_<%=cid %> = null;
<%//start
//
			}
			if(i != sizeGroupbys - 1){
				nextInputColumn = groupbys.get(i+1).get("INPUT_COLUMN");
			}
			if(i < sizeGroupbys-1){
%>
//key_<%=cid %> = String.valueOf(<%=conn.getName() %>.<%=inputColumn %>);
if(hash_<%=inputColumn %>_<%=cid %>.containsKey(<%=conn.getName() %>.<%=inputColumn %>)){
	hash_<%=nextInputColumn  %>_<%=cid %> = hash_<%=inputColumn %>_<%=cid %>.get(<%=conn.getName() %>.<%=inputColumn %>);                    
}else{
	hash_<%=nextInputColumn  %>_<%=cid %> = new <%
//start
//
					for(int j = i+1; j < sizeGroupbys; j++){
						if(j == sizeGroupbys - 1){
							if(sizeOps == 0){
//
//end
%>java.util.<%if(j == i+1){%>Hash<%}%>Set<<%=groupby_type[j] %> <%
//start
//
							}else{
//
//end
%>java.util.<%if(j == i+1){%>Hash<%}%>Map<<%=groupby_type[j] %>, OperationStruct<%=cid %><%
//start
//
							}
						}else{
//
//end
%>java.util.<%if(j == i+1){%>Hash<%}%>Map<<%=groupby_type[j] %>,<%
//start
//
						}
					}
					for(int j = i+1; j < sizeGroupbys; j++){
//
//end
%>><%
//start
//
					}
//
//end
%>();
	hash_<%=inputColumn %>_<%=cid %>.put(<%=conn.getName() %>.<%=inputColumn %>,hash_<%=nextInputColumn %>_<%=cid %>);
}
<%//start
//
				}else{
					tInputColumn = inputColumn;
					if(sizeOps > 0 ){
//
//end%>
//key_<%=cid %> = String.valueOf(<%=conn.getName() %>.<%=inputColumn %>);
if(hash_<%=inputColumn %>_<%=cid %>.containsKey(<%=conn.getName() %>.<%=inputColumn %>)){
	operation_result_<%=cid %> = hash_<%=inputColumn %>_<%=cid %>.get(<%=conn.getName() %>.<%=inputColumn %>);                    
}else{
	operation_result_<%=cid %> = new OperationStruct<%=cid %>();
<%//start
//
					}else{%>
//key_<%=cid %> = String.valueOf(<%=conn.getName() %>.<%=inputColumn %>);
<%
					}
				}
			}
			if(sizeOps>0 && sizeGroupbys == 0){
%>
if(operation_result_<%=cid %> == null){
	operation_result_<%=cid %> = new OperationStruct<%=cid %>();
<%
			}
%>

<%//start
//
		for(int j = 0; j < sizeOps; j++){
			String[] funin = funinOperations.get(j);
			if(funin[0].equals("first")||funin[0].equals("min")||funin[0].equals("max")){
//
//end%>
operation_result_<%=cid %>.<%=funin[1] %>_<%=funin[0] %> = <%=conn.getName() %>.<%=funin[1]  %>;
<%//start
//
			}
		}
//
//end%>

<%
		if(sizeGroupbys > 0){
			if(sizeOps>0){
%>
	hash_<%=tInputColumn %>_<%=cid %>.put(<%=conn.getName() %>.<%=lastInputColumn %>, operation_result_<%=cid %>);
}
<%
			}else{
%>
	hash_<%=tInputColumn %>_<%=cid %>.add(<%=conn.getName() %>.<%=lastInputColumn %>);		
<%
			}
		}else if(sizeOps > 0){%>
}
<%
		}
%>

<%//start
//
		JavaType javaType = null;
        for(int j = 0; j < sizeOps; j++){
			String[] funin = funinOperations.get(j);
            for (IMetadataColumn column: columns) {
            	if(column.toString().equals(funin[1])){
            		javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
            			break;
            	}
            }
			if(funin[0].equals("min")||funin[0].equals("max")){
				if(javaType == JavaTypesManager.BYTE_ARRAY || javaType == JavaTypesManager.OBJECT){
					//do nothing here
				}else if(javaType == JavaTypesManager.STRING || javaType == JavaTypesManager.DATE){
					if(!funin[2].equals("true")){
//
//end%>
if(operation_result_<%=cid %>.<%=funin[1] %>_<%=funin[0] %>.compareTo(<%=conn.getName() %>.<%=funin[1] %>) <%if(funin[0].equals("min")){%>><%}else{%><<%}%> 0){
	operation_result_<%=cid %>.<%=funin[1] %>_<%=funin[0] %> = <%=conn.getName() %>.<%=funin[1] %>;
}
<%//start
//
					}else{
//
//end%>
if(operation_result_<%=cid %>.<%=funin[1] %>_<%=funin[0] %> == null){
	if(<%=conn.getName() %>.<%=funin[1] %> != null){
		operation_result_<%=cid %>.<%=funin[1] %>_<%=funin[0] %> = <%=conn.getName() %>.<%=funin[1] %>;
	}
}else if(<%=conn.getName() %>.<%=funin[1] %> != null){
	if(operation_result_<%=cid %>.<%=funin[1] %>_<%=funin[0] %>.compareTo(<%=conn.getName() %>.<%=funin[1] %>) <%if(funin[0].equals("min")){%>><%}else{%><<%}%> 0){
		operation_result_<%=cid %>.<%=funin[1] %>_<%=funin[0] %> = <%=conn.getName() %>.<%=funin[1] %>;
	}
}
<%//start
//
					}
				}else if(javaType == JavaTypesManager.BOOLEAN){
					if(!funin[2].equals("true")){
//
//end%>
if(<%if(funin[0].equals("min")){%>!<%}%><%=conn.getName() %>.<%=funin[1] %>){
	if(<%if(funin[0].equals("max")){%>!<%}%>operation_result_<%=cid %>.<%=funin[1] %>_<%=funin[0] %>){
		operation_result_<%=cid %>.<%=funin[1] %>_<%=funin[0] %> = <%if(funin[0].equals("min")){%>false<%}else{%>true<%}%>;
	}
}
<%//start
//
					}else{
//
//end%>
if(operation_result_<%=cid %>.<%=funin[1] %>_<%=funin[0] %> == null){
	if(<%=conn.getName() %>.<%=funin[1] %> != null){
		operation_result_<%=cid %>.<%=funin[1] %>_<%=funin[0] %> = <%=conn.getName() %>.<%=funin[1] %>;
	}
}else if(<%=conn.getName() %>.<%=funin[1] %> != null){
    if(<%if(funin[0].equals("min")){%>!<%}%><%=conn.getName() %>.<%=funin[1] %>){
    	if(<%if(funin[0].equals("max")){%>!<%}%>operation_result_<%=cid %>.<%=funin[1] %>_<%=funin[0] %>){
    		operation_result_<%=cid %>.<%=funin[1] %>_<%=funin[0] %> = <%if(funin[0].equals("min")){%>false<%}else{%>true<%}%>;
    	}
    }
}
<%//start
//
					}
				}else{
					//for numbers(byte, char, short, int, long, float, double)
					if(!funin[2].equals("true")){
//
//end%>
if(operation_result_<%=cid %>.<%=funin[1] %>_<%=funin[0] %><%if(javaType == JavaTypesManager.BIGDECIMAL){%>.doubleValue()<%}%>  - <%=conn.getName() %>.<%=funin[1] %><%if(javaType == JavaTypesManager.BIGDECIMAL){%>.doubleValue()<%}%> <%if(funin[0].equals("min")){%>><%}else{%><<%}%> 0){
	operation_result_<%=cid %>.<%=funin[1] %>_<%=funin[0] %> = <%=conn.getName() %>.<%=funin[1] %>;
}
<%//start
//
					}else{
//
//end%>
if(operation_result_<%=cid %>.<%=funin[1] %>_<%=funin[0] %> == null){
	if(<%=conn.getName() %>.<%=funin[1] %> != null){
		operation_result_<%=cid %>.<%=funin[1] %>_<%=funin[0] %> = <%=conn.getName() %>.<%=funin[1] %>;
	}
}else if(<%=conn.getName() %>.<%=funin[1] %> != null){
    if(operation_result_<%=cid %>.<%=funin[1] %>_<%=funin[0] %><%if(javaType == JavaTypesManager.BIGDECIMAL){%>.doubleValue()<%}%>  - <%=conn.getName() %>.<%=funin[1] %><%if(javaType == JavaTypesManager.BIGDECIMAL){%>.doubleValue()<%}%> <%if(funin[0].equals("min")){%>><%}else{%><<%}%> 0){
		operation_result_<%=cid %>.<%=funin[1] %>_<%=funin[0] %> = <%=conn.getName() %>.<%=funin[1] %>;
	}
}
<%//start
//
					}
				}
			}
			if(funin[0].equals("sum")){
				if(javaType == JavaTypesManager.BYTE_ARRAY || javaType == JavaTypesManager.OBJECT 
					|| javaType == JavaTypesManager.STRING || javaType == JavaTypesManager.BOOLEAN
					|| javaType == JavaTypesManager.DATE){
					//do nothing here
				}else if(javaType == JavaTypesManager.BIGDECIMAL){
					if(!funin[2].equals("true")){
//
//end%>
operation_result_<%=cid %>.<%=funin[1] %>_sum = operation_result_<%=cid %>.<%=funin[1] %>_sum.add(<%=conn.getName() %>.<%=funin[1] %>);
<%//start
//
					}else{
//
//end%>
if(<%=conn.getName() %>.<%=funin[1] %> != null){
	operation_result_<%=cid %>.<%=funin[1] %>_sum = operation_result_<%=cid %>.<%=funin[1] %>_sum.add(<%=conn.getName() %>.<%=funin[1] %>);
}
<%//start
//
					}
				}else{
					if(!funin[2].equals("true")){
//
//end%>
operation_result_<%=cid %>.<%=funin[1] %>_sum = operation_result_<%=cid %>.<%=funin[1] %>_sum.add(BigDecimal.valueOf(<%=conn.getName() %>.<%=funin[1] %>));
<%//start
//
					}else{
//
//end%>
if(<%=conn.getName() %>.<%=funin[1] %> != null){
	operation_result_<%=cid %>.<%=funin[1] %>_sum = operation_result_<%=cid %>.<%=funin[1] %>_sum.add(BigDecimal.valueOf(<%=conn.getName() %>.<%=funin[1] %>));
}
<%//start
//
					}
				}
			}
			if(funin[0].equals("count")){
				if(!funin[2].equals("true")){
//
//end%>
operation_result_<%=cid %>.<%=funin[1] %>_count ++;
<%//start
//
				}else{
//
//end%>
if(<%=conn.getName() %>.<%=funin[1] %> != null){
	operation_result_<%=cid %>.<%=funin[1] %>_count ++;
}
<%//start
//
				}
			}
			if(funin[0].equals("first") && funin[2].equals("true")){
//
//end%>
//get the first value that is not null
if((operation_result_<%=cid %>.<%=funin[1] %>_<%=funin[0] %> == null) && (<%=conn.getName() %>.<%=funin[1] %> != null)){
	operation_result_<%=cid %>.<%=funin[1] %>_<%=funin[0] %> = <%=conn.getName() %>.<%=funin[1]  %>;
}
<%//start
//
			}
			if(funin[0].equals("last")){
					if(!funin[2].equals("true")){
//
//end%>
operation_result_<%=cid %>.<%=funin[1] %>_last = <%=conn.getName() %>.<%=funin[1] %>;
<%//start
//
					}else{
//
//end%>
if(<%=conn.getName() %>.<%=funin[1] %> != null){
	operation_result_<%=cid %>.<%=funin[1] %>_last = <%=conn.getName() %>.<%=funin[1] %>;
}
<%//start
//
					}
			}
			if(funin[0].equals("list")){
				if(!funin[2].equals("true")){
//
//end%>
operation_result_<%=cid %>.<%=funin[1] %>_list = (operation_result_<%=cid %>.<%=funin[1] %>_list.length() == 0) ? String.valueOf(<%=conn.getName() %>.<%=funin[1] %>) : (operation_result_<%=cid %>.<%=funin[1] %>_list + delimiter_<%=cid %> + <%=conn.getName() %>.<%=funin[1] %>);
<%//start
//
				}else{
//
//end%>
if(<%=conn.getName() %>.<%=funin[1] %> != null){
	operation_result_<%=cid %>.<%=funin[1] %>_list = (operation_result_<%=cid %>.<%=funin[1] %>_list.length() == 0) ? String.valueOf(<%=conn.getName() %>.<%=funin[1] %>) : (operation_result_<%=cid %>.<%=funin[1] %>_list + delimiter_<%=cid %> + <%=conn.getName() %>.<%=funin[1] %>);
}
<%//start
//
				}
			}
			if(funin[0].equals("list_object")){
				if(!funin[2].equals("true")){
//
//end%>
operation_result_<%=cid %>.<%=funin[1] %>_list_object.add(<%=conn.getName() %>.<%=funin[1] %>);
<%//start
//
				}else{
//
//end%>
if(<%=conn.getName() %>.<%=funin[1] %> != null){
	operation_result_<%=cid %>.<%=funin[1] %>_list_object.add(<%=conn.getName() %>.<%=funin[1] %>);
}
<%//start
//
				}
			}
			if(funin[0].equals("distinct")){
				if(!funin[2].equals("true")){
//
//end%>
operation_result_<%=cid %>.<%=funin[1] %>_distinct.add(<%=conn.getName() %>.<%=funin[1] %>);
<%//start
//
				}else{
//
//end%>
if(<%=conn.getName() %>.<%=funin[1] %> != null){
	operation_result_<%=cid %>.<%=funin[1] %>_distinct.add(<%=conn.getName() %>.<%=funin[1] %>);
}
<%//start
//
				}
			}
		}
//
//end
	}
}
//
//end%>
