<%@ jet 
package="org.talend.designer.codegen.translators" 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn 
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.EConnectionType
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.Map
    java.util.List
    org.talend.core.model.metadata.types.JavaTypesManager
	org.talend.core.model.metadata.types.JavaType
" 
class="FileInputXMLBegin" 
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();

String cid = node.getUniqueName();
        
List<Map<String, String>> mapping = (List<Map<String,String>>)ElementParameterParser.getObjectValueXML(node, "__MAPPING__");
String encoding = ElementParameterParser.getValue(node, "__ENCODING__");
String loopQuery = ElementParameterParser.getValue(node, "__LOOP_QUERY__"); 

String filename = ElementParameterParser.getValue(node, "__FILENAME__");
String limit = ElementParameterParser.getValue(node, "__LIMIT__");
if (limit.equals("")) {
	limit = "-1";
}

List< ? extends IConnection> conns = node.getOutgoingSortedConnections();
String firstConnName = "";
List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
	IMetadataTable metadata = metadatas.get(0);
	if (metadata!=null) {
		List<IMetadataColumn> columns=metadata.getListColumns();
		if (conns!=null) {
			if (conns.size()>0) {
				IConnection conn = conns.get(0);
				firstConnName = conn.getName();        
%>
int nb_line_<%=cid%> = 0;

javax.xml.parsers.DocumentBuilder builder = javax.xml.parsers.DocumentBuilderFactory.newInstance().newDocumentBuilder();
org.w3c.dom.Document document = builder.parse(new org.xml.sax.InputSource(new java.io.InputStreamReader(
        		new java.io.FileInputStream(<%=filename %>),<%= encoding%>)));
	
javax.xml.xpath.XPath xpath = javax.xml.xpath.XPathFactory.newInstance().newXPath();
org.w3c.dom.NodeList widgetNodes = (org.w3c.dom.NodeList) xpath.evaluate(<%=loopQuery %>, document, javax.xml.xpath.XPathConstants.NODESET);

String str<%=cid %> = "";
for (int i<%=cid %>=0;i<%=cid %><widgetNodes.getLength();i<%=cid %>++) {
	nb_line_<%=cid%>++;
	org.w3c.dom.Node widgetNode = widgetNodes.item(i<%=cid %>);
	org.w3c.dom.Node resultNode = null;
<%	
				for (int i=0;i<mapping.size();i++) { 
%>
	resultNode = (org.w3c.dom.Node) xpath.evaluate(<%=mapping.get(i).get("QUERY") %>, widgetNode, javax.xml.xpath.XPathConstants.NODE);
	if (resultNode!=null) {  
		str<%=cid %> = resultNode.getTextContent();
<%
					for(IMetadataColumn column:columns) {
						if (mapping.get(i).get("SCHEMA_COLUMN")!=null) {
							if (column.getLabel().compareTo(mapping.get(i).get("SCHEMA_COLUMN"))==0) {
								String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
								JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
								String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
								if (javaType == JavaTypesManager.STRING || javaType == JavaTypesManager.OBJECT) {
%>
		<%=conn.getName() %>.<%=column.getLabel() %> = str<%= cid %>;
<%
								} else {
									if (javaType == JavaTypesManager.DATE) {
%>
		<%=conn.getName() %>.<%=column.getLabel() %> = ParserUtils.parseTo_Date(str<%= cid %>, <%= patternValue %>);
<%
									} else {
%>
		<%=conn.getName() %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%= typeToGenerate %>(str<%= cid %>);
<%
									}
								}
							}
						}
					}
%>
	}
<%
				}
			}
			if (conns.size()>1) {
				for (int i=1;i<conns.size();i++) {
					IConnection conn = conns.get(i);
					if ((conn.getName().compareTo(firstConnName)!=0)&&((conn.getLineStyle().equals(EConnectionType.FLOW_MAIN))||(conn.getLineStyle().equals(EConnectionType.FLOW_REF)))) {
						for (IMetadataColumn column: metadata.getListColumns()) {
%>
	<%=conn.getName() %>.<%=column.getLabel() %> = <%=firstConnName %>.<%=column.getLabel() %>;
<%
						}
					}
				}
			}
		}
		
		// limit
		if (limit.compareTo("-1")!=0) {
%>
	
	if (nb_line_<%=cid %>><%=Integer.parseInt(limit)%>) {
		break;
	}
<%
		}
	}
}
%>
			
