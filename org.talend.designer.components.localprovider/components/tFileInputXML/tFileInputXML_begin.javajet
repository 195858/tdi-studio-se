<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn 
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.IConnectionCategory
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.Map
    java.util.List
    org.talend.core.model.metadata.types.JavaTypesManager
	org.talend.core.model.metadata.types.JavaType
" 
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();

String cid = node.getUniqueName();
        
List<Map<String, String>> mapping = (List<Map<String,String>>)ElementParameterParser.getObjectValueXML(node, "__MAPPING__");
String encoding = ElementParameterParser.getValue(node, "__ENCODING__");
String loopQuery = ElementParameterParser.getValue(node, "__LOOP_QUERY__"); 

String filename = ElementParameterParser.getValue(node, "__FILENAME__");
String limit = ElementParameterParser.getValue(node, "__LIMIT__");
if (limit.equals("")) {
	limit = "-1";
}

String advancedSeparatorStr = ElementParameterParser.getValue(node, "__ADVANCED_SEPARATOR__");
boolean advancedSeparator = (advancedSeparatorStr!=null&&!advancedSeparatorStr.equals(""))?advancedSeparatorStr.equals("true"):false;
String thousandsSeparator = ElementParameterParser.getValue(node, "__THOUSANDS_SEPARATOR__");
String decimalSeparator = ElementParameterParser.getValue(node, "__DECIMAL_SEPARATOR__");

List< ? extends IConnection> conns = node.getOutgoingSortedConnections();
String firstConnName = "";
List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
	IMetadataTable metadata = metadatas.get(0);
	if (metadata!=null) {
		List<IMetadataColumn> columns=metadata.getListColumns();
		if (conns!=null) {
			if (conns.size()>0) {
				IConnection conn = conns.get(0);
				firstConnName = conn.getName();        
%>
int nb_line_<%=cid%> = 0;

class XML_API_<%=cid%>{

	public boolean isDefNull(org.w3c.dom.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {
            return ((org.apache.xerces.xs.ElementPSVI) node).getNil();
        }
        return false;
    }

    public boolean isMissing(org.w3c.dom.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.w3c.dom.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getTextContent().length() == 0;
        }
        return false;
    }

    public org.w3c.dom.Node getSingleNode(org.w3c.dom.Node node, String xpath,
            com.sun.org.apache.xml.internal.utils.PrefixResolver pr) throws javax.xml.transform.TransformerException {
        com.sun.org.apache.xpath.internal.objects.XObject obj = com.sun.org.apache.xpath.internal.XPathAPI.eval(node, xpath, pr);
        return obj.nodelist().item(0);
    }

    public org.w3c.dom.NodeList getNodeList(org.w3c.dom.Node node, String xpath,
            com.sun.org.apache.xml.internal.utils.PrefixResolver pr) throws javax.xml.transform.TransformerException {
        com.sun.org.apache.xpath.internal.objects.XObject obj = com.sun.org.apache.xpath.internal.XPathAPI.eval(node, xpath, pr);
        return obj.nodelist();
    }
}

class TalendPrefixResolver_<%=cid%> implements com.sun.org.apache.xml.internal.utils.PrefixResolver {

    private java.util.Map<String, String> map = new java.util.HashMap<String, String>();

    public TalendPrefixResolver_<%=cid %>(org.w3c.dom.Node root) {
        countNSMap(root);
    }

    public String getBaseIdentifier() {
        return null;
    }

    public String getNamespaceForPrefix(String prefix) {
        if (prefix.equals("xml")) {
            return com.sun.org.apache.xml.internal.utils.Constants.S_XMLNAMESPACEURI;
        } else {
            return map.get(prefix);
        }
    }

    public String getNamespaceForPrefix(String prefix, org.w3c.dom.Node context) {
        return getNamespaceForPrefix(prefix);
    }

    public boolean handlesNullPrefixes() {
        return false;
    }

    private void countNSMap(org.w3c.dom.Node el) {
        if (el.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {
            org.w3c.dom.NamedNodeMap attris = el.getAttributes();
            for (int i = 0; i < attris.getLength(); i++) {
                org.w3c.dom.Node attr = attris.item(i);
                String aname = attr.getNodeName();
                if (aname.startsWith("xmlns")) {
                    int index = aname.indexOf(":");
                    aname = index > 0 ? aname.substring(index + 1) : aname;
                    map.put(aname, attr.getNodeValue());
                }
            }
        }
        org.w3c.dom.NodeList nodeList = el.getChildNodes();
        for (int i = 0; i < nodeList.getLength(); i++) {
            countNSMap(nodeList.item(i));
        }
    }
}

XML_API_<%=cid%> xml_api_<%=cid%> = new XML_API_<%=cid%>();
org.apache.xerces.parsers.DOMParser parser_<%=cid%> = new org.apache.xerces.parsers.DOMParser();
parser_<%=cid%>.setProperty("http://apache.org/xml/properties/dom/document-class-name",
        "org.apache.xerces.dom.PSVIDocumentImpl");
parser_<%=cid%>.setFeature("http://xml.org/sax/features/validation", true);
parser_<%=cid%>.setFeature("http://apache.org/xml/features/validation/schema", true);
parser_<%=cid%>.setFeature("http://apache.org/xml/features/validation/schema-full-checking", true);
parser_<%=cid%>.setFeature("http://xml.org/sax/features/namespaces", true);
parser_<%=cid%>.parse(<%=filename%>);
org.w3c.dom.Document doc_<%=cid%> = parser_<%=cid%>.getDocument();

TalendPrefixResolver_<%=cid%> pr_<%=cid%> = new TalendPrefixResolver_<%=cid%>(doc_<%=cid%>);
org.w3c.dom.NodeList nodelist_<%=cid %> = xml_api_<%=cid%>.getNodeList(doc_<%=cid %>,<%=loopQuery%>,pr_<%=cid%>);

org.w3c.dom.Node node_<%=cid%>  = null;
String str_<%=cid%> = null;
for (int i_<%=cid %> = 0; i_<%=cid %> < nodelist_<%=cid %>.getLength(); i_<%=cid %>++) {
	org.w3c.dom.Node tmp_<%=cid %> = nodelist_<%=cid %>.item(i_<%=cid %>);
	nb_line_<%=cid%>++;
<%
				for (int i=0;i<mapping.size();i++) { 
					String query = mapping.get(i).get("QUERY");
%>
	node_<%=cid%> = xml_api_<%=cid%>.getSingleNode(tmp_<%=cid %>,<%=query%>,pr_<%=cid%>);
<%
					for(IMetadataColumn column:columns) {
						if (mapping.get(i).get("SCHEMA_COLUMN")!=null) {
							if (column.getLabel().compareTo(mapping.get(i).get("SCHEMA_COLUMN"))==0) {
								String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
								JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
								String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
								
								boolean isNotSetDefault = false;
								if(javaType == JavaTypesManager.STRING || javaType == JavaTypesManager.DATE){
									isNotSetDefault = column.getDefault().equals("\"\"");
								}else{
									isNotSetDefault = column.getDefault().length()==0;
								}
								
								if(column.isNullable()){
%>
	if(xml_api_<%=cid%>.isMissing(node_<%=cid%> ) || xml_api_<%=cid%>.isDefNull(node_<%=cid%>)){ 
		<%=conn.getName() %>.<%=column.getLabel() %> =null;
	}else if(xml_api_<%=cid%>.isEmpty(node_<%=cid%>)){
		<%=conn.getName() %>.<%=column.getLabel() %> =<%=isNotSetDefault?JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate):column.getDefault()%>;
	}else{
<%
								}else{
%>
	if(xml_api_<%=cid%>.isMissing(node_<%=cid%>) || xml_api_<%=cid%>.isEmpty(node_<%=cid%>)){
		<%=conn.getName() %>.<%=column.getLabel() %> =<%=isNotSetDefault?JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate):column.getDefault()%>;
	}else{
<%
								}
								if (javaType == JavaTypesManager.STRING || javaType == JavaTypesManager.OBJECT) {
%>
		<%=conn.getName() %>.<%=column.getLabel() %> = node_<%=cid%>.getTextContent();
<%
								} else if (javaType == JavaTypesManager.DATE) {
%>
		<%=conn.getName() %>.<%=column.getLabel() %> = ParserUtils.parseTo_Date(node_<%=cid%>.getTextContent(), <%= patternValue %>);
<%  
								} else if(javaType == JavaTypesManager.BYTE_ARRAY){ 
%>							
		<%=conn.getName() %>.<%=column.getLabel() %> = node_<%=cid%>.getTextContent().getBytes(<%=encoding %>);
<%
								} else if(advancedSeparator && JavaTypesManager.isNumberType(javaType, column.isNullable())) { 
%>
		<%=conn.getName() %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%= typeToGenerate %>(ParserUtils.parseTo_Number(node_<%=cid%>.getTextContent(), <%= thousandsSeparator %>, <%= decimalSeparator %>));
<%
					} else {
%>
		<%=conn.getName() %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%= typeToGenerate %>(node_<%=cid%>.getTextContent());
<%
								}
%>
	}
<%
							}
						}
					}
				}
			}
			if (conns.size()>1) {
				for (int i=1;i<conns.size();i++) {
					IConnection conn = conns.get(i);
					if ((conn.getName().compareTo(firstConnName)!=0)&&(conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA))) {
						for (IMetadataColumn column: metadata.getListColumns()) {
%>
	<%=conn.getName() %>.<%=column.getLabel() %> = <%=firstConnName %>.<%=column.getLabel() %>;
<%
						}
					}
				}
			}
		}
		
		// limit
		if (limit.compareTo("-1")!=0) {
%>
	
	if (nb_line_<%=cid %>><%=Integer.parseInt(limit)%>) {
		break;
	}
<%
		}
	}
}
%>
			
