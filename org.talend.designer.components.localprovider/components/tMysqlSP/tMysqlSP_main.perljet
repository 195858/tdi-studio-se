<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.process.IConnection
    java.util.List
    java.util.ArrayList
    java.util.Map
    java.util.HashMap
    org.talend.commons.utils.StringUtils
" 
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

List<Map<String, String>> spArgs =
    (List<Map<String,String>>)ElementParameterParser.getObjectValue(
        node,
        "__SP_ARGS__"
);

String useExistingConnection = ElementParameterParser.getValue(
    node,
    "__USE_EXISTING_CONNECTION__"
);

String connection = ElementParameterParser.getValue(
    node,
    "__CONNECTION__"
);

String dbh = "dbh_";
if (useExistingConnection.equals("true")) {
    dbh+= connection;
}
else {
    dbh+= cid;
}

// searching the incoming schema
IMetadataTable inMetadata = null;
IConnection inConnection = null;
String inConnName = null;
Map<String, String> indexOfInputColum = new HashMap();

List<? extends IConnection> incomingConnections
    = node.getIncomingConnections();
if (incomingConnections != null && !incomingConnections.isEmpty()) {
    inConnection = incomingConnections.get(0);
    inMetadata = inConnection.getMetadataTable();
    inConnName = inConnection.getName();

    int index = 0;
    for (IMetadataColumn column: inMetadata.getListColumns()) {
        indexOfInputColum.put(column.getLabel(), String.valueOf(index));
        index++;
    }
}

// searching the outgoing schema
IMetadataTable metadata = null;

List<IMetadataTable> metadatas = node.getMetadataList();
if (metadatas != null && metadatas.size() > 0) {
    metadata = metadatas.get(0);
}

List<String> setVars = new ArrayList<String>();
List<String> inVars = new ArrayList<String>();
List selectVars = new ArrayList();
List outColumns = new ArrayList();
Map<String, String> typeOfColumn = new HashMap();

for (Map<String, String> spArg : spArgs) {
    String name = spArg.get("COLUMN");
    String type = spArg.get("TYPE");

    if (type.equals("INOUT") || type.equals("OUT")) {
        selectVars.add("@" + name);
        outColumns.add(name);
    }

    if (type.equals("INOUT")) {
        setVars.add(name);
    }

    if (type.equals("IN")) {
        inVars.add(name);
    }

    typeOfColumn.put(name, type);
}

String selectVarsString = StringUtils.join(
    selectVars.toArray(),
    ", "
);
%>

<%
if (setVars.size() > 0) {
%>
$sth_set_<%=cid%>->execute(
<%
    for (String setVar : setVars) {
        String inputIndex = indexOfInputColum.get(setVar);
%>
    $<%=inConnName%>->[<%=inputIndex%>],
<%
    }
%>
);
<%
}
%>

$sth_<%=cid%>->execute(
<%
    for (String inVar : inVars) {
        String inputIndex = indexOfInputColum.get(inVar);
%>
    $<%=inConnName%>->[<%=inputIndex%>],
<%
    }
%>
)
    or die '[<%=cid%>] execute problem : '.$DBI::errstr;

<%
if (metadata != null) {
    if (selectVars.size() > 0) {
%>
my $results_href_<%=cid%> = $<%=dbh%>->selectrow_hashref(
    'SELECT <%=selectVarsString%>'
)
    or die '[<%=cid%>] selectrow problem : '.$DBI::errstr;

<%
    }

    int index = 0;
    
    for (IMetadataColumn column: metadata.getListColumns()) {
        String colname = column.getLabel();
    
        if (outColumns.contains(colname)) {
%>
$<%=cid%>->[<%=index%>] = $results_href_<%=cid%>->{'@<%=colname%>'};
<%
        }
        else {
            String inputIndex = indexOfInputColum.get(colname);
%>
$<%=cid%>->[<%=index%>] = $<%=inConnName%>->[<%=inputIndex%>];
<%
        }
        index++;
    }
}
%>
