<%@ jet 
imports="
			org.talend.core.model.process.INode 
			org.talend.core.model.process.ElementParameterParser 
			org.talend.designer.codegen.config.CodeGeneratorArgument
			java.util.List
			java.util.Map
		" 
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	
	String dbhost = ElementParameterParser.getValue(node, "__HOST__");
	String dbport = ElementParameterParser.getValue(node, "__PORT__");
	String dbname= ElementParameterParser.getValue(node, "__DBNAME__");
	String dbproperties = ElementParameterParser.getValue(node, "__PROPERTIES__");
	String dbuser= ElementParameterParser.getValue(node, "__USER__");
	String dbpwd= ElementParameterParser.getValue(node, "__PASS__");
    String commitEvery = "0";//ElementParameterParser.getValue(node, "__COMMIT_EVERY__");//hive jdbc not support setAutoCommit
    String dbquery= ElementParameterParser.getValue(node, "__QUERY__");
	dbquery = dbquery.replaceAll("\n"," ");
	dbquery = dbquery.replaceAll("\r"," ");
    
	boolean usePrepareStatement = "true".equals(ElementParameterParser.getValue(node,"__USE_PREPAREDSTATEMENT__"));
%>

java.sql.Connection conn_<%=cid%> = null;
<%
	boolean setTempPath = "true".equals(ElementParameterParser.getValue(node, "__SET_TEMP_PATH__")); 
	if(setTempPath) { 
		String tempPath = ElementParameterParser.getValue(node, "__TEMP_PATH__"); 
%> 
		System.setProperty("java.io.tmpdir", <%=tempPath%>); 
<% 
	} 
	String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");
	if(("true").equals(useExistingConn)) {
		String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
		String conn = "conn_" + connection;;
		%>
		conn_<%=cid%> = (java.sql.Connection)globalMap.get("<%=conn%>");
		<%
	} else {
		String javaDbDriver = "org.apache.hadoop.hive.jdbc.HiveDriver";
		String connectionMode = ElementParameterParser.getValue(node, "__CONNECTION_MODE__");
		String hiveVersion = ElementParameterParser.getValue(node, "__HIVE_VERSION__");
		boolean setMapredJT = "true".equals(ElementParameterParser.getValue(node, "__SET_MAPRED_JT__"));
		boolean setNamenode = "true".equals(ElementParameterParser.getValue(node, "__SET_FS_DEFAULT_NAME__"));
		List<Map<String, String>> hadoopProps = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__HADOOP_ADVANCED_PROPERTIES__");
		
    	String storeByHBase = ElementParameterParser.getValue(node, "__STORE_BY_HBASE__");
    	String zookeeperQuorumForHBase = ElementParameterParser.getValue(node, "__ZOOKEEPER_QUORUM__");
    	String zookeeperClientPortForHBase = ElementParameterParser.getValue(node, "__ZOOKEEPER_CLIENT_PORT__");
    	String defineRegisterJar = ElementParameterParser.getValue(node, "__DEFINE_REGISTER_JAR__");
    	List<Map<String, String>> registerJarForHBase = (List<Map<String, String>>)ElementParameterParser.getObjectValue(node, "__REGISTER_JAR__");		
		
		if(("HDP_1_0".equals(hiveVersion) && "STANDALONE".equals(connectionMode)) || ("HDP_1_2".equals(hiveVersion) && "STANDALONE".equals(connectionMode)) || ("APACHE_0_20_203".equals(hiveVersion) && "EMBEDDED".equals(connectionMode)) || ("MAPR1".equals(hiveVersion) && "EMBEDDED".equals(connectionMode)) || ("Cloudera_CDH3".equals(hiveVersion) && "EMBEDDED".equals(connectionMode))) {
%>
			if(true) {
				throw new java.lang.Exception("The Hive version and the connection mode are not compatible together. Please check your component configuration.");
			}
<%
		}
		
		if(hadoopProps.size() > 0){
			for(Map<String, String> item : hadoopProps){
%>
				System.setProperty(<%=item.get("PROPERTY") %> ,<%=item.get("VALUE") %>);
<%
			} 
		}
			
		if(setMapredJT) {
			String mapredJT = ElementParameterParser.getValue(node, "__MAPRED_JT__");
%>
			System.setProperty("mapred.job.tracker", <%=mapredJT%>);
<%
		}
		
		if(setNamenode) {
			String namenode = ElementParameterParser.getValue(node, "__FS_DEFAULT_NAME__");
%>
			System.setProperty("fs.default.name", <%=namenode%>);
<%
		}		
		
		if("EMBEDDED".equals(connectionMode)) {
%>
			System.setProperty("hive.metastore.local", "false");
			System.setProperty("hive.metastore.uris", "thrift://" + <%=dbhost%> + ":" + <%=dbport%>);
			System.setProperty("hive.metastore.execute.setugi", "true");
			String url_<%=cid%> = "jdbc:hive://";
<%
		} else {
%>
			String url_<%=cid%> = "jdbc:hive://" + <%=dbhost%> + ":" + <%=dbport%> + "/" + <%=dbname%>;
<%
		}
%>
		String dbUser_<%=cid %> = <%=dbuser%>;
		String dbPwd_<%=cid %> = <%=dbpwd%>;    
		java.lang.Class.forName("<%=javaDbDriver %>");
		conn_<%=cid%> = java.sql.DriverManager.getConnection(url_<%=cid %>, dbUser_<%=cid%>, dbPwd_<%=cid%>);
		
		<%if("true".equalsIgnoreCase(storeByHBase)) {%>
    		java.sql.Statement statement_<%=cid%> = conn_<%=cid%>.createStatement();
    		<%if(zookeeperQuorumForHBase!=null && !"".equals(zookeeperQuorumForHBase) && !"\"\"".equals(zookeeperQuorumForHBase)) {%>
    			statement_<%=cid%>.execute("SET hbase.zookeeper.quorum="+<%=zookeeperQuorumForHBase%>);
    		<%}%>
    	
        	<%if(zookeeperClientPortForHBase!=null && !"".equals(zookeeperClientPortForHBase) && !"\"\"".equals(zookeeperClientPortForHBase)) {%>
        		statement_<%=cid%>.execute("SET hbase.zookeeper.property.clientPort="+<%=zookeeperClientPortForHBase%>);
        	<%}%>
    	
        	<%if("true".equalsIgnoreCase(defineRegisterJar) && registerJarForHBase!=null && registerJarForHBase.size()>0) {
        		for(Map<String, String> jar : registerJarForHBase){
        			String path = jar.get("JAR_PATH");
        			if(path == null || "".equals(path) || "\"\"".equals(path)) {
        				continue;
        			}
        	%>
				statement_<%=cid%>.execute("add jar "+<%=path%>);
    		<%
    			}
    		}
%>
    		statement_<%=cid%>.close();
<%
	  	}
	}
%>

<%
if(!("true").equals(useExistingConn)) {
    if(!("").equals(commitEvery) && !("0").equals(commitEvery)) {
        %>
        if(conn_<%=cid%>.getAutoCommit()) {
            conn_<%=cid%>.setAutoCommit(false);
        }        
        int commitEvery_<%=cid%> = <%=commitEvery%>;
        int commitCounter_<%=cid%> = 0;
        <%
    }
}
%>

<%
	if (usePrepareStatement ) {
%>
	java.sql.PreparedStatement pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(<%=dbquery%>);	
<%
	} else {
%>
	java.sql.Statement stmt_<%=cid %> = conn_<%=cid %>.createStatement();
<%
	}
%>
String query_<%=cid %> = "";
boolean whetherReject_<%=cid%> = false;
