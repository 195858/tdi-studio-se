<%@ jet 
imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.IConnection
        org.talend.core.model.process.IConnectionCategory		
		java.util.List	
	"
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid =  node.getUniqueName();
String dieOnError = ElementParameterParser.getValue(node, "__DIE_ON_ERROR__");
String commitEvery = ElementParameterParser.getValue(node, "__COMMIT_EVERY__");
String propagateRecordset = ElementParameterParser.getValue(node,"__PROPAGATE_RECORD_SET__");
String recordsetColumn = ElementParameterParser.getValue(node,"__RECORD_SET_COLUMN__");
String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");

String incomingConnName = null;

List<IMetadataColumn> columnList = null;

String rejectConnName = null;
List<? extends IConnection> rejectConns = node.getOutgoingConnections("REJECT");
if(rejectConns != null && rejectConns.size() > 0) {
    IConnection rejectConn = rejectConns.get(0);
    rejectConnName = rejectConn.getName();
}
List<IMetadataColumn> rejectColumnList = null;
IMetadataTable metadataTable = node.getMetadataFromConnector("REJECT");
if(metadataTable != null) {
    rejectColumnList = metadataTable.getListColumns();      
}

List<? extends IConnection> outgoingConns = node.getOutgoingSortedConnections();

boolean hasOutgoingDataConnection = false;
for(IConnection conn : outgoingConns) {
    if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
		if(!hasOutgoingDataConnection){
			hasOutgoingDataConnection = true;
		}
%>
    
    <%=conn.getName() %> = null;            
<%      }
}
if(!useExistingConn.equals("true"))
{
	if(!commitEvery.equals("")&&!commitEvery.equals("0")){
        %>
        commitCounter_<%=cid%>++;
        <%
	}
}
String dbquery= ElementParameterParser.getValue(node, "__QUERY__");
	       dbquery = dbquery.replaceAll("\n"," ");
    	   dbquery = dbquery.replaceAll("\r"," ");

%>
whetherReject_<%=cid%> = false;

<%
	List<IMetadataTable> metadatas = node.getMetadataList();
	if ((metadatas!=null)&&(metadatas.size()>0)) {
		IMetadataTable metadata = metadatas.get(0);
			if (metadata!=null) {
				List< ? extends IConnection> conns = node.getIncomingConnections();
				columnList = metadata.getListColumns();
				if(conns != null && conns.size()>0){
        			IConnection conn = conns.get(0);
        			incomingConnName = conn.getName();
				}//end of connection size.
			}//end of metadatas
	}
	if(!hasOutgoingDataConnection || columnList == null || columnList.size() < 1){
		propagateRecordset = "false";
	}
	%>
	query_<%=cid %> = <%=dbquery%>;
    globalMap.put("<%=cid %>_QUERY",query_<%=cid %>);
<%
	if(propagateRecordset.equals("true")){
%>
	java.sql.ResultSet rs_<%=cid %> = null;
<%
	}
%>
    try {
<%
	if(propagateRecordset.equals("true")){
%>
		rs_<%=cid %> = stmt_<%=cid %>.executeQuery(query_<%=cid %>);
<%
	}else{%>
    	stmt_<%=cid %>.execute(query_<%=cid %>);
<%
	}
%>
    } catch (Exception e) {
        whetherReject_<%=cid%> = true;
        <%
        if (dieOnError.equals("true")) {
            %>
            throw(e);
            <%
        } else {
            if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {

                %>
                    <%=rejectConnName %> = new <%=rejectConnName %>Struct();
                <%
                for(IMetadataColumn column : columnList) {
                    %>
                    <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                    <%
                }
                %>
                <%=rejectConnName%>.errorMessage = e.getMessage();
                <%
            } else {
                %>
                System.err.print(e.getMessage());
                <%
            }
        } 
        %>
    }
	<%
	
    if(outgoingConns != null && outgoingConns.size() > 0) {
        %>
        if(!whetherReject_<%=cid%>) {
        <%
            for(IConnection outgoingConn : outgoingConns) {
                if(rejectConnName == null || (rejectConnName != null && !outgoingConn.getName().equals(rejectConnName))) {
                    if(outgoingConn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
         %>
                        <%=outgoingConn.getName()%> = new <%=outgoingConn.getName()%>Struct();
         <%
                        for(IMetadataColumn column : columnList) {
                        	if(propagateRecordset.equals("true") && column.getLabel().equals(recordsetColumn)){
%>
<%=outgoingConn.getName()%>.<%=column.getLabel()%> = rs_<%=cid %>;
<%
                        	}else{
                            %>
<%=outgoingConn.getName()%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
<%
                  			}
                        }
                    }
                }
            }
        %>
        }
        <%
    }	
	
	if(!useExistingConn.equals("true"))
	{
		if(!commitEvery.equals("")&&!commitEvery.equals("0")){
            %>
            if(commitEvery_<%=cid%><=commitCounter_<%=cid%>){
            
            	conn_<%=cid%>.commit();
            	
            	commitCounter_<%=cid%>=0;
            	
            }
            <%
		}
	}
%>