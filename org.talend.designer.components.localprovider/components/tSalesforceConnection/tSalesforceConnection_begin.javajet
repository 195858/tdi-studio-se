<%@ jet 
imports="
        org.talend.core.model.process.ElementParameterParser
        org.talend.core.model.process.INode
        org.talend.designer.codegen.config.CodeGeneratorArgument
        org.talend.core.model.utils.TalendTextUtils	
		"
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

String endpoint = ElementParameterParser.getValue(node, "__ENDPOINT__");
String username = ElementParameterParser.getValue(node, "__USER__");
String password = ElementParameterParser.getValue(node, "__PASS__");
String timeout = ElementParameterParser.getValue(node,"__TIMEOUT__");
boolean needCompression = ("true").equals(ElementParameterParser.getValue(node,"__NEED_COMPRESSION__"));
boolean httpTraceMessage = ("true").equals(ElementParameterParser.getValue(node,"__HTTP_TRACEMESSAGE__"));

boolean useProxy = ("true").equals(ElementParameterParser.getValue(node,"__USE_PROXY__"));
String proxyHost = ElementParameterParser.getValue(node,"__PROXY_HOST__");
String proxyPort = ElementParameterParser.getValue(node,"__PROXY_PORT__");
String proxyUsername = ElementParameterParser.getValue(node,"__PROXY_USERNAME__");
String proxyPassword = ElementParameterParser.getValue(node,"__PROXY_PASSWORD__");

boolean bulkConnection = ("true").equals(ElementParameterParser.getValue(node,"__BULK_CONNECTION__"));
String apiVersion = ElementParameterParser.getValue(node,"__API_VERSION__");
String clientID = ElementParameterParser.getValue(node,"__CLIENT_ID__");

String loginType = ElementParameterParser.getValue(node,"__LOGIN_TYPE__");
boolean useOAuth = "OAUTH".equals(loginType);
if(useOAuth){
	String oauthKey = ElementParameterParser.getValue(node,"__OAUTH_CLIENT_ID__");
	String oauthSecret = ElementParameterParser.getValue(node,"__OAUTH_CLIENT_SECRET__");
	%>
	org.talend.salesforce.oauth.OAuthClient oauthClient_<%=cid%> = new org.talend.salesforce.oauth.OAuthClient();
	org.talend.salesforce.oauth.Token token_<%=cid%>;
	String endpointURL_<%=cid%> = null;
	String accessToken_<%=cid%> = null;
	oauthClient_<%=cid%>.setBaseOAuthURL(<%=endpoint%>);
	oauthClient_<%=cid%>.setClientID(<%=oauthKey%>);
	oauthClient_<%=cid%>.setClientSecret(<%=oauthSecret%>);
	String refreshToken_<%=cid%> = null;
	<%
	String tokenFile = ElementParameterParser.getValue(node,"__OAUTH_TOKEN_FILE__");
	if(!"".equals(tokenFile) && !"\"\"".equals(tokenFile)){
	%>
		// Attempt to load existing refresh token
		String tokenFile_<%=cid%> = <%=tokenFile%>;
		if(tokenFile_<%=cid%> != null){
			java.util.Properties properties_<%=cid%> = new java.util.Properties();
			try{
				java.io.FileInputStream inputStream_<%=cid%> = new java.io.FileInputStream(tokenFile_<%=cid%>);
				properties_<%=cid%>.load(inputStream_<%=cid%>);
				inputStream_<%=cid%>.close();
			}catch(java.io.FileNotFoundException e_<%=cid%>){
			}catch(java.io.IOException ee_<%=cid%>){
			}
			String storedRefreshToken_<%=cid%> = (String) properties_<%=cid%>.get("refreshtoken");
			
			// Check to see if the an existing refresh token was loaded.
			// If so, create a credential and call refreshToken() to get a new
			// access token.
			if(storedRefreshToken_<%=cid%> != null){
				// Request a new Access token using the refresh token.
				token_<%=cid%> = oauthClient_<%=cid%>.refreshToken(storedRefreshToken_<%=cid%>);
				<%
				if(bulkConnection){
				%>
				endpointURL_<%=cid%> = oauthClient_<%=cid%>.getBulkEndpoint(token_<%=cid%>, <%=apiVersion%>);
				<%
				}else{
				%>
				endpointURL_<%=cid%> = oauthClient_<%=cid%>.getSOAPEndpoint(token_<%=cid%>, <%=apiVersion%>);
				<%
				}
				%>
				accessToken_<%=cid%> = token_<%=cid%>.getAccess_token();
				refreshToken_<%=cid%> = token_<%=cid%>.getRefresh_token();
			}
		}
	<%
	}
	%>
	if(accessToken_<%=cid%> == null || endpointURL_<%=cid%> == null){
		<%
		String callbackHost = ElementParameterParser.getValue(node,"__OAUTH_CALLBACK_HOST__");
		String callbackPort = ElementParameterParser.getValue(node,"__OAUTH_CALLBACK_PORT__");
		%>
		oauthClient_<%=cid%>.setCallbackHost(<%=callbackHost%>);
		oauthClient_<%=cid%>.setCallbackPort(<%=callbackPort%>);
		token_<%=cid%> = oauthClient_<%=cid%>.getToken();
		<%
		if(bulkConnection){
		%>
		endpointURL_<%=cid%> = oauthClient_<%=cid%>.getBulkEndpoint(token_<%=cid%>, <%=apiVersion%>);
		<%
		}else{
		%>
		endpointURL_<%=cid%> = oauthClient_<%=cid%>.getSOAPEndpoint(token_<%=cid%>, <%=apiVersion%>);
		<%
		}
		%>
		accessToken_<%=cid%> = token_<%=cid%>.getAccess_token();
		refreshToken_<%=cid%> = token_<%=cid%>.getRefresh_token();
	}
	<%
	if(!"".equals(tokenFile) && !"\"\"".equals(tokenFile)){
	%>
		if(tokenFile_<%=cid%> != null && refreshToken_<%=cid%> != null){
			// Store the refresh token for future use.
			java.util.Properties storeProperties_<%=cid%> = new java.util.Properties();
			storeProperties_<%=cid%>.setProperty("refreshtoken", refreshToken_<%=cid%>);
			java.io.FileOutputStream outputStream_<%=cid%> = new java.io.FileOutputStream(tokenFile_<%=cid%>);
			storeProperties_<%=cid%>.store(outputStream_<%=cid%>, null);
			if(outputStream_<%=cid%> != null){
			    outputStream_<%=cid%>.close();
			}
		}
	<%
	}
}
if(bulkConnection){
%>
	org.talend.salesforceBulk.SalesforceBulkAPI sforceBulk_<%=cid%> = new org.talend.salesforceBulk.SalesforceBulkAPI();
	sforceBulk_<%=cid%>.setNeedCompression(<%=needCompression%>);
	sforceBulk_<%=cid%>.setNeedTraceMessage(<%=httpTraceMessage%>);
	<%
	if(useOAuth){
	%>
		sforceBulk_<%=cid%>.login(accessToken_<%=cid%>, endpointURL_<%=cid%>);
	<%
	}else{
		if(useProxy){
		%>
			sforceBulk_<%=cid%>.setProxy(true,<%=proxyHost%>,<%=TalendTextUtils.removeQuotes(proxyPort)%>,<%=proxyUsername%>,<%=proxyPassword%>);
		<%
		}
		%>
		sforceBulk_<%=cid%>.login(<%=endpoint%>,<%=username%>,<%=password%>,<%=apiVersion%>);
	<%
	}
	%>
	globalMap.put("conn_<%=cid %>", sforceBulk_<%=cid%>.getConnection());
<%
}else{
%>
	org.talend.salesforce.SforceManagement sfMgr_<%=cid%> = new org.talend.salesforce.SforceManagementImpl();
	<%
	if(clientID!=null && !"".equals(clientID) && !"\"\"".equals(clientID)){
	%>
		sfMgr_<%=cid%>.setClientID(<%=clientID%>);
		globalMap.put("callOptions_<%=cid%>", sfMgr_<%=cid%>.getCallOptions());
	<%
	}
	if(useOAuth){
	%>
		boolean result_<%=cid%> = sfMgr_<%=cid%>.login(accessToken_<%=cid%>, endpointURL_<%=cid%>,<%=timeout%>,<%=needCompression%>);
		if(!result_<%=cid%>){
			throw new RuntimeException("Login failed!");
		}
	<%
	}else{
		if(useProxy){
		%>
		    java.util.Properties props_<%=cid%> = System.getProperties();
		    props_<%=cid%>.put("socksProxyHost",<%=proxyHost%>);  
		    props_<%=cid%>.put("socksProxyPort",<%=proxyPort%>);
		    props_<%=cid%>.put("java.net.socks.username", <%=proxyUsername%>);
		    props_<%=cid%>.put("java.net.socks.password", <%=proxyPassword%>); 
		<%
		}
		%>
		boolean result_<%=cid%> = sfMgr_<%=cid%>.login(<%=endpoint%>,<%=username%>, <%=password%>,<%=timeout%>,<%=needCompression%>);
		if(!result_<%=cid%>){
			throw new RuntimeException("Login failed! Please check the username,password and endpoint");
		}
	<%
	}
	%>
	globalMap.put("stub_<%=cid %>", sfMgr_<%=cid%>.getStub());
	globalMap.put("sessionHeader_<%=cid %>", sfMgr_<%=cid%>.getSessionHeader());
<%
}
%>			
			

