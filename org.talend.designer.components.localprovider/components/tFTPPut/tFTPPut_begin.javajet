<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser
		org.talend.core.model.metadata.IMetadataTable
		org.talend.designer.codegen.config.CodeGeneratorArgument
		java.util.List
		java.util.Map
	"
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();	
	String host = ElementParameterParser.getValue(node, "__HOST__");
	String port = ElementParameterParser.getValue(node, "__PORT__");
	String user = ElementParameterParser.getValue(node, "__USERNAME__");
	String pass = ElementParameterParser.getValue(node, "__PASSWORD__");
	String localdir = ElementParameterParser.getValue(node, "__LOCALDIR__");	
	String remotedir = ElementParameterParser.getValue(node, "__REMOTEDIR__");
    String encoding = ElementParameterParser.getValue(node, "__ENCODING__");
	boolean sftp = ElementParameterParser.getValue(node, "__SFTP__").equals("true");
	String authMethod = ElementParameterParser.getValue(node,"__AUTH_METHOD__");
	String privateKey = ElementParameterParser.getValue(node,"__PRIVATEKEY__");
	String passPhrase = ElementParameterParser.getValue(node,"__PASSPHRASE__");
	List<Map<String, String>> files = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__FILES__");	
	String cid = node.getUniqueName();
	
    boolean useProxy = ElementParameterParser.getValue(node,"__UES_PROXY__").equals("true");
    String proxyHost = ElementParameterParser.getValue(node,"__PROXY_HOST__");
    String proxyPort = ElementParameterParser.getValue(node,"__PROXY_PORT__");
    String proxyUser = ElementParameterParser.getValue(node,"__PROXY_USERNAME__");
    String proxyPassword = ElementParameterParser.getValue(node,"__PROXY_PASSWORD__");	

%>

<%
//The following part support the socks proxy for FTP and SFTP (Socks V4 or V5, they are all OK). 
//And it can not work with the FTP proxy directly, only support the socks proxy.
if(useProxy){
%>
        java.util.Properties props = System.getProperties();
        props.put("socksProxyPort", <%=proxyPort %>);
        props.put("socksProxyHost", <%=proxyHost %>);
        props.put("java.net.socks.username", <%=proxyUser %>);
        props.put("java.net.socks.password", <%=proxyPassword %>);        
<%}%>

	int nb_file_<%=cid%> = 0;
<%		
	if(sftp){
%>	
	class MyUserInfo implements com.jcraft.jsch.UserInfo, com.jcraft.jsch.UIKeyboardInteractive {
    	String passphrase_<%=cid %> = <%=passPhrase %>;
        public String getPassphrase() { return passphrase_<%=cid %>; }
        
        public String getPassword() { return null; } 
        
        public boolean promptPassword(String arg0) { return true; } 
        
        public boolean promptPassphrase(String arg0) { return true; } 
        
        public boolean promptYesNo(String arg0) { return true; } 
        
        public void showMessage(String arg0) { } 
        
        public String[] promptKeyboardInteractive(String destination, String name, String instruction, String[] prompt,
                boolean[] echo) {
           String[] password<%=cid%> = {<%=pass%>};
           return password<%=cid%>;
        }
    }; 
    
    final com.jcraft.jsch.UserInfo defaultUserInfo<%=cid%> = new MyUserInfo();
    
    
    class MyProgressMonitor implements com.jcraft.jsch.SftpProgressMonitor {

        public void init(int op, String src, String dest, long max) {}
 		
 		public boolean count(long count) { return true;}

        public void end() {}
    }
    
    com.jcraft.jsch.JSch jsch<%=cid%>=new com.jcraft.jsch.JSch(); 
    <%if(authMethod.equals("PUBLICKEY")){%>
    jsch<%=cid%>.addIdentity(<%=privateKey %>, defaultUserInfo<%=cid%>.getPassphrase());
    <%}%>
    com.jcraft.jsch.Session session<%=cid%>=jsch<%=cid%>.getSession(<%=user%>, <%=host%>, <%=port%>); 
    <%if(authMethod.equals("PASSWORD")){%> 
	session<%=cid%>.setPassword(<%=pass%>); 
    <%}%>
    session<%=cid%>.setUserInfo(defaultUserInfo<%=cid%>); 
    session<%=cid%>.connect(); 
    
    com.jcraft.jsch. Channel channel<%=cid%>=session<%=cid%>.openChannel("sftp"); 
    channel<%=cid%>.connect(); 
    com.jcraft.jsch.ChannelSftp c<%=cid%>=(com.jcraft.jsch.ChannelSftp)channel<%=cid%>; 
    c<%=cid%>.setFilenameEncoding(<%=encoding%>);
    
    com.jcraft.jsch.SftpProgressMonitor monitor<%=cid%> = new MyProgressMonitor();
    
    java.util.List<java.util.Map<String,String>> list<%=cid %> = new java.util.ArrayList<java.util.Map<String,String>>();	
<%
    for (int i=0; i<files.size(); i++) {
       Map<String, String> line = files.get(i);
%>    
	java.util.Map<String,String> map<%=cid %><%=i %> = new java.util.HashMap<String,String>();
	map<%=cid %><%=i %>.put(<%= line.get("FILEMASK") %>,"");
 	list<%=cid %>.add(map<%=cid %><%=i %>);       
<%
  }
%>	

	String localdir<%=cid %>  = <%=localdir%>;	
	for (java.util.Map<String, String> map<%=cid %> : list<%=cid %>) 
	{
<%}else{%>
	com.enterprisedt.net.ftp.FTPClient ftp<%=cid %> = new com.enterprisedt.net.ftp.FTPClient();
	ftp<%=cid %>.setRemoteHost(<%=host %>);
	ftp<%=cid %>.setRemotePort(<%=port %>);
	ftp<%=cid %>.connect();
    ftp<%=cid %>.login(<%=user %>, <%=pass %>);    
	java.util.List<java.util.Map<String,String>> list<%=cid %> = new java.util.ArrayList<java.util.Map<String,String>>();
<%
    for (int i=0; i<files.size(); i++) {
       Map<String, String> line = files.get(i);
%>    
	java.util.Map<String,String> map<%=cid %><%=i %> = new java.util.HashMap<String,String>();
	map<%=cid %><%=i %>.put(<%= line.get("FILEMASK") %>,"");	
	list<%=cid %>.add(map<%=cid %><%=i %>);       
<%
  }
%>	
	String remotedir<%=cid %> = <%=remotedir%>;
	ftp<%=cid %>.chdir(remotedir<%=cid %>);
	<% 
	if ("binary".equalsIgnoreCase(ElementParameterParser.getValue(node, "__MODE__"))) {
%>	
	ftp<%=cid %>.setType(com.enterprisedt.net.ftp.FTPTransferType.BINARY);
<%
  }	else {  
%>	
	ftp<%=cid %>.setType(com.enterprisedt.net.ftp.FTPTransferType.ASCII);
<%
 }
%>
	String localdir<%=cid %>  = <%=localdir%>;	
	for (java.util.Map<String, String> map<%=cid %> : list<%=cid %>) 
	{
<%}%>