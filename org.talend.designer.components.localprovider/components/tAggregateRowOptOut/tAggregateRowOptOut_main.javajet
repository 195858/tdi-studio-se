<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.metadata.IMetadataTable
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.IConnectionCategory
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.metadata.types.JavaTypesManager
	org.talend.core.model.metadata.types.JavaType
    java.util.List
    java.util.Map
"
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String origin = ElementParameterParser.getValue(node, "__DESTINATION__");
String cid = origin;

IConnection inputConn = null;
IMetadataTable inputMetadataTable = null;
java.util.List<IMetadataColumn> inputColumns = null;


int FUNCTION = 0;
int INPUT_COLUMN = 1;
int IGNORE_NULL = 2;

String SUM = "sum";
String COUNT = "count";
String MAX = "max";
String MIN = "min";
String FIRST = "first";
String LAST = "last";
String AVG = "avg";
String COUNT_DISTINCT = "distinct";
String LIST = "list";
String LIST_OBJECT = "list_object";
String STD_DEV = "std_dev";


List<? extends IConnection> incomingConnections = node.getIncomingConnections();
if (incomingConnections != null && !incomingConnections.isEmpty()) {
	for (IConnection conn : incomingConnections) {
		if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
			inputConn = conn;
			inputMetadataTable = conn.getMetadataTable();
			inputColumns = inputMetadataTable.getListColumns();
			break;
		}
	}
}


if(inputConn != null) { // T_AggR_501

	List<Map<String, String>> operations = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__OPERATIONS__");
	List<Map<String, String>> groupbys = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__GROUPBYS__");
	
	java.util.Map<String,IMetadataColumn> keysColumns = new java.util.HashMap<String,IMetadataColumn>();
	java.util.Map<String,IMetadataColumn> valuesColumns = new java.util.HashMap<String,IMetadataColumn>();
	
	int sizeOperations = operations.size();
	int sizeGroupbys = groupbys.size();
	String lastInputColumn = null;
	if(sizeGroupbys>0){
		lastInputColumn = groupbys.get(sizeGroupbys-1).get("INPUT_COLUMN");
	}


	if(inputColumns != null) { // T_AggR_144
		for (IMetadataColumn column: inputColumns) { // T_AggR_145

			for(int i = 0; i < sizeGroupbys; i++){ // T_AggR_113
				String colunmName = groupbys.get(i).get("INPUT_COLUMN");
				if(column.getLabel().equals(colunmName)){ // T_AggR_114
					keysColumns.put(colunmName, column);
            	} // T_AggR_114
			} // T_AggR_113
					
			for(int i = 0; i < sizeOperations; i++){ // T_AggR_213
				String colunmName = operations.get(i).get("INPUT_COLUMN");
            	if(column.getLabel().equals(colunmName)){ // T_AggR_214
           			valuesColumns.put(colunmName, column);
           		} // T_AggR_214
			} // T_AggR_213
			
		} // T_AggR_145
	} // T_AggR_144

	
	for (IMetadataColumn column : inputColumns) {
		if(keysColumns.containsKey(column.getLabel())) {
	
			%>operation_finder_<%=cid %>.<%=column.getLabel()%> = <%=inputConn.getName() %>.<%=column.getLabel()%>;
			<%
		}
	}
	%>

	operation_result_<%=cid %> = hash_<%=cid %>.get(operation_finder_<%=cid %>);

	boolean isFirst = false;

	if(operation_result_<%=cid %> == null) { // G_AggR_001

		operation_result_<%=cid %> = new AggOperationStruct_<%=cid %>();

		<%
		for (IMetadataColumn column : inputColumns) {
			if(keysColumns.containsKey(column.getLabel())) {
		
				%>operation_result_<%=cid %>.<%=column.getLabel()%> = operation_finder_<%=cid %>.<%=column.getLabel()%>;
				<%
			}
		}
		%>
		
		isFirst = true;

		hash_<%=cid %>.put(operation_result_<%=cid %>, operation_result_<%=cid %>);
	
	} // G_AggR_001


	<%

		
		
	List<String[]> funinOperations = new java.util.ArrayList<String[]>();
	next:
	for(int i=0; i<sizeOperations; i++){
		Map<String, String> operation = operations.get(i);
		String fun = operation.get("FUNCTION");
		String in = operation.get("INPUT_COLUMN");
		String ignoreNull = operation.get("IGNORE_NULL");
		if(fun.equals("sum") || fun.equals("count")){
			for(int j=0; j<sizeOperations; j++){
				Map<String, String> tOperation = operations.get(j);
				if(tOperation.get("FUNCTION").equals("avg") && tOperation.get("INPUT_COLUMN").equals(in)){
					continue next;
				}
			}
		}
		for(int j = 0; j < i; j++){ //skip duplicate operation
			Map<String, String> tOperation = operations.get(j);
			if(tOperation.get("FUNCTION").equals(fun) && tOperation.get("INPUT_COLUMN").equals(in)){
				continue next;
			}
		}
		if(fun.equals("avg")){
			String[] funin = new String[3];
			funin[FUNCTION]="sum";
			funin[INPUT_COLUMN]=in;
			funin[IGNORE_NULL]=ignoreNull;
			funinOperations.add(funin);
			funin=new String[3];
			funin[FUNCTION]="count";
			funin[INPUT_COLUMN]=in;
			funin[IGNORE_NULL]=ignoreNull;
			funinOperations.add(funin);
		}else{
			String[] funin = new String[3];
			funin[FUNCTION]=fun;
			funin[INPUT_COLUMN]=in;
			funin[IGNORE_NULL]=ignoreNull;
			funinOperations.add(funin);
		}
	}
	int sizeOps = funinOperations.size();
	String tInputColumn =null;


	for(int j = 0; j < sizeOps; j++){ // T_AggR_546
		String[] funin = funinOperations.get(j);
		
		String function = funin[FUNCTION];
		String colunmName = funin[INPUT_COLUMN];
		boolean ignoreNull = funin[IGNORE_NULL].equals("true");
		
		IMetadataColumn column = valuesColumns.get(colunmName);
		JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
		boolean isBasePrimitive = JavaTypesManager.isJavaPrimitiveType(javaType, false);
		boolean isSelectedPrimitive = JavaTypesManager.isJavaPrimitiveType(javaType, column.isNullable());
		
		if(ignoreNull && !isSelectedPrimitive) { // T_AggR_545
		
			%>
			if(<%=inputConn.getName() %>.<%=colunmName  %> != null) { // G_AggR_546
			<%
			
		} // T_AggR_545
		
		
		if(function.equals(COUNT)){
				
			%>
			if(isFirst) {
				operation_result_<%=cid %>.<%=colunmName %>_<%=function %> = <%=inputConn.getName() %>.<%=colunmName  %>;
			}
			<%
			
		} else if(function.equals(MIN)){

			%>
			if(<%=inputConn.getName() %>.<%=colunmName  %> < operation_result_<%=cid %>.<%=colunmName %>_<%=function %>) {
				operation_result_<%=cid %>.<%=colunmName %>_<%=function %> = <%=inputConn.getName() %>.<%=colunmName  %>;
			}
			<%
		
		} else if(function.equals(MAX)){

			%>
			if(<%=inputConn.getName() %>.<%=colunmName  %> > operation_result_<%=cid %>.<%=colunmName %>_<%=function %>) {
				operation_result_<%=cid %>.<%=colunmName %>_<%=function %> = <%=inputConn.getName() %>.<%=colunmName  %>;
			}
			<%
		
		} else if(function.equals(SUM) || function.equals(AVG)){

			%>
				operation_result_<%=cid %>.<%=colunmName %>_<%=function %> += (<%= JavaTypesManager.getTypeToGenerate(javaType.getId(), false) %>) <%=inputConn.getName() %>.<%=colunmName %>;
			<%
		
		} else if(function.equals(FIRST)){
				
			%>
			if(isFirst) {
				operation_result_<%=cid %>.<%=colunmName %>_<%=function %> = <%=inputConn.getName() %>.<%=colunmName  %>;
			}
			<%
			
		} else if(function.equals(LAST)){
				
			%>
			operation_result_<%=cid %>.<%=colunmName %>_<%=function %> = <%=inputConn.getName() %>.<%=colunmName  %>;
			<%
			
		} else if(function.equals(LIST)){
				
			%>
			//operation_result_<%=cid %>.<%=colunmName %>_<%=function %> = <%=inputConn.getName() %>.<%=colunmName  %>;
			<%
			
		} else if(function.equals(LIST_OBJECT)){
				
			%>
			//operation_result_<%=cid %>.<%=colunmName %>_<%=function %> = <%=inputConn.getName() %>.<%=colunmName  %>;
			<%
			
		} else if(function.equals(COUNT_DISTINCT)){
				
			%>
			//operation_result_<%=cid %>.<%=colunmName %>_<%=function %> = <%=inputConn.getName() %>.<%=colunmName  %>;
			<%
			
		} else if(function.equals(STD_DEV)){
				
			%>
			//operation_result_<%=cid %>.<%=colunmName %>_<%=function %> = <%=inputConn.getName() %>.<%=colunmName  %>;
			<%
			
		}
		
		if(ignoreNull && !isSelectedPrimitive) { // T_AggR_545
		
			%>
			} // G_AggR_546
			<%
			
		} // T_AggR_545
		
	} // T_AggR_546

} // T_AggR_501

%>

nb_line_<%=cid %>++;


