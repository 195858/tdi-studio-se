<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.metadata.IMetadataTable
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.IConnectionCategory
    org.talend.core.model.process.ElementParameterParser
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.metadata.types.JavaTypesManager
    org.talend.core.model.metadata.types.JavaType
    java.util.List
    java.util.Map
    java.util.HashMap
"
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String origin = ElementParameterParser.getValue(node, "__DESTINATION__");
String cid = origin;

List<Map<String, String>> operations = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__OPERATIONS__");
List<Map<String, String>> groupbys = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__GROUPBYS__");

%>
// ------------

java.util.Map hashAggreg_<%=cid %> = new java.util.HashMap(); 

// ------------
<%

int FUNCTION = 0;
int INPUT_COLUMN = 1;
int IGNORE_NULL = 2;


int sizeOperations = operations.size();

//pretreatment opreations before aggregating
List<String[]> funinOperations = new java.util.ArrayList<String[]>();
boolean listFlag = false;
boolean haveSTD_DEV = false;
next:
for(int i=0; i<sizeOperations; i++){
	Map<String, String> operation = operations.get(i);
	String fun = operation.get("FUNCTION");
	String in = operation.get("INPUT_COLUMN");
	if(!listFlag && fun.equals("list")){
		listFlag = true;
	}
	if(!haveSTD_DEV && fun.equals("std_dev")){
		haveSTD_DEV = true;
	}
	if(fun.equals("sum") || fun.equals("count")){
		for(int j=0; j<sizeOperations; j++){
			Map<String, String> tOperation = operations.get(j);
			if(tOperation.get("FUNCTION").equals("avg") && tOperation.get("INPUT_COLUMN").equals(in)){
				continue next;
			}
		}
	}
	for(int j = 0; j < i; j++){
		Map<String, String> tOperation = operations.get(j);
		if(tOperation.get("FUNCTION").equals(fun) && tOperation.get("INPUT_COLUMN").equals(in)){
			continue next;
		}
	}
	if(fun.equals("avg")){
		String[] funin = new String[2];
		funin[FUNCTION]="sum";
		funin[INPUT_COLUMN]=in;
		funinOperations.add(funin);
		funin=new String[IGNORE_NULL];
		funin[FUNCTION]="count";
		funin[INPUT_COLUMN]=in;
		funinOperations.add(funin);
	}else{
		String[] funin = new String[2];
		funin[FUNCTION]=fun;
		funin[INPUT_COLUMN]=in;
		funinOperations.add(funin);
	}
}

java.util.Map<String,IMetadataColumn> keysColumns = new java.util.HashMap<String,IMetadataColumn>();
java.util.Map<String,IMetadataColumn> valuesColumns = new java.util.HashMap<String,IMetadataColumn>();
IMetadataTable inputMetadataTable = null;
java.util.List<IMetadataColumn> inputColumns = null;

int sizeOps = funinOperations.size();

List<? extends IConnection> incomingConnections = node.getIncomingConnections();
if (incomingConnections != null && !incomingConnections.isEmpty()) {
	for (IConnection conn : incomingConnections) {
		if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
			inputMetadataTable = conn.getMetadataTable();
			inputColumns = inputMetadataTable.getListColumns();
			break;
		}
	}
}


	int groupbySize = groupbys.size();
	//modify06-04 begin
	String[] groupby_type = new String[groupbySize];

	if(inputColumns != null) { // T_AggR_144
		for (IMetadataColumn column: inputMetadataTable.getListColumns()) { // T_AggR_145

			for(int i = 0; i < groupbySize; i++){ // T_AggR_113
				String columnname = groupbys.get(i).get("INPUT_COLUMN");
				if(column.getLabel().equals(columnname)){ // T_AggR_114
					keysColumns.put(columnname, column);
            	} // T_AggR_114
			} // T_AggR_113
					
			for(int i = 0; i < sizeOperations; i++){ // T_AggR_213
				String columnname = operations.get(i).get("INPUT_COLUMN");
            	if(column.getLabel().equals(columnname)){ // T_AggR_214
           			valuesColumns.put(columnname, column);
           		} // T_AggR_214
			} // T_AggR_213

		} // T_AggR_145
	} // T_AggR_144
	//modify06-04 end


if(sizeOps>0){ // T_AggR_114

	if(haveSTD_DEV){ // T_AggR_115
	%>

	class SD_<%=cid %> { // G_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/n);
	    }
	} // G_AggR_144

	SD_<%=cid %> sd_<%=cid %> = new SD_<%=cid %>();
	
	<%
	}// T_AggR_115

	%>
	class AggOperationStruct_<%=cid %> { // G_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;

        <%
        
		for (IMetadataColumn column: inputMetadataTable.getListColumns()) { // G_AggR_143
			if(keysColumns.containsKey(column.getLabel())){
				%>
				<%=JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable()) %> <%=column.getLabel() %>;<%
				
			}
		} // G_AggR_143
        
        
    	for (int i = 0; i<sizeOps; i++) { // T_AggR_131
    		String[] funin = funinOperations.get(i);
    		if(inputColumns != null) { // T_AggR_132
         		for (IMetadataColumn column: inputColumns) { // T_AggR_135
               		if(column.getLabel().equals(funin[INPUT_COLUMN])){ // T_AggR_136
               		%>
    					<% if(funin[FUNCTION].equals("sum") && column.getTalendType().equals("BigDecimal")){%>
    		   				BigDecimal <%=funin[INPUT_COLUMN] %>_sum = new BigDecimal("0.0");
    		   				
    		   			<% } else if(funin[FUNCTION].equals("count")){%>
						    int <%=funin[INPUT_COLUMN] %>_count = 0;
						    
                   		<% } else if("distinct".equals(funin[FUNCTION])) { %> 
                   			java.util.Set <%=funin[INPUT_COLUMN] %>_<%=funin[FUNCTION] %> = new java.util.HashSet();
                   			 
                   		<% } else if("list".equals(funin[FUNCTION])) {%>
                   			String <%=funin[INPUT_COLUMN] %>_<%=funin[FUNCTION] %> = "";
                   			
                   		<% } else if("list_object".equals(funin[FUNCTION])) {%>
                   			java.util.List <%=funin[INPUT_COLUMN] %>_<%=funin[FUNCTION] %> = new java.util.ArrayList();
                   			
                   		<% } else if("std_dev".equals(funin[FUNCTION])) {%>
                   			java.util.List<Double> <%=funin[INPUT_COLUMN] %>_<%=funin[FUNCTION] %> = new java.util.ArrayList<Double>();
                   			
                   		<% } else {%> 
                   			<%=JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable()) %> <%=funin[INPUT_COLUMN] %>_<%=funin[FUNCTION] %>;
                   		<% } %>                                   
                          <%
                                   break;
               		} // T_AggR_136
    			} // T_AggR_135
    		} // T_AggR_132
    	} // T_AggR_131
        %>
        
        
    @Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	<%
		if (inputMetadataTable !=null) {
			for (IMetadataColumn column: inputMetadataTable.getListColumns()) {
				if (keysColumns.containsKey(column.getLabel())) {
					if (JavaTypesManager.isJavaPrimitiveType(column.getTalendType(), column.isNullable())) {
					
					 	String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
					 	if("boolean".equals(typeToGenerate)) {
						%>
		        			result = prime * result + (this.<%=column.getLabel() %> ? 1231 : 1237);
						<%
						} else {	
						%>
							result = prime * result + (int) this.<%=column.getLabel() %>;
						<%
						}
					} else {
					%>
						result = prime * result + ((this.<%=column.getLabel() %> == null) ? 0 : this.<%=column.getLabel() %>.hashCode());
					<%
					}
				}
			}
		}
    %>
    		this.hashCode = result;
    		this.hashCodeDirty = false;		
		}
		return this.hashCode;
	}
	
	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final AggOperationStruct_<%=cid %> other = (AggOperationStruct_<%=cid %>) obj;
		<%	
		if (inputMetadataTable !=null) {
			for (IMetadataColumn column: inputMetadataTable.getListColumns()) {
				if (keysColumns.containsKey(column.getLabel())) {
					if (JavaTypesManager.isJavaPrimitiveType(column.getTalendType(), column.isNullable())) {
				%>
					if (this.<%=column.getLabel() %> != other.<%=column.getLabel() %>) 
						return false;
				<%
					} else {
				%>
					if (this.<%=column.getLabel() %> == null) {
						if (other.<%=column.getLabel() %> != null) 
							return false;
					} else if (!this.<%=column.getLabel() %>.equals(other.<%=column.getLabel() %>)) 
						return false;
				<%
					}
				}
			}
    	}
    	%>
    	
		return true;
      }
        
	} // G_AggR_100

<%
} // T_AggR_114


if(sizeOps>0){ // G_AggR_191
%>
	AggOperationStruct_<%=cid %> operation_result_<%=cid %> = null;
	AggOperationStruct_<%=cid %> operation_finder_<%=cid %> = new AggOperationStruct_<%=cid %>();
	java.util.Map<AggOperationStruct_<%=cid %>,AggOperationStruct_<%=cid %>> hash_<%=cid %> = new java.util.HashMap<AggOperationStruct_<%=cid %>,AggOperationStruct_<%=cid %>>();  
<%
} // G_AggR_191
%>

int nb_line_<%=cid %> = 0;

<%
if(listFlag){ // G_AggR_192
%>
String delimiter_<%=cid %> = <%=ElementParameterParser.getValue(node, "__LIST_DELIMITER__") %>;
<%
} // G_AggR_192
%>
