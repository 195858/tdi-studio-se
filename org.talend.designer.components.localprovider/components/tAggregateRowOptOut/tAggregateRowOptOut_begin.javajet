<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.metadata.IMetadataTable
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.IConnectionCategory
    org.talend.core.model.process.ElementParameterParser
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.metadata.types.JavaTypesManager
    org.talend.core.model.metadata.types.JavaType
    java.util.List
    java.util.Map
    java.util.HashMap
"
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String origin = ElementParameterParser.getValue(node, "__DESTINATION__");
String cid = origin;

List<Map<String, String>> operations = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__OPERATIONS__");
List<Map<String, String>> groupbys = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__GROUPBYS__");

%>
// ------------

java.util.Map hashAggreg_<%=cid %> = new java.util.HashMap(); 

// ------------
<%

int FUNCTION = 0;
int INPUT_COLUMN = 1;
int OUTPUT_COLUMN = 1;
int IGNORE_NULL = 2;

String SUM = "sum";
String COUNT = "count";
String MAX = "max";
String MIN = "min";
String FIRST = "first";
String LAST = "last";
String AVG = "avg";
String COUNT_DISTINCT = "distinct";
String LIST = "list";
String LIST_OBJECT = "list_object";
String STD_DEV = "std_dev";

int sizeOperations = operations.size();

//pretreatment opreations before aggregating
List<String[]> funinOperations = new java.util.ArrayList<String[]>();
boolean listFlag = false;
boolean haveSTD_DEV = false;
boolean hasCountDistinctOperation = false;
next:
for(int i=0; i<sizeOperations; i++){
	Map<String, String> operation = operations.get(i);
	String fun = operation.get("FUNCTION");
	String in = operation.get("INPUT_COLUMN");
	String out = operation.get("OUTPUT_COLUMN");
	if(!listFlag && fun.equals(LIST)){
		listFlag = true;
	}
	if(!haveSTD_DEV && fun.equals(STD_DEV)){
		haveSTD_DEV = true;
	}
	if(fun.equals("sum") || fun.equals("count")){
		for(int j=0; j<sizeOperations; j++){
			Map<String, String> tOperation = operations.get(j);
			if(tOperation.get("FUNCTION").equals("avg") && tOperation.get("INPUT_COLUMN").equals(in)){
				continue next;
			}
		}
	}
	for(int j = 0; j < i; j++){
		Map<String, String> tOperation = operations.get(j);
		if(tOperation.get("FUNCTION").equals(fun) && tOperation.get("INPUT_COLUMN").equals(in)){
			continue next;
		}
	}
	
	if(fun.equals(COUNT_DISTINCT)){
		hasCountDistinctOperation = true;
	}
	if(fun.equals("avg")){
		String[] funin = new String[3];
		funin[FUNCTION]=SUM;
		funin[INPUT_COLUMN]=in;
		funin[OUTPUT_COLUMN]=out;
		funinOperations.add(funin);
		funin=new String[3];
		funin[FUNCTION]=AVG;
		funin[INPUT_COLUMN]=in;
		funin[OUTPUT_COLUMN]=out;
		funinOperations.add(funin);
	}else{
		String[] funin = new String[3];
		funin[FUNCTION]=fun;
		funin[INPUT_COLUMN]=in;
		funin[OUTPUT_COLUMN]=out;
		funinOperations.add(funin);
	}
}

java.util.Map<String,IMetadataColumn> keysColumns = new java.util.HashMap<String,IMetadataColumn>();
java.util.Map<String,IMetadataColumn> valuesColumns = new java.util.HashMap<String,IMetadataColumn>();
IMetadataTable inputMetadataTable = null;
IMetadataTable outputMetadataTable = null;
java.util.List<IMetadataColumn> inputColumns = null;
java.util.List<IMetadataColumn> outputColumns = null;

int sizeOps = funinOperations.size();

List<? extends IConnection> incomingConnections = node.getIncomingConnections();
if (incomingConnections != null && !incomingConnections.isEmpty()) {
	for (IConnection conn : incomingConnections) {
		inputMetadataTable = conn.getMetadataTable();
		inputColumns = inputMetadataTable.getListColumns();
		break;
	}
}

List<IMetadataTable> mestadataTableListOut = node.getMetadataList();
if (mestadataTableListOut!=null && mestadataTableListOut.size()>0) { // T_OutBegin_AggR_600
    outputMetadataTable = mestadataTableListOut.get(0);
	if(outputMetadataTable != null) {
		outputColumns = outputMetadataTable.getListColumns();
	}
}


int groupbySize = groupbys.size();
String[] groupby_type = new String[groupbySize];

if(inputColumns != null) { // T_OutBegin_AggR_144
	for (IMetadataColumn column: inputColumns) { // T_OutBegin_AggR_145

		for(int i = 0; i < groupbySize; i++){ // T_OutBegin_AggR_113
			String columnname = groupbys.get(i).get("INPUT_COLUMN");
			if(column.getLabel().equals(columnname)){ // T_OutBegin_AggR_114
				keysColumns.put(columnname, column);
        	} // T_OutBegin_AggR_114
		} // T_OutBegin_AggR_113
				
	} // T_OutBegin_AggR_145
} // T_OutBegin_AggR_144


if(outputColumns != null) { // T_OutBegin_AggR_744
	for (IMetadataColumn column: outputColumns) { // T_OutBegin_AggR_745

		for(int i = 0; i < sizeOperations; i++){ // T_OutBegin_AggR_713
			String columnname = operations.get(i).get("OUTPUT_COLUMN");
        	if(column.getLabel().equals(columnname)){ // T_OutBegin_AggR_714
       			valuesColumns.put(columnname, column);
       		} // T_OutBegin_AggR_714
		} // T_OutBegin_AggR_713

	} // T_OutBegin_AggR_745
} // T_OutBegin_AggR_744


if(sizeOps>0){ // T_OutBegin_AggR_114

	%>

	class UtilClass_<%=cid %> { // G_OutBegin_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/n);
	    }
	    
		public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		    byte r = (byte) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'short/Short'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		    short r = (short) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'int/Integer'", "'short/Short'"));
		    }
		}
		
		public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		    int r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'long/Long'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
		    long r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'long/Long'"));
		    }
		}
		
		public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    float minAddedValue = Math.ulp(a);
			    if (minAddedValue > b) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
			    }
			}
			
		    if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE) || ((double) a + (double) b < (double) Float.MIN_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
		    }
		}
		
		public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > b) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < Double.MIN_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
		    return "Type overflow when adding " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}
		
		private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
		    return "The double precision is unsufficient to add the value " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}

	} // G_OutBegin_AggR_144

	UtilClass_<%=cid %> utilClass_<%=cid %> = new UtilClass_<%=cid %>();

	<%
	if(hasCountDistinctOperation) { // T_OutBegin_AggR_160
	%>
	
		class AggCountDistinctValuesStruct_<%=cid %> { // G_OutBegin_AggR_1100
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        <%
	        
			for (IMetadataColumn column: inputMetadataTable.getListColumns()) { // G_OutBegin_AggR_1143
				if(valuesColumns.containsKey(column.getLabel())){
	
					%>
					<%=JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable()) %> <%=column.getLabel() %>;<%
					
				}
			} // G_OutBegin_AggR_1143
	        
			%>        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			<%
				if (inputMetadataTable !=null) {
					for (IMetadataColumn column: inputMetadataTable.getListColumns()) {
						if (valuesColumns.containsKey(column.getLabel())) {
							if (JavaTypesManager.isJavaPrimitiveType(column.getTalendType(), column.isNullable())) {
							
							 	String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
							 	if("boolean".equals(typeToGenerate)) {
								%>
				        			result = prime * result + (this.<%=column.getLabel() %> ? 1231 : 1237);
								<%
								} else {	
								%>
									result = prime * result + (int) this.<%=column.getLabel() %>;
								<%
								}
							} else {
							%>
								result = prime * result + ((this.<%=column.getLabel() %> == null) ? 0 : this.<%=column.getLabel() %>.hashCode());
							<%
							}
						}
					}
				}
		    %>
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final AggCountDistinctValuesStruct_<%=cid %> other = (AggCountDistinctValuesStruct_<%=cid %>) obj;
				<%	
				if (inputMetadataTable !=null) {
					for (IMetadataColumn column: inputMetadataTable.getListColumns()) {
						if (valuesColumns.containsKey(column.getLabel())) {
						
							JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
						
							if (JavaTypesManager.isJavaPrimitiveType(column.getTalendType(), column.isNullable())) {
						%>
							if (this.<%=column.getLabel() %> != other.<%=column.getLabel() %>) 
								return false;
						<%
							} else if(javaType == JavaTypesManager.BYTE_ARRAY) {
						%>
								if (this.<%=column.getLabel() %> == null) {
									if (other.<%=column.getLabel() %> != null) 
										return false;
								} else {
									if(this.<%=column.getLabel() %> != null && other.<%=column.getLabel() %> != null
										&& other.<%=column.getLabel() %>.length != this.<%=column.getLabel() %>.length
									) {
										return false;
									}
									for(int i = 0; i < this.<%=column.getLabel() %>.length; i++) {
										if(this.<%=column.getLabel() %>[i] != other.<%=column.getLabel() %>[i]) {
											return false;
										}
									}
									return true;
								}
						<%
							} else {
						%>
							if (this.<%=column.getLabel() %> == null) {
								if (other.<%=column.getLabel() %> != null) 
									return false;
							} else if (!this.<%=column.getLabel() %>.equals(other.<%=column.getLabel() %>)) 
								return false;
						<%
							}
						}
					}
				}
				%>
				
				return true;
			}
	  
	        
		} // G_OutBegin_AggR_1100

	<%
	} // T_OutBegin_AggR_160
	%>
	
	
	class AggOperationStruct_<%=cid %> { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;

        <%
        
		for (IMetadataColumn column: inputMetadataTable.getListColumns()) { // G_OutBegin_AggR_143
			if(keysColumns.containsKey(column.getLabel())){

				%>
				<%=JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable()) %> <%=column.getLabel() %>;<%
				
			}
		} // G_OutBegin_AggR_143
        
        boolean hasAlreadyCountProperty = false;
        boolean hasAlreadyDistinctCountProperty = false;
    	for (int i = 0; i<sizeOps; i++) { // T_OutBegin_AggR_131
    		String[] funin = funinOperations.get(i);
    		if(inputColumns != null) { // T_OutBegin_AggR_132
         		for (IMetadataColumn outputColumn: outputColumns) { // T_OutBegin_AggR_135
               		if(outputColumn.getLabel().equals(funin[OUTPUT_COLUMN])){ // T_OutBegin_AggR_136
               		
               			JavaType outputJavaType = JavaTypesManager.getJavaTypeFromId(outputColumn.getTalendType());
						boolean outputIsNumber = JavaTypesManager.isNumberType(outputJavaType, false);
						
						boolean outputIsObject = outputJavaType == JavaTypesManager.OBJECT;
						boolean outputIsList = outputJavaType == JavaTypesManager.LIST;
						boolean outputIsString = outputJavaType == JavaTypesManager.STRING;
						boolean outputIsDate = outputJavaType == JavaTypesManager.DATE;
						boolean outputIsBigDecimal = outputJavaType == JavaTypesManager.BIGDECIMAL;
						
						String function = funin[FUNCTION];
						
						boolean isValidTypeForOperation = 
							outputIsNumber && (function.equals(SUM) || function.equals(AVG) || function.equals(STD_DEV)) 
							|| 
								!outputIsNumber 
								&& !function.equals(SUM) 
								&& !function.equals(AVG) 
								&& !function.equals(LIST)
								&& !function.equals(LIST_OBJECT)
							|| (function.equals(MIN) || function.equals(MAX)) && (outputIsNumber || outputIsObject || outputIsString || outputIsDate || outputIsBigDecimal)
							|| function.equals(FIRST)
							|| function.equals(LAST)
							|| function.equals(LIST_OBJECT) && (outputIsObject || outputIsList)
							|| function.equals(LIST) && (outputIsString || outputIsObject)
						;

						if(!hasAlreadyCountProperty && function.equals(COUNT)) {
							hasAlreadyCountProperty = true;

							%>int count = 0;
                   			<%
							
						}
                   		
                   		if(function.equals(COUNT_DISTINCT)) {
                   			if(!hasAlreadyDistinctCountProperty) { 
	                   			hasAlreadyDistinctCountProperty = true;
                   			
    	               			%>java.util.Set<AggCountDistinctValuesStruct_<%=cid %>> distinctValues = new java.util.HashSet<AggCountDistinctValuesStruct_<%=cid %>>();
	                   			<%
	                   		}
	                   	} 
	                   	else if(isValidTypeForOperation) { // T_OutBegin_AggR_138

							if(function.equals(AVG)){
								
								%>int <%=funin[INPUT_COLUMN] %>_count = 0;
	                   			<%
	                   			 
	                   		} else if(function.equals("sum") && outputJavaType == JavaTypesManager.BIGDECIMAL) {
		    					
		    					%>BigDecimal <%=funin[INPUT_COLUMN] %>_sum = new BigDecimal("0.0");
	    		   				<%
	    		   				
	                   		} else if(LIST.equals(function)) {
	                   			
	                   			%>StringBuilder <%=funin[INPUT_COLUMN] %>_<%=LIST %> = new StringBuilder();
	                   			<%
	                   			
	                   		 } else if(LIST_OBJECT.equals(function)) {
	                   		 
	                   		 	%>java.util.List <%=funin[INPUT_COLUMN] %>_<%=function %> = new java.util.ArrayList();
	                   			<%
	                   			
	                   		} else if(STD_DEV.equals(function)) {
	                   		
	                   			%>java.util.List<Double> <%=funin[INPUT_COLUMN] %>_<%=function %> = new java.util.ArrayList<Double>();
	                   			<%
	                   			
	                   		 } else {  // T_OutBegin_AggR_137
	                   		
	                   			// START OF INIT LINE
	                 			%>
	                 			<%=JavaTypesManager.getTypeToGenerate(outputColumn.getTalendType(), outputColumn.isNullable()) %> <%=funin[INPUT_COLUMN] %>_<%=function %><%
	                 			
	                   			if(
	                   				outputColumn.isNullable() 
	                   				&& JavaTypesManager.isJavaPrimitiveType(outputColumn.getTalendType(), false) 
	                   				&& !function.equals(MIN) 
	                   				&& !function.equals(MAX) 
	                   				&& !function.equals(FIRST) 
	                   				&& !function.equals(LAST) 
	                   				|| outputJavaType == JavaTypesManager.CHARACTER) { 
	                   				
	                   				%> = (<%=JavaTypesManager.getTypeToGenerate(outputColumn.getTalendType(), false) %>) <%= JavaTypesManager.getDefaultValueFromJavaIdType(outputColumn.getTalendType(), false) %><%
	                   				
		                   		}
	                   			
	                   			%>;<%
	                   			// END OF INIT LINE
	                   			
	                   		} // T_OutBegin_AggR_137
	                   	} // T_OutBegin_AggR_138
                        break;
               		} // T_OutBegin_AggR_136
    			} // T_OutBegin_AggR_135
    		} // T_OutBegin_AggR_132
    	} // T_OutBegin_AggR_131
        %>
        
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		<%
			if (inputMetadataTable !=null) {
				for (IMetadataColumn column: inputMetadataTable.getListColumns()) {
					if (keysColumns.containsKey(column.getLabel())) {
						if (JavaTypesManager.isJavaPrimitiveType(column.getTalendType(), column.isNullable())) {
						
						 	String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
						 	if("boolean".equals(typeToGenerate)) {
							%>
			        			result = prime * result + (this.<%=column.getLabel() %> ? 1231 : 1237);
							<%
							} else {	
							%>
								result = prime * result + (int) this.<%=column.getLabel() %>;
							<%
							}
						} else {
						%>
							result = prime * result + ((this.<%=column.getLabel() %> == null) ? 0 : this.<%=column.getLabel() %>.hashCode());
						<%
						}
					}
				}
			}
	    %>
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_<%=cid %> other = (AggOperationStruct_<%=cid %>) obj;
			<%	
			if (inputMetadataTable !=null) {
				for (IMetadataColumn column: inputMetadataTable.getListColumns()) {
					if (keysColumns.containsKey(column.getLabel())) {
					
						JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
					
						if (JavaTypesManager.isJavaPrimitiveType(column.getTalendType(), column.isNullable())) {
					%>
						if (this.<%=column.getLabel() %> != other.<%=column.getLabel() %>) 
							return false;
					<%
						} else if(javaType == JavaTypesManager.BYTE_ARRAY) {
					%>
							if (this.<%=column.getLabel() %> == null) {
								if (other.<%=column.getLabel() %> != null) 
									return false;
							} else {
								if(this.<%=column.getLabel() %> != null && other.<%=column.getLabel() %> != null
									&& other.<%=column.getLabel() %>.length != this.<%=column.getLabel() %>.length
								) {
									return false;
								}
								for(int i = 0; i < this.<%=column.getLabel() %>.length; i++) {
									if(this.<%=column.getLabel() %>[i] != other.<%=column.getLabel() %>[i]) {
										return false;
									}
								}
								return true;
							}
					<%
						} else {
					%>
						if (this.<%=column.getLabel() %> == null) {
							if (other.<%=column.getLabel() %> != null) 
								return false;
						} else if (!this.<%=column.getLabel() %>.equals(other.<%=column.getLabel() %>)) 
							return false;
					<%
						}
					}
				}
			}
			%>
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100


<%
} // T_OutBegin_AggR_114


if(sizeOps>0){ // G_OutBegin_AggR_191
%>
	AggOperationStruct_<%=cid %> operation_result_<%=cid %> = null;
	AggOperationStruct_<%=cid %> operation_finder_<%=cid %> = new AggOperationStruct_<%=cid %>();
	java.util.Map<AggOperationStruct_<%=cid %>,AggOperationStruct_<%=cid %>> hash_<%=cid %> = new java.util.HashMap<AggOperationStruct_<%=cid %>,AggOperationStruct_<%=cid %>>();  
<%
} // G_OutBegin_AggR_191
%>

int nb_line_<%=cid %> = 0;
boolean isFirstIteration = true;

<%
if(listFlag){ // G_OutBegin_AggR_192
%>
String delimiter_<%=cid %> = <%=ElementParameterParser.getValue(node, "__LIST_DELIMITER__") %>;
<%
} // G_OutBegin_AggR_192
%>
