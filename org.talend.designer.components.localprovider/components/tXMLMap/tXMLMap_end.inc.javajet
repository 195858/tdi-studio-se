<%@ jet 
	imports="
			org.talend.core.model.process.INode 
			org.talend.core.model.process.ElementParameterParser 
			org.talend.designer.codegen.config.CodeGeneratorArgument
			org.talend.core.model.metadata.types.JavaTypesManager
			org.talend.core.model.process.AbstractExternalNode
			org.talend.designer.xmlmap.XmlMapComponent
			org.talend.designer.xmlmap.model.emf.xmlmap.XmlMapData
			org.eclipse.emf.common.util.EList
			org.talend.designer.xmlmap.model.emf.xmlmap.VarNode
			org.talend.designer.xmlmap.model.emf.xmlmap.VarTable
			org.talend.designer.xmlmap.model.emf.xmlmap.InputXmlTree
			org.talend.designer.xmlmap.model.emf.xmlmap.OutputXmlTree
			org.talend.designer.xmlmap.model.emf.xmlmap.TreeNode
			org.talend.designer.xmlmap.model.emf.xmlmap.OutputTreeNode
			org.talend.designer.xmlmap.model.emf.xmlmap.NodeType
			org.talend.core.model.process.IConnection
			org.talend.core.model.process.EConnectionType
			org.talend.core.model.metadata.IMetadataTable
			org.talend.core.model.metadata.IMetadataColumn
			org.talend.core.model.utils.NodeUtil
            java.util.Map
            java.util.HashMap
            java.util.List
            java.util.ArrayList
			java.util.HashSet
			java.util.Set
            org.talend.core.model.metadata.types.JavaTypesManager
        	org.talend.core.model.metadata.types.JavaType
"
skeleton="tXMLMap_java.skeleton"
%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	XmlMapComponent node = (XmlMapComponent) codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	
	
	boolean isVirtualIn = cid.endsWith("TXMLMAP_IN");
	boolean isVirtualOut = cid.endsWith("TXMLMAP_OUT");

	String uniqueNameComponent = cid.replaceAll("_TXMLMAP_IN", "");
	uniqueNameComponent = uniqueNameComponent.replaceAll("_TXMLMAP_OUT", "");
	
	INode graphicalNode = null;
	for(INode loopNode : node.getProcess().getGraphicalNodes()) {
		if(loopNode.getUniqueName().equals(uniqueNameComponent)) {
			graphicalNode = loopNode;
		}
	}
	
	XmlMapData xmlMapData = null;
	if(isVirtualIn || isVirtualOut) {
		xmlMapData=(XmlMapData)ElementParameterParser.getObjectValueXMLTree(graphicalNode);
	} else {
		xmlMapData=(XmlMapData)ElementParameterParser.getObjectValueXMLTree(node);
	}
	boolean isXpath = false;	
	boolean isPlainNode = true;
	boolean outputHasDocument = false;
	EList<OutputXmlTree> outputTables = xmlMapData.getOutputTrees();
	EList<VarTable> varTables = xmlMapData.getVarTables();
	EList<InputXmlTree> inputTables = xmlMapData.getInputTrees();
	if(inputTables.size()>0) {
		InputXmlTree mainInputTable = inputTables.get(0);
		for(TreeNode tmpNode : mainInputTable.getNodes()){
			if(tmpNode.getType().equals("id_Document"))
				isPlainNode = false;
		}
	}

for (OutputXmlTree table : outputTables) {

    
    EList<OutputTreeNode> tableEntries = table.getNodes();
    if (tableEntries == null ) {
        continue;
    }
    for(OutputTreeNode tableEntry : tableEntries) {
        	if(!("id_Document").equals(tableEntry.getType())){

        		String resultExpression = tableEntry.getExpression();
        		if(null !=resultExpression && resultExpression.indexOf("/") != -1)
        		   isXpath = true;        	
			} else {
					outputHasDocument = true;
			}
	}
}
%>


<%
	if((!outputHasDocument && isPlainNode) || (!isPlainNode &&  !outputHasDocument) || (isPlainNode && outputHasDocument) || (!isPlainNode && outputHasDocument)) {
		// Nothing to generate
	}

	if(false){
%>
		} // for input xml loop 
<%
	}
%>


