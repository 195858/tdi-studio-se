<%@ jet 
imports="
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.process.INode
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.process.IConnection
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.core.model.metadata.IMetadataTable
    org.talend.core.model.metadata.types.JavaTypesManager
    org.talend.core.model.metadata.types.JavaType
    org.talend.core.model.process.IConnectionCategory
    java.util.List
    java.util.Map
    "
%>
<%

CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

String sInConnName = null;
List<IMetadataColumn> listInColumns = null;
List<? extends IConnection> listInConns = node.getIncomingConnections();

if (listInConns != null && listInConns.size() > 0) {
    IConnection inConn = listInConns.get(0);
    sInConnName = inConn.getName();
    if (inConn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)){
      listInColumns = inConn.getMetadataTable().getListColumns();
    }
}

String sRejectConnName = null;
List<? extends IConnection> rejectConns = node.getOutgoingConnections("REJECT");
if (rejectConns != null && rejectConns.size() > 0) {
    sRejectConnName = rejectConns.get(0).getName();
}

List<IMetadataColumn> listColumsToTest = listInColumns, listOutColumns = null;
List<? extends IConnection> listOutConns = node.getOutgoingSortedConnections();

if (sInConnName != null && listInColumns != null && listInColumns.size() > 0) {

    for (IConnection outConn : listOutConns) {

    	if (outConn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
            IMetadataTable outTable = outConn.getMetadataTable();

            if (outTable != null) {
                listOutColumns = outTable.getListColumns();
            }
        }

    	if (outConn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
%>
    	    <%=outConn.getName() %> = null;			
<%
    	}

	}
%>
    boolean ifPassed_<%=cid%> = true;
    int errorCode_<%=cid%> = 0;
    String errorMessage_<%=cid%> = "";
    int resultErrorCode_<%=cid%> = 0;
    String resultErrorMessage_<%=cid%> = "";
    String tmpContent_<%=cid%> = null;
<%
    String anotherChecked = ElementParameterParser.getValue(node,"__CHECK_ANOTHER__");
    String checkAll = ElementParameterParser.getValue(node,"__CHECK_ALL__");    
    final boolean bIsTrim = "true".equals( ElementParameterParser.getValue(node,"__SUB_STRING__") );    
    final boolean useFasteDateChecker = "true".equals( ElementParameterParser.getValue(node,"__FAST_DATE_CHECK__") );
    List<IMetadataColumn> schemaOtherColumns = null;
	
    if ("true".equals(anotherChecked)) {
        IMetadataTable schemaOther = node.getMetadataFromConnector("OTHER");

        if (schemaOther != null) {
            listColumsToTest = schemaOther.getListColumns();
        }
    }

    class SchemaChecker {				
        public void  testDataType(String _sInConnName, IMetadataColumn metadataColumn, String typeSelected, String cid) {
            JavaType javaType = JavaTypesManager.getJavaTypeFromId(metadataColumn.getTalendType());
            
            if (javaType == JavaTypesManager.OBJECT || javaType == JavaTypesManager.STRING) {
%>
                try {
<%					
					if (!javaType.isPrimitive()) {
%>
					if (<%=_sInConnName%>.<%=metadataColumn.getLabel()%> != null) {
<%
					}
%>
						<%=typeSelected%> tester_<%=cid%> = <%=typeSelected%>.valueOf(<%=_sInConnName%>.<%=metadataColumn.getLabel()%>);
<%
					if (!javaType.isPrimitive()) {
%>
					}
<%
					} 
%>                
                } catch(Exception e) {
                    ifPassed_<%=cid%> = false;
                    errorCode_<%=cid%> += 2;
                    errorMessage_<%=cid%> += "|wrong type";
                }
<%
            }
        }
		
        public void testDataLength(String _sInConnName, IMetadataColumn metadataColumn, Integer maxLength, String cid) {

            JavaType javaType = JavaTypesManager.getJavaTypeFromId(metadataColumn.getTalendType());
            boolean isPrimitive = JavaTypesManager.isJavaPrimitiveType( javaType, metadataColumn.isNullable());            
            boolean bIsStringType = (javaType == JavaTypesManager.STRING), bIsIntegerType = (javaType == JavaTypesManager.INTEGER);
            
            if (maxLength > 0 && ( bIsStringType || bIsIntegerType )){
%>				
				if ( <%if(!isPrimitive){%> <%=_sInConnName%>.<%=metadataColumn.getLabel()%> != null <%}else{%> true <%}%> ) {
				
<%				
					if ( bIsTrim ){

						if (bIsStringType) {
%>
							if( <%=_sInConnName%>.<%=metadataColumn.getLabel()%>.length() > <%=maxLength%> )
								 <%=_sInConnName%>.<%=metadataColumn.getLabel()%> = <%=_sInConnName%>.<%=metadataColumn.getLabel()%>.substring(0, <%=maxLength%>);
<%
						} else if ( bIsIntegerType ){
							String generatedType = JavaTypesManager.getTypeToGenerate(metadataColumn.getTalendType(), metadataColumn.isNullable());

							if ("int".equals(generatedType)) {
%>
								tmpContent_<%=cid%> = String.valueOf(<%=_sInConnName%>.<%=metadataColumn.getLabel()%>);
<%
							} else{
%>							 
								tmpContent_<%=cid%> = <%=_sInConnName%>.<%=metadataColumn.getLabel()%>.toString();
<%
							}
%>
							if (tmpContent_<%=cid%>.length() > <%=maxLength%>)
									<%=_sInConnName%>.<%=metadataColumn.getLabel()%> = <%=_sInConnName%>.<%=metadataColumn.getLabel()%>.substring(0, <%=maxLength%>);
<%
						}

					} else{
				
						if (bIsStringType) {						
%>									 
							if (<%=_sInConnName%>.<%=metadataColumn.getLabel()%>.length() > <%=maxLength%>) {
								ifPassed_<%=cid%> = false;
								errorCode_<%=cid%> += 8;
								errorMessage_<%=cid%> += "|exceed max length";                        
							}
<%						 
						} else if (bIsIntegerType) {
							String generatedType = JavaTypesManager.getTypeToGenerate(metadataColumn.getTalendType(), metadataColumn.isNullable());

							if ("int".equals(generatedType)) {
%>
								tmpContent_<%=cid%> = String.valueOf(<%=_sInConnName%>.<%=metadataColumn.getLabel()%>);							
<%
							} else {
%>							 
								tmpContent_<%=cid%> = <%=_sInConnName%>.<%=metadataColumn.getLabel()%>.toString();	
<%
							}
%>
							if (tmpContent_<%=cid%>.length() > <%=maxLength%>) {
									ifPassed_<%=cid%> = false;
									errorCode_<%=cid%> += 8;
									errorMessage_<%=cid%> += "|exceed max length";                                
							}
<%
						}
					}
%>
				}
<%			
			}
        }
	
        public void  testDate(String _sInConnName, IMetadataColumn metadataColumn, String pattern, String cid) {
			JavaType javaType = JavaTypesManager.getJavaTypeFromId(metadataColumn.getTalendType());

			if ("".equals(pattern)){
%>
	
				ifPassed_<%=cid%> = false;
				errorCode_<%=cid%> += 2;
				errorMessage_<%=cid%> += "|Date format not defined";

<%			
			} else {            
				
				// date type need check also (some inputting data not legal, beacause original data is not suite with pattern and has be converted)
				
				if (javaType == JavaTypesManager.OBJECT || javaType == JavaTypesManager.STRING || javaType == JavaTypesManager.DATE) {				
%>
					try{
<%
    				if (!useFasteDateChecker) {
%>						
						if (!TalendDate.isDate((<%=_sInConnName%>.<%=metadataColumn.getLabel()%>).toString(), <%=pattern%>))
						  throw new IllegalArgumentException("Data format not matches");
<%
					} else {
%>
						FastDateParser.getInstance(<%=pattern%>, false).parse(<%=_sInConnName%>.<%=metadataColumn.getLabel()%>);						
<%
					}
%>
					} catch(Exception e){

						ifPassed_<%=cid%> = false;
						errorCode_<%=cid%> += 2;
						errorMessage_<%=cid%> += "|wrong DATE pattern or wrong DATE data";
					}
<%				
				} else{
%>	
					ifPassed_<%=cid%> = false;
					errorCode_<%=cid%> += 2;
					errorMessage_<%=cid%> += "|The TYPE of inputting data is error. (one of OBJECT, STRING, DATE)";
<%
				}
			}

        }		

        public void testNull(String _sInConnName, IMetadataColumn metadataColumn, String cid){			
        	boolean isPrimitive = JavaTypesManager.isJavaPrimitiveType(metadataColumn.getTalendType(), metadataColumn.isNullable());

            if (!isPrimitive){
%>
    			// validate nullable
    			if(<%=_sInConnName%>.<%=metadataColumn.getLabel()%> == null) {

                    ifPassed_<%=cid%> = false;
                    errorCode_<%=cid%> += 4;
                    errorMessage_<%=cid%> += "|empty or null";                        
                }
<%
			}
        }
    }

    SchemaChecker checker = new SchemaChecker();    
	List<Map<String, String>> checkedColumns = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node,"__CHECKCOLS__");

    for (IMetadataColumn inColumn : listInColumns) {

        for (Map<String, String> checkedColumn : checkedColumns) {
            if (inColumn.getLabel().equals(checkedColumn.get("SCHEMA_COLUMN"))) {
            	int columnIndex = listInColumns.indexOf(inColumn);

				if ("true".equals(anotherChecked) && (listColumsToTest.size() > columnIndex)) {
            		IMetadataColumn testColumn = listColumsToTest.get(columnIndex);
					String typeToTest = testColumn.getTalendType();
					typeToTest = JavaTypesManager.getTypeToGenerate(typeToTest, true);

					if (("java.util.Date").equals(typeToTest)){						
						checker.testDate(sInConnName,inColumn,testColumn.getPattern(),cid); 
            		}else{
            			checker.testDataType(sInConnName,inColumn,typeToTest,cid);
            		}

				} else {
					String selectedType = checkedColumn.get("SELECTED_TYPE");
					
					if (("Date").equals(selectedType)){					
						checker.testDate(sInConnName, inColumn, checkedColumn.get("DATEPATTERN"), cid); 
            		}else{
                		checker.testDataType(sInConnName,inColumn,selectedType,cid);
                	}
                }

                if (("true").equals(anotherChecked)) {

                	if (listColumsToTest.size() <= columnIndex) {
                		continue;
                	}

                	//if input field is nullable and output field can't nullable, it must check.
                	if (!listColumsToTest.get(columnIndex).isNullable()){
                		checker.testNull(sInConnName,inColumn,cid);
                    }					
					Object maxLength = listColumsToTest.get(columnIndex).getLength();					
					maxLength = (maxLength == null) ? "0" : maxLength;
					
					//if not an integer.
					if (!java.util.regex.Pattern.compile("[0-9]*").matcher(maxLength.toString()).matches() ){
						maxLength = "0";
					}					
                    checker.testDataLength(sInConnName, inColumn, Integer.valueOf(maxLength.toString()), cid);
                    
                } else if(("true").equals(checkAll)){

                	if (listOutColumns.size() <= columnIndex) {
                		continue;
                	}

                	//if input field is nullable and output field can't nullable, it must check.                	
                	if (!listOutColumns.get(columnIndex).isNullable()){
                		checker.testNull(sInConnName,inColumn,cid);
                    }					
					Object maxLength = listOutColumns.get(columnIndex).getLength();					
					maxLength = (maxLength == null) ? "0" : maxLength;
					
					//if not an integer.
					if (!java.util.regex.Pattern.compile("[0-9]*").matcher(maxLength.toString()).matches() ){
						maxLength = "0";
					}					
                    checker.testDataLength(sInConnName, inColumn, Integer.valueOf(maxLength.toString()), cid);
                } else {
                    String checkNullable = checkedColumn.get("NULLABLE");
                    String checkMaxLength = checkedColumn.get("MAX_LENGTH");
                    
					if (("true").equals(checkAll) || !("true").equals(checkNullable)) {
                        checker.testNull(sInConnName,inColumn,cid);
                    } 

					if (("true").equals(checkAll) || ("true").equals(checkMaxLength)) { 						
						Object maxLength = inColumn.getLength();					
						maxLength = (maxLength == null) ? "0" : maxLength;
						
						//if not an integer.
						if (!java.util.regex.Pattern.compile("[0-9]*").matcher(maxLength.toString()).matches() ){
							maxLength = "0";
						}

                    	checker.testDataLength(sInConnName, inColumn, Integer.valueOf(maxLength.toString()), cid);
                    }
                }
%>

				if (errorCode_<%=cid%> >0){

					if (resultErrorCode_<%=cid%> >0){
						resultErrorCode_<%=cid%> = 16;
					}else{
						resultErrorCode_<%=cid%> = errorCode_<%=cid%>;
					}
					errorCode_<%=cid%> = 0;
				}

				if (errorMessage_<%=cid%>.length()>0){
					if (resultErrorMessage_<%=cid%>.length()>0){
						resultErrorMessage_<%=cid%> += ";" + errorMessage_<%=cid%>.replaceFirst("\\|","<%=inColumn.getLabel()%>:");
					}else{
						resultErrorMessage_<%=cid%> = errorMessage_<%=cid%>.replaceFirst("\\|","<%=inColumn.getLabel()%>:");
					}
					errorMessage_<%=cid%>="";
				}
<%
                break;
            }
        }
    }
	
    if (listOutConns != null && listOutConns.size() > 0) {
%>
        if (ifPassed_<%=cid%>) {
<%    
            for (IConnection conn : listOutConns) {
                if (sRejectConnName == null || (sRejectConnName != null && !sRejectConnName.equals(conn.getName()))){
%>
					<%=conn.getName() %> = new <%=conn.getName() %>Struct();
                    <%for (IMetadataColumn inColumn : listInColumns) {
%>
                        <%=conn.getName()%>.<%=inColumn.getLabel()%> = <%=sInConnName%>.<%=inColumn.getLabel()%>;
<%
                    }
                }
            }
%>
        }
<%
    }

    if (sRejectConnName != null) {
%>
        if (!ifPassed_<%=cid%>) {
            <%=sRejectConnName %> = new <%=sRejectConnName %>Struct();
<%
            for (IMetadataColumn inColumn : listInColumns) {
%>
                <%=sRejectConnName%>.<%=inColumn.getLabel()%> = <%=sInConnName%>.<%=inColumn.getLabel()%>;
<%
            }
%>
            <%=sRejectConnName%>.errorCode = String.valueOf(resultErrorCode_<%=cid%>);
            <%=sRejectConnName%>.errorMessage = resultErrorMessage_<%=cid%>;
        }
<%
    }
}
%>
