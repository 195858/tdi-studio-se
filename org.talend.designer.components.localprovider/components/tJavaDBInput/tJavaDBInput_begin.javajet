<%@ jet 
imports="
    	org.talend.core.model.process.INode 
    	org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.core.model.metadata.builder.database.ExtractMetaDataUtils
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType		
		java.util.List
		"
%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	
	INode node = (INode)codeGenArgument.getArgument();
	
	String cid = node.getUniqueName();
	
	String dbhost = ElementParameterParser.getValue(node, "__HOST__");
	
	String dbport = ElementParameterParser.getValue(node, "__PORT__");
	
	String db = ElementParameterParser.getValue(node, "__DB__");
	
	String frameworkType = ElementParameterParser.getValue(node,"__FRAMEWORK_TYPE__");
	
	String dbRootPath = ElementParameterParser.getValue(node, "__DBPATH__");
		
	String dbuser = ElementParameterParser.getValue(node, "__USER__");
	
	String dbpwd = ElementParameterParser.getValue(node, "__PASS__");
	
	String dbencoding = ElementParameterParser.getValue(node, "__ENCODING__");
	
	String dbquery = ElementParameterParser.getValue(node, "__QUERY__");
		   dbquery = dbquery.replaceAll("\n"," ");
		   dbquery = dbquery.replaceAll("\r"," ");
    
	List<IMetadataTable> metadatas = node.getMetadataList();
	if ((metadatas!=null)&&(metadatas.size()>0)) {
		IMetadataTable metadata = metadatas.get(0);
		if (metadata!=null) {%>
			String jdbcDriver_<%=cid%> = null;
			String url_<%=cid%> = null;
			<%
			if(frameworkType.equals("EMBEDED"))
			{
				%>
				jdbcDriver_<%=cid%> = "org.apache.derby.jdbc.EmbeddedDriver";
				url_<%=cid%> = "jdbc:derby:" + <%=db%>;
				//set the root path of the database
				System.setProperty("derby.system.home",<%=dbRootPath%>);
				<%
			}
			else
			{
    			if(frameworkType.equals("JCCJDBC"))
    			{
    				%>
    				jdbcDriver_<%=cid%> = "com.ibm.db2.jcc.DB2Driver";
    				url_<%=cid%> = "jdbc:derby:net://" + <%=dbhost%> + ":" + <%=dbport%> + "/" + <%=db%>;
    				<%
    			}
    			else
    			{
    				%>
    				jdbcDriver_<%=cid%> = "org.apache.derby.jdbc.ClientDriver";
    				url_<%=cid%> = "jdbc:derby://" + <%=dbhost%> + ":" + <%=dbport%> + "/" + <%=db%>;
    				<%
    			}
    			%>
    			<%
    			String connectionFlag = ElementParameterParser.getValue(node, "__CONNECTION_FLAG__");
    			if(connectionFlag.equals("false"))
    			{
    			%>
        			org.apache.derby.drda.NetworkServerControl serverControl_<%=cid%>;
        			serverControl_<%=cid%> = new org.apache.derby.drda.NetworkServerControl(java.net.InetAddress.getByName(<%=dbhost%>),Integer.parseInt(<%=dbport%>));
        			//start server
        			serverControl_<%=cid%>.start(new java.io.PrintWriter(System.out,true));
        			boolean isServerUp_<%=cid%> = false;
        			int timeOut_<%=cid%> = 5;
        			while(!isServerUp_<%=cid%> && timeOut_<%=cid%> > 0)
        			{
        				try
        				{
            				timeOut_<%=cid%>--;
            				/*
    						* testing for connection to see if the network server is up and running.
    						* if server is not ready yet, this method will throw an exception.		
    						*/
            				serverControl_<%=cid%>.ping();
            				isServerUp_<%=cid%> = true;
        				}
    					catch(Exception e) {
    						//Unable to obtain a connection to network server, trying again after 3000 ms.
    						Thread.currentThread().sleep(3000);
    					}    				
        			}
        			if(!isServerUp_<%=cid%>)
        			{
        				/*
    					 * can not obtain a connection to network server.
    					 */ 	 
        				System.exit(1);	
        			}
        			//derby network server started.
    			<%
    			}
			}
			%>
			Class.forName(jdbcDriver_<%=cid%>).newInstance();
			
			java.util.Properties properties_<%=cid%> = new java.util.Properties();
			
			properties_<%=cid%>.put("user",<%=dbuser%>);
			
			properties_<%=cid%>.put("password",<%=dbpwd%>);
			
			java.sql.Connection conn_<%=cid%> = java.sql.DriverManager.getConnection(url_<%=cid%>,properties_<%=cid%>);
						
			java.sql.Statement stmt_<%=cid %> = conn_<%=cid%>.createStatement();
			
			java.sql.ResultSet rs_<%=cid %> = stmt_<%=cid %>.executeQuery(<%=dbquery%>);
			
			java.sql.ResultSetMetaData rsmd_<%=cid %> = rs_<%=cid %>.getMetaData();
			
			int colQtyInRs_<%=cid%> = rsmd_<%=cid %>.getColumnCount();

			globalMap.put("<%=cid %>_QUERY",<%=dbquery%>);

			int nb_line_<%=cid%> = 0;
			
		  <%List< ? extends IConnection> conns = node.getOutgoingSortedConnections();
			List<IMetadataColumn> columnList = metadata.getListColumns();%>
			
            while (rs_<%=cid %>.next()) {
            nb_line_<%=cid%>++;
            
            <%
            if(conns != null && conns.size()>0){
             	IConnection conn = conns.get(0);
             	String firstConnName = conn.getName();
             	int currentColNo = 1;
             	for(IMetadataColumn column:columnList){
             	
             	String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
             	String defVal = JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate);
             	
             	if(conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)){
             	%> 	
             		if(colQtyInRs_<%=cid%><<%=currentColNo%>){
             		
             			<%=firstConnName%>.<%=column.getLabel()%>=<%=defVal%>;
             			
             		}else{
             	  	  <%
             	  	  if(typeToGenerate.equals("byte[]")){
             	  	   	typeToGenerate = "Bytes";
             	   	  }else if(typeToGenerate.equals("java.util.Date")){
             	   	  	typeToGenerate = "Timestamp";
             	   	  }else if(typeToGenerate.equals("Integer")){
             	   	  	typeToGenerate = "Int";
             	   	  }else{
            			typeToGenerate=typeToGenerate.substring(0,1).toUpperCase()+typeToGenerate.substring(1);
            		  }
            		  
            			  if(typeToGenerate.equals("Char")||typeToGenerate.equals("Character")){
            			  %>
            			  	if(rs_<%=cid %>.getString(<%=currentColNo%>)!=null&&(rs_<%=cid %>.getString(<%=currentColNo%>)).length()>0){
            			  	
            			  		<%=firstConnName%>.<%=column.getLabel()%>=rs_<%=cid %>.getString(<%=currentColNo%>).charAt(0);
            			  		
            			  	}else{			  	
            			  	    <%if(typeToGenerate.equals("Character")){%>
            			  	    
            			  	   	if((rs_<%=cid %>.getString(<%=currentColNo%>))==null){
            			  	   	
            			  			<%=firstConnName%>.<%=column.getLabel()%>=null;
            			  			
            			  		}else{
            			  		
            			  			<%=firstConnName%>.<%=column.getLabel()%>='\0';
            			  			
            			  		}
            			  		<%}else{%>
            			  		
            			  		if((rs_<%=cid %>.getString(<%=currentColNo%>)).equals("")){
            			  		
            			  			<%=firstConnName%>.<%=column.getLabel()%> = '\0';
            			  			
            			  		}else{
            			  		
            			  			throw new RuntimeException(
            							"Value is empty for column : '<%=column.getLabel()%>', value is invalid or this column should be nullable or have a default value.");
            							
            					}
            			  		
            			  		<%}%>
            			  	}			
            			  <%
            			  }else if(typeToGenerate.equals("Timestamp")){
            			 %>
            			 if(rs_<%=cid %>.getTimestamp(<%=currentColNo%>)!=null){
            			 	<%=firstConnName%>.<%=column.getLabel()%>=new java.util.Date(rs_<%=cid %>.getTimestamp(<%=currentColNo%>).getTime());
            			 }else{
            			 	<%=firstConnName%>.<%=column.getLabel()%> =  null;
            			 }
            			 <% 	
            			 }else{
             	   		%>
             			<%=firstConnName%>.<%=column.getLabel()%>=rs_<%=cid %>.get<%=typeToGenerate%>(<%=currentColNo%>);
             			<%
             			  }
             			%>
             		}
             		
               	 <%  
               	 	currentColNo++;
                	}
             	}
             	if(conns.size()>1){
             		for(int connNO = 1; connNO < conns.size(); connNO++){
             		  IConnection conn2 = conns.get(connNO);
             		  if((conn2.getName().compareTo(firstConnName)!=0)&&(conn2.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA))){
             		  	for(IMetadataColumn column:columnList){
             		  %>
             		   	<%=conn2.getName()%>.<%=column.getLabel()%>=<%=firstConnName%>.<%=column.getLabel()%>;
             		  <% 
             		  	}
             		  }
             		}
             	}
            }
            		}
            	}
            %>

