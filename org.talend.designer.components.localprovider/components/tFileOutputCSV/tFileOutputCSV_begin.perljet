<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.metadata.IMetadataTable
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.List
"
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
    IMetadataTable metadata = metadatas.get(0);
    if (metadata!=null) {

        String filename = ElementParameterParser.getValue(
            node,
            "__FILENAME__"
        );

        String rowSeparator = ElementParameterParser.getValue(
            node,
            "__ROWSEPARATOR__"
        );

        String fieldSeparator = ElementParameterParser.getValue(
            node,
            "__FIELDSEPARATOR__"
        );

        String append = ElementParameterParser.getValue(
            node,
            "__APPEND__"
        );

        String includeHeader = ElementParameterParser.getValue(
            node,
            "__INCLUDEHEADER__"
        );

        String escapeChar = ElementParameterParser.getValue(
            node,
            "__ESCAPE_CHAR__"
        );

        String textEnclosure = ElementParameterParser.getValue(
            node,
            "__TEXT_ENCLOSURE__"
        );
%>

use FileHandle;
use Text::CSV_XS;

my %desc_<%=cid %> = (
    filename => <%=filename %>,
    schema => [
<%
        for (IMetadataColumn column: metadata.getListColumns()) {
%>
    	{
            name    => '<%=column.getLabel() %>',
        },
<%
        }
%>
    ]
);

my $csv_<%=cid%> = Text::CSV_XS->new({
    'quote_char'  => <%=textEnclosure%>,
    'escape_char' => <%=escapeChar%>,
    'sep_char'    => <%=fieldSeparator%>,
    'binary'      => 1
});


my $nb_line_<%=cid %> = 0;

my $output_FH_<%=cid %> = new FileHandle;

<%
        String appendMode = ">";
        if (append.equals("true")) {
            appendMode = ">>";
        }
%>
open($output_FH_<%=cid %>, '<%=appendMode%>', $desc_<%=cid %>{filename})
    or die '[<%=cid%>] cannot open file "' . $desc_<%=cid %>{filename} . '"';

<%
        if (includeHeader.equals("true")) {
%>
if (not -s $desc_<%=cid %>{filename}) {
    my @fields = map { $_->{name} } @{ $desc_<%=cid %>{schema} };

    if (not $csv_<%=cid%>->print($output_FH_<%=cid %>, \@fields)) {
        die "[<%=cid%>] failed to write header";
    }
    print {$output_FH_<%=cid %>} <%=rowSeparator%>;

    $nb_line_<%=cid %>++;
}
<%
        }
    }
}
%>
