<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn 
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
		java.util.List
    	java.util.Map
    	java.util.Set
    	java.math.BigInteger
	" 
%>
<% 
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
    String cid = node.getUniqueName();	
											
	List<IMetadataTable> metadatas = node.getMetadataList();
	if ((metadatas!=null)&&(metadatas.size()>0)) {
		IMetadataTable metadata = metadatas.get(0);
		if (metadata!=null) {
			String filename = ElementParameterParser.getValue(node,"__FILENAME__");
			String copybook = ElementParameterParser.getValue(node,"__COPYBOOK__");
			
	    	String encoding = ElementParameterParser.getValue(node,"__ENCODING__");
	    	String header = ElementParameterParser.getValue(node, "__HEADER__");
	    	if(header.equals("")){
	    		header="0";
	    	}
	    	String limit = ElementParameterParser.getValue(node, "__LIMIT__");
			if(limit.equals("")){
				limit = "-1";
			}
	    	String footer = ElementParameterParser.getValue(node, "__FOOTER__");
	    	if(footer.equals("")){
	    		footer="0";
	    	}
	    	String random = "-1";
	    	String ran = ElementParameterParser.getValue(node, "__RANDOM__");
	    	if(ran.equals("true")){
	    		random = ElementParameterParser.getValue(node, "__NB_RANDOM__");
	    		if(random.equals("")){
	    			random="0";
	    		}
	    	}
				    	
	    	String rowSeparator = ElementParameterParser.getValue(node, "__ROWSEPARATOR__");
	    	String removeEmptyRowFlag =  ElementParameterParser.getValue(node, "__REMOVE_EMPTY_ROW__");
	    	String dieOnErrorStr = ElementParameterParser.getValue(node, "__DIE_ON_ERROR__");
			boolean dieOnError = (dieOnErrorStr!=null&&!dieOnErrorStr.equals(""))?dieOnErrorStr.equals("true"):false; 
%>

	// open file
	javax.xml.bind.JAXBContext context = javax.xml.bind.JAXBContext.newInstance("net.sf.cobol2j");
	javax.xml.bind.Unmarshaller unmarshaller = context.createUnmarshaller();
	Object o = unmarshaller.unmarshal(new java.io.FileInputStream(<%= copybook %>));
	net.sf.cobol2j.FileFormat fF = (net.sf.cobol2j.FileFormat) o;
	net.sf.cobol2j.RecordSet rset = new net.sf.cobol2j.RecordSet(new java.io.FileInputStream(<%= filename %>), fF);
	java.util.Map recdefs = new net.sf.cobol2j.RecordsMap(fF);
	
	// read every record, for each record split into column definition
	List inrecord;
	while (rset.hasNext()){
		inrecord = rset.next();
		java.util.Iterator data<%=cid%> = inrecord.listIterator();

		{
			
<%			List< ? extends IConnection> conns = node.getOutgoingSortedConnections();
		    String rejectConnName = "";
		    List<? extends IConnection> rejectConns = node.getOutgoingConnections("REJECT");
	    	if(rejectConns != null && rejectConns.size() > 0) {
	        	IConnection rejectConn = rejectConns.get(0);
	        	rejectConnName = rejectConn.getName();
	    	}
	    	List<IMetadataColumn> rejectColumnList = null;
	    	IMetadataTable metadataTable = node.getMetadataFromConnector("REJECT");
	    	if(metadataTable != null) {
	        	rejectColumnList = metadataTable.getListColumns();
	    	}
    		if (conns!=null && conns.size()>0) {
				for (int i=0;i<conns.size();i++) {
					IConnection connTemp = conns.get(i);
					if (connTemp.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
%>
    		<%=connTemp.getName() %> = null;			
<%
					}
				}
    		}
			if (conns!=null && conns.size()>0) {
				List<IConnection> connections = new java.util.ArrayList<IConnection>();
				Map<String, List<IMetadataColumn>> connectionMapColumnList = new java.util.HashMap<String, List<IMetadataColumn>>();
				Map<String, String> connectionMapRecordType = new java.util.HashMap<String, String>();
				for(int i=0;i<conns.size();i++){
					IConnection connTemp = conns.get(i);
		            if (connTemp.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
		               IMetadataTable tempMetadataTable = connTemp.getMetadataTable();
		               List<IMetadataColumn> listColumns = tempMetadataTable.getListColumns();
		               connections.add(connTemp);
		               connectionMapColumnList.put(connTemp.getName(), listColumns);
					}
				}
				List<Map<String, String>> schemas = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__SCHEMAS__");
				for(IConnection connection : connections){
		            for(Map<String, String> schemaMap : schemas){
		               if(schemaMap.get("SCHEMA").equals(connection.getMetadataTable().getLabel())){
		                   connectionMapRecordType.put(connection.getName(), schemaMap.get("CODE"));
		                   break;
		               } else {
		                   continue;
		               }
		            }
				}		%>

 			boolean whetherReject_<%=cid %> = false;
 			
 <%				Set<Map.Entry<String, List<IMetadataColumn>>> dataconns = connectionMapColumnList.entrySet();
				for( Map.Entry<String, List<IMetadataColumn>> dataconn : dataconns ){ 			%>

			if(  inrecord.get(0).equals("<%=connectionMapRecordType.get( dataconn.getKey() ) %>") || recdefs.size() == 1 ){
		
				try {
					<%=dataconn.getKey() %> = new <%=dataconn.getKey() %>Struct();

<%					List<IMetadataColumn> listColumns = connectionMapColumnList.get(dataconn.getKey());
					int sizeListColumns = listColumns.size();
					boolean noStringTypeExist = false;
					for (int valueN=0; valueN<sizeListColumns; valueN++) {
						IMetadataColumn column = listColumns.get(valueN);
						JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
						if(javaType == JavaTypesManager.STRING || javaType == JavaTypesManager.OBJECT){
	
						}else{
							noStringTypeExist = true;
							break;
						}
					}
					if(noStringTypeExist){			%>

					String temp_<%=cid %> = "";

<%					}			%>

					Object cellvalue;
					String cell_string;
					BigDecimal cell_bigdecimal;

<%					for (int valueN=0; valueN<sizeListColumns; valueN++) {
						IMetadataColumn column = listColumns.get(valueN);
						JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());		%>

					cellvalue = inrecord.get(<%=valueN%>);
					
					<%=dataconn.getKey() %>.<%=column.getLabel()%> = (<%=javaType.getLabel() %>)cellvalue;
					
//					<%=dataconn.getKey() %>.<%=column.getLabel()%> = 
//						(<%=dataconn.getKey() %>.<%=column.getLabel()%>).getClass().cast(cellvalue);
					
<%					}			
					if(rejectConnName.equals(dataconn.getKey())) {			%>

					<%=dataconn.getKey() %> = null; 
				
				<%	}	%>
				
				} catch (Exception e) {
	        		whetherReject_<%=cid%> = true;

<%					if (dieOnError) {    %>
            		throw(e);
<%					} else {
            			if(!rejectConnName.equals("")&&!rejectConnName.equals(dataconn.getKey())&&rejectColumnList != null && rejectColumnList.size() > 0) {                %>                    

					<%=rejectConnName %> = new <%=rejectConnName %>Struct();
				
<%							for(IMetadataColumn column : metadata.getListColumns()) {                    %>

                	<%=rejectConnName%>.<%=column.getLabel()%> = <%=dataconn.getKey()%>.<%=column.getLabel()%>;

<%							}			%>

	                <%=rejectConnName%>.errorMessage = e.getMessage();
	                <%=dataconn.getKey() %> = null;

                <%		} else if(rejectConnName.equals("")){		%>

	                System.err.println(e.getMessage());
	                <%=dataconn.getKey() %> = null;

                <%		} else if(rejectConnName.equals(dataconn.getKey())){		%>
                
	            	<%=rejectConnName%>.errorMessage = e.getMessage();

<%						}
        			}				%>
        			
    			}
			}

<%					if (conns.size()>0) {	
						boolean isFirstEnter = true;
						for (int i=0;i<conns.size();i++) {
							IConnection conn = conns.get(i);
							if ((dataconn.getKey().compareTo(dataconn.getKey())!=0)&&(dataconn.getKey().compareTo(rejectConnName)!=0)&&(conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA))) {
 								if(isFirstEnter) {				%>
			
			if(!whetherReject_<%=cid%>) { 
			
<% 									isFirstEnter = false; 
								} %>
			      
	            if(<%=dataconn.getKey() %> == null){ 
	            	<%=dataconn.getKey() %> = new <%=dataconn.getKey() %>Struct();
	            }

<%								for (IMetadataColumn column: metadata.getListColumns()) {			%>

	    	<%=dataconn.getKey() %>.<%=column.getLabel() %> = <%=dataconn.getKey() %>.<%=column.getLabel() %>;    				

<%					 			}
							}
						}

						if(!isFirstEnter) {				%>
	
			}
		}

<%						}
					}
				}
			}
		}
	}		%>