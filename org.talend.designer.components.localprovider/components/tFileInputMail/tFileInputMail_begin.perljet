<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn 
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.Map
    java.util.List
" 
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
    IMetadataTable metadata = metadatas.get(0);
    if (metadata!=null) {
        // component id

        String filename = ElementParameterParser.getValue(
            node,
            "__FILENAME__"
        );

        String attachmentpath = ElementParameterParser.getValue(
            node,
            "__ATTACHMENT_PATH__"
        );


        List<Map<String, String>> mailParts =
            (List<Map<String,String>>)ElementParameterParser.getObjectValue(
                node,
                "__MAIL_PARTS__"
            );
%>

use FileHandle;
use Email::Filter;
<%
if(attachmentpath != null && attachmentpath.length() > 0){
%>
use File::Path;
use MIME::Parser;
<%
}
%>

my %desc_<%=cid%> = (
    filename      => <%=filename %>,
    schema        => [
<%
        for (IMetadataColumn column: metadata.getListColumns()) {
%>
        {
            name    => '<%=column.getLabel() %>',
            key     => <%=column.isKey() %>,
            type    => '<%=column.getSourceType() %>',
            len     => <%=column.getLength() %>,
            null    => <%=column.isNullable() %>,
            default => '<%=column.getDefault() %>',
            comment => '<%=column.getComment() %>',
        },
<%
        }
%>
    ],
    mail_parts    => [
<%
        for (int i = 0; i < mailParts.size(); i++) {
            Map<String, String> mailPart = mailParts.get(i);
%>
        <%= mailPart.get("MAIL_PART") %>,
<%
        }
%>
    ],

);

my $nb_fields_<%=cid%> = scalar @{ $desc_<%=cid%>{schema} };

<%
if(attachmentpath != null && attachmentpath.length() > 0){
%>

my $parser_<%=cid%> = new MIME::Parser;

$parser_<%=cid%>->output_under(<%=attachmentpath%>);

my $entity_<%=cid%> = eval { 
    $parser_<%=cid%>->parse_open($desc_<%=cid %>{filename}); 
} ;

if(!$entity_<%=cid%>){
    # parse failed, we clean-up directory
    rmtree($parser_<%=cid%>->output_dir);
    die "[<%=cid%>] parse failed: $@";} 
else {
    $_globals{<%=cid %>}{ATTACHMENT_OUTPUT_PATH} = $parser_<%=cid%>->output_dir;
}		          

my @<%=cid%> = ();
my $col_num = 0;

foreach my $mail_part (@{ $desc_<%=cid%>{mail_parts} }) {

    if ($mail_part eq 'body') {
        $<%=cid%>[$col_num] = $entity_<%=cid%>->print_body();
    }
    else {
        $<%=cid%>[$col_num] = $entity_<%=cid%>->head->get($mail_part);
    }
    chomp $<%=cid%>[$col_num];
    $<%=cid%>[$col_num] =~ s/\n//g;
    
    $col_num++;
}


<%
} 
else
{
%>


my $input_FH_<%=cid %> = new FileHandle;
open($input_FH_<%=cid %>, '<', $desc_<%=cid %>{filename})
    or die 'cannot open file "' . $desc_<%=cid %>{filename} . '"';

my $mail_data_<%=cid %> = join('', <$input_FH_<%=cid %>>);
close($input_FH_<%=cid %>);

my $mail_<%=cid%> = Email::Filter->new(data => $mail_data_<%=cid %>);

my @<%=cid%> = ();
my $col_num = 0;

foreach my $mail_part (@{ $desc_<%=cid%>{mail_parts} }) {

    if ($mail_part eq 'body') {
        $<%=cid%>[$col_num] = $mail_<%=cid%>->body();
    }
    else {
        $<%=cid%>[$col_num] = $mail_<%=cid%>->header($mail_part);
    }

    $col_num++;
}

<%
} 
%>


my $<%=cid%> = \@<%=cid%>;

<%
    }
}
%>
