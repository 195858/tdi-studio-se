<%@ jet 
package="org.talend.designer.codegen.translators" 
imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.EConnectionType
		org.talend.designer.codegen.config.CodeGeneratorArgument
		java.util.List
		java.util.Map
	" 
class="FileInputMailBegin" 
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();

List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
    IMetadataTable metadata = metadatas.get(0);
    if (metadata!=null) {
        // component id
        String cid = node.getUniqueName();
        String filename = ElementParameterParser.getValue(node,"__FILENAME__");
        String directory = ElementParameterParser.getValue(node,"__ATTACHMENT_PATH__");
        List<Map<String, String>> mailParts = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node,"__MAIL_PARTS__");
        List<IMetadataColumn> listColumns = metadata.getListColumns();         
%> 
	if(!<%=directory%>.endsWith("/")){
           globalMap.put("<%=cid %>_EXPORTED_FILE_PATH",<%=directory%> + "/");
        		}else
        		{
        globalMap.put("<%=cid %>_EXPORTED_FILE_PATH",<%=directory%>);
        		}

///////////////////////////////////     
   String [] mailParts_<%=cid %> = new String [] {
<%
	for (int i=0; i<mailParts.size(); i++) {
	   Map<String, String> lineValue = mailParts.get(i);
%>
	 	<%= lineValue.get("MAIL_PART") %>,
<%
	}
%>
	};
	javax.mail.Session session_<%=cid %> = javax.mail.Session.getDefaultInstance(System.getProperties(), null);
    javax.mail.internet.MimeMessage msg_<%=cid %> = new javax.mail.internet.MimeMessage(session_<%=cid %>, new java.io.FileInputStream(<%=filename %>));
	java.util.List<String> list_<%=cid %> = new java.util.ArrayList<String>();

	for (int i_<%=cid %> =0;i_<%=cid %> < mailParts_<%=cid %>.length;i_<%=cid %>++)
	{				
		String part_<%=cid %> = mailParts_<%=cid %>[i_<%=cid %>];
            
        if(!part_<%=cid %>.equalsIgnoreCase("body"))
        {
           String content_<%=cid %> = msg_<%=cid %>.getHeader(part_<%=cid %>, null);
           list_<%=cid %>.add(content_<%=cid %> == null? "":content_<%=cid %>);
        }
        else
        {
           java.io.InputStream in_<%=cid %> = msg_<%=cid %>.getInputStream();
           byte[] buffer_<%=cid %> = new byte[1024];
           int length_<%=cid %> = 0;
           java.io.ByteArrayOutputStream baos_<%=cid %> =  new java.io.ByteArrayOutputStream();              
           while ((length_<%=cid %> = in_<%=cid %>.read(buffer_<%=cid %>, 0, 1024)) != -1) {               
               baos_<%=cid %>.write(buffer_<%=cid %>, 0, length_<%=cid %>);                                       
           }
           list_<%=cid %>.add(baos_<%=cid %>.toString());
           in_<%=cid %>.close();
           baos_<%=cid %>.close();                
        }   
 	}           
 	//attachment Deal
 	if(msg_<%=cid %>.isMimeType("multipart/*")){
 	      javax.mail.Multipart mp<%=cid%> = (javax.mail.Multipart) msg_<%=cid %>.getContent();
 	      String attachfileName<%=cid%> = "";
 	      String path<%=cid%> = "";
 	      java.io.BufferedOutputStream out<%=cid%> = null;
 	      java.io.BufferedInputStream in<%=cid%> = null;
            for (int i = 0; i < mp<%=cid%>.getCount(); i++) {
                javax.mail.BodyPart mpart<%=cid%> = mp<%=cid%>.getBodyPart(i);
                String disposition<%=cid%> = mpart<%=cid%>.getDisposition();
                if ((disposition<%=cid%> != null)
                        && ((disposition<%=cid%>.equals(javax.mail.Part.ATTACHMENT)) || (disposition<%=cid%>.equals(javax.mail.Part.INLINE)))) {
                    attachfileName<%=cid%> = mpart<%=cid%>.getFileName();
                     if(!<%=directory%>.endsWith("/")){
           				 path<%=cid%> = <%=directory%> + "/";
        				}else
        				{
        					path<%=cid%> =<%=directory%>;
        				}
                    path<%=cid%> = path<%=cid%> + attachfileName<%=cid%>;
                    java.io.File attachFile  = new java.io.File(path<%=cid%>);
                    out<%=cid%> = new java.io.BufferedOutputStream(new java.io.FileOutputStream(attachFile));
                    in<%=cid%> = new java.io.BufferedInputStream(mpart<%=cid%>.getInputStream());
                    int buffer<%=cid%> = 0;
                    while ((buffer<%=cid%> = in<%=cid%>.read()) != -1) {
                           out<%=cid%>.write(buffer<%=cid%>);
                           out<%=cid%>.flush();
                         }   
                        out<%=cid%>.close();
                        in<%=cid%>.close();    
                }
            }
 	}
 	          
// for output     
<%  
	List< ? extends IConnection> conns = node.getOutgoingConnections(); 
    for (int j=0;j<conns.size();j++) { 
       IConnection conn = conns.get(j);        
       if (((conn.getLineStyle().equals(EConnectionType.FLOW_MAIN))||(conn.getLineStyle().equals(EConnectionType.FLOW_REF))))         
       {
       	   for (int m=0; m<listColumns.size(); m++) {
%>            
      <%=conn.getName() %>.<%=listColumns.get(m).getLabel() %> = list_<%=cid %>.get(<%=m %>);            
<% 
      }
   }
} 
%>
/////////////////////////////////// 
<%
  }
}  
 %>