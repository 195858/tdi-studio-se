<%@ jet 
imports="
    	org.talend.core.model.process.INode 
    	org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
		java.util.List
		java.util.Map
		java.util.Enumeration
	" 
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();

List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
    IMetadataTable metadata = metadatas.get(0);
    if (metadata!=null) {
        // component id
        String cid = node.getUniqueName();
        String filename = ElementParameterParser.getValue(node,"__FILENAME__");
        String directory = ElementParameterParser.getValue(node,"__ATTACHMENT_PATH__");
        List<Map<String, String>> mailParts = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node,"__MAIL_PARTS__");
      
%> 
	if(!<%=directory%>.endsWith("/")){
           globalMap.put("<%=cid %>_EXPORTED_FILE_PATH",<%=directory%> + "/");
        		}else
        		{
        globalMap.put("<%=cid %>_EXPORTED_FILE_PATH",<%=directory%>);
        		}

///////////////////////////////////     
   String [] mailParts_<%=cid %> = new String [] {
<%
	for (int i=0; i<mailParts.size(); i++) {
	   Map<String, String> lineValue = mailParts.get(i);
%>
	 	<%= lineValue.get("MAIL_PART") %>,
<%
	}
%>
	};
   String [] mailChecked_<%=cid %> = new String [] {
<%
	for (int i=0; i<mailParts.size(); i++) {
	   Map<String, String> lineValue = mailParts.get(i);
%>
	 	"<%= lineValue.get("MULTI_VALUE") %>",
<%
	}
%>
	};
	   String [] mailSeparator_<%=cid %> = new String [] {
<%
	for (int i=0; i<mailParts.size(); i++) {
	   Map<String, String> lineValue = mailParts.get(i);
	   if(lineValue.get("PART_SEPARATOR").equals("")){
%>
			<%="\"\""%>,
<%		}else{%>
	 		<%= lineValue.get("PART_SEPARATOR") %>,
<%
		}
	}
%>
	};
	javax.mail.Session session_<%=cid %> = javax.mail.Session.getDefaultInstance(System.getProperties(), null);
    javax.mail.internet.MimeMessage msg_<%=cid %> = new javax.mail.internet.MimeMessage(session_<%=cid %>, new java.io.FileInputStream(<%=filename %>));
	java.util.List<String> list_<%=cid %> = new java.util.ArrayList<String>();

	for (int i_<%=cid %> =0;i_<%=cid %> < mailParts_<%=cid %>.length;i_<%=cid %>++)
	{				
		String part_<%=cid %> = mailParts_<%=cid %>[i_<%=cid %>];
       	String sep_<%=cid%>= mailSeparator_<%=cid %>[i_<%=cid %>];
        if(part_<%=cid %>.equalsIgnoreCase("body"))
        { 
           java.io.InputStream in_<%=cid %> = msg_<%=cid %>.getInputStream();
           byte[] buffer_<%=cid %> = new byte[1024];
           int length_<%=cid %> = 0;
           java.io.ByteArrayOutputStream baos_<%=cid %> =  new java.io.ByteArrayOutputStream();              
           while ((length_<%=cid %> = in_<%=cid %>.read(buffer_<%=cid %>, 0, 1024)) != -1) {               
               baos_<%=cid %>.write(buffer_<%=cid %>, 0, length_<%=cid %>);                                       
           }
           list_<%=cid %>.add(baos_<%=cid %>.toString());
           in_<%=cid %>.close();
           baos_<%=cid %>.close();      
 
        }else if(part_<%=cid %>.equalsIgnoreCase("header")){
            java.util.Enumeration em = msg_<%=cid %>.getAllHeaderLines();
            int em_count=0;
            
            String tempStr_<%=cid %>="";
            
			while (em.hasMoreElements()) {
				tempStr_<%=cid %> = tempStr_<%=cid %> + (String) em.nextElement() + sep_<%=cid%> ;
			}
			list_<%=cid%>.add(tempStr_<%=cid %>);
        }else{
        	if(mailChecked_<%=cid %>[i_<%=cid%>].equals("true")){   
				String[] sa_<%=cid%> = msg_<%=cid %>.getHeader(part_<%=cid%>);
				String tempStr_<%=cid%>="";
				for(int i=0;i<sa_<%=cid%>.length;i++){
					tempStr_<%=cid%>=tempStr_<%=cid%>+sa_<%=cid%>[i] + sep_<%=cid%>;
				}
				list_<%=cid%>.add(tempStr_<%=cid%>);
        	}else{ 
	           String content_<%=cid %> = msg_<%=cid %>.getHeader(part_<%=cid %>, null);
	           list_<%=cid %>.add(content_<%=cid %>);
           	}    
        }   
 	}           
 	//attachment Deal
 	if(msg_<%=cid %>.isMimeType("multipart/*")){
 	      javax.mail.Multipart mp<%=cid%> = (javax.mail.Multipart) msg_<%=cid %>.getContent();
 	      String attachfileName<%=cid%> = "";
 	      String path<%=cid%> = "";
 	      java.io.BufferedOutputStream out<%=cid%> = null;
 	      java.io.BufferedInputStream in<%=cid%> = null;
            for (int i = 0; i < mp<%=cid%>.getCount(); i++) {
                javax.mail.BodyPart mpart<%=cid%> = mp<%=cid%>.getBodyPart(i);
                String disposition<%=cid%> = mpart<%=cid%>.getDisposition();
                if ((disposition<%=cid%> != null)
                        && ((disposition<%=cid%>.equals(javax.mail.Part.ATTACHMENT)) || (disposition<%=cid%>.equals(javax.mail.Part.INLINE)))) {
                    attachfileName<%=cid%> = mpart<%=cid%>.getFileName();
                     if(!<%=directory%>.endsWith("/")){
           				 path<%=cid%> = <%=directory%> + "/";
        				}else
        				{
        					path<%=cid%> =<%=directory%>;
        				}
                    path<%=cid%> = path<%=cid%> + attachfileName<%=cid%>;
                    java.io.File attachFile  = new java.io.File(path<%=cid%>);
                    out<%=cid%> = new java.io.BufferedOutputStream(new java.io.FileOutputStream(attachFile));
                    in<%=cid%> = new java.io.BufferedInputStream(mpart<%=cid%>.getInputStream());
                    int buffer<%=cid%> = 0;
                    while ((buffer<%=cid%> = in<%=cid%>.read()) != -1) {
                           out<%=cid%>.write(buffer<%=cid%>);
                           out<%=cid%>.flush();
                         }   
                        out<%=cid%>.close();
                        in<%=cid%>.close();    
                }
            }
 	}
 	         
 	          
// for output
<%
	List< ? extends IConnection> conns = node.getOutgoingSortedConnections();
	String firstConnName = "";
	if (conns!=null) {//1
		if (conns.size()>0) {//2
		
			IConnection conn = conns.get(0); //the first connection
			firstConnName = conn.getName();			
			if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {//3

			List<IMetadataColumn> columns=metadata.getListColumns();
			int columnSize = columns.size();
			for (int i=0;i<columnSize;i++) {//4
					IMetadataColumn column=columns.get(i);
					String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
					JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
					String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
			%>
						
			
			if(<%=i %> < list_<%=cid %>.size() && list_<%=cid %>.get(<%=i %>)!=null){				
<%
					if(javaType == JavaTypesManager.STRING || javaType == JavaTypesManager.OBJECT) { //String and Object
%>
					<%=conn.getName() %>.<%=column.getLabel() %> = (String)list_<%=cid %>.get(<%=i %>);
<%
					} else if(javaType == JavaTypesManager.DATE) { //Date
%>
					<%=conn.getName() %>.<%=column.getLabel() %> = ParserUtils.parseTo_Date(list_<%=cid %>.get(<%=i %>), <%= patternValue %>);
<%
					} else if(javaType == JavaTypesManager.BYTE_ARRAY) { //byte[]
%>
					<%=conn.getName() %>.<%=column.getLabel() %> = list_<%=cid %>.get(<%=i %>).getBytes();
<%
					}else  { //other
%>						
					<%=conn.getName() %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%= typeToGenerate %>(list_<%=cid %>.get(<%=i %>));
<%
					}
%>
			
			} else { 
			
					<%=conn.getName() %>.<%=column.getLabel() %> = <%=JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate)%>;
			}
			
			
<%			
			} //4
		}//3
		
		
		if (conns.size()>1) {
			for (int i=1;i<conns.size();i++) {
				IConnection conn2 = conns.get(i);
				if ((conn2.getName().compareTo(firstConnName)!=0)&&(conn2.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA))) {
			    	for (IMetadataColumn column: metadata.getListColumns()) {%>
      			<%=conn2.getName() %>.<%=column.getLabel() %> = <%=firstConnName %>.<%=column.getLabel() %>;
				 <%
				 	}
				}
			}
		}
		
		
	}//2
	
}//1

%> 
////////////////////////////
<%
  }
}  
 %>