<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn 
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.IConnectionCategory
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.Map
    java.util.List
    org.talend.core.model.metadata.types.JavaTypesManager
	org.talend.core.model.metadata.types.JavaType

" 
%>


<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();

String cid = node.getUniqueName();

List< ? extends IConnection> conns = node.getOutgoingSortedConnections();

String fileName = ElementParameterParser.getValue(node, "__SELECTED_FILE__");

List<Map<String, String>> schemas = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__SCHEMAS__");

if(conns!=null && conns.size()>0){
%>

class KnowledgeBase_<%=cid %>{
	
	public final int BASE_DRL=0;
	
	public final int BASE_XLS=1;
	
	String fileName = null;
	int style = 0;

	
	KnowledgeBase_<%=cid %>(String filename){
		this.fileName = filename;
		
		if(this.fileName!=null){
			if(fileName.endsWith(".drl")){
				this.style = BASE_DRL;
			}else if(fileName.endsWith(".xls")){
				this.style = BASE_XLS;
			}
		}
	}
	
	public org.drools.KnowledgeBase readKnowledgeBase(){
		switch(style){
			case BASE_DRL:
				return readKnowledgeBaseDRL();
			case BASE_XLS:
				return readKnowledgeBaseXLS();
			default:
				return null;
		}
	}
	
	public org.drools.KnowledgeBase readKnowledgeBaseDRL(){
	
        org.drools.builder.KnowledgeBuilder kbuilder = org.drools.builder.KnowledgeBuilderFactory.newKnowledgeBuilder();
        kbuilder.add(org.drools.io.ResourceFactory.newClassPathResource(this.fileName), org.drools.builder.ResourceType.DRL);
	System.out.println(this.fileName);
        org.drools.builder.KnowledgeBuilderErrors errors = kbuilder.getErrors();
        if (errors.size() > 0) {
            for (org.drools.builder.KnowledgeBuilderError error : errors) {
                System.err.println(error);
            }
            throw new IllegalArgumentException("Could not parse knowledge.");
        }
        org.drools.KnowledgeBase kbase = org.drools.KnowledgeBaseFactory.newKnowledgeBase();
        kbase.addKnowledgePackages(kbuilder.getKnowledgePackages());
        return kbase;
        
	}
	
	public org.drools.KnowledgeBase readKnowledgeBaseXLS(){
	
        org.drools.builder.KnowledgeBuilder kbuilder = org.drools.builder.KnowledgeBuilderFactory.newKnowledgeBuilder();
		org.drools.builder.DecisionTableConfiguration config = org.drools.builder.KnowledgeBuilderFactory.newDecisionTableConfiguration();
		config.setInputType(org.drools.builder.DecisionTableInputType.XLS);
		kbuilder.add(org.drools.io.ResourceFactory.newClassPathResource(this.fileName), org.drools.builder.ResourceType.DTABLE, config);
        org.drools.builder.KnowledgeBuilderErrors errors = kbuilder.getErrors();
        if (errors.size() > 0) {
            for (org.drools.builder.KnowledgeBuilderError error : errors) {
                System.err.println(error);
            }
            throw new IllegalArgumentException("Could not parse knowledge.");
        }
        org.drools.KnowledgeBase kbase = org.drools.KnowledgeBaseFactory.newKnowledgeBase();
        kbase.addKnowledgePackages(kbuilder.getKnowledgePackages());
        return kbase;
        
	}
	
}

int nb_line_<%=cid %> = 0;

java.util.List<Object> List_<%=cid %> = new java.util.ArrayList<Object>();
org.drools.KnowledgeBase kbase_<%=cid %> = new KnowledgeBase_<%=cid %>(<%=fileName %>).readKnowledgeBase();
org.drools.runtime.StatefulKnowledgeSession ksession_<%=cid %> = kbase_<%=cid %>.newStatefulKnowledgeSession();
<%
}
%>