<%@ jet 
imports="
	org.talend.designer.codegen.config.CodeGeneratorArgument
	org.talend.core.model.process.INode
	org.talend.core.model.process.ElementParameterParser
	org.talend.core.model.process.IConnection
	org.talend.core.model.metadata.IMetadataColumn
	org.talend.core.model.metadata.IMetadataTable
	org.talend.core.model.metadata.types.JavaTypesManager
	org.talend.core.model.metadata.types.JavaType 
	
	java.util.List
	java.util.ArrayList
	java.util.Map
	java.util.HashMap
	java.util.LinkedList
	
"
%>



<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	
	String cid = node.getUniqueName();
	
	String dataAction = ElementParameterParser.getValue(node,"__DATA_ACTION__");
    String dieOnError = ElementParameterParser.getValue(node, "__DIE_ON_ERROR__");
	String tableName = ElementParameterParser.getValue(node,"__TABLE__");
%>


<%	
	List<Map<String, String>> addCols =
            (List<Map<String,String>>)ElementParameterParser.getObjectValue(node,"__ADD_COLS__");
            
    String commitEvery = ElementParameterParser.getValue(node, "__COMMIT_EVERY__");
	
	String incomingConnName = null;
	List<IMetadataColumn> columnList = null;
	
	List< ? extends IConnection> conns = node.getIncomingConnections();
	if(conns!=null && conns.size()>0){
		IConnection conn = conns.get(0);
		incomingConnName = conn.getName();
	}
	
	List<IMetadataTable> metadatas = node.getMetadataList();
	
	if(metadatas != null && metadatas.size()>0){
		IMetadataTable metadata = metadatas.get(0);
		if(metadata != null){
			columnList = metadata.getListColumns();
		}
	}
	
    String rejectConnName = null;
    List<? extends IConnection> rejectConns = node.getOutgoingConnections("REJECT");
    if(rejectConns != null && rejectConns.size() > 0) {
        IConnection rejectConn = rejectConns.get(0);
        rejectConnName = rejectConn.getName();
    }
    List<IMetadataColumn> rejectColumnList = null;
    IMetadataTable metadataTable = node.getMetadataFromConnector("REJECT");
    if(metadataTable != null) {
        rejectColumnList = metadataTable.getListColumns();      
    }
    
    List<? extends IConnection> outgoingConns = node.getOutgoingSortedConnections();

///////////////Inner Class Column///////////////////////////
class Column{

	IMetadataColumn column;
	
	String name;
	
	String sqlStmt;
	
	String value;
	
	boolean addCol;
	
	List<Column> replacement = new ArrayList<Column>();
	
	public Column(String colName,String sqlStmt,boolean addCol){
		this.column = null;
		this.name = colName;
		this.sqlStmt = sqlStmt;
		this.value = "?";
		this.addCol =addCol;
	}
	
	public Column(IMetadataColumn column){
		this.column = column;
		this.name = column.getLabel();
		this.sqlStmt = "=?";
		this.value = "?";
		this.addCol =false;
	}
	
	public boolean isReplaced(){
		return replacement.size()>0;
	}
	
	public void replace(Column column){
		this.replacement.add(column);
	}
	
	public List<Column> getReplacement(){
		return this.replacement;
	}
	
	public void setColumn(IMetadataColumn column){
		this.column = column;
	}
	
	public IMetadataColumn getColumn(){
		return this.column;
	}
	
	public void setName(String name){
		this.name = name;
	}

	public String getName(){
		return this.name;
	}
	
	public void setIsAddCol(boolean isadd){
		this.addCol = isadd;
	}
	
	public boolean isAddCol(){
		return this.addCol;
	}
	
	public void setSqlStmt(String sql){
		this.sqlStmt = sql;
	}
	
	public String getSqlStmt(){
		return this.sqlStmt;
	}
	
	public void setValue(String value){
		this.value = value;
	}
	
	public String getValue(){
		return this.value;
	}
}
	StringBuffer insertColName = new StringBuffer();
	
	StringBuffer insertValueStmt = new StringBuffer();
	
	StringBuffer updateSetStmt = new StringBuffer();
	
	StringBuffer updateWhereStmt = new StringBuffer();
	
	List<Column> stmtStructure =  new LinkedList<Column>();
	
for(IMetadataColumn column:columnList){
	stmtStructure.add(new Column(column));
}

for(IMetadataColumn column:columnList){
	if(addCols != null && addCols.size()>0){
		for(Map<String, String> addCol:addCols){
			if(addCol.get("REFCOL").equals(column.getLabel())){
				int stmtIndex = 0;
				
				for(Column stmtStr:stmtStructure){					
					if(stmtStr.getName().equals(addCol.get("REFCOL"))){
						break;
					}
					stmtIndex++;
				}
				
				if(addCol.get("POS").equals("AFTER")){
					Column insertAfter = new Column(addCol.get("NAME"),addCol.get("SQL"),true);
					stmtStructure.add(stmtIndex+1,insertAfter);
				}else if(addCol.get("POS").equals("BEFORE")){
					Column insertBefore = new Column(addCol.get("NAME"),addCol.get("SQL"),true);
					stmtStructure.add(stmtIndex,insertBefore);
				}else if(addCol.get("POS").equals("REPLACE")){
					Column replacementCol = new Column(addCol.get("NAME"),addCol.get("SQL"),true);
					Column replacedCol = (Column) stmtStructure.get(stmtIndex);
					replacedCol.replace(replacementCol);
				}
			}
		}
	}
}

////////////////////////////////////////////////////////////
List<Column> colStruct =  new ArrayList();
for(Column colStmt:stmtStructure){
	if(!colStmt.isReplaced()&&!colStmt.isAddCol()){
		colStruct.add(colStmt);
	}
}

/////////////////Inner Class Operation///////////////////////
class Operation{
	public static final int NORMAL_TYPE = 0;
	public static final int INSERT_TYPE = 1;
	public static final int UPDATE_TYPE = 2;
	
	public String generateType(String typeToGenerate){
		if(typeToGenerate.equals("byte[]")){
 	  		typeToGenerate = "Bytes";
 	   	}else if(typeToGenerate.equals("java.util.Date")){
 	   		typeToGenerate = "Date";
 	  	}else if(typeToGenerate.equals("Integer")){
 	   		typeToGenerate = "Int";
 	   	}else{
			typeToGenerate=typeToGenerate.substring(0,1).toUpperCase()+typeToGenerate.substring(1);
		}
		return typeToGenerate;
	}
	
	public void generateSetStmt(String typeToGenerate,Column column,
								int counter,String incomingConnName,String cid,int stmtType){
		boolean isObject = false;								
		String prefix = null;								
		if(stmtType == Operation.NORMAL_TYPE){
			prefix = "pstmt_";
		}else if(stmtType == Operation.INSERT_TYPE){
			prefix = "pstmtInsert_";
		}else if(stmtType == Operation.UPDATE_TYPE){
			prefix = "pstmtUpdate_";
		}
		%>

	<%if(typeToGenerate.equals("Character")){
	isObject = true;
	%>
if(<%=incomingConnName%>.<%=column.getName()%>==null){
	<%=prefix+cid%>.setNull(<%=counter%>,java.sql.Types.CHAR);
	<%
	}else if(typeToGenerate.equals("Date")){
	isObject = true;
	%>
if(<%=incomingConnName%>.<%=column.getName()%>==null){
	<%=prefix+cid%>.setNull(<%=counter%>,java.sql.Types.DATE);
	<%
	}else if(typeToGenerate.equals("byte[]")){
	isObject = true;
	%>
if(<%=incomingConnName%>.<%=column.getName()%>==null){
	<%=prefix+cid%>.setNull(<%=counter%>,java.sql.Types.ARRAY);			
	<%
	}else if(typeToGenerate.equals("Long")||typeToGenerate.equals("Byte")||typeToGenerate.equals("Integer")||typeToGenerate.equals("Short")){
	isObject = true;
	%>
if(<%=incomingConnName%>.<%=column.getName()%>==null){
	<%=prefix+cid%>.setNull(<%=counter%>,java.sql.Types.INTEGER);
	<%
	}else if(typeToGenerate.equals("String")){
	isObject = true;
	%>
if(<%=incomingConnName%>.<%=column.getName()%>==null){
	<%=prefix+cid%>.setNull(<%=counter%>,java.sql.Types.VARCHAR);
	<%
	}else if(typeToGenerate.equals("Object")){
	isObject = true;
	%>
if(<%=incomingConnName%>.<%=column.getName()%>==null){
	<%=prefix+cid%>.setNull(<%=counter%>,java.sql.Types.OTHER);
	<%
	}else if(typeToGenerate.equals("Boolean")){
	isObject = true;
	%>
if(<%=incomingConnName%>.<%=column.getName()%>==null){
	<%=prefix+cid%>.setNull(<%=counter%>,java.sql.Types.BOOLEAN);	
	<%
	}else if(typeToGenerate.equals("Double")){
	isObject = true;
	%>
if(<%=incomingConnName%>.<%=column.getName()%>==null){
	<%=prefix+cid%>.setNull(<%=counter%>,java.sql.Types.DOUBLE);	
	<%
	}else if(typeToGenerate.equals("Float")){
	isObject = true;
	%>
if(<%=incomingConnName%>.<%=column.getName()%>==null){
	<%=prefix+cid%>.setNull(<%=counter%>,java.sql.Types.FLOAT);	
	<%
	}
if(isObject){
	%>

}else{

	<%
}
	typeToGenerate = generateType(typeToGenerate);
	
	if(typeToGenerate.equals("Char")||typeToGenerate.equals("Character")){
	%>
	<%if(isObject){%>
	if(<%=incomingConnName%>.<%=column.getName()%>==null){
	<%}else{%>
	if(String.valueOf(<%=incomingConnName%>.<%=column.getName()%>).toLowerCase().equals("null")){
	<%}%>
		<%=prefix+cid%>.setNull(<%=counter%>,java.sql.Types.CHAR);
		
	}else if(<%=incomingConnName%>.<%=column.getName()%> == '\0'){
	
		<%=prefix+cid%>.setString(<%=counter%>,"");
		
	}else{
		
		<%=prefix+cid%>.setString(<%=counter%>,String.valueOf(<%=incomingConnName%>.<%=column.getName()%>));
	}
	<%
	}else if(typeToGenerate.equals("Date")){
	%>
	if(<%=incomingConnName%>.<%=column.getName()%>!=null){
	
		<%=prefix+cid%>.setTimestamp(<%=counter%>,new java.sql.Timestamp(<%=incomingConnName%>.<%=column.getName()%>.getTime()));
		
	}else{
	
		<%=prefix+cid%>.setNull(<%=counter%>,java.sql.Types.DATE);
		
	}
	<%
	}else{
	%>
	<%=prefix+cid%>.set<%=typeToGenerate%>(<%=counter%>,<%=incomingConnName%>.<%=column.getName()%>);
	<%
	}
if(isObject){
	%>
		
}
	
<%
}
	}
}


Operation operation = new Operation();

if(incomingConnName != null && columnList != null){
	if(dataAction.equals("INSERT")){
		int counter = 1;
		
		for(Column column:colStruct){
			String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
			
			//typeToGenerate = operation.generateType(typeToGenerate);
			
			operation.generateSetStmt(typeToGenerate,column,counter,incomingConnName,cid,0);
			
        	counter++;
		}
	%>
        try{
        	insertedCount_<%=cid%> = insertedCount_<%=cid%> + pstmt_<%=cid %>.executeUpdate();
        }catch(Exception e)
        {
            whetherReject_<%=cid%> = true;
            <%
            if (dieOnError.equals("true")) {
                %>
                throw(e);
                <%
            } else {
                if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
                    for(IMetadataColumn column : columnList) {
                        %>
                        <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                        <%
                    }
                    %>
                    <%=rejectConnName%>.errorMessage = e.getMessage();
                    <%
                } else {
                    %>
                    System.err.print(e.getMessage());
                    <%
                }
            } 
            %>
        }
	<%
	}else if(dataAction.equals("UPDATE")){
		int counterCol = 1;
		
		for(Column column:colStruct){
			String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
			
			//typeToGenerate = operation.generateType(typeToGenerate);
			
			if(!column.getColumn().isKey()){
				
				operation.generateSetStmt(typeToGenerate,column,counterCol,incomingConnName,cid,0);
				
        		counterCol++;
			}
		}

		for(Column column:colStruct){
			String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
			
			//typeToGenerate = operation.generateType(typeToGenerate);
			
			if(column.getColumn().isKey()){
			
				operation.generateSetStmt(typeToGenerate,column,counterCol,incomingConnName,cid,0);
				
        		counterCol++;
			}
		}

	%>
        try{
        	updatedCount_<%=cid%> = updatedCount_<%=cid%> + pstmt_<%=cid %>.executeUpdate();
        }catch(Exception e)
        {
            whetherReject_<%=cid%> = true;
            <%
            if (dieOnError.equals("true")) {
                %>
                throw(e);
                <%
            } else {
                if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
                    for(IMetadataColumn column : columnList) {
                        %>
                        <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                        <%
                    }
                    %>
                    <%=rejectConnName%>.errorMessage = e.getMessage();
                    <%
                } else {
                    %>
                    System.err.print(e.getMessage());
                    <%
                }
            } 
            %>
        }
<%
	}else if (dataAction.equals("INSERT_OR_UPDATE")){
%>

<%
		int columnIndex = 1;
		for(Column column:colStruct)
		{
			if(column.getColumn().isKey())
			{
				String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
				operation.generateSetStmt(typeToGenerate,column,columnIndex,incomingConnName,cid,0);
				columnIndex++;				
			}
		}
%>

		java.sql.ResultSet rs_<%=cid%> = pstmt_<%=cid %>.executeQuery();
		int checkCount_<%=cid%> = -1;
		while(rs_<%=cid%>.next())
		{
			checkCount_<%=cid%> = rs_<%=cid%>.getInt(1);
		}
		if(checkCount_<%=cid%> > 0)
		{
			<%
			int counterCol = 1;
			for(Column column:colStruct)
			{
				String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
				if(!column.getColumn().isKey())
				{
					operation.generateSetStmt(typeToGenerate,column,counterCol,incomingConnName,cid,2);
					counterCol++;
				}
			}
			for(Column column:colStruct)
			{
				String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
				if(column.getColumn().isKey())
				{
					operation.generateSetStmt(typeToGenerate,column,counterCol,incomingConnName,cid,2);					
	        		counterCol++;
				}
			}
			%>
            try{
				updatedCount_<%=cid%> = updatedCount_<%=cid%> + pstmtUpdate_<%=cid %>.executeUpdate();
            }catch(Exception e)
            {
                whetherReject_<%=cid%> = true;
                <%
                if (dieOnError.equals("true")) {
                    %>
                    throw(e);
                    <%
                } else {
                    if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
                        for(IMetadataColumn column : columnList) {
                            %>
                            <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                            <%
                        }
                        %>
                        <%=rejectConnName%>.errorMessage = e.getMessage();
                        <%
                    } else {
                        %>
                        System.err.print(e.getMessage());
                        <%
                    }
                } 
                %>
            }
		}
		else
		{
			<%
			int counterInsert = 1;
			for(Column columnInsert:colStruct)
			{
				String typeToGenerate = JavaTypesManager.getTypeToGenerate(columnInsert.getColumn().getTalendType(), columnInsert.getColumn().isNullable());
				operation.generateSetStmt(typeToGenerate,columnInsert,counterInsert,incomingConnName,cid,1);
				counterInsert++;
			}
			%>
            try{
    			insertedCount_<%=cid%> = insertedCount_<%=cid%> + pstmtInsert_<%=cid %>.executeUpdate();
            }catch(Exception e)
            {
                whetherReject_<%=cid%> = true;
                <%
                if (dieOnError.equals("true")) {
                    %>
                    throw(e);
                    <%
                } else {
                    if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
                        for(IMetadataColumn column : columnList) {
                            %>
                            <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                            <%
                        }
                        %>
                        <%=rejectConnName%>.errorMessage = e.getMessage();
                        <%
                    } else {
                        %>
                        System.err.print(e.getMessage());
                        <%
                    }
                } 
                %>
            }
		}

<%
	}else if (dataAction.equals("UPDATE_OR_INSERT")){
%>

<%
		int counterColUpdate = 1;
		for(Column columnUpdate:colStruct){
			String typeToGenerate = JavaTypesManager.getTypeToGenerate(columnUpdate.getColumn().getTalendType(), columnUpdate.getColumn().isNullable());
			
			//typeToGenerate = operation.generateType(typeToGenerate);
			
			if(!columnUpdate.getColumn().isKey()){
			
				operation.generateSetStmt(typeToGenerate,columnUpdate,counterColUpdate,incomingConnName,cid,2);
				
        		counterColUpdate++;
			}
		}

		for(Column columnUpdate:colStruct){
			String typeToGenerate = JavaTypesManager.getTypeToGenerate(columnUpdate.getColumn().getTalendType(), columnUpdate.getColumn().isNullable());
			
			//typeToGenerate = operation.generateType(typeToGenerate);
			
			if(columnUpdate.getColumn().isKey()){
			
				operation.generateSetStmt(typeToGenerate,columnUpdate,counterColUpdate,incomingConnName,cid,2);
				
        		counterColUpdate++;
			}
		}
	%>

         try{
	           updatedCount_<%=cid%> = updatedCount_<%=cid%> + pstmtUpdate_<%=cid %>.executeUpdate();
           }catch(Exception e)
           {
               whetherReject_<%=cid%> = true;
               <%
               if (dieOnError.equals("true")) {
                   %>
                   throw(e);
                   <%
               } else {
                   if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
                       for(IMetadataColumn column : columnList) {
                           %>
                           <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                           <%
                       }
                       %>
                       <%=rejectConnName%>.errorMessage = e.getMessage();
                       <%
                   } else {
                       %>
                       System.err.print(e.getMessage());
                       <%
                   }
               } 
               %>
           }
           if(updatedCount_<%=cid%> == 0) {
        		<%
        		int counter = 1;
        		
        		for(Column column:colStruct){
        			String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
        			
        			//typeToGenerate = operation.generateType(typeToGenerate);
        			
        			operation.generateSetStmt(typeToGenerate,column,counter,incomingConnName,cid,1);
        			
                	counter++;
        		}
        		%>
                try{
        			insertedCount_<%=cid%> = insertedCount_<%=cid%> + pstmtInsert_<%=cid %>.executeUpdate();
        			nb_line_inserted_<%=cid%>++;
                }catch(Exception e)
                {
                    whetherReject_<%=cid%> = true;
                    <%
                    if (dieOnError.equals("true")) {
                        %>
                        throw(e);
                        <%
                    } else {
                        if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
                            for(IMetadataColumn column : columnList) {
                                %>
                                <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                                <%
                            }
                            %>
                            <%=rejectConnName%>.errorMessage = e.getMessage();
                            <%
                        } else {
                            %>
                            System.err.print(e.getMessage());
                            <%
                        }
                    } 
                    %>
                }
           } else {
               nb_line_update_<%=cid%> ++;
           }
<%
	
	}else if (dataAction.equals("DELETE")){
		int keyCounter = 1;
		for(Column column:colStruct){
			String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
			
			//typeToGenerate = operation.generateType(typeToGenerate);
			
			if(column.getColumn().isKey()){
				
				operation.generateSetStmt(typeToGenerate,column,keyCounter,incomingConnName,cid,0);
				
        		keyCounter++;
			}
		}
	%>
        try{
            deletedCount_<%=cid%> = deletedCount_<%=cid%> + pstmt_<%=cid %>.executeUpdate();
        }catch(Exception e){
            whetherReject_<%=cid%> = true;
            <%
            if (dieOnError.equals("true")) {
                %>
                throw(e);
                <%
            } else {
                if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
                    for(IMetadataColumn column : columnList) {
                        %>
                        <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                        <%
                    }
                    %>
                    <%=rejectConnName%>.errorMessage = e.getMessage();
                    <%
                } else {
                    %>
                    System.err.print(e.getMessage());
                    <%
                }
            } 
            %>
        }
	<%
	}
	
    if(outgoingConns != null && outgoingConns.size() > 0) {
        %>
        if(!whetherReject_<%=cid%>) {
        <%
            for(IConnection outgoingConn : outgoingConns) {
                if(rejectConnName == null || (rejectConnName != null && !outgoingConn.getName().equals(rejectConnName))) {
                    for(IMetadataColumn column : columnList) {
                        %>
                        <%=outgoingConn.getName()%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                        <%                  
                    }
                }
            }
        %>
        }
        <%
    }	
	
    ////////////commit every////////////
	if(!commitEvery.equals("")&&!commitEvery.equals("0")){
	%>
        commitCounter_<%=cid%>++;
        
        if(commitEvery_<%=cid%><=commitCounter_<%=cid%>){
        
        	conn_<%=cid%>.commit();
        	
        	commitCounter_<%=cid%>=0;	
        }	
	<%
	}
}
%>