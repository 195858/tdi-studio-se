<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.designer.codegen.config.CodeGeneratorArgument
" 
%>
<%
	//this util class use by set log4j debug paramters
	class DefaultLog4jCodeGenerateUtil {
	
		INode node = null;
	    String cid = null;
		String dbproperties = null;
		String dbhost = null;
    	String dbport = null;
    	String dbname = null;
    	String dbuser = null;
 		String dbpwd = null;
		String connectionType = null;
 		String dbVersion =  null; 
 		String dbSchema = null;
 		String useCursor = null;
 		String trimAllColumn = null;
 		String noNullValues = null;
 		String dbquery= null;
 		String table = null;
 		String useExistingConnection = null;
 		String commitEvery = "";
 		String connection = "";
 		boolean isLog4jEnabled = false;
 		boolean hasInit = false;
 		boolean output = false;//true:when it is output component.
 		
	    public void beforeComponentProcess(INode node){
	    	this.node = node;
	    	init();
	    }
	    
		private void init() {
			if(hasInit){
				return;
			}
	    	cid = node.getUniqueName();
			dbproperties = ElementParameterParser.getValue(node, "__PROPERTIES__");
			dbhost = ElementParameterParser.getValue(node, "__HOST__");
	    	dbport = ElementParameterParser.getValue(node, "__PORT__");
	    	dbname = ElementParameterParser.getValue(node, "__DBNAME__");
	    	dbuser = ElementParameterParser.getValue(node, "__USER__");
	 		dbpwd = ElementParameterParser.getValue(node, "__PASS__");
			connectionType = ElementParameterParser.getValue(node, "__CONNECTION_TYPE__");
	 		dbVersion =  ElementParameterParser.getValue(node, "__DB_VERSION__"); 
	 		dbSchema = ElementParameterParser.getValue(node,"__SCHEMA_DB__");
	 		useCursor = ElementParameterParser.getValue(node,"__USE_CURSOR__");
	 		trimAllColumn = ElementParameterParser.getValue(node,"__TRIM_ALL_COLUMN__");
	 		noNullValues = ElementParameterParser.getValue(node,"__NO_NULL_VALUES__");
	 		dbquery= ElementParameterParser.getValue(node, "__QUERY__");
			dbquery = dbquery.replaceAll("\n"," ");
			dbquery = dbquery.replaceAll("\r"," ");
			table= ElementParameterParser.getValue(node, "__TABLE__");
			isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
			useExistingConnection = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");
			commitEvery = ElementParameterParser.getValue(node, "__COMMIT_EVERY__");
			connection = ElementParameterParser.getValue(node,"__CONNECTION__");
			if(!"".equals(connection)){
				connection = "'" + connection+"' ";
			}
			if("false".equals(useExistingConnection)){
				connection = "";
				if(!("").equals(commitEvery) && !("0").equals(commitEvery)){
					output=true;
				}
			}
			hasInit = true;
		}
		
		public void infoComponentStart(INode node) {
			beforeComponentProcess(node);
			if (isLog4jEnabled) {
%>
				log.info("<%=cid%> - Start to work.");
<%
			}
		}
		
		public void infoComponentEnd(INode node) {
			beforeComponentProcess(node);
			if (isLog4jEnabled) {
%>
				log.info("<%=cid%> - Done.");
<%
			}
		}
		
		public void initDbDebugRowBuffer() {
			if (isLog4jEnabled) {
%>
				StringBuffer log4jSb_<%=cid%> = new StringBuffer();
<%
			}
		}
		
		public void debugDriverClassName() {
			if (isLog4jEnabled) {
%>
				log.debug("<%=cid%> - Driver ClassName: "+driverClass_<%=cid%>+".");
<%
			}
		}
		
		public void debugConnectionParams(INode node) {
			beforeComponentProcess(node);
			generateConnectionParams();
			debugDriverClassName();
			if (isLog4jEnabled) {
%>
				log.debug(log4jDebugParamters_<%=cid%>);
<%
			}
		}
	
		public void dbConnectionParamsForELT(INode previousNode){
			cid = previousNode.getUniqueName();
			dbhost = ElementParameterParser.getValue(previousNode, "__HOST__");
	    	dbname = ElementParameterParser.getValue(previousNode, "__DBNAME__");
	    	dbuser = ElementParameterParser.getValue(previousNode, "__USER__");
	 		dbpwd = ElementParameterParser.getValue(previousNode, "__PASS__");
		}
		
		public void additionalParameter(INode node) {
			String needtoConvet2Upper= ElementParameterParser.getValue(node, "__Convert_to_UPPer__");
		}
		
		public void generateAdditionalParameters(INode node) {
			additionalParameter(node);
		}
		
		public void useExistConnection(INode node){
			beforeComponentProcess(node);
			if(isLog4jEnabled) {
			%>
				if(conn_<%=cid%> != null) {
					if(conn_<%=cid%>.getMetaData() != null) {
						log.info("<%=cid%> - Uses an existing connection as " + conn_<%=cid%>.getMetaData().getUserName() + ". Connection URL: " + conn_<%=cid%>.getMetaData().getURL() + ".");
					}
				}
			<%
			}
		}
		
		public void connect(INode node){
			beforeComponentProcess(node);
			connect();
		}
		
		public void connect(){
			connect_begin();
			%>
			conn_<%=cid%> = java.sql.DriverManager.getConnection(url_<%=cid %>, dbUser_<%=cid%>, dbPwd_<%=cid%>);
			<%
			connect_end();
		}
		
		public void connect_begin(){
			if(isLog4jEnabled){
			%>
				log.info("<%=cid%> - Connection attempt to '" + url_<%=cid%> + "' with the username '" + dbUser_<%=cid%> + "'.");
			<%
			}
		}
		
		public void connect_begin_noUser(){
			if(isLog4jEnabled){
			%>
				log.info("<%=cid%> - Connection attempt to '" + url_<%=cid%> + "'.");
			<%
			}
		}
		
		public void connect_end(){
			if(isLog4jEnabled){
			%>
				log.info("<%=cid%> - Connection to '" + url_<%=cid%> + "' has succeeded.");
			<%
			}
		}
		
		public void commit(INode node){
			beforeComponentProcess(node);
			commit();
		}
		
		public void commit(){
			commit_begin();
			%>
			conn_<%=cid%>.commit();
			<%
			commit_end();
		}
		
		public void commit_begin(){
			if(isLog4jEnabled){
				if(output){
			%>
					log.debug("<%=cid%> - Connection <%=connection%>starting to commit " + commitCounter_<%=cid%>+ " records.");
			<%
				}else{
			%>
					log.debug("<%=cid%> - Connection <%=connection%>starting to commit.");
			<%
				}
			}
		}
		public void commit_end(){
			if(isLog4jEnabled){
			%>
				log.debug("<%=cid%> - Connection <%=connection%>commit has succeeded.");
			<%
			}
		}
		
		public void close(INode node){
			beforeComponentProcess(node);
			close();
		}
		
		public void close(){
			close_begin();
			%>
			conn_<%=cid%>.close();
			<%
			close_end();
		}
		
		public void close_begin(){
			if(isLog4jEnabled){
			%>
				log.info("<%=cid%> - Closing the connection <%=connection%>to the database.");
			<%
			}
		}
		public void close_end(){
			if(isLog4jEnabled){
			%>
				log.info("<%=cid%> - Connection <%=connection%>to the database closed.");
			<%
			}
		}
		
		public void autoCommit(INode node,boolean autoCommit){
			beforeComponentProcess(node);
			if(isLog4jEnabled){
			%>
				log.debug("<%=cid%> - Connection is set auto commit to '<%=autoCommit%>'.");
			<%
			}
			%>
				conn_<%=cid%>.setAutoCommit(<%=autoCommit%>);
			<%
		}
		
		public void query(INode node){
			beforeComponentProcess(node);
			if(isLog4jEnabled) {
			%>
				log.info("<%=cid%> - Executing the query: '" + <%=dbquery%> + "'.");
			<%
			}
		}
		
		public void retrieveRecordsCount(INode node){
			beforeComponentProcess(node);
			if(isLog4jEnabled){
			%>
				log.info("<%=cid%> - Retrieved records count: "+nb_line_<%=cid%> + " .");
			<%
			}
		}
		
		public void appendParameter(String property,String value){
			if(value != null && !("\"\"").equals(value) && !("").equals(value)){
			%>
				log4jDebugParamters_<%=cid%> += "<%=property%> = " + <%=value%> + " | ";
			<%
			}
		}
		
		public void appendParameterQuote(String property,String value){
			if(value != null && !("\"\"").equals(value) && !("").equals(value)){
			%>
				log4jDebugParamters_<%=cid%> += "<%=property%> = <%=value%> | ";
			<%
			}
		}
		
		public void generateConnectionParams() {
			if(isLog4jEnabled) {
%>
				String log4jDebugParamters_<%=cid%> = "";
				<%
				appendParameterQuote("CONNECTION_TYPE",connectionType);
				appendParameterQuote("DBVERSION",dbVersion);
				appendParameter("PROPERTIES",dbproperties);
				appendParameter("HOST",dbhost);
				appendParameter("PORT",dbport);
				appendParameter("DBNAME",dbname);
				appendParameter("DBSCHEMA",dbSchema);
				appendParameter("USERNAME",dbuser);
				appendParameter("USE_CURSOR",useCursor);
				appendParameter("TRIM_ALL_COLUMN",trimAllColumn);
				appendParameter("NO_NULL_VALUES",noNullValues);
				appendParameter("TABLE",table);
				%>
				log4jDebugParamters_<%=cid%> = "<%=cid%> - Parameters:" + log4jDebugParamters_<%=cid%>;
<%	
			}
	    }
	}
	
	DefaultLog4jCodeGenerateUtil log4jCodeGenerateUtil = new DefaultLog4jCodeGenerateUtil();
%>