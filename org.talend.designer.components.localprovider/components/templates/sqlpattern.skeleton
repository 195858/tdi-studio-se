public class CLASS {

    public String generateSQLPatternCode(INode node) {
        String cid = node.getUniqueName();
        List<Map<String, Object>> list = (List<Map<String, Object>>) ElementParameterParser.getObjectValue(node,
                "SQLPATTERN_VALUE");

        Set<String> tableParamSet = new java.util.HashSet<String>();

        StringBuilder resultBuilder = new StringBuilder();
        for (Map<String, Object> map : list) {
            Set<String> keySet = map.keySet();
            for (String key : keySet) {
                String SQLPattern = (String) map.get(key);
                StringBuilder sqlPatternBuilder = new StringBuilder(SQLPattern);
                // replace < % with \n< %
                int position = 0;
                int index = -1;
                while (position < sqlPatternBuilder.length()) {
                    index = sqlPatternBuilder.indexOf("<", position);
                    if (index < 0) {
                        break;
                    }
                    if (index + 1 >= sqlPatternBuilder.length()) {
                        break;
                    }
                    if (sqlPatternBuilder.charAt(index + 1) == '%') {
                        if ((index + 2 >= sqlPatternBuilder.length()) || (sqlPatternBuilder.charAt(index + 2) != '=')) {
                            sqlPatternBuilder.insert(index, "\n");
                            position = index + 2;
                            continue;
                        }
                    }
                    position = index + 1;
                }

                // System.out.println("1");
                String tempSQLPattern = sqlPatternBuilder.toString();
                tempSQLPattern = tempSQLPattern.replaceAll("\r\n", "\n");
                String[] lines = tempSQLPattern.split("(\\n)");
                List<String> lineList = new ArrayList<String>();
                StringBuilder codeStringBuilder = new StringBuilder();
                for (String line : lines) {
                    while (line.startsWith(" ") || line.startsWith("\t") || line.startsWith("\f")) {
                        line = line.substring(1);
                    }
                    while (line.endsWith(" ") || line.endsWith("\t") || line.endsWith("\f")) {
                        line = line.substring(0, line.length() - 1);
                    }
                    if (line.length() > 0) {
                        lineList.add(line);
                    }
                }
                // System.out.println("2");
                boolean jetScriptStarted = false;
                StringBuilder sqlQueryBuilder = new StringBuilder("\"");
                int i = 0;
                String line = null;
                LINES: do {
                    if (i >= lineList.size()) {
                        break;
                    }
                    if (line == null || line.length() == 0) {
                        line = lineList.get(i++);
                    }
                    if (line.startsWith("--") || line.startsWith("#")) {
                        line = null;
                        continue;
                    }

                    if (line.length() >= 2 && line.charAt(0) == '<' && line.charAt(1) == '%') {
                        if(line.length() > 2){
                            if(line.charAt(2) != '='){
                                jetScriptStarted = true;
                                line = line.substring(2).trim();
                            }
                        }else{
                            jetScriptStarted = true;
                            line = line.substring(2).trim();
                        }
                    }

                    // replace all "__XXX__" with real param value.
                    if (jetScriptStarted) {
                        StringBuilder lineBuilder = new StringBuilder(line);
                        position = 0;
                        position = lineBuilder.indexOf("__", position) + 2;
                        while (position > 0 && position < lineBuilder.length()) {
                            int indexOfEnd__ = lineBuilder.indexOf("__", position);
                            if ((indexOfEnd__ > 0) && ((indexOfEnd__ + 2) < lineBuilder.length())) {
                                /*
                                 * all components' parameter name should match "[0-9A-Z\\-_]+"
                                 */
                                String paramName = lineBuilder.substring(position, indexOfEnd__);
                                if (paramName.matches("[0-9A-Z\\-_]+")) {
                                    // to see whether this is extract TABLE value sentence
                                    /*
                                     * The sentence for extract TABLE param must be in the scopce of "< %" and "% >".
                                     * And the code is something like EXTRACT(__PARAM__);
                                     */
                                    int indexEXTRACTBegin = position - 10;
                                    int indexEXTRACTEnd = indexOfEnd__ + 2;
                                    if (indexEXTRACTBegin >= 0 && indexEXTRACTEnd < lineBuilder.length()) {
                                        if (lineBuilder.substring(indexEXTRACTBegin, position).equals("EXTRACT(__")
                                                && lineBuilder.charAt(indexEXTRACTEnd) == ')') {
                                            if (!tableParamSet.contains(paramName)) {
                                                resultBuilder.insert(0, extractTableValue(node, paramName));
                                                tableParamSet.add(paramName);
                                                line = null;
                                                continue LINES;
                                            }
                                        }
                                    }

                                    // to see whether this is the extracted TABLE para;
                                    boolean flag = false;
                                    for (String param : tableParamSet) {
                                        /*
                                         * caution: do not use the identical PARAMETER names among the component's
                                         * PARAMETERs.
                                         */
                                        if (paramName.startsWith(param)) {
                                            flag = true;
                                            break;
                                        }
                                    }

                                    String realValue = null;

                                    if (flag) {
                                        realValue = paramName + "_" + cid;
                                    } else {
                                        realValue = ElementParameterParser.getValue(node, "__" + paramName + "__"); // get
                                    }
                                    // the param value
                                    int formerLength = paramName.length() + 4;
                                    int newLength = realValue.length();
                                    lineBuilder.replace(position - 2, indexOfEnd__ + 2, realValue);
                                    position = (indexOfEnd__ + 2) + (newLength - formerLength);
                                    position = lineBuilder.indexOf("__", position) + 2;
                                } else {
                                    position = indexOfEnd__ + 2;
                                }
                            } else {
                                break;
                            }
                        }
                        line = lineBuilder.toString();
                    }

                    if (jetScriptStarted) {
                        int endTag = -1;
                        position = 0;
                        while (position < line.length()) {
                            index = line.indexOf("%", position);
                            if (index < 0) {
                                break;
                            }
                            if (index + 1 >= line.length()) {
                                break;
                            }
                            if (line.charAt(index + 1) == '>') {
                                endTag = index;
                                break;
                            }
                            position = index + 1;
                        }

                        // System.out.println("3");

                        if (endTag < 0) {
                            codeStringBuilder.append(line).append("\n");
                            line = null;
                        } else {
                            codeStringBuilder.append(line.substring(0, endTag)).append("\n");
                            line = line.substring(endTag + 2);
                            jetScriptStarted = false;
                        }
                    } else {
                        // repalce all " with \" for sql sentence.
                        StringBuilder lineBuilder = new StringBuilder(line);
                        index = 0;
                        position = 0;
                        OUTLOOP: while (position < lineBuilder.length()) {
                            index = lineBuilder.indexOf("\"", position);
                            if (index < 0) {
                                break;
                            }
                            if (index > 0 && lineBuilder.charAt(index - 1) == '\\') {
                                position = index + 1;
                                continue;
                            }
                            char last = 0;
                            for (int j = index - 1; j >= 0; j--) {
                                char currChar = lineBuilder.charAt(j);
                                if (currChar == '%' && last == '>') {
                                    break;
                                }
                                if (currChar == '<' && last == '%') {// in region of < %= % >, skip it
                                    position = index + 1;
                                    continue OUTLOOP;
                                }
                                last = currChar;
                            }
                            lineBuilder.insert(index, "\\");
                            position = index + 2;
                        }
                        // System.out.println("4");
                        // lineBuilder.toString();

                        /*
                         * Caution: here, we assume all the assign script("< %=value % >") always doesn't span more
                         * than one lines; or it may generate error code.
                         */
                        // replace All "< %=" with "\" + "
                        position = 0;
                        index = 0;
                        while (position < lineBuilder.length()) {
                            index = lineBuilder.indexOf("%=", position);
                            if (index < 0) {
                                break;
                            }
                            if ((index > 0) && (lineBuilder.charAt(index - 1) == '<')) {

                                // replace all "__XXX__" with real param value.
                                int position2 = index + 2;

                                if ((position2 > 0 && position2 < lineBuilder.length())) {
                                    position2 = lineBuilder.indexOf("__", position2) + 2;
                                    while (position2 > 0) {
                                        int end = lineBuilder.indexOf("%", position2);
                                        if ((end < 0 || (end + 1 >= lineBuilder.length()) || (lineBuilder.charAt(end + 1) != '>'))) {
                                            break;
                                        }

                                        if (position2 >= end) {
                                            break;
                                        }

                                        int indexOfEnd__ = lineBuilder.indexOf("__", position2);

                                        if ((indexOfEnd__ > 0) && ((indexOfEnd__ + 2) <= end)) {
                                            String paramName = lineBuilder.substring(position2, indexOfEnd__);
                                            /* caution: all components' parameter name should match "[0-9A-Z\\-_]+" */
                                            if (paramName.matches("[0-9A-Z\\-_]+")) {

                                                // to see whether this is the extracted TABLE para;
                                                boolean flag = false;
                                                for (String param : tableParamSet) {
                                                    /*
                                                     * caution: while designing the component, don't use the identical
                                                     * PARAMETER names
                                                     */
                                                    if (paramName.startsWith(param)) {
                                                        flag = true;
                                                        break;
                                                    }
                                                }

                                                String realValue = null;

                                                if (flag) {
                                                    realValue = paramName + "_" + cid;
                                                } else {
                                                    // get the param value
                                                    realValue = ElementParameterParser.getValue(node, "__" + paramName + "__");
                                                }
                                                int formerLength = paramName.length() + 4;
                                                int newLength = realValue.length();
                                                lineBuilder.replace(position2 - 2, indexOfEnd__ + 2, realValue);
                                                position2 = (indexOfEnd__ + 2) + (newLength - formerLength);
                                                position2 = lineBuilder.indexOf("__", position2) + 2;
                                            } else {
                                                position2 = indexOfEnd__ + 2;
                                            }
                                        } else {
                                            break;
                                        }
                                    }
                                }

                                // matchs
                                lineBuilder.replace(index - 1, index + 2, "\" + ");
                                position = index + 3;
                                continue;
                            }
                            position = index + 2;
                        }
                        // System.out.println("5");
                        // replace All "% >" with " + \""
                        position = 0;
                        index = 0;
                        while (position < lineBuilder.length()) {
                            index = lineBuilder.indexOf("%", position);
                            if (index < 0) {
                                break;
                            }
                            if ((index + 1 < lineBuilder.length()) && (lineBuilder.charAt(index + 1) == '>')) {
                                // matchs
                                lineBuilder.replace(index, index + 2, " + \"");
                                position = index + 4;
                                continue;
                            }
                            position = index + 1;
                        }
                        // System.out.println("6");
                        line = lineBuilder.toString();

                        sqlQueryBuilder.append(line);
                        /*
                         * Caution: here, we assume that all the SQL query are end with ";" which will follows a new
                         * line("\n" or "\r\n").
                         */
                        if (line.endsWith(";")) {// end of SQL QUERY found
                            sqlQueryBuilder.append("\"");
                            codeStringBuilder.append("stmt_").append(cid).append(".addBatch(").append(sqlQueryBuilder.toString())
                                    .append(");\n");
                            sqlQueryBuilder.delete(0, sqlQueryBuilder.length()).append("\"");
                        } else {
                            sqlQueryBuilder.append(" ");
                        }
                        line = null;
                    }

                } while (true);
                resultBuilder.append("//execute sqlPattern: ").append(key).append("\nstmt_").append(cid).append(
                        ".clearBatch();\n");
                resultBuilder.append(codeStringBuilder.toString()).append("\nstmt_").append(cid).append(".executeBatch();\n");
            }
        }
        return resultBuilder.toString();

    }

    private String extractTableValue(INode node, String param) {
        String cid = node.getUniqueName();
        StringBuilder resultBuilder = new StringBuilder();

        // get the table param value
        List<Map<String, String>> tableValue = (List<Map<String, String>>) ElementParameterParser.getObjectValue(node, "__"
                + param + "__");
        /* get table size value, use: __PARAM_length__ */
        resultBuilder.append("int ").append(param).append("_LENGTH_").append(cid).append(" = ").append(tableValue.size()).append(
                ";\n");
        if (tableValue.size() > 0) {
            Set<String> keySet = tableValue.get(0).keySet();
            for (String key : keySet) {
                /* get table item value, use: __PARAM_COLUMN__[i] */
                resultBuilder.append("String[] ").append(param).append("_").append(key).append("_").append(cid).append(
                        " = new String[").append(tableValue.size()).append("];\n");
            }

            for (int i = 0; i < tableValue.size(); i++) {
                Map<String, String> map = tableValue.get(i);
                Set<String> set = map.keySet();
                for (String key : set) {
                    resultBuilder.append(param).append("_").append(key).append("_").append(cid).append("[").append(i).append(
                            "] = ");

                    String value = map.get(key);
                    /* Info: int values in TABLE will be generated as String too. */
                    if (!value.startsWith("\"")) {
                        resultBuilder.append("\"");
                    }
                    resultBuilder.append(value);
                    if (!value.endsWith("\"")) {
                        resultBuilder.append("\"");
                    }
                    resultBuilder.append(";\n");
                }
            }

        }

        return resultBuilder.toString();
    }

    public String generate(Object argument) {
        return null;

    }
}
