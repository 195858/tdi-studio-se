<%@ jet 
imports="
    	org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.INode
		org.talend.core.model.process.ElementParameterParser  
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.core.model.process.IConnection
		org.talend.commons.utils.generation.CodeGenerationUtils
		java.util.List
		java.util.ArrayList
		java.util.LinkedList
"
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	
	String cid = node.getUniqueName();

	String dbtable = null;
	String uniqueNameConnection = null;
	INode previousNode = null;
%>
	String select_query_<%=cid %> = null;
	String selectQueryColumnsName_<%=cid %> = null;
<%
	List<IConnection> connections = (List<IConnection>) node.getIncomingConnections();
	if(connections != null && connections.size() > 0 && connections.get(0) != null) {
	    IConnection connection = connections.get(0);
	    previousNode = connection.getSource();
	    String previousComponentName = previousNode.getUniqueName();
		dbtable = connection.getName();
		uniqueNameConnection = connection.getUniqueName();
%>
		select_query_<%=cid %> = (String) globalMap.get("<%=previousComponentName%>"+"QUERY"+"<%=uniqueNameConnection%>");
		selectQueryColumnsName_<%=cid %> = (String) globalMap.get("<%=previousComponentName%>"+"QUERY_COLUMNS_NAME"+"<%=uniqueNameConnection%>");
<%
	}
	
	String dataAction = ElementParameterParser.getValue(node,"__DATA_ACTION__");
	String dbproperties = ElementParameterParser.getValue(node, "__PROPERTIES__");
    String dbhost = null;
    String dbport = null;
    String dbname = null;
    String dbuser = null;
    String dbpwd = null;
    boolean useExistingConn = false;
    if(previousNode != null) {
        dbhost = ElementParameterParser.getValue(previousNode, "__HOST__");
        dbport = ElementParameterParser.getValue(previousNode, "__PORT__");
        dbname = ElementParameterParser.getValue(previousNode, "__DBNAME__");
        dbuser = ElementParameterParser.getValue(previousNode, "__USER__");
        dbpwd = ElementParameterParser.getValue(previousNode, "__PASS__");
        useExistingConn = ("true").equals(ElementParameterParser.getValue(previousNode, "__USE_EXISTING_CONNECTION__"));
    }
	String differenttable = ElementParameterParser.getValue(node, "__DIFFERENT_TABLE_NAME__");
	String useDifferentTable = ElementParameterParser.getValue(node, "__USE_DIFFERENT_TABLE__");
        String whereClause = ElementParameterParser.getValue(node, "__WHERE_CLAUSE__");

%>
java.sql.Connection conn_<%=cid%> = null;
<%
	if(useExistingConn) {
	    String connection = ElementParameterParser.getValue(previousNode, "__CONNECTION__");
	    String conn = "conn_" + connection;
%>
    	conn_<%=cid%> = (java.sql.Connection)globalMap.get("<%=conn%>");
<%
	} else {
		String javaDbDriver   = "org.netezza.Driver";
	%>
	java.lang.Class.forName("<%=javaDbDriver %>");
	<%
	if(dbproperties == null || ("\"\"").equals(dbproperties) || ("").equals(dbproperties)) {
	    %>
	    String url_<%=cid%> = "jdbc:netezza://" + <%=dbhost%> + ":" + <%=dbport%> + "/" + <%=dbname%>;
	    <%
	} else {
	    %>
	    String url_<%=cid%> = "jdbc:netezza://" + <%=dbhost%> + ":" + <%=dbport%> + "/" + <%=dbname%> + "?" + <%=dbproperties%>;
	    <%
	}	
	%>
		String dbUser_<%=cid %> = <%=dbuser%>;
		String dbPwd_<%=cid %> = <%=dbpwd%>;
		conn_<%=cid%> = java.sql.DriverManager.getConnection(url_<%=cid %>, dbUser_<%=cid%>, dbPwd_<%=cid%>);
	<%
	}
%>

<%
	List<IMetadataColumn> columnList = null;
	List<IMetadataTable> metadatas = node.getMetadataList();
	if(metadatas !=null && metadatas.size()>0){
		IMetadataTable metadata = metadatas.get(0);
		if(metadata != null){
			columnList = metadata.getListColumns();
		}
	}
%>

	java.sql.PreparedStatement pstmt_<%=cid %> =null;
<%
	if(columnList != null && columnList.size()>0){

		class Column{
		
			IMetadataColumn column;
			
			String name;
			
			String sqlStmt;
			
			String value;
			
			boolean addCol;
			
			List<Column> replacement = new ArrayList<Column>();
			
			public Column(IMetadataColumn column){
				this.column = column;
				this.name = column.getLabel();
				this.sqlStmt = "=?";
				this.value = "?";
				this.addCol =false;
			}
			
			public boolean isReplaced(){
				return replacement.size()>0;
			}
			
			public List<Column> getReplacement(){
				return this.replacement;
			}
			
			public IMetadataColumn getColumn(){
				return this.column;
			}
			
			public String getName(){
				return this.name;
			}
			
			public boolean isAddCol(){
				return this.addCol;
			}
			
			public String getSqlStmt(){
				return this.sqlStmt;
			}
			
			public String getValue(){
				return this.value;
			}
		}
		
		StringBuilder insertColName = new StringBuilder();
		StringBuilder insertValueStmt = new StringBuilder();
		StringBuilder updateSetStmt = new StringBuilder();
		StringBuilder updateWhereStmt = new StringBuilder();
		List<Column> stmtStructure =  new LinkedList<Column>();

		for(IMetadataColumn column:columnList){
			stmtStructure.add(new Column(column));
		}

		int counterOuter =0;
		boolean firstKey = true;
		boolean firstNoneKey = true;
		for(Column colStmt:stmtStructure){
			String suffix = ",";
			
			if(colStmt.isReplaced()){		
				List<Column> replacedColumns = colStmt.getReplacement();
				int counterReplace = 0;
				if(counterOuter==(stmtStructure.size()-1) && counterReplace==(replacedColumns.size()-1) ){
					suffix = "";
				}
				for(Column replacement:replacedColumns){
					insertColName.append(replacement.getName()+suffix);
					insertValueStmt.append(replacement.getSqlStmt()+suffix);
					if(!colStmt.getColumn().isKey()){
						if(!firstNoneKey){
							updateSetStmt.append(",");
						}else{
							firstNoneKey = false;
						}
						updateSetStmt.append(replacement.getName());
						updateSetStmt.append(replacement.getSqlStmt());
					}else{
						if(!firstKey){
							updateWhereStmt.append(" AND ");
						}else{
							firstKey = false;
						}
						updateWhereStmt.append(replacement.getName());
						updateWhereStmt.append(replacement.getSqlStmt());
					}
					counterReplace++;
				}
			}else{
				if(counterOuter==(stmtStructure.size()-1)){
					suffix = "";
				}
				if(colStmt.isAddCol()){
					insertColName.append(colStmt.getName()+suffix);
					insertValueStmt.append(colStmt.getSqlStmt()+suffix);
					updateSetStmt.append(colStmt.getName());
					updateSetStmt.append(colStmt.getSqlStmt()+suffix);
				}else{
					insertColName.append(colStmt.getName()+suffix);
					insertValueStmt.append(colStmt.getValue()+suffix);
					updateSetStmt.append(colStmt.getName()+"=\"+selectQueryColumnsName_"+ cid +".split(\",\")[ "+ counterOuter + "]+\"" +suffix);
				}
			}
			counterOuter ++;
		}

		if(("INSERT").equals(dataAction)){
		if("false".equals(useDifferentTable)) {
%>	
		String insertQuery_<%=cid %> = "INSERT INTO <%=dbtable%>(<%=insertColName.toString()%>) ("+select_query_<%=cid %>+")";
<%} else {%>
		String insertQuery_<%=cid %> = "INSERT INTO "+<%=differenttable%>+"(<%=insertColName.toString()%>) ("+select_query_<%=cid %>+")";
<%}%>
		pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(insertQuery_<%=cid %>);
<%
		} else if (("UPDATE").equals(dataAction)) {
		if("false".equals(useDifferentTable)) {
%>
		String updateQuery_<%=cid %> = "UPDATE <%=dbtable%>";
<%		} else {%>
		String updateQuery_<%=cid %> = "UPDATE "+<%=differenttable%>;
<%		}%>
		updateQuery_<%=cid %> +=" SET <%=updateSetStmt.toString()%> " +select_query_<%=cid %>.substring(select_query_<%=cid %>.indexOf("FROM"));
<%
			if(CodeGenerationUtils.hasAlphaNumericCharacter(whereClause)) {
%>
		if(select_query_<%=cid %>.indexOf("WHERE")==-1){
		updateQuery_<%=cid %> +="  WHERE ";
		}else{
		updateQuery_<%=cid %> +="  AND ";
		} 
		updateQuery_<%=cid %>+= <%=CodeGenerationUtils.replaceAllCrBySpace(whereClause)%>;
<%
			}
%>
		pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(updateQuery_<%=cid %>);

<%		
		}else if (("DELETE").equals(dataAction)){
		if("false".equals(useDifferentTable)) {
%>
		String deleteQuery_<%=cid %> = "DELETE  FROM <%=dbtable%>";
<%} else {%>
		String deleteQuery_<%=cid %> = "DELETE  FROM "+<%=differenttable%>;
<%}%>
		deleteQuery_<%=cid %> += " WHERE EXISTS ("+select_query_<%=cid %>+")"
<%
			if(CodeGenerationUtils.hasAlphaNumericCharacter(whereClause)) {
%>
		+"  AND " + <%=CodeGenerationUtils.replaceAllCrBySpace(whereClause)%>
<%
			}
%>
		;
		pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(deleteQuery_<%=cid %>);
<%		
		}
%>
	int nb_line_<%=cid%> = 0;
	int nb_line_update_<%=cid%> = 0;
	int nb_line_inserted_<%=cid%> = 0;
	int nb_line_deleted_<%=cid%> = 0;
<%
	
}
		// MAIN
	
		String incomingConnName = null;
		columnList = null;
		
		List< ? extends IConnection> conns = node.getIncomingConnections();
		if(conns!=null && conns.size()>0){
			IConnection conn = conns.get(0);
			incomingConnName = conn.getName();
		}
		
		metadatas = node.getMetadataList();
		
		if(metadatas != null && metadatas.size()>0){
			IMetadataTable metadata = metadatas.get(0);
			if(metadata != null){
				columnList = metadata.getListColumns();
			}
		}
		if(incomingConnName != null && columnList != null){
			if(("INSERT").equals(dataAction)){
%>
		System.out.println("Inserting with : \n" + insertQuery_<%=cid %> + "\n");
		nb_line_<%=cid%> += nb_line_inserted_<%=cid%> = pstmt_<%=cid %>.executeUpdate();
		System.out.println("--> " + nb_line_inserted_<%=cid%> + " rows inserted. \n");
<%
			}else if(("UPDATE").equals(dataAction)){
%>
		System.out.println("Updating with : \n" + updateQuery_<%=cid %> +"\n");
		nb_line_<%=cid%> += nb_line_update_<%=cid%> = pstmt_<%=cid %>.executeUpdate();
		System.out.println("--> " + nb_line_update_<%=cid%> + " rows updated. \n");
<%
			}else if (("DELETE").equals(dataAction)){
%>
		System.out.println("Deleting with : \n" + deleteQuery_<%=cid %> +"\n");
		nb_line_<%=cid%> += nb_line_deleted_<%=cid%> = pstmt_<%=cid %>.executeUpdate();
		System.out.println("--> " + nb_line_deleted_<%=cid%> + " rows deleted. \n");
<%
			}
		}
%>

	pstmt_<%=cid %>.close();
<%
		if(!useExistingConn) {
%>
    if(conn_<%=cid%> != null && !conn_<%=cid%>.isClosed()) {
        conn_<%=cid%> .close();
    }
<%
		}
%>

globalMap.put("<%=cid %>_NB_LINE",nb_line_<%=cid%>);
globalMap.put("<%=cid %>_NB_LINE_UPDATED",nb_line_update_<%=cid%>);
globalMap.put("<%=cid %>_NB_LINE_INSERTED",nb_line_inserted_<%=cid%>);
globalMap.put("<%=cid %>_NB_LINE_DELETED",nb_line_deleted_<%=cid%>);
