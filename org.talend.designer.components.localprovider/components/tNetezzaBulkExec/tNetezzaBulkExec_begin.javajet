<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.designer.codegen.config.CodeGeneratorArgument
	org.talend.core.model.metadata.IMetadataTable
    org.talend.core.model.metadata.MetadataTalendType    
    org.talend.core.model.metadata.MappingTypeRetriever	
    java.util.List
    java.util.ArrayList
    java.util.Map
    java.util.HashMap
" 
skeleton="../templates/db_output_bulk.skeleton"
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

String table = ElementParameterParser.getValue(node, "__TABLE__");
String file = ElementParameterParser.getValue(node,"__FILENAME__");

String dataAction = ElementParameterParser.getValue(node,"__DATA_ACTION__");
String tableAction = ElementParameterParser.getValue(node,"__TABLE_ACTION__");

String fieldSeparator = ElementParameterParser.getValue(node,"__FIELDSEPARATOR__");
String requireQuotes = ElementParameterParser.getValue(node,"__REQUIRE_QUOTES__");
String rowSeparator = ElementParameterParser.getValue(node,"__ROWSEPARATOR__");
String escapeChar = ElementParameterParser.getValue(node,"__ESCAPE_CHAR__");
String dateFormat = ElementParameterParser.getValue(node,"__DATE_FORMAT__");
String dateDelim = ElementParameterParser.getValue(node,"__DATE_DELIM__");
String timeFormat = ElementParameterParser.getValue(node,"__TIME_FORMAT__");
String timeDelim = ElementParameterParser.getValue(node,"__TIME_DELIM__");
String enableLogging = ElementParameterParser.getValue(node,"__ENABLE_LOGGING__");
String logDir = ElementParameterParser.getValue(node,"__LOG_DIR__");
String additionalOptions = ElementParameterParser.getValue(node,"__ADDITIONAL_OPTIONS__");
boolean setEncoding = "true".equals(ElementParameterParser.getValue(node,"__SET_ENCODING__"));
String encoding = ElementParameterParser.getValue(node,"__ENCODING__");
boolean convertToUppercase = false; // not active this function
boolean useExistingConnection= false;// not active this function
List<IMetadataColumn> columnList = getColumnList(node);
StringBuilder copyColumns = new StringBuilder("");
if(columnList != null && columnList.size() > 0) {
    copyColumns.append(" (");
    int count = 0;
    for(IMetadataColumn column : columnList) {
        copyColumns.append("\\\"" + column.getOriginalDbColumnName() + "\\\"");
        if(count != columnList.size() - 1) {
            copyColumns.append(",");
        }
        count++;
    }
    copyColumns.append(") ");
}
%>
	String bulkSQL_<%=cid%>="";
<%
String host = ElementParameterParser.getValue(node, "__HOST__");
String port = ElementParameterParser.getValue(node, "__PORT__");
String dbName = ElementParameterParser.getValue(node, "__DBNAME__");
String userName = ElementParameterParser.getValue(node, "__USER__");
String password = ElementParameterParser.getValue(node, "__PASS__");
String maxerrors = ElementParameterParser.getValue(node, "__MAXERRORS__");
String skiprows = ElementParameterParser.getValue(node, "__SKIPROWS__");
%> 
	bulkSQL_<%=cid%> += "INSERT INTO " + <%= table %> + " "  
            + " SELECT * FROM EXTERNAL '"+ <%= file %> + "'"
            + " USING (DELIM '"+<%= fieldSeparator %>+"' REMOTESOURCE 'JDBC' "
			+ " DATESTYLE '"+<%= dateFormat %>+"' DATEDELIM '"+<%= dateDelim %>+"' "
			+ " TIMESTYLE '<%= timeFormat %>' TIMEDELIM '"+<%= timeDelim %>+"' "
			<%if(!"UN_DEFINED".equals(escapeChar)){
			%>
			+ " ESCAPECHAR '"+<%= escapeChar %>+"' "
			<%
			}%>
			+ "	MAXERRORS <%=maxerrors%> SKIPROWS <%=skiprows%> LOGDIR '' <%=setEncoding? "encoding '" + encoding +"'":""%>)";

java.lang.Class.forName("org.netezza.Driver").newInstance();
java.sql.Connection con_<%=cid %> = java.sql.DriverManager.getConnection("jdbc:netezza://" + <%=host%> + ":" + <%=port%> + "/" + <%=dbName%>, <%=userName%>, <%=password%>);

    java.sql.Statement stmtBulk_<%=cid %> = con_<%=cid %>.createStatement();
    stmtBulk_<%=cid %>.execute(bulkSQL_<%=cid%>);
    stmtBulk_<%=cid %>.close();       
	con_<%=cid %>.close();