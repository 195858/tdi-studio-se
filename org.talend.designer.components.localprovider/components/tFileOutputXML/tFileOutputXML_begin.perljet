<%@ jet
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.metadata.IMetadataTable
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.List
    java.util.Map
"
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
    IMetadataTable metadata = metadatas.get(0);
    if (metadata!=null) {

        String encoding = ElementParameterParser.getValue(
            node,
            "__ENCODING__"
        );

        if (encoding!=null) {
            if (encoding.equals("")) {
                encoding = "undef";
            }
        }

        List<Map<String, String>> rootTags =
            (List<Map<String,String>>)ElementParameterParser.getObjectValue(
                node,
                "__ROOT_TAGS__"
            );

        String rowTag = ElementParameterParser.getValue(
            node,
            "__ROW_TAG__"
        );

        String split = ElementParameterParser.getValue(
            node,
            "__SPLIT__"
        );

        String splitEvery = ElementParameterParser.getValue(
            node,
            "__SPLIT_EVERY__"
        );

        String useDynamicGrouping = ElementParameterParser.getValue(
            node,
            "__USE_DYNAMIC_GROUPING__"
        );
%>

use FileHandle;
use talend::filesOp;

my %desc_<%=cid %> = (
    filename => <%=ElementParameterParser.getValue(node, "__FILENAME__") %>,
    encoding => <%=encoding%> || 'UTF-8',
    schema        => [
<%
        for (IMetadataColumn column: metadata.getListColumns()) {
%>
        {
            name    => '<%=column.getLabel() %>',
        },
<%
        }
%>
    ],
    root_tags     => [
<%
        for (int i=0; i<rootTags.size(); i++) {
            Map<String, String> rootTag = rootTags.get(i);
%>
        <%= rootTag.get("TAG") %>,
<%
        }
        if (rootTags.size() == 0) {
%>
        'array',
<%
        }
%>
    ],
    row_tag => <%=rowTag %>,
    split => <%=split %>,
    split_every => <%=splitEvery %>,
);

my $nb_fields_<%=cid %> = scalar @{ $desc_<%=cid %>{schema} };
my @colnames_<%=cid %> = map { $_->{name} } @{ $desc_<%=cid %>{schema} };

<%
        int i = 0;
        for (IMetadataColumn column: metadata.getListColumns()) {
%>
use constant <%=cid%>__<%=column.getLabel() %> => <%= i %>;
<%
            i++;
        }
%>

my $nb_line_<%=cid %> = 0;
<%
        if (useDynamicGrouping.equals("true")) {
%>
my @current_keys_<%=cid %> = ();
<%
        }
%>
my $output_FH_<%=cid %> = new FileHandle;
<%
        if (split.equals("true")) {
%>
my $filename_<%=cid%> = getSplittedFilename(
    $desc_<%=cid %>{filename},
    1
);
<%
        }
        else {
%>
my $filename_<%=cid%> = $desc_<%=cid %>{filename};
<%
        }
%>

open($output_FH_<%=cid %>, '>', $filename_<%=cid %>)
    or die 'cannot open file "' . $filename_<%=cid %> . '"';

print {$output_FH_<%=cid %>} (
    '<?xml version="1.0" encoding="',
    $desc_<%=cid %>{encoding},
    '"?>',
    "\n"
);

print {$output_FH_<%=cid %>} (
    (map {'<'.$_.'>'} @{ $desc_<%=cid %>{root_tags} }),
    "\n",
);

<%
    }
}
%>
