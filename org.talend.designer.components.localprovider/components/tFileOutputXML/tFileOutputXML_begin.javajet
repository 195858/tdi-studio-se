<%@ jet
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.metadata.IMetadataTable 
    java.util.List
    java.util.Map
"
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();
List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
    IMetadataTable metadata = metadatas.get(0);
    if (metadata!=null) {
    String encoding = ElementParameterParser.getValue(node, "__ENCODING__");
    List<Map<String, String>> rootTags = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__ROOT_TAGS__");
    int headers = rootTags.size() + 1;
    String split = ElementParameterParser.getValue(node, "__SPLIT__");
    String fileName = ElementParameterParser.getValue(node, "__FILENAME__");
    
    //**
    List<Map<String, String>> columnMapping = 
    		(List<Map<String,String>>)ElementParameterParser.getObjectValue(
                node,
                "__MAPPING__"
            );
    String useDynamicGrouping = ElementParameterParser.getValue(
            node,
            "__USE_DYNAMIC_GROUPING__"
        );
    List<Map<String, String>> groupBys =
            (List<Map<String,String>>)ElementParameterParser.getObjectValue(
                node,
                "__GROUP_BY__"
            );
    if (useDynamicGrouping.equals("false")) {
        groupBys.clear();
    }
    if (encoding!=null) {
        if (encoding.equals("")) {
                encoding = "ISO-8859-15";
        }
    }
    String groupby[][] = new String[groupBys.size()][3];
    for(int i = 0; i < groupBys.size(); i++){
    	groupby[i][0] = groupBys.get(i).get("COLUMN");
    	groupby[i][1] = groupBys.get(i).get("LABEL");
    }
    int atts = 0;
    int tags = 0;
    outter1:
    for(int i = 0; i < columnMapping.size(); i++){
    	Map<String, String> map = columnMapping.get(i);
    	String col = metadata.getListColumns().get(i).getLabel();
    	for(int j = 0; j < groupby.length; j++){
    		if(groupby[j][0].equals(col)){
    			if(map.get("SCHEMA_COLUMN_NAME").equals("true")){
    				groupby[j][2] = col;
    			}else{
    				groupby[j][2] = map.get("LABEL");
    			}
    			continue outter1;
    		}
    	}
    	if(map.get("AS_ATTRIBUTE").equals("true")){
    		atts ++;
    	}else{
    		tags ++;
    	}
    }
    String[][] attribute = new String[atts][2];
    String[][] tag = new String[tags][2];
    int ia=0;
    int it=0;
    outter2:
    for(int i = 0; i < columnMapping.size(); i++){
    	Map<String, String> map = columnMapping.get(i);
    	String col = metadata.getListColumns().get(i).getLabel();
    	for(int j = 0; j < groupby.length; j++){
    		if(groupby[j][0].equals(col)){
    			continue outter2;
    		}
    	}
    	if(map.get("AS_ATTRIBUTE").equals("true")){
    		if(map.get("SCHEMA_COLUMN_NAME").equals("true")){
    			attribute[ia][1] = col;
    		}else{
    			attribute[ia][1] = map.get("LABEL");
    		}
    		attribute[ia++][0] = col;
    	}else{
    		if(map.get("SCHEMA_COLUMN_NAME").equals("true")){
    			tag[it][1] = col;
    		}else{
    			tag[it][1] = map.get("LABEL");
    		}
    	    tag[it++][0] = col;
    	}
    }
    //**
    String fileNewname = ElementParameterParser.getValue(node,"__FILENAME__");
%>
  <%if(ElementParameterParser.getValue(node,"__CREATE__").equals("true")){%>
//create directory only if not exists
 String fileNewName_<%=cid%> = <%=fileNewname%>;
 java.io.File createFile<%=cid%> = new java.io.File(fileNewName_<%=cid%>);
 if(!createFile<%=cid%>.exists()){
 	(new java.io.File(fileNewName_<%=cid%>.substring(0,fileNewName_<%=cid%>.lastIndexOf("/")))).mkdirs();
 }
	<%}%>

String[] headers_<%=cid %> = new String[<%=headers %>];
    
headers_<%=cid %>[0] = "<?xml version=\"1.0\" encoding=\""+<%= encoding %>+"\"?>";  

<%
if(rootTags.size() > 0){
%>String[] footers_<%=cid%> = new String[<%=rootTags.size()%>];

<%
	for (int i=0; i<rootTags.size(); i++){
		Map<String, String> rootTag = rootTags.get(i);
%>headers_<%=cid %>[<%=i+1 %>] = "<"+<%=rootTag.get("TAG") %>+">";

footers_<%=cid %>[<%=i %>] = "</"+<%=rootTag.get("TAG") %>+">";

<%
	}
}
%><%
if(groupby.length>0){
%>String[][] groupby_<%=cid %> = new String[<%=groupby.length %>][2];

int groupby_new_<%=cid %> = 0;

boolean start_<%=cid %> = false;

<%
	for(int i = 0; i < groupby.length; i++){
%>groupby_<%=cid %>[<%=i %>][0] = "";

groupby_<%=cid %>[<%=i %>][1] = "</<%=groupby[i][2] %>>";

<%
	}
}
%>int nb_line_<%=cid%> = 0;

<%
if (!split.equals("true")) {
%>
java.io.BufferedWriter out_<%=cid%> = new java.io.BufferedWriter(
	new java.io.OutputStreamWriter(new java.io.FileOutputStream(<%=fileName%>), <%=encoding%>));
<%
	for(int i = 0; i < headers;i++){
%>	out_<%=cid%>.write(headers_<%=cid %>[<%=i %>]);

	out_<%=cid%>.newLine();
	
<%
	}
}else{
%>
int currentRowCount_<%=cid %> = 0;
int currentFileCount_<%=cid %> = 0;
<%
	if(fileName.startsWith("\"") && fileName.endsWith("\"")){
		String fileNameWithoutExtension =  fileName.substring(0,fileName.indexOf(".xml"));
%>
java.io.BufferedWriter out_<%=cid%> = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
	new java.io.FileOutputStream(<%=fileNameWithoutExtension%>"+currentFileCount_<%=cid %>+".xml"), <%=encoding%>));
<%
	}else{
%>
String fn_<%=cid%> = <%=fileName%>;
String prefix_fn_<%=cid%> = fn_<%=cid%>.substring(0,fn_<%=cid%>.lastIndexOf(".xml"));
java.io.BufferedWriter out_<%=cid%> = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
	new java.io.FileOutputStream(prefix_fn_<%=cid%>+currentFileCount_<%=cid %>+".xml"), <%=encoding%>));
<%
	}
	for(int i = 0; i < headers;i++){%>

	out_<%=cid%>.write(headers_<%=cid %>[<%=i %>]);

	out_<%=cid%>.newLine();
	
<%
	}
}
%><%
    }
}

%>