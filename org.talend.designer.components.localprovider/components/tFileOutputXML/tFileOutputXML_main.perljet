<%@ jet
package="org.talend.designer.codegen.translators"
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.process.ElementParameterParser
    java.util.List
    java.util.Map
"
class="FileOutputXMLMain"
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
boolean stats = codeGenArgument.isStatistics();				

List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
    IMetadataTable metadata = metadatas.get(0);
    if (metadata!=null) {
        String cid = metadata.getTableName();

        String colnameAsTagname = ElementParameterParser.getValue(
            node,
            "__COLNAME_AS_TAGNAME__"
        );

        String split = ElementParameterParser.getValue(
            node,
            "__SPLIT__"
        );

        String splitEvery = ElementParameterParser.getValue(
            node,
            "__SPLIT_EVERY__"
        );


        String useDynamicGrouping = ElementParameterParser.getValue(
            node,
            "__USE_DYNAMIC_GROUPING__"
        );

        List<Map<String, String>> groupBys =
            (List<Map<String,String>>)ElementParameterParser.getObjectValue(
                node,
                "__GROUP_BY__"
            );

        if (useDynamicGrouping.equals("false")) {
            groupBys.clear();
        }

        String rowTag = ElementParameterParser.getValue(
            node,
            "__ROW_TAG__"
        );

        String fieldTag = ElementParameterParser.getValue(
            node,
            "__FIELD_TAG__"
        );
%>

@<%=cid %> = map {
    s/</&lt;/g;
    s/>/&gt;/g;
    s/&/&amp;/g;
    $_;
} @<%=cid %>;

<%
        if (useDynamicGrouping.equals("false")) {
%>
print {$output_FH_<%=cid %>} (
    '<'.<%=rowTag%>.'>'."\n",
<%
            for (IMetadataColumn column: metadata.getListColumns()) {
                boolean displayColumn = true;
                for (int i=0; i<groupBys.size(); i++) {
                    Map<String, String> groupBy = groupBys.get(i);
                    if (column.getLabel().equals(groupBy.get("COLUMN"))) {
                        displayColumn = false;
                    }
                }

                if (displayColumn) {
                    String fieldname = fieldTag;
                    if (colnameAsTagname.equals("true")) {
                        fieldname = "'" + column.getLabel() + "'";
                    }
%>
    '<'.<%=fieldname%>.'>'.$<%=cid%>[<%=cid%>__<%=column.getLabel()%>].'</'.<%=fieldname%>.'>'."\n",
<%
                }
            }
%>
    '</'.<%=rowTag%>.'>'."\n"
)
    or die "can't write to file ".$output_desc_<%=cid %>{filename}."\n";

<%
        }
        else {
%>
if (not defined @current_keys_<%=cid %>) {
    @current_keys_<%=cid %> = (
<%
            for (int i=0; i<groupBys.size(); i++) {
                Map<String, String> groupBy = groupBys.get(i);
%>
        $<%=cid%>[<%=cid%>__<%=groupBy.get("COLUMN")%>],
<%
            }
%>
    );

<%
            for (int i=0; i<groupBys.size(); i++) {
                Map<String, String> groupBy = groupBys.get(i);
%>
    printf {$output_FH_<%=cid %>} (
        '<<%=groupBy.get("COLUMN")%> name="%s">'."\n",
        $<%=cid%>[<%=cid%>__<%=groupBy.get("COLUMN")%>]
    );
<%
            }
%>
}

<%
            for (int i=0; i<groupBys.size(); i++) {
                Map<String, String> groupBy = groupBys.get(i);

                String control = "elsif";
                if (i==0) {
                    control = "if";
                }
%>
<%=control%> ($<%=cid%>[<%=cid%>__<%=groupBy.get("COLUMN")%>] ne $current_keys_<%=cid %>[<%=i%>]) {
<%
                for (int j=i; j<groupBys.size(); j++) {
                    Map<String, String> subgroupBy = groupBys.get(j);
%>        
    $current_keys_<%=cid%>[<%=j%>] = $<%=cid%>[<%=cid%>__<%=subgroupBy.get("COLUMN")%>];
<%
                }
%>

<%
                for (int j=groupBys.size() - 1; j>=i; j--) {
                    Map<String, String> subgroupBy = groupBys.get(j);
%>
    print {$output_FH_<%=cid %>} '</<%=subgroupBy.get("COLUMN")%>>', "\n";
<%
                }
%>

<%
                for (int j=i; j<groupBys.size(); j++) {
                    Map<String, String> subgroupBy = groupBys.get(j);
%>
    printf {$output_FH_<%=cid %>} (
        '<<%=subgroupBy.get("COLUMN")%> %s="%s">'."\n",
        <%=subgroupBy.get("ATTRIBUTE_LABEL")%>,
        $<%=cid%>[<%=cid%>__<%=subgroupBy.get("COLUMN")%>]
    );
<%
                }
%>
}
<%
            }
%>

print {$output_FH_<%=cid %>} (
    '<'.<%=rowTag%>.'>'."\n",
<%
            for (IMetadataColumn column: metadata.getListColumns()) {
                boolean displayColumn = true;
                for (int i=0; i<groupBys.size(); i++) {
                    Map<String, String> groupBy = groupBys.get(i);
                    if (column.getLabel().equals(groupBy.get("COLUMN"))) {
                        displayColumn = false;
                    }
                }

                if (displayColumn) {
                    String fieldname = fieldTag;
                    if (colnameAsTagname.equals("true")) {
                        fieldname = "'" + column.getLabel() + "'";
                    }
%>
    '<'.<%=fieldname%>.'>'.$<%=cid%>[<%=cid%>__<%=column.getLabel()%>].'</'.<%=fieldname%>.'>'."\n",
<%
                }
            }
%>
    '</'.<%=rowTag%>.'>'."\n"
);

<%
        } // use dynamic grouping
%>

$nb_line_<%=cid %>++;
<%
            if (stats) {
%>
UpdateStat('<%=cid %>', 1);
<%
            }
%>

<%
        if (split.equals("true")) {
%>
if ($nb_line_<%=cid %> % <%=splitEvery %> == 0) {
<%
            if (useDynamicGrouping.equals("true")) {
                for (int i=groupBys.size() - 1; i>=0; i--) {
                    Map<String, String> subgroupBy = groupBys.get(i);
%>
    print {$output_FH_<%=cid %>} '</<%=subgroupBy.get("COLUMN")%>>', "\n";
<%
                }
%>

    undef @current_keys_<%=cid %>;
<%
            }
%>

    print {$output_FH_<%=cid %>} (
        (map {'</'.$_.'>'} reverse @{ $desc_<%=cid %>{root_tags} }),
        "\n",
    );

    close($output_FH_<%=cid %>);

    $output_FH_<%=cid %> = new FileHandle;

    $filename_<%=cid%> = getSplittedFilename(
        $desc_<%=cid %>{filename},
        $nb_line_<%=cid %>/<%=splitEvery %> + 1
    );

    open($output_FH_<%=cid %>, '>', $filename_<%=cid %>)
        or die 'cannot open file "' . $filename_<%=cid %> . '"';

    print {$output_FH_<%=cid %>} (
        '<?xml version="1.0" encoding="',
        $desc_<%=cid %>{encoding},
        '"?>',
        "\n"
    );

    print {$output_FH_<%=cid %>} (
        (map {'<'.$_.'>'} @{ $desc_<%=cid %>{root_tags} }),
        "\n",
    );
}
<%
        }
    }
}
%>
