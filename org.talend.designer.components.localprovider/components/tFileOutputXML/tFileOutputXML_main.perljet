<%@ jet
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.process.ElementParameterParser
    java.util.List
    java.util.ArrayList
    java.util.Map
    java.util.HashMap
    java.lang.IllegalArgumentException
"
%>

<%
final class SchemaColumn {
    private String id;
    private String label;

    public SchemaColumn(String id, String label) {
        super();
        if (id==null || label==null) {
            throw new IllegalArgumentException(
                "Params should't be null: id=" + id + ", label=" + label
            );
        }
        this.id = id;
        this.label = label;
    }

    public SchemaColumn(Map<String, String> mappingColumn) {
        String colName = mappingColumn.get("SCHEMA_COLUMN");
        String label = "'" + colName + "'";

        if (mappingColumn.get("SCHEMA_COLUMN_NAME").equals("false")) {
            label = mappingColumn.get("LABEL");
        }

        this.id = colName;
        this.label = label;
    }

    public String getId() {
        return this.id;
    }

    public String getLabel() {
        return this.label;
    }
}

CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
    IMetadataTable metadata = metadatas.get(0);
    if (metadata!=null) {

        String split = ElementParameterParser.getValue(
            node,
            "__SPLIT__"
        );

        String splitEvery = ElementParameterParser.getValue(
            node,
            "__SPLIT_EVERY__"
        );

        List<Map<String, String>> mapping =
            (List<Map<String,String>>)ElementParameterParser.getObjectValue(
                node,
                "__MAPPING__"
            );

        String useDynamicGrouping = ElementParameterParser.getValue(
            node,
            "__USE_DYNAMIC_GROUPING__"
        );

        List<Map<String, String>> groupBys =
            (List<Map<String,String>>)ElementParameterParser.getObjectValue(
                node,
                "__GROUP_BY__"
            );

        if (useDynamicGrouping.equals("false")) {
            groupBys.clear();
        }

        String rowTag = ElementParameterParser.getValue(
            node,
            "__ROW_TAG__"
        );

        List<SchemaColumn> displayAsAttribute = new ArrayList<SchemaColumn>();
        List<SchemaColumn> displayAsTag = new ArrayList<SchemaColumn>();

        for (Map<String, String> mappingColumn : mapping) {
            String colName = mappingColumn.get("SCHEMA_COLUMN");
            boolean displayColumn = true;

            // The column is displayed only if it's not used in the group by
            // option
            for (Map<String, String> groupBy : groupBys) {
                if (colName.equals(groupBy.get("COLUMN"))) {
                    displayColumn = false;
                }
            }

            if (displayColumn) {
                if (mappingColumn.get("AS_ATTRIBUTE").equals("true")) {
                    displayAsAttribute.add(
                        new SchemaColumn(mappingColumn)
                    );
                }
                else {
                    displayAsTag.add(
                        new SchemaColumn(mappingColumn)
                    );
                }
            }
        }

        Map labelOfColumn = new HashMap();
        for (Map<String, String> mappingColumn : mapping) {
            String colName = mappingColumn.get("SCHEMA_COLUMN");
            String label = "'" + colName + "'";

            if (mappingColumn.get("SCHEMA_COLUMN_NAME").equals("false")) {
              label = mappingColumn.get("LABEL");
            }

            labelOfColumn.put(colName, label);
        }
%>

my @row_<%=cid%> = @$<%=cid %>;

@row_<%=cid %> = map {
    s/</&lt;/g;
    s/>/&gt;/g;
    s/&/&amp;/g;
    $_;
} @row_<%=cid %>;

<%
        if (useDynamicGrouping.equals("true")) {
%>
if (not defined @current_keys_<%=cid %>) {
    @current_keys_<%=cid %> = (
<%
            for (int i=0; i<groupBys.size(); i++) {
                Map<String, String> groupBy = groupBys.get(i);
%>
        $row_<%=cid%>[<%=cid%>__<%=groupBy.get("COLUMN")%>],
<%
            }
%>
    );

<%
            for (int i=0; i<groupBys.size(); i++) {
                Map<String, String> groupBy = groupBys.get(i);
%>
    printf {$output_FH_<%=cid %>} (
        '<'.'%s %s="%s"'.">\n",
        <%=labelOfColumn.get(groupBy.get("COLUMN"))%>,
        <%=groupBy.get("ATTRIBUTE_LABEL")%>,
        $row_<%=cid%>[<%=cid%>__<%=groupBy.get("COLUMN")%>]
    );

<%
            }
%>
}

<%
            for (int i=0; i<groupBys.size(); i++) {
                Map<String, String> groupBy = groupBys.get(i);

                String control = "elsif";
                if (i==0) {
                    control = "if";
                }
%>
<%=control%> ($row_<%=cid%>[<%=cid%>__<%=groupBy.get("COLUMN")%>] ne $current_keys_<%=cid %>[<%=i%>]) {
<%
                for (int j=i; j<groupBys.size(); j++) {
                    Map<String, String> subgroupBy = groupBys.get(j);
%>        
    $current_keys_<%=cid%>[<%=j%>] = $row_<%=cid%>[<%=cid%>__<%=subgroupBy.get("COLUMN")%>];
<%
                }
%>

<%
                for (int j=groupBys.size() - 1; j>=i; j--) {
                    Map<String, String> subgroupBy = groupBys.get(j);
%>
    print {$output_FH_<%=cid %>} (
        '</'.<%=labelOfColumn.get(subgroupBy.get("COLUMN"))%>.'>',
        "\n"
    );
<%
                }
%>

<%
                for (int j=i; j<groupBys.size(); j++) {
                    Map<String, String> subgroupBy = groupBys.get(j);
%>
    printf {$output_FH_<%=cid %>} (
        '<'.'%s %s="%s"'.">\n",
        <%=labelOfColumn.get(subgroupBy.get("COLUMN"))%>,
        <%=subgroupBy.get("ATTRIBUTE_LABEL")%>,
        $row_<%=cid%>[<%=cid%>__<%=subgroupBy.get("COLUMN")%>]
    );
<%
                }
%>
}
<%
            }
        } // use dynamic grouping
%>

print {$output_FH_<%=cid %>} (
    '<'.<%=rowTag%>,
<%
        for (SchemaColumn sc : displayAsAttribute) {
%>
    sprintf(
        ' '.<%=sc.getLabel()%>.'="%s"',
        $row_<%=cid%>[<%=cid%>__<%=sc.getId()%>]
    ),
<%                
        }

        if (displayAsTag.size() == 0) {
%>
    '/>'."\n",
<%
        }
        else {
%>
    '>'."\n",
<%
            for (SchemaColumn sc : displayAsTag) {
%>
    sprintf(
        '  <'.<%=sc.getLabel()%>.'>%s</'.<%=sc.getLabel()%>.'>'."\n",
        $row_<%=cid%>[<%=cid%>__<%=sc.getId()%>]
    ),
<%
            }
%>
    '</'.<%=rowTag%>.">\n\n",
<%
        }
%>
)
    or die "can't write to file ".$output_desc_<%=cid %>{filename}."\n";

$nb_line_<%=cid %>++;

<%
        if (split.equals("true")) {
%>
if ($nb_line_<%=cid %> % <%=splitEvery %> == 0) {
<%
            if (useDynamicGrouping.equals("true")) {
                for (int i=groupBys.size() - 1; i>=0; i--) {
                    Map<String, String> subgroupBy = groupBys.get(i);
%>
    print {$output_FH_<%=cid %>} '</<%=subgroupBy.get("COLUMN")%>>', "\n";
<%
                }
%>

    undef @current_keys_<%=cid %>;
<%
            }
%>

    print {$output_FH_<%=cid %>} (
        (map {'</'.$_.'>'} reverse @{ $desc_<%=cid %>{root_tags} }),
        "\n",
    );

    close($output_FH_<%=cid %>);

    $output_FH_<%=cid %> = new FileHandle;

    $filename_<%=cid%> = getSplittedFilename(
        $desc_<%=cid %>{filename},
        $nb_line_<%=cid %>/<%=splitEvery %> + 1
    );

    open($output_FH_<%=cid %>, '>', $filename_<%=cid %>)
        or die 'cannot open file "' . $filename_<%=cid %> . '"';

    print {$output_FH_<%=cid %>} (
        '<?xml version="1.0" encoding="',
        $desc_<%=cid %>{encoding},
        '"?>',
        "\n"
    );

    print {$output_FH_<%=cid %>} (
        (map {'<'.$_.'>'} @{ $desc_<%=cid %>{root_tags} }),
        "\n",
    );
}
<%
        }
    }
}
%>
