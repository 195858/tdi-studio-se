<%@ jet
package="org.talend.designer.codegen.translators"
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.process.ElementParameterParser
    
    java.util.List
    org.talend.core.model.process.IConnection
    org.talend.core.model.metadata.IMetadataColumn
"
class="FileOutputXMLMain"
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
boolean stats = codeGenArgument.isStatistics();	
String rowTag = ElementParameterParser.getValue(node, "__ROW_TAG__");
String split = ElementParameterParser.getValue(node, "__SPLIT__");
List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
    IMetadataTable metadata = metadatas.get(0);
    if (metadata!=null) {
    String fileName = ElementParameterParser.getValue(node, "__FILENAME__");
	String encoding = ElementParameterParser.getValue(node, "__ENCODING__");
    String fileNameNoExtension =  fileName.substring(0,fileName.indexOf(".xml"));
        if (encoding!=null) {
            if (encoding.equals("")) {
                encoding = "ISO-8859-15";
            }
        }
        if(split.equals("true")){
         
%>
if(currentRowQtyWithinFile >= split_every){
java.io.FileOutputStream fos = new java.io.FileOutputStream(<%=fileNameNoExtension%>"+splitedFileNo+".xml");
	try{
	java.io.BufferedWriter out = new java.io.BufferedWriter(
	                                new java.io.OutputStreamWriter(fos, <%=encoding%>));
	                                
    for (int i = rootTag_<%=node.getUniqueName()%>.length-1; i >=0 ; i--) {
			strBuffer_<%=node.getUniqueName()%>.append("</"+rootTag_<%=node.getUniqueName()%>[i]+">");		            
   		}
    	out.write(strBuffer_<%=node.getUniqueName()%>.toString());   
		out.flush();
		out.close();
	
	}catch(java.io.UnsupportedEncodingException err){
	err.printStackTrace();
	}
    currentRowQtyWithinFile=0;
    splitedFileNo++;
    strBuffer_<%=node.getUniqueName()%> = new StringBuffer();
}
if(currentRowQtyWithinFile==0){
strBuffer_<%=node.getUniqueName()%>.append("<?xml version=\"1.0\" encoding=\""+<%= encoding %>+"\"?> \n");
	for (int i = 0; i < rootTag_<%=node.getUniqueName()%>.length; i++) {
		strBuffer_<%=node.getUniqueName()%>.append("<"+rootTag_<%=node.getUniqueName()%>[i]+">");		            
    }
    strBuffer_<%=node.getUniqueName()%>.append("\n");
}
<%
	  }
%>
<%
    
    
        
	List< ? extends IConnection> conns = node.getIncomingConnections();
		if(conns!=null){
		IConnection conn = conns.get(0);
		%>
strBuffer_<%=node.getUniqueName()%>.append("<"+<%=rowTag%>+">\n");
      	<%		
			for(IMetadataColumn column:metadata.getListColumns()){
			%>
strBuffer_<%=node.getUniqueName()%>.append("<<%=column.getLabel()%>>"+<%=conn.getName()%>.<%=column.getLabel()%>+"</<%=column.getLabel()%>>\n");			
			<%		
			}
		%>
strBuffer_<%=node.getUniqueName()%>.append("</"+<%=rowTag%>+">\n");

		<%
		  if(split.equals("true")){
		  %>     
currentRowQtyWithinFile++;			  
		  <%
		  }					
		}
    }
}
%>
