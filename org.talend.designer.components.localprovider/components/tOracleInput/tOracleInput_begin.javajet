<%@ jet 
imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.core.model.metadata.builder.database.ExtractMetaDataUtils
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
		java.util.Map
		java.util.List
" 
%>
	<%@ include file="../templates/DB/Input/HelpClass.javajet"%>
<%

	class DBInputBeginUtil extends DefaultDBInputUtil{
	
		public void setURL(INode node) {
			
			String localServiceName = ElementParameterParser.getValue(node, "__LOCAL_SERVICE_NAME__");
			String connectionType = ElementParameterParser.getValue(node, "__CONNECTION_TYPE__");
%>
            	String url_<%=cid%> = null;
<%
            	if(("ORACLE_SID").equals(connectionType)) {
%>
            		url_<%=cid %> = "jdbc:oracle:thin:@" + <%=dbhost%> + ":" + <%=dbport%> + ":" + <%=dbname%>;
<%
            	} else if(("ORACLE_SERVICE_NAME").equals(connectionType)) {
%>
            		url_<%=cid %> = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + <%=dbhost%> + ")(port=" + <%=dbport%> + "))(connect_data=(service_name=" + <%=dbname%> + ")))";
<%
            	} else if(("ORACLE_OCI").equals(connectionType)) {
            	    %>
            	    url_<%=cid %> = "jdbc:oracle:oci8:@" + <%=localServiceName%>;
<%
            	}
%>

<%
		}
		
		public String getDirverClassName(INode node){
			return "oracle.jdbc.driver.OracleDriver";
		}
		
		public void createStatement(INode node) {
			super.createStatement(node);
			String useCursor= ElementParameterParser.getValue(node, "__USE_CURSOR__");
			String cursorSize= ElementParameterParser.getValue(node, "__CURSOR_SIZE__");
            if(("true").equals(useCursor)) {
%>
                stmt_<%=cid %>.setFetchSize(<%=cursorSize %>);
<%
            }
		}
		//-----------according schema type to generate ResultSet
		public void generateStringResultSet(String firstConnName, IMetadataColumn column, int currentColNo, String trimMethod) {
			String columnType = column.getType();
			if(columnType != null && ("CLOB").equals(columnType)) {
%>
				java.io.Reader reader_<%=cid%> = rs_<%=cid %>.getCharacterStream(<%=currentColNo%>);
				java.io.BufferedReader br_<%=cid%> = null;
				if(reader_<%=cid%> != null) {
					br_<%=cid%> = new java.io.BufferedReader(reader_<%=cid%>);                 	                        
 	                StringBuffer content_<%=cid%> = new StringBuffer();
 	                int c_<%=cid%> =0;
 	                while( (c_<%=cid%> = br_<%=cid%>.read()) != -1) {
 	                	content_<%=cid%>.append((char)c_<%=cid%>);
					}
 	                br_<%=cid%>.close();
					<%=firstConnName%>.<%=column.getLabel()%> = content_<%=cid%>.toString();
				} else {
					<%=firstConnName%>.<%=column.getLabel()%> = null;
				}                 	                    
<%
			} else {
%>
			 	    tmpContent_<%=cid%> = rs_<%=cid %>.getString(<%=currentColNo%>);
			        if(tmpContent_<%=cid%> != null) {
			            <%=firstConnName%>.<%=column.getLabel()%> = tmpContent_<%=cid%><%=trimMethod%>;
			        } else {
			            <%=firstConnName%>.<%=column.getLabel()%> = null;
			        }                 	                    
<%
			}
	    }
	    
	   	public void generateBytesResultSet(String firstConnName, IMetadataColumn column, int currentColNo) {
%>
			tmpBytes_<%=cid%> = rs_<%=cid %>.getBytes(<%=currentColNo%>);
			if(tmpBytes_<%=cid%> != null) {
				<%=firstConnName%>.<%=column.getLabel()%> = tmpBytes_<%=cid%>;
			} else {
				<%=firstConnName%>.<%=column.getLabel()%> = null;
			}		
<%
	    }

	   	public void generateOthersResultSet(String firstConnName, IMetadataColumn column, int currentColNo, String typeToGenerate) {
			if(("Object").equals(typeToGenerate)){
%>
				Object tmpObj_<%=currentColNo%>_<%=cid %> = rs_<%=cid %>.getObject(<%=currentColNo%>);
				if(tmpObj_<%=currentColNo%>_<%=cid %> != null) {
					<%=firstConnName%>.<%=column.getLabel()%> = tmpObj_<%=currentColNo%>_<%=cid %>;
				} else {
<%
					if(column.isNullable()) {
%>
						<%=firstConnName%>.<%=column.getLabel()%> = null;
<%
					} else {
%>    
						throw new RuntimeException("Null value in non-Nullable column");
<%    
					}
%>
				}
<%
			} else {
%>
				if(rs_<%=cid %>.getObject(<%=currentColNo%>) != null) {
					<%=firstConnName%>.<%=column.getLabel()%> = rs_<%=cid %>.get<%=typeToGenerate%>(<%=currentColNo%>);
				} else {
<%
					if(column.isNullable()) {
%>
						<%=firstConnName%>.<%=column.getLabel()%> = null;
<%
					} else {
%>    
 	                        throw new RuntimeException("Null value in non-Nullable column");
<%    
					}
%>
				}
<%
			}
	    }	    
	    //---------end according schema type to generate ResultSet
	}//end class
	
	dbInputBeginUtil = new DBInputBeginUtil();
%>

    
	<%@ include file="../templates/DB/Input/AbstractDBInputBegin.javajet"%>
	
	

