<%@ jet 
imports="
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.INode
		org.talend.core.model.process.ElementParameterParser  
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.core.model.metadata.MetadataTalendType
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType 
        org.talend.core.model.metadata.MappingTypeRetriever		
		java.util.List
		java.util.ArrayList
		java.util.Map
		java.util.HashMap
		java.util.LinkedList
	" 
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	
	String cid = node.getUniqueName();
	
    List<Map<String, String>> addCols =
            (List<Map<String,String>>)ElementParameterParser.getObjectValue(
                node,"__ADD_COLS__" );
    
    
    String dbname= ElementParameterParser.getValue(node, "__DBNAME__");
    
    String dbhost = ElementParameterParser.getValue(node, "__HOST__");
    
	String dbport = ElementParameterParser.getValue(node, "__PORT__");
	
	String dbuser= ElementParameterParser.getValue(node, "__USER__");
	
	String dbpwd= ElementParameterParser.getValue(node, "__PASS__");
	
	String tableName = ElementParameterParser.getValue(node,"__TABLE__");
	
	String dbmsId = ElementParameterParser.getValue(node,"__MAPPING__");
	
	String dataAction = ElementParameterParser.getValue(node,"__DATA_ACTION__");
	
	String tableAction = ElementParameterParser.getValue(node,"__TABLE_ACTION__");
	
	String commitEvery = ElementParameterParser.getValue(node, "__COMMIT_EVERY__");
	
	String tableSchema = ElementParameterParser.getValue(node,"__TABLESCHEMA__");

%>

<%
List<IMetadataColumn> columnList = null;
List<IMetadataTable> metadatas = node.getMetadataList();
if(metadatas !=null && metadatas.size()>0){
	IMetadataTable metadata = metadatas.get(0);
	if(metadata != null){
		columnList = metadata.getListColumns();
	}
}
%>

<%
if(!dataAction.equals("INSERT"))
{
    int keyCount = 0;
    for(IMetadataColumn column:columnList)
    {
    	if(column.isKey())
    	{
    		keyCount++;
    	}
    }
    %>
    int keyCount_<%=cid%> = <%=keyCount%>;
    if(keyCount_<%=cid%> < 1)
    {
    	throw new Exception("For update or delete, Schema must have a key");
    }
<%
}
%>
int nb_line_<%=cid%> = 0;
int nb_line_update_<%=cid%> = 0;
int nb_line_inserted_<%=cid%> = 0;
int nb_line_deleted_<%=cid%> = 0;

int deletedCount_<%=cid%>=0;
int updatedCount_<%=cid%>=0;
int insertedCount_<%=cid%>=0;

boolean whetherReject_<%=cid%> = false;

java.sql.Connection conn_<%=cid%> = null;

//optional schema.table
String dbschema_<%=cid%> = null;
dbschema_<%=cid%> = <%=tableSchema%>;
String tableName_<%=cid%> = null;
<%
String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");
if(useExistingConn.equals("true"))
{
	commitEvery = "0";
	String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
	String conn = "conn_" + connection;
	String schema = "dbschema_" + connection;
	%>
	dbschema_<%=cid%> = (String)globalMap.get("<%=conn%>");
	conn_<%=cid%> = (java.sql.Connection)globalMap.get("<%=conn%>");
	<%
} 
else 
{   
%>
	java.lang.Class.forName("oracle.jdbc.driver.OracleDriver");
	
	<%
	String connectionType = ElementParameterParser.getValue(node, "__CONNECTION_TYPE__");
	%>
	String url_<%=cid%> = null;
	<%
	if(connectionType.equals("ORACLE_SID")) {
	%>
		url_<%=cid%> = "jdbc:oracle:thin:@" + <%=dbhost%> + ":" + <%=dbport%> + ":" + <%=dbname%>;
	<%
	}else if(connectionType.equals("ORACLE_SERVICE_NAME")) {
	%>
		url_<%=cid%> = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + <%=dbhost%> + ")(port=" + <%=dbport%> + "))(connect_data=(service_name=" + <%=dbname%> + ")))";
	<%
	}
	%>

	String dbUser_<%=cid%> = <%=dbuser%>;
	String dbPwd_<%=cid%> = <%=dbpwd%>;

	conn_<%=cid%> = java.sql.DriverManager.getConnection(url_<%=cid %>,dbUser_<%=cid%>,dbPwd_<%=cid%>);
	
	
	
	<%
}
%> 

if(dbschema_<%=cid%> == null || dbschema_<%=cid%>.trim().length() == 0)
{
    tableName_<%=cid%> = <%=tableName%>;
}
else
{
    tableName_<%=cid%> =dbschema_<%=cid%> + "." + <%=tableName%>;
}

<%
if(columnList != null && columnList.size()>0){

    class Column{
    
    	IMetadataColumn column;
    	
    	String name;
    	
    	String dataType;
    	
    	String DBname;
    	
    	String sqlStmt;
    	
    	String value;
    	
    	boolean addCol;
    	
    	List<Column> replacement = new ArrayList<Column>();
    	
    	public Column(String colName,String sqlStmt,boolean addCol){
    		this.column = null;
    		this.name=colName;
    		this.DBname = colName;
    		this.sqlStmt = sqlStmt;
    		this.value = "?";
    		this.addCol =addCol;
    	}
    	
    	public Column(IMetadataColumn column){
    		this.column = column;
    		this.name = column.getLabel();
    		this.sqlStmt = "=?";
    		this.value = "?";
    		this.addCol =false;
    		this.DBname=column.getOriginalDbColumnName();
    	}
    	
    	public boolean isReplaced(){
    		return replacement.size()>0;
    	}
    	
    	public void replace(Column column){
    		this.replacement.add(column);
    	}
    	
    	public List<Column> getReplacement(){
    		return this.replacement;
    	}
    	
    	public void setColumn(IMetadataColumn column){
    		this.column = column;
    	}
    	
    	public IMetadataColumn getColumn(){
    		return this.column;
    	}
    	
    	public void setName(String name){
    		this.name = name;
    	}
    
    	public String getName(){
    		return this.name;
    	}
    	
    	public void setDBName(String DBname){
    		this.DBname = DBname;
    	}
    
    	public String getDBName(){
    		return this.DBname;
    	}
    	
    	public void setIsAddCol(boolean isadd){
    		this.addCol = isadd;
    	}
    	
    	public boolean isAddCol(){
    		return this.addCol;
    	}
    	
    	public void setSqlStmt(String sql){
    		this.sqlStmt = sql;
    	}
    	
    	public String getSqlStmt(){
    		return this.sqlStmt;
    	}
    	
    	public void setValue(String value){
    		this.value = value;
    	}
    	
    	public String getValue(){
    		return this.value;
    	}
    	
        public void setDataType(String dataType) {
            this.dataType = dataType;
        }
        
        public String getDataType() {
            return dataType;
        }	
    }

    StringBuffer insertColName = new StringBuffer();
    
    StringBuffer insertValueStmt = new StringBuffer();
    
    StringBuffer updateSetStmt = new StringBuffer();
    
    StringBuffer updateWhereStmt = new StringBuffer();
    
    List<Column> stmtStructure =  new LinkedList<Column>();
    
    for(IMetadataColumn column:columnList){
    
    	stmtStructure.add(new Column(column));
    
    }

    for(IMetadataColumn column:columnList){
    	if(addCols != null && addCols.size()>0){
    		for(Map<String, String> addCol:addCols){
    			if(addCol.get("REFCOL").equals(column.getLabel())){
    				int stmtIndex = 0;
    				
    				for(Column stmtStr:stmtStructure){					
    					if(stmtStr.getName().equals(addCol.get("REFCOL"))){
    						break;
    					}
    					stmtIndex++;
    				}
    				
    				if(addCol.get("POS").equals("AFTER")){
    					Column insertAfter = new Column("\"+" + addCol.get("NAME") + "+\"", "\"+" + addCol.get("SQL") + "+\"", true);
    					insertAfter.setDataType(addCol.get("DATATYPE"));
    					stmtStructure.add(stmtIndex+1,insertAfter);
    				}else if(addCol.get("POS").equals("BEFORE")){
    					Column insertBefore = new Column("\"+" + addCol.get("NAME") + "+\"", "\"+" + addCol.get("SQL") + "+\"", true);
    					insertBefore.setDataType(addCol.get("DATATYPE"));
    					stmtStructure.add(stmtIndex,insertBefore);
    				}else if(addCol.get("POS").equals("REPLACE")){
    					Column replacementCol = new Column("\"+" + addCol.get("NAME") + "+\"", "\"+" + addCol.get("SQL") + "+\"", true);
    					replacementCol.setDataType(addCol.get("DATATYPE"));
    					Column replacedCol = (Column) stmtStructure.get(stmtIndex);
    					replacedCol.replace(replacementCol);
    				}
    			}
    		}
    	}
    }
    
    if(!tableAction.equals("NONE")) {
        
        class SQLBuilder {
            
            public String createSQL(List<Column> columnList, String dbms, String cid) {
                
                MappingTypeRetriever mappingType = MetadataTalendType.getMappingTypeRetriever(dbms);
                
                StringBuilder createSQL = new StringBuilder();
                                
                createSQL.append("create table \" + tableName_" + cid + " + \"(");
                
                List<String> pkList = new ArrayList<String>();
                
                int count = 0;
                
                String ending = ",";
                
                for(Column column : columnList) {
                                            
                    if(column.isReplaced()) {
                        
                        List<Column> replacedColumns = column.getReplacement();
                        
                        if(column.getColumn() != null && column.getColumn().isKey()) {
                            
                            for(Column replacedColumn : replacedColumns) {
                                
                                pkList.add(replacedColumn.getName().replaceAll("(\\+|\")",""));
                                                                
                            }
                            
                        }
                        
                        int replacedCount = 0;
                        
                        for(Column replacedColumn : replacedColumns) {                            
                            
                            if(count == columnList.size() - 1 && replacedCount == replacedColumns.size() - 1 && 
                                    pkList.size() == 0) {
                                
                                ending = "";
                                
                            }
                            
                            createSQL.append(replacedColumn.getName().replaceAll("(\\+|\")","") + " ");
                            
                            createSQL.append(replacedColumn.getDataType() + ending);
                            
                            replacedCount++;
                            
                        }
                        
                    } else {
                                                
                        if(column.isAddCol()) {
                            
                            if(count == columnList.size() - 1 && pkList.size() == 0) {
                                
                                ending = "";
                                
                            }                            
                            
                            createSQL.append(column.getName().replaceAll("(\\+|\")","") + " ");
                            
                            createSQL.append(column.getDataType() + ending);
                            
                        } else {
                            
                            if(column.getColumn() != null && column.getColumn().isKey()) {
                                
                                pkList.add(column.getColumn().getOriginalDbColumnName());
                                
                            }
                            
                            createSQL.append(column.getColumn().getOriginalDbColumnName() + " ");
                            
                            String dataType = null;
                            
                            if(column.getColumn().getType() == null || column.getColumn().getType().trim().equals("")) {
                                
                                dataType = mappingType.getDefaultSelectedDbType(column.getColumn().getTalendType());
                                
                            } else {
                                
                                dataType = column.getColumn().getType();
                                
                            }
                            createSQL.append(dataType);
                            
                            Integer length = column.getColumn().getLength() == null ? 0 : column.getColumn().getLength();
                            
                            Integer precision = column.getColumn().getPrecision() == null ? 0 : column.getColumn().getPrecision();
                            
                            boolean lengthIgnored = mappingType.isLengthIgnored(dbms,dataType);
                            
                            boolean precisionIgnored = mappingType.isPrecisionIgnored(dbms,dataType);
                            
                            String prefix = "";
                            
                            String suffix = "";
                            
                            String comma = "";
                            
                            if(mappingType.isPreBeforeLength(dbms,dataType)) {
                                
                                if(!precisionIgnored) {
                                    
                                    prefix = "(";
                                    
                                    suffix = ") ";
                                    
                                    createSQL.append(prefix + precision);
                                    
                                }
                                
                                if(!lengthIgnored) {
                                    
                                    prefix = (prefix.equals("") ? "(" : prefix);
                                    
                                    suffix = (suffix.equals("") ? ") " : suffix);
                                    
                                    if(precisionIgnored) {
                                        
                                        createSQL.append(prefix);
                                        
                                        comma = ""; 
                                        
                                    } else {
                                        
                                        comma = ",";
                                        
                                    }
                                    
                                    createSQL.append(comma + length);
                                    
                                }
                                
                                createSQL.append(suffix);
                                
                            } else {
                                
                                if(!lengthIgnored) {
                                    
                                    prefix = "(";
                                    
                                    suffix = ") ";
                                    
                                    createSQL.append(prefix + length); 
                                    
                                }
                                if(!precisionIgnored) {
                                    
                                    prefix = (prefix.equals("") ? "(" : prefix);
                                    
                                    suffix = (suffix.equals("") ? ") " : suffix);
                                    
                                    if(lengthIgnored) {
                                        
                                        createSQL.append(prefix);
                                        
                                        comma = ""; 
                                        
                                    } else {
                                        
                                        comma = ",";
                                        
                                    }
                                    
                                    createSQL.append(comma + precision); 
                                    
                                }
                                
                                createSQL.append(suffix);
                                
                            }
                            
                            createSQL.append(setDefaultValue(column.getColumn().getDefault(), dataType));
                            
                            if(!column.getColumn().isNullable()) {
                                
                                createSQL.append("not null");
                                
                            }
                            
                            if(count == columnList.size() - 1 && pkList.size() == 0) {
                                
                                ending = "";
                                
                            }                            
                            
                            createSQL.append(ending);                            
                            
                        }
                        
                    }
                    
                    count++;
                    
                }
                
                if(pkList.size() > 0) {
                    
                    createSQL.append("primary key(");
                    
                    int i = 0;
                    
                    for(String pk : pkList) {
                        
                        createSQL.append(pk);
                        
                        if(i != pkList.size() - 1) {
                            
                            createSQL.append(",");
                            
                        }
                        
                        i++;
                        
                    }
                    
                    createSQL.append(")");
                    
                }
                
                createSQL.append(")");
                
                return createSQL.toString();
                
            }
            
            private String setDefaultValue(String defaultValue, String columnType) {
                if(defaultValue == null || defaultValue.equals("\"\"") || defaultValue.equals("")) {
                    return " ";
                } else if((defaultValue.startsWith("\"") || defaultValue.startsWith("'")) && (defaultValue.endsWith("\"") || defaultValue.endsWith("'"))) {
                    return "default '" + defaultValue.substring(1,defaultValue.length() - 1) + "' ";
                } else if(defaultValue.equalsIgnoreCase("null")) {
                    return "default null ";
                } else {
                    return "default " + defaultValue + " ";
                }
            }
        }
        SQLBuilder builder = new SQLBuilder();
        if(tableAction.equals("DROP_CREATE")) {
            %>
            java.sql.Statement stmtDrop_<%=cid%> = conn_<%=cid%>.createStatement();
            stmtDrop_<%=cid%>.execute("drop table " + tableName_<%=cid%>);
            java.sql.Statement stmtCreate_<%=cid%> = conn_<%=cid%>.createStatement();
            stmtCreate_<%=cid%>.execute("<%=builder.createSQL(stmtStructure, dbmsId, cid)%>");
            <%
        } else if(tableAction.equals("CREATE")) {
            %>
            java.sql.Statement stmtCreate_<%=cid%> = conn_<%=cid%>.createStatement();
            stmtCreate_<%=cid%>.execute("<%=builder.createSQL(stmtStructure, dbmsId, cid)%>");
            <%
        } else if(tableAction.equals("CREATE_IF_NOT_EXISTS")) {
            %>
            java.sql.DatabaseMetaData dbMetaData_<%=cid%> = conn_<%=cid%>.getMetaData();
            java.sql.ResultSet rsTable_<%=cid%> = dbMetaData_<%=cid%>.getTables(null, null, null, new String[]{"TABLE"});
            boolean whetherExist_<%=cid%> = false;
            while(rsTable_<%=cid%>.next()) {
                String table_<%=cid%> = rsTable_<%=cid%>.getString("TABLE_NAME");
                if(table_<%=cid%>.equalsIgnoreCase(<%=tableName%>)) {
                    whetherExist_<%=cid%> = true;
                    break;
                }
            }
            if(!whetherExist_<%=cid%>) {
                java.sql.Statement stmtCreate_<%=cid%> = conn_<%=cid%>.createStatement();
                stmtCreate_<%=cid%>.execute("<%=builder.createSQL(stmtStructure, dbmsId, cid)%>");            
            }
            <%
        } else if(tableAction.equals("CLEAR")) {
            %>
            java.sql.Statement stmtClearCount_<%=cid%> = conn_<%=cid%>.createStatement();
            java.sql.ResultSet rsClearCount_<%=cid%> = stmtClearCount_<%=cid%>.executeQuery("select count(1) from " + tableName_<%=cid%>);
            java.sql.Statement stmtClear_<%=cid%> = conn_<%=cid%>.createStatement();
            stmtClear_<%=cid%>.executeUpdate("truncate table " + tableName_<%=cid%>);
            while(rsClearCount_<%=cid%>.next()) {
                deletedCount_<%=cid%> += rsClearCount_<%=cid%>.getInt(1);
            }
            <%
        }
    }    

    String suffix = null;
    String separate = null;
    boolean firstKeyColumn = true;
    boolean firstInsertColumn = true;
    boolean firstUpdateColumn = true;
    for(Column column : stmtStructure) {
        if(column.isReplaced()) {
            List<Column> replacedColumns = column.getReplacement();
            int countReplace = 0;            
            for(Column replacedColumn : replacedColumns) {
                if(firstInsertColumn) {
                    suffix = "";
                    firstInsertColumn = false;
                } else {
                    suffix = ",";
                }
                insertColName.append(suffix);
                insertColName.append(replacedColumn.getName());
                insertValueStmt.append(suffix);
                insertValueStmt.append(replacedColumn.getSqlStmt());
                if(column.getColumn().isKey()) {
                    if(firstKeyColumn) {
                        separate = "";
                        firstKeyColumn = false;
                    } else {
                        separate = " AND ";
                    }
                    updateWhereStmt.append(separate);
                    updateWhereStmt.append(replacedColumn.getName() + "=" + replacedColumn.getSqlStmt());
                } else {
                    if(firstUpdateColumn) {
                        suffix = "";
                        firstUpdateColumn = false;
                    } else {
                        suffix = ",";
                    }
                    updateSetStmt.append(suffix);
                    updateSetStmt.append(replacedColumn.getName() + "=" + replacedColumn.getSqlStmt());
                }
                countReplace++;
            }
        } else {
            if(column.isAddCol()) {
                if(firstInsertColumn) {
                    suffix = "";
                    firstInsertColumn = false;
                } else {
                    suffix = ",";
                }
                insertColName.append(suffix);
                insertColName.append(column.getDBName());
                insertValueStmt.append(suffix);
                insertValueStmt.append(column.getSqlStmt());
                if(firstUpdateColumn) {
                    suffix = "";
                    firstUpdateColumn = false;
                } else {
                    suffix = ",";
                }
                updateSetStmt.append(suffix);
                updateSetStmt.append(column.getDBName() + "=" + column.getSqlStmt());
            } else {
                if(firstInsertColumn) {
                    suffix = "";
                    firstInsertColumn = false;
                } else {
                    suffix = ",";
                }
                insertColName.append(suffix);
                insertColName.append(column.getDBName());
                insertValueStmt.append(suffix);
                insertValueStmt.append(column.getValue());
                if(column.getColumn().isKey()) {
                    if(firstKeyColumn) {
                        separate = "";
                        firstKeyColumn = false;
                    } else {
                        separate = " AND ";
                    }
                    updateWhereStmt.append(separate);
                    updateWhereStmt.append(column.getDBName() + "=" + column.getValue());
                } else {
                    if(firstUpdateColumn) {
                        suffix = "";
                        firstUpdateColumn = false;
                    } else {
                        suffix = ",";
                    }
                    updateSetStmt.append(suffix);
                    updateSetStmt.append(column.getDBName() + "=" + column.getValue());
                }
            }
        }
    }




	if(dataAction.equals("INSERT")){
	%>	
	
	    java.sql.PreparedStatement pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement("INSERT INTO "+tableName_<%=cid%>+" (<%=insertColName.toString()%>) VALUES (<%=insertValueStmt.toString()%>)");

	<%
	}else if (dataAction.equals("UPDATE")){
	%>
	
	    java.sql.PreparedStatement pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement("UPDATE "+tableName_<%=cid%>+" SET <%=updateSetStmt.toString()%> WHERE <%=updateWhereStmt.toString()%>");

	<%		
	}else if (dataAction.equals("INSERT_OR_UPDATE")){
	%>
	    java.sql.PreparedStatement pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement("SELECT COUNT(1) FROM "+tableName_<%=cid%> + " WHERE <%=updateWhereStmt.toString()%>");	
	
	    java.sql.PreparedStatement pstmtInsert_<%=cid %> = conn_<%=cid%>.prepareStatement("INSERT INTO "+tableName_<%=cid%>+" (<%=insertColName.toString()%>) VALUES (<%=insertValueStmt.toString()%>)");

	    java.sql.PreparedStatement pstmtUpdate_<%=cid %> = conn_<%=cid%>.prepareStatement("UPDATE "+tableName_<%=cid%>+" SET <%=updateSetStmt.toString()%> WHERE <%=updateWhereStmt.toString()%>");

	<%
	}else if (dataAction.equals("UPDATE_OR_INSERT")){
	%>
	    java.sql.PreparedStatement pstmtUpdate_<%=cid %> = conn_<%=cid%>.prepareStatement("UPDATE "+tableName_<%=cid%>+" SET <%=updateSetStmt.toString()%> WHERE <%=updateWhereStmt.toString()%>");

	    java.sql.PreparedStatement pstmtInsert_<%=cid %> = conn_<%=cid%>.prepareStatement("INSERT INTO "+tableName_<%=cid%>+" (<%=insertColName.toString()%>) VALUES (<%=insertValueStmt.toString()%>)");
		
	<%
			
	}else if (dataAction.equals("DELETE")){
	%>
	
	    java.sql.PreparedStatement pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement("DELETE  FROM "+tableName_<%=cid%>+" WHERE <%=updateWhereStmt.toString()%>");

	<%		
	}
	if(!commitEvery.equals("")&&!commitEvery.equals("0")){
        %>
        
        int commitEvery_<%=cid%> = <%=commitEvery%>;
        
        int commitCounter_<%=cid%> = 0;
        
        if(conn_<%=cid%>.getAutoCommit())
        {
        	conn_<%=cid%>.setAutoCommit(false);
        }
        <%
	}

}
%>


