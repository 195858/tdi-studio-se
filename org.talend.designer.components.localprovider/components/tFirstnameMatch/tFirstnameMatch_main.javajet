<%@ jet
	imports="
	java.util.ArrayList
	java.util.HashMap
	java.util.List
	java.util.Map
	
	org.talend.core.model.metadata.IMetadataColumn
	org.talend.core.model.metadata.IMetadataTable
	org.talend.core.model.metadata.types.JavaTypesManager
	org.talend.core.model.process.ElementParameterParser
	org.talend.core.model.process.IConnection
	org.talend.core.model.process.IConnectionCategory
	org.talend.core.model.process.INode
	 org.talend.core.model.metadata.types.JavaType
	org.talend.designer.codegen.config.CodeGeneratorArgument
	"
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	
	String nameColumn = ElementParameterParser.getValue(node,"__COLUMNNAMES__");
	String inputColumn = ElementParameterParser.getValue(node,"__COLUMNS__");
	String indexFolder = ElementParameterParser.getValue(node, "__INDEXFILEPATH__");
	
	List<IMetadataTable> metadatas = node.getMetadataList();
	
	if ((metadatas!=null)&&(metadatas.size()>0)) {
	    IMetadataTable metadata = metadatas.get(0);
	    if(metadata != null) {
	       List<IMetadataColumn> columns = metadata.getListColumns();
    	   int sizeColumns = columns.size();
	       List<? extends IConnection> conns = node.getIncomingConnections();
	       List<? extends IConnection> conns_out = node.getOutgoingConnections();
		   List<? extends IConnection> connsOut = node.getOutgoingConnections("OUTPUT");
		   JavaType javaType = null;
           String connName = "";
           Boolean isRightType = false;
           for (IConnection conn : conns) {
           	 IConnection con = conns.get(0);
           	 connName = con.getName();
    		 if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
	    		 for(int column=0; column<sizeColumns; column++){
	    		 	
	    		    javaType = JavaTypesManager.getJavaTypeFromId(columns.get(column).getTalendType());
	    		    boolean isPrimitive = JavaTypesManager.isJavaPrimitiveType( javaType, columns.get(column).isNullable());	    		
	    		 	if(javaType != JavaTypesManager.STRING  ){
	    		 	 isRightType = false;
	    		 	
%>
					 if(true){
				       throw new RuntimeException ("Schema type " + "<%=javaType.getLabel()%>" + " is not supported, existing..." );
				      }				      
			        	
<%                   
                      break;
				}
				      else {
				       		isRightType = true;
				       		if(columns.get(column).toString().equals(nameColumn)){
				        
%>
						 if(<%=connName%>.<%=nameColumn%> != null && !("").equals(<%=connName%>.<%=nameColumn%>))
			    	   		nameCollections.add(<%=connName%>.<%=nameColumn%>.trim());	
				
<%
			}
		 }
	  }
    }
    }
     if(isRightType){
%>
	    org.talend.dataquality.standardization.main.HandleLucene handleLucene_<%=cid%> = 
	                              new org.talend.dataquality.standardization.main.HandleLuceneImpl();
	    String[] soreDocs = null;  
	    java.util.Map<String, String[]>  hits_<%=cid%>  = null;  
	    java.util.Map<String, String> information2value = new java.util.HashMap<String, String>();                     
        try {
	        for(String name : nameCollections){
			     hits_<%=cid%> = handleLucene_<%=cid%>.getSearchResult(<%=indexFolder%>, name, information2value,  false);
				 soreDocs = hits_<%=cid%>.get(name);
			  }
			}catch (IOException e) {			
				 e.printStackTrace();
		    }


<%
			if(connsOut!=null) {
				for(IConnection conn_o:connsOut) {
%>
					<%=conn_o.getName()%>=null;
					<%=conn_o.getName()%>=new <%=conn_o.getName()%>Struct();
<%
				}
%>
<%
			for (int j = 0; j < sizeColumns; j++) {
				if(!columns.get(j).getLabel().equals("FIRSTNAMEMATCH")){
%>					
					<%=connsOut.get(0).getName()%>.<%=columns.get(j).getLabel()%> = <%=connName%>.<%=columns.get(j).getLabel()%>;
<%				
				 }
				 else {
%>
				    if(soreDocs != null && soreDocs.length !=0)
				 		<%=connsOut.get(0).getName()%>.<%=columns.get(j).getLabel()%> = " " + soreDocs[0];	
<%
			    }
		   }
%>
	
<%  
	   }
	 }
%>



<%
    }
 }
 
 
%>



		      