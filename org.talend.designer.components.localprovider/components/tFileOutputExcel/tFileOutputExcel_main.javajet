<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.metadata.IMetadataTable
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory 
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
		org.talend.core.model.process.ElementParameterParser		
		java.util.List
	"
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();

String advancedSeparatorStr = ElementParameterParser.getValue(node, "__ADVANCED_SEPARATOR__");
boolean advancedSeparator = (advancedSeparatorStr!=null&&!advancedSeparatorStr.equals(""))?advancedSeparatorStr.equals("true"):false;
String thousandsSeparator = ElementParameterParser.getValueWithJavaType(node, "__THOUSANDS_SEPARATOR__", JavaTypesManager.CHARACTER);
String decimalSeparator = ElementParameterParser.getValueWithJavaType(node, "__DECIMAL_SEPARATOR__", JavaTypesManager.CHARACTER); 

List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
    IMetadataTable metadata = metadatas.get(0);
    if (metadata!=null) {
        String cid = node.getUniqueName();

    	List< ? extends IConnection> conns = node.getIncomingConnections();
    	for (IConnection conn : conns) {
    		if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
    			List<IMetadataColumn> columns = metadata.getListColumns();
    			int sizeColumns = columns.size();
    			for (int i = 0; i < sizeColumns; i++) {
    				IMetadataColumn column = columns.get(i);
					JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
					boolean isPrimitive = JavaTypesManager.isJavaPrimitiveType( javaType, column.isNullable());
					if(!isPrimitive) {
    				%>   				
	    				if(<%=conn.getName() %>.<%=column.getLabel() %> != null) {
    				<%
    				} 
    				%>
    						writableSheet_<%=cid %>.addCell(new jxl.write.<%
    									if(javaType == JavaTypesManager.BOOLEAN){
    										%>Boolean<%
										}else if(javaType == JavaTypesManager.DATE){
											%>DateTime<%
  									    }else if(javaType == JavaTypesManager.STRING||
  									    		 javaType == JavaTypesManager.CHARACTER||
  									    		 javaType == JavaTypesManager.BYTE_ARRAY||
  									    		 javaType == JavaTypesManager.OBJECT||
  									    		 (advancedSeparator && JavaTypesManager.isNumberType(javaType, column.isNullable()))
  									    		 ){
  									    	%>Label<%
    									}else{
    										%>Number<%
    									}
    																	%>(<%=i%>, startRowNum_<%=cid %> + nb_line_<%=cid%>, 
    				<%
    				String pattern = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
    				if (javaType == JavaTypesManager.DATE && pattern != null && pattern.trim().length() != 0) {
%>
								<%=conn.getName() %>.<%=column.getLabel() %>, cell_format_<%=column.getLabel() %>_<%= cid%>
<%				
					} else if(javaType == JavaTypesManager.CHARACTER) {
%>
								String.valueOf(<%=conn.getName() %>.<%=column.getLabel() %>)
<%				
					} else if(javaType == JavaTypesManager.OBJECT){
%>					
								<%=conn.getName() %>.<%=column.getLabel() %>.toString()
<%					
					} else if(javaType == JavaTypesManager.BYTE_ARRAY){
%>					
								java.nio.charset.Charset.defaultCharset().decode(java.nio.ByteBuffer.wrap(<%=conn.getName() %>.<%=column.getLabel() %>)).toString()
<%
					} else if(advancedSeparator && JavaTypesManager.isNumberType(javaType, column.isNullable())) { 
%>
							<% if(javaType == JavaTypesManager.BIGDECIMAL) {%>
							FormatterUtils.format_Number(String.valueOf(<%=conn.getName() %>.<%=column.getLabel() %>.doubleValue()), <%= thousandsSeparator %>, <%= decimalSeparator %>)					
							<% } else { %>
							FormatterUtils.format_Number(String.valueOf(<%=conn.getName() %>.<%=column.getLabel() %>), <%= thousandsSeparator %>, <%= decimalSeparator %>)						
							<% } %>
<%
						}  else if (javaType == JavaTypesManager.BIGDECIMAL) {
%>
								<%=conn.getName() %>.<%=column.getLabel() %>.doubleValue()
<%
					}else {
%>
								<%=conn.getName() %>.<%=column.getLabel() %>
<%				
					}
%>
							));
<%
					if(!isPrimitive) {
    				%>
	    				} 
					<%
    				} 
    			}
    			%>
    			nb_line_<%=cid %>++;
    <%
    		}
    	}
    }
}
%>