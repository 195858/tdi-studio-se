<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.metadata.IMetadataTable
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.List
    java.util.Map
"
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
    IMetadataTable metadata = metadatas.get(0);
    if (metadata!=null) {

        String filename = ElementParameterParser.getValue(
            node,
            "__FILENAME__"
        );

        String sheetname = ElementParameterParser.getValue(
            node,
            "__SHEETNAME__"
        );

        String includeHeader = ElementParameterParser.getValue(
            node,
            "__INCLUDEHEADER__"
        );

        String keepleadingzeros = ElementParameterParser.getValue(
            node,
            "__KEEP_LEADING_ZEROS__"
        );

        List<Map<String, String>> columnformats = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__COLUMNFORMATS__");
%>

use FileHandle;
use Spreadsheet::WriteExcel;

my %desc_<%=cid %> = (
    filename   => <%=filename%>,
    sheetname  => <%=sheetname %>,
    include_header => <%=includeHeader %>,
    schema        => [
<%
        for (IMetadataColumn column: metadata.getListColumns()) {
%>
        {
            name    => '<%=column.getLabel() %>',
            key     => <%=column.isKey() %>,
            type    => '<%=column.getType() %>',
            len     => <%=column.getLength() %>,
            null    => <%=column.isNullable() %>,
            default => '<%=column.getDefault() %>',
            comment => '<%=column.getComment() %>',
        },
<%
        }
%>
    ],
);

<%
        int column_number = 0;
        for (IMetadataColumn column: metadata.getListColumns()) {
%>
use constant <%=cid%>__<%=column.getLabel() %> => <%=column_number%>;
<%
            column_number++;
        }
%>

my $nb_fields_<%=cid %> = scalar @{ $desc_<%=cid %>{schema} };
my $nb_line_<%=cid %> = 0;

my $workbook_<%=cid%>  = Spreadsheet::WriteExcel->new(<%=filename%>);
my $worksheet_<%=cid%> = $workbook_<%=cid%>->add_worksheet(<%=sheetname%>);

<%
if (keepleadingzeros.equals("true")) {
%>
$worksheet_<%=cid%>->keep_leading_zeros();
<%
}
%>



my $curr_column_<%=cid%> = 0;
for (1 .. scalar @{ $desc_<%=cid%>{schema} }) {
<%
        if (includeHeader.equals("true")) {
%>
    $worksheet_<%=cid %>->write(
        $nb_line_<%=cid %>,
        $_ - 1,
        $desc_<%=cid%>{schema}[$_ - 1]{name}
    );
<%
        }
%>
    $curr_column_<%=cid%>++;
}


my $column_formats_<%=cid%> = [];
<%
        for (int i=0; i<columnformats.size(); i++) {
            Map<String, String> columnformat = columnformats.get(i);
%>
    $column_formats_<%=cid%>->[<%=cid%>__<%=columnformat.get("OUTPUT_COLUMN")%>] = $workbook_<%=cid%>->add_format();
    $column_formats_<%=cid%>->[<%=cid%>__<%=columnformat.get("OUTPUT_COLUMN")%>]->set_num_format(<%=columnformat.get("COLUMN_FORMAT")%>) if defined <%=columnformat.get("COLUMN_FORMAT")%>;
    $column_formats_<%=cid%>->[<%=cid%>__<%=columnformat.get("OUTPUT_COLUMN")%>]->set_align(<%=columnformat.get("HALIGN")%>) if defined <%=columnformat.get("HALIGN")%>;
    $column_formats_<%=cid%>->[<%=cid%>__<%=columnformat.get("OUTPUT_COLUMN")%>]->set_align(<%=columnformat.get("VALIGN")%>) if defined <%=columnformat.get("VALIGN")%>;

    $worksheet_<%=cid %>->set_column(
                                         <%=cid%>__<%=columnformat.get("OUTPUT_COLUMN")%>,
                                         <%=cid%>__<%=columnformat.get("OUTPUT_COLUMN")%>,
                                         <%=columnformat.get("LENGTH")%>,
                                     ) if defined <%=columnformat.get("LENGTH")%> ;
<%
        }
%>


<%
if (includeHeader.equals("true")) {
%>
$nb_line_<%=cid %>++;
<%
}
%>


<%
    }
}
%>
