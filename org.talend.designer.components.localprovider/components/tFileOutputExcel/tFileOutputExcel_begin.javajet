<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.metadata.IMetadataTable
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.metadata.types.JavaTypesManager
	org.talend.core.model.metadata.types.JavaType
    java.util.List
" 
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();

List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
    IMetadataTable metadata = metadatas.get(0);
    if (metadata!=null) {
        String cid = node.getUniqueName();

        String filename = ElementParameterParser.getValue(node, "__FILENAME__");
        String sheetname = ElementParameterParser.getValue(node, "__SHEETNAME__");
        
        boolean isIncludeHeader = ElementParameterParser.getValue(node, "__INCLUDEHEADER__").equals("true");
        boolean isAppendFile = ElementParameterParser.getValue(node, "__APPEND_FILE__" ).equals("true");
        boolean isAppendSheet = ElementParameterParser.getValue(node, "__APPEND_SHEET__" ).equals("true");
%>

		int nb_line_<%=cid%> = 0;
		java.io.File file_<%=cid %> = new java.io.File(<%=filename %>);
		
<%if(ElementParameterParser.getValue(node,"__CREATE__").equals("true")){%>
//create directory only if not exists		  
          java.io.File parentFile_<%=cid %> = file_<%=cid %>.getParentFile();
          if (parentFile_<%=cid %> != null && !parentFile_<%=cid %>.exists()) {
             parentFile_<%=cid %>.mkdirs();
          }
<%}%>		
		
		jxl.write.WritableWorkbook writeableWorkbook_<%=cid %> = null;
		jxl.write.WritableSheet writableSheet_<%=cid %> = null;
		
		jxl.WorkbookSettings workbookSettings_<%= cid %> = new jxl.WorkbookSettings();
        workbookSettings_<%= cid %>.setEncoding(<%=ElementParameterParser.getValue(node,"__ENCODING__") %>);
        
<%if(isAppendFile){%>  
        if (file_<%=cid %>.exists()) {
        jxl.Workbook workbook_<%=cid %> = jxl.Workbook.getWorkbook(file_<%=cid %>);
        writeableWorkbook_<%=cid %> = new jxl.write.biff.WritableWorkbookImpl(
                	new java.io.BufferedOutputStream(new java.io.FileOutputStream(file_<%=cid %>, false)), 
                	workbook_<%=cid %>, 
                	true,
                    workbookSettings_<%=cid %>);
        }else{        
		writeableWorkbook_<%=cid %> = new jxl.write.biff.WritableWorkbookImpl(
            		new java.io.BufferedOutputStream(new java.io.FileOutputStream(<%=filename%>)), 
            		true, 
            		workbookSettings_<%= cid %>);        
        }     
<%} else {%>
		writeableWorkbook_<%=cid %> = new jxl.write.biff.WritableWorkbookImpl(
            		new java.io.BufferedOutputStream(new java.io.FileOutputStream(<%=filename%>)), 
            		true, 
            		workbookSettings_<%= cid %>);
<%}%>       

        writableSheet_<%=cid %> = writeableWorkbook_<%=cid %>.getSheet(<%=sheetname %>);
        if(writableSheet_<%=cid %> == null){
        	writableSheet_<%=cid %> = writeableWorkbook_<%=cid %>.createSheet(<%=sheetname %>, writeableWorkbook_<%=cid %>.getNumberOfSheets());
		}
		
<%if(isAppendFile && !isAppendSheet){%>
        else {

            String[] sheetNames_<%=cid %> = writeableWorkbook_<%=cid %>.getSheetNames();
            for (int i = 0; i < sheetNames_<%=cid %>.length; i++) {
                if (sheetNames_<%=cid %>[i].equals(<%=sheetname %>)) {
                    writeableWorkbook_<%=cid %>.removeSheet(i);
                    break;
                }
            }

			writableSheet_<%=cid %> = writeableWorkbook_<%=cid %>.createSheet(<%=sheetname %>, writeableWorkbook_<%=cid %>.getNumberOfSheets());
        }
<%}%>

        int startRowNum_<%=cid %> = writableSheet_<%=cid %>.getRows();

<%
		List<IMetadataColumn> columns = metadata.getListColumns();
    	int sizeColumns = columns.size();
    	for (int i = 0; i < sizeColumns; i++) {
    		IMetadataColumn column = columns.get(i);
    		JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
    		if (javaType == JavaTypesManager.DATE){
    			String pattern = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
    			if(pattern != null && pattern.trim().length() != 0){%>
    	final jxl.write.WritableCellFormat cell_format_<%=column.getLabel() %>_<%= cid%>=new jxl.write.WritableCellFormat(new jxl.write.DateFormat(<%=pattern %>));
<%	    		}else{%>
		if(true){
			throw new RuntimeException("Date pattern must be set for column <%=column.getLabel() %> in the schema of component <%=cid %>!");
		}
<%				}
			}
		
	    }
%>		


<%if(isIncludeHeader){ %>
		if (startRowNum_<%=cid %>==0){
<%
    	for (int i = 0; i < sizeColumns; i++) {
    		IMetadataColumn column = columns.get(i);
%>
				writableSheet_<%=cid %>.addCell(new jxl.write.Label(<%=i%>, nb_line_<%=cid%>, "<%=column.getLabel() %>"));		
<% } %>
				nb_line_<%=cid %>++;
		}
<% } %>
		
<%
    }
}
%>
