<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.metadata.IMetadataTable
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.metadata.types.JavaTypesManager
	org.talend.core.model.metadata.types.JavaType
    java.util.List
" 
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();

List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
    IMetadataTable metadata = metadatas.get(0);
    if (metadata!=null) {
        String cid = node.getUniqueName();

        String filename = ElementParameterParser.getValueWithUIFieldKey(
            node,
            "__FILENAME__",
            "FILENAME"
        );
        
        String sheetname= ElementParameterParser.getValue(node,"__SHEETNAME__");
        
        boolean isIncludeHeader = ElementParameterParser.getValue(
            node,
            "__INCLUDEHEADER__"
        ).equals("true");
%>
		int nb_line_<%=cid%> = 0;
		
		final jxl.WorkbookSettings workbookSettings_<%= cid %> = new jxl.WorkbookSettings();
        workbookSettings_<%= cid %>.setEncoding(<%=ElementParameterParser.getValue(node,"__ENCODING__") %>);
		final jxl.write.WritableWorkbook writeableWorkbook<%=cid %> = jxl.Workbook.createWorkbook(new java.io.BufferedOutputStream(new java.io.FileOutputStream(<%=filename%>))
												, workbookSettings_<%= cid %>);
        final jxl.write.WritableSheet writableSheet<%=cid%> = writeableWorkbook<%=cid%>.createSheet(<%=sheetname%>, 0);

        
<%
		List<IMetadataColumn> columns = metadata.getListColumns();
    	int sizeColumns = columns.size();
    	for (int i = 0; i < sizeColumns; i++) {
    		IMetadataColumn column = columns.get(i);
    		JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
    		if (javaType == JavaTypesManager.DATE){
    			String pattern = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
    			if(pattern != null && pattern.trim().length() != 0){%>
    	final jxl.write.WritableCellFormat cell_format_<%=column.getLabel() %>_<%= cid%>=new jxl.write.WritableCellFormat(new jxl.write.DateFormat(<%=pattern %>));
<%	    		}else{%>
		if(true){
			throw new Exception("Date pattern must be set for column <%=column.getLabel() %> in the schema of component <%=cid %>!");
		}
<%				}
			}
			if(isIncludeHeader){%>
		writableSheet<%=cid %>.addCell(new jxl.write.Label(<%=i%>, nb_line_<%=cid%>, "<%=column.getLabel() %>"));
<%			}
		}
		if(isIncludeHeader){%>
		nb_line_<%=cid%>++;
<%		}
    }
}
%>
