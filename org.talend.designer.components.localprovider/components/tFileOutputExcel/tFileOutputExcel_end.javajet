<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.IMetadataTable
        org.talend.core.model.metadata.IMetadataColumn
        java.util.List
        java.util.Map
	"
%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();

	boolean useStream = ("true").equals(ElementParameterParser.getValue(node,"__USESTREAM__"));

	String filename = ElementParameterParser.getValue(node, "__FILENAME__");	
	boolean isDeleteEmptyFile = ("true").equals(ElementParameterParser.getValue(node, "__DELETE_EMPTYFILE__"));	
	boolean isAppend = ("true").equals(ElementParameterParser.getValue(node,"__APPEND_FILE__"));
	
	String allColumnAutoSize = ElementParameterParser.getValue(node, "__IS_ALL_AUTO_SZIE__");
	
	//modif start
	boolean firstCellYAbsolute = ("true").equals(ElementParameterParser.getValue(node, "__FIRST_CELL_Y_ABSOLUTE__"));
	String firstCellXStr = ElementParameterParser.getValue(node, "__FIRST_CELL_X__");
	String firstCellYStr = ElementParameterParser.getValue(node, "__FIRST_CELL_Y__");
	//modif end
	
	boolean isAllColumnAutoSize = (allColumnAutoSize!=null&&!("").equals(allColumnAutoSize))?("true").equals(allColumnAutoSize):false;
	List<Map<String, String>> autoSizeList = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__AUTO_SZIE_SETTING__");
	
	List<IMetadataTable> metadatas = node.getMetadataList();
	if ((metadatas!=null)&&(metadatas.size()>0)) {
    	IMetadataTable metadata = metadatas.get(0);
        if (metadata!=null) {
        	List<IMetadataColumn> columns = metadata.getListColumns();
        	if(isAllColumnAutoSize){
        		for(int i=0;i<columns.size();i++){
%>
//modif start
	<%if(firstCellYAbsolute){%>
		writableSheet_<%=cid %>.setColumnView(<%=i%> + <%=firstCellYStr%>, fitWidth_<%=cid %>[<%=i%>]+2);
	<%}else{%>
		writableSheet_<%=cid %>.setColumnView(<%=i%>, fitWidth_<%=cid %>[<%=i%>]+2);
	<%}%>
//modif end
<%
    			}
    		}else{
    			if(autoSizeList.size() == columns.size()){
                	for(int i=0;i<columns.size();i++){
                		Map<String,String> tmp= autoSizeList.get(i);
                		if(("true").equals(tmp.get("IS_AUTO_SIZE"))){ 
%>
	writableSheet_<%=cid %>.setColumnView(<%=i%>, fitWidth_<%=cid %>[<%=i%>]+2);
<%
                		}
                	}
                }
    		}
    	}
    }
%>
	writeableWorkbook_<%=cid %>.write();
	writeableWorkbook_<%=cid %>.close();
	globalMap.put("<%=cid %>_NB_LINE",nb_line_<%=cid %>);
	
<%if(!useStream && !isAppend && isDeleteEmptyFile){%>
	if(nb_line_<%=cid %> == 0){
		new java.io.File(<%=filename %>).delete();
	}		
<%}%>	
