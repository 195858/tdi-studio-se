<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn 
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.List
" 
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

String encoding = ElementParameterParser.getValue(
    node,
    "__ENCODING__"
);

String filename = ElementParameterParser.getValue(
    node,
    "__FILENAME__"
);

String rowSeparator = ElementParameterParser.getValue(
    node,
    "__ROWSEPARATOR__"
);

String header = ElementParameterParser.getValue(
    node,
    "__HEADER__"
);
// we want to know if the user has set an header.
//
// because of backward compatibility, we compare the value with the empty
// string and with 0. It was the default value until branch 2.3.
boolean hasHeader = header.equals("") || header.equals("0") ? false : true;
if (!hasHeader) {
    header = "undef";
}

String footer = ElementParameterParser.getValue(
    node,
    "__FOOTER__"
);
// we want to know if the user has set a footer.
//
// because of backward compatibility, we compare the value with the empty
// string and with 0. It was the default value until branch 2.3.
boolean hasFooter = footer.equals("") || footer.equals("0") ? false : true;
if (!hasFooter) {
    footer = "undef";
}

String limit = ElementParameterParser.getValue(
    node,
    "__LIMIT__"
);
boolean hasLimit = limit.equals("") ? false : true;
if (!hasLimit) {
    limit = "undef";
}

boolean removeEmptyRow = ElementParameterParser.getValue(
    node,
    "__REMOVE_EMPTY_ROW__"
).equals("true");

boolean isRandom = ElementParameterParser.getValue(
    node,
    "__RANDOM__"
).equals("true");

String nbRandom = ElementParameterParser.getValue(
    node,
    "__NB_RANDOM__"
);
	
List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
    IMetadataTable metadata = metadatas.get(0);
    if (metadata!=null) {
%>

# use List::Util qw/min/;
use talend::filesOp;

my %desc_<%=cid %> = (
    filename => <%=filename%>,
    colnames => [
<%
for (IMetadataColumn column: metadata.getListColumns()) {
%>
        '<%=column.getLabel() %>',
<%
}
%>
    ]
);

$/ = <%=rowSeparator%>;

open(
    my $input_FH_<%=cid %>,
<%
        if (!encoding.equals("")) {
%>
    '<:encoding('.<%=encoding%>.')',
<%
        }
        else {
%>
    '<',
<%
        }
%>
    $desc_<%=cid %>{filename}
)
    or die '[<%=cid%>] cannot open file "'.$desc_<%=cid %>{filename}.'"';

<%
        if (hasHeader) {
%>

# move to the first useful line
for (1..<%=header%>) {
    <$input_FH_<%=cid %>>;
}
<%
  }
%>

$nb_line_<%=cid%> = 0;

<%
        if (hasFooter || hasLimit || isRandom) {
%>

# as we have a limit and/or a footer, we need to know the number of rows in
# the input file
my $total_line_<%=cid %> = tFileRowCount(
    filename => $desc_<%=cid %>{filename},
    rowseparator => <%=rowSeparator%>,
    buffersize => 4096,
);

my ($first_row_<%=cid%>, $last_row_<%=cid%>) = getFirstAndLastRowNumber(
    header  => <%=header%>,
    footer  => <%=footer%>,
<%
            if (hasLimit) {
%>
    limit   => <%=limit%>,
<%
            }
%>
    total   => $total_line_<%=cid%>,
);

<%
            if (isRandom) {
%>
use List::Util qw/shuffle/;

my $nb_lines_<%=cid%> = $last_row_<%=cid%> - $first_row_<%=cid%> + 1;

my %random_line_number_<%=cid%> =
    map {$_ => 1}
    sort {$a <=> $b}
    (shuffle 1..$nb_lines_<%=cid%>)[1..<%=nbRandom%>];

<%
            }
%>

for ($first_row_<%=cid %> .. $last_row_<%=cid %>) {
    my $_<%=cid %> = <$input_FH_<%=cid %>>;
<%
        }
        else {
%>

while (my $_<%=cid %> = <$input_FH_<%=cid %>>) {

<%
        }
%>
    # increase the number of line read in file
    $nb_line_<%=cid%>++;

<%
        if (isRandom) {
%>
    next if (not defined $random_line_number_<%=cid%>{$nb_line_<%=cid %>});
<%
        }
%>

    chomp $_<%=cid%>;

<%
        if (removeEmptyRow) {
%>
    next if ($_<%=cid%> eq '');
<%
        }
%>

    my $<%=cid%> = [$_<%=cid%>];
<%
    }
}
%>
