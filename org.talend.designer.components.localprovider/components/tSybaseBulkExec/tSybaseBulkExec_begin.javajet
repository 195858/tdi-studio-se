<%@ jet
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser
		org.talend.designer.codegen.config.CodeGeneratorArgument
	    org.talend.core.model.metadata.IMetadataTable 
	    org.talend.core.model.metadata.IMetadataColumn
	    org.talend.core.model.metadata.MetadataTalendType    
	    org.talend.core.model.metadata.MappingTypeRetriever
	    java.util.List
	    java.util.ArrayList
	    java.util.Map
	    java.util.HashMap
	"
    skeleton="../templates/db_output_bulk.skeleton"
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

String host=ElementParameterParser.getValue(node, "__SERVER__");
String batchRow=ElementParameterParser.getValue(node,"__BATCHROW__");

String bcpUtility  = ElementParameterParser.getValue(node, "__BCP_UTILITY__");
String server = ElementParameterParser.getValue(node, "__SERVERNAME__");
String port = ElementParameterParser.getValue(node, "__PORT__");
String database = ElementParameterParser.getValue(node, "__DBNAME__");
String user = ElementParameterParser.getValue(node, "__USER__");
String pwd = ElementParameterParser.getValue(node, "__PASS__");
String table = ElementParameterParser.getValue(node, "__TABLE__");
String dataFile  = ElementParameterParser.getValue(node, "__FILENAME__");
String fieldTerminator = ElementParameterParser.getValue(node, "__FIELDS_TERMINATOR__");
String rowTerminator =  ElementParameterParser.getValue(node, "__ROW_TERMINATOR__");
String headRow =  ElementParameterParser.getValue(node, "__HEAD__");
String dbtable = ElementParameterParser.getValue(node, "__TABLE__");
boolean useExistingConn = ("true").equals(ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__"));
List<IMetadataColumn> columnList = getColumnList(node);
String tableAction = ElementParameterParser.getValue(node,"__TABLE_ACTION__");
String dataAction = ElementParameterParser.getValue(node,"__DATA_ACTION__");
String dbmsId = ElementParameterParser.getValue(node,"__MAPPING__");
%>

<%
if(("UPDATE").equals(dataAction)) {
    if(columnList != null && columnList.size() > 0) {
        int keyCount = 0;
        for(IMetadataColumn column : columnList) {
            if(column.isKey()) {
                keyCount++;
            }
        }
        %>
        int keyCount_<%=cid%> = <%=keyCount%>;
        if(keyCount_<%=cid%> == 0) {
            throw new RuntimeException("For bulk update, Schema must have a key at least."); 
        }
        <%
    }
}
%>
String tableName_<%=cid%> = <%=dbtable%>;
<%
if(useExistingConn) {
	String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
	String conn = "conn_" + connection;
	%>
    String host_<%=cid%> = (String)globalMap.get("host_<%=connection%>");
    String port_<%=cid%> = (String)globalMap.get("port_<%=connection%>");
    String db_<%=cid%> = (String)globalMap.get("db_<%=connection%>");
    String user_<%=cid%> = (String)globalMap.get("user_<%=connection%>");
    String pass_<%=cid%> = (String)globalMap.get("pass_<%=connection%>");		
	java.sql.Connection con_<%=cid %> = (java.sql.Connection)globalMap.get("<%=conn %>");
	<%
} else {       
    %>
    String host_<%=cid%> = <%=host%>;
    String port_<%=cid%> = <%=port%>;
    String db_<%=cid%> = <%=database%>;
    String user_<%=cid%> = <%=user%>;
    String pass_<%=cid%> = <%=pwd%>;
    String url_<%=cid %> = "jdbc:sybase:Tds:" + host_<%=cid%> + ":" + port_<%=cid%> + "/" + db_<%=cid%>;
    java.lang.Class.forName("com.sybase.jdbc3.jdbc.SybDriver");
    java.sql.Connection con_<%=cid %> = java.sql.DriverManager.getConnection(url_<%=cid %>, user_<%=cid%>, pass_<%=cid%>);
    <%
}
Manager manager = null;
List<Column> stmtStructure = null;
if(columnList != null && columnList.size() > 0) {
    stmtStructure = getManager(dbmsId, cid).createColumnList(columnList, null);
    manager = getManager(dbmsId, cid);
    if(("DROP_CREATE").equals(tableAction)) {
        %>
        java.sql.Statement stmtDrop_<%=cid%> = con_<%=cid%>.createStatement();
        stmtDrop_<%=cid%>.execute("<%=manager.getDropTableSQL()%>");
        stmtDrop_<%=cid%>.close();
        java.sql.Statement stmtCreate_<%=cid%> = con_<%=cid%>.createStatement();
        stmtCreate_<%=cid%>.execute("<%=manager.getCreateTableSQL(stmtStructure)%>");
        stmtCreate_<%=cid%>.close();
        <%
    } else if(("CREATE").equals(tableAction)) {
        %>
        java.sql.Statement stmtCreate_<%=cid%> = con_<%=cid%>.createStatement();
        stmtCreate_<%=cid%>.execute("<%=manager.getCreateTableSQL(stmtStructure)%>");
        stmtCreate_<%=cid%>.close();
        <%
    } else if(("CREATE_IF_NOT_EXISTS").equals(tableAction)) {
        %>
        java.sql.DatabaseMetaData dbMetaData_<%=cid%> = con_<%=cid%>.getMetaData();
        java.sql.ResultSet rsTable_<%=cid%> = dbMetaData_<%=cid%>.getTables(null, null, null, new String[]{"TABLE"});
        boolean whetherExist_<%=cid%> = false;
        while(rsTable_<%=cid%>.next()) {
            String table_<%=cid%> = rsTable_<%=cid%>.getString("TABLE_NAME");
            if(table_<%=cid%>.equalsIgnoreCase(<%=table%>)) {
                whetherExist_<%=cid%> = true;
                break;
            }
        }
        rsTable_<%=cid%>.close();
        if(!whetherExist_<%=cid%>) {
            java.sql.Statement stmtCreate_<%=cid%> = con_<%=cid%>.createStatement();
            stmtCreate_<%=cid%>.execute("<%=manager.getCreateTableSQL(stmtStructure)%>");
            stmtCreate_<%=cid%>.close();
        }
        <%
    } else if(("CLEAR").equals(tableAction)) {
        %>
        java.sql.Statement stmtClear_<%=cid%> = con_<%=cid%>.createStatement();
        stmtClear_<%=cid%>.executeUpdate("<%=manager.getDeleteTableSQL()%>");
        stmtClear_<%=cid%>.close();
        <%
    } else if(("TRUNCATE").equals(tableAction)) {
        %>
        java.sql.Statement stmtTrunc_<%=cid%> = con_<%=cid%>.createStatement();
        stmtTrunc_<%=cid%>.executeUpdate("<%=manager.getTruncateTableSQL()%>");
        stmtTrunc_<%=cid%>.close();
        <%
    }    
}
String encoding  = ElementParameterParser.getValue(node, "__ENCODING__");
encoding= encoding.toUpperCase();
 if(("\"UTF-8\"").equals(encoding)){
      encoding = "UTF8";
 }else if(("\"ISO-8859-15\"").equals(encoding)){
	encoding = "WE8ISO8859P15";
 }else if(("\"GBK\"").equals(encoding)){
	encoding = "ZHS16GBK";
 }else if(("\"GB2312\"").equals(encoding)){
 	encoding = "ZHS16CGB231280";//ZHS16MACCGB231280 ?
 }else if(("\"BIG5\"").equals(encoding)){
    encoding = "ZHT16BIG5";
 } else {
   //will be enhanced later, now default with utf-16
	encoding = "AL16UTF16";
 }

String outputAction  = ElementParameterParser.getValue(node, "__OUTPUT__");		
%>

StringBuilder command_<%=cid %> =  new StringBuilder();
command_<%=cid %>.append(<%=bcpUtility%> + " ");
<%
if(("UPDATE").equals(dataAction)) {
    %>
    String tmpTableName_<%=cid%> = tableName_<%=cid%>;
    tableName_<%=cid%> = "tmp_<%=cid%>" + "_" + pid;
    <%
}
%>
if(db_<%=cid%> != null && db_<%=cid%>.trim().length() > 0) {
    command_<%=cid %>.append(db_<%=cid%> + ".." + tableName_<%=cid%>);
} else {
    command_<%=cid %>.append(tableName_<%=cid%>);
}
command_<%=cid %>.append(" in " + <%=dataFile%>);
String headRow_<%=cid%> = <%=headRow%>;
if(headRow_<%=cid%> != null && headRow_<%=cid%>.trim().length() > 0) {
    command_<%=cid %>.append(" -F " + headRow_<%=cid%>);
}

<%if(batchRow!=null && !("").equals(batchRow.trim())){%>
	command_<%=cid %>.append(" -b " + <%=batchRow %>);
<%
}
%>

command_<%=cid %>.append(" -t " + <%=fieldTerminator%>);
command_<%=cid %>.append(" -r " + <%=rowTerminator%>);
command_<%=cid %>.append(" -c -U " + user_<%=cid%> + " -P " + pass_<%=cid%>);

<% if(server != null && server.trim().length() > 0) {%>
    command_<%=cid %>.append(" -S " + <%=server %>);
<%}else{%>
	command_<%=cid %>.append(" -S " + host_<%=cid %>);
<%}%>
String encoding_<%=cid%> = "<%=encoding%>";
if(encoding_<%=cid%> != null && encoding_<%=cid%>.trim().length() > 0) {
    command_<%=cid %>.append(" -J " + encoding_<%=cid%>);
}

<%
if(("INSERT").equals(dataAction)) {
    %>
    Runtime runtime_<%=cid%> = Runtime.getRuntime();
    final Process ps_<%=cid %> = runtime_<%=cid%>.exec(command_<%=cid %>.toString());
    <%
} else if(("UPDATE").equals(dataAction)) {
    if(columnList != null && columnList.size() > 0) {
        %>
        java.sql.Statement stmtCreateTmp_<%=cid%> = con_<%=cid%>.createStatement();
        stmtCreateTmp_<%=cid%>.execute("<%=manager.getCreateTableSQL(stmtStructure)%>");
        stmtCreateTmp_<%=cid%>.close();            
        Runtime runtime_<%=cid%> = Runtime.getRuntime();
        final Process ps_<%=cid %> = runtime_<%=cid%>.exec(command_<%=cid %>.toString());       
        <%        
    }
}
%>

Thread normal_<%=cid %> = new Thread() {
	public void run() {
		try {
			java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(ps_<%=cid %>.getInputStream()));
			String line = "";
			try {
				while((line = reader.readLine()) != null) {
				    <%
				    if (("OUTPUT_TO_CONSOLE").equals(outputAction)) {
				        %>
				        System.out.println(line);
				        <%
				    } else if (("RETRIEVE_OUTPUT").equals(outputAction)) {
				        %>
				        globalMap.put("<%=cid %>_OUTPUT",(String)globalMap.get("<%=cid %>_OUTPUT")+"\n"+line);
				        <%
				    }
				    %>
				}
			} finally {
				reader.close();
			}
		} catch(java.io.IOException ioe) {
			ioe.printStackTrace();
		}
	}
};
normal_<%=cid%>.start();

Thread error_<%=cid%> = new Thread() {
	public void run() {
		try {
			java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(ps_<%=cid %>.getErrorStream()));
			String line = "";
			try {
				while((line = reader.readLine()) != null) {
				    <%
				    if (("OUTPUT_TO_CONSOLE").equals(outputAction)) {
				        %>
				        System.err.println(line);
				        <%
				    } else if (("RETRIEVE_OUTPUT").equals(outputAction)) {
				        %>
				        globalMap.put("<%=cid %>_OUTPUT",(String)globalMap.get("<%=cid %>_OUTPUT")+"\n"+line);
				        <%
				    }
				    %>
				}
			} finally {
				reader.close();
			}
		} catch(java.io.IOException ioe) {
			ioe.printStackTrace();
		}
	}
};
error_<%=cid%>.start();

ps_<%=cid %>.waitFor();
normal_<%=cid%>.interrupt();
error_<%=cid%>.interrupt();
