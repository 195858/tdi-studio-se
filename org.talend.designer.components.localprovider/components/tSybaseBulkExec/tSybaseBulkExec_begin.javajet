<%@ jet
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser
		org.talend.designer.codegen.config.CodeGeneratorArgument
		
		java.lang.StringBuffer;
	"
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	
	String bcpUtility  = ElementParameterParser.getValue(node, "__BCP_UTILITY__");
	String server = ElementParameterParser.getValue(node, "__SERVER__");
	String database = ElementParameterParser.getValue(node, "__DBNAME__");
	String user = ElementParameterParser.getValue(node, "__USER__");
	String pwd = ElementParameterParser.getValue(node, "__PASS__");
	String table = ElementParameterParser.getValue(node, "__TABLE__");
	String dataFile  = ElementParameterParser.getValue(node, "__FILENAME__");
	String fieldTerminator = ElementParameterParser.getValue(node, "__FIELDS_TERMINATOR__");
	String rowTerminator =  ElementParameterParser.getValue(node, "__ROW_TERMINATOR__");
	String headRow =  ElementParameterParser.getValue(node, "__HEAD__");
	
	String encoding  = ElementParameterParser.getValue(node, "__ENCODING__");
	encoding= encoding.toUpperCase();
     if(encoding.equals("\"UTF-8\"")){
          encoding = "UTF8";
     }else if(encoding.equals("\"ISO-8859-15\"")){
   		encoding = "WE8ISO8859P15";
     }else if(encoding.equals("\"GBK\"")){
   		encoding = "ZHS16GBK";
     }else if(encoding.equals("\"GB2312\"")){
     	encoding = "ZHS16CGB231280";//ZHS16MACCGB231280 ?
     }else if(encoding.equals("\"BIG5\"")){
        encoding = "ZHT16BIG5";
     } else {
       //will be enhanced later, now default with utf-16
   		encoding = "AL16UTF16";
     }
    
	String outputAction  = ElementParameterParser.getValue(node, "__OUTPUT__");	
		

	
	
	
%>

StringBuffer command_<%=cid %> =  new StringBuffer();

command_<%=cid %>.append(<%=bcpUtility%>);

command_<%=cid %>.append(" ");

<%if(database!=null&&!database.equals("\"\"")&&!database.equals("")){%>
command_<%=cid %>.append(<%=database%>);
	
command_<%=cid %>.append("..");
	
command_<%=cid %>.append(<%=table%>);
	
<%}else{%>

command_<%=cid %>.append(<%=table%>);
	
<%}%>
command_<%=cid %>.append(" in ");

command_<%=cid %>.append(<%=dataFile%>);

<%if(headRow!=null&&!headRow.equals("\"\"")&&!headRow.equals("")){%>
command_<%=cid %>.append(" -F");
	
command_<%=cid %>.append(<%=headRow %>);
	
<%}%>
command_<%=cid %>.append(" -t");

command_<%=cid %>.append(<%=fieldTerminator%>);

command_<%=cid %>.append(" -r");

command_<%=cid %>.append(<%=rowTerminator%>);

command_<%=cid %>.append(" -c -U");

command_<%=cid %>.append(<%=user%>);

command_<%=cid %>.append(" -P");

command_<%=cid %>.append(<%=pwd%>);

<%if(server!=null&&!server.equals("\"\"")&&!encoding.equals("")){%>
command_<%=cid %>.append(" -S");

command_<%=cid %>.append(<%=server%>);

<%}%>
<%if(encoding!=null&&!encoding.equals("\"\"")&&!encoding.equals("")){%>
command_<%=cid %>.append(" -J");

command_<%=cid %>.append("<%=encoding %>");
<%}%>





Runtime runtime_<%=cid%> = Runtime.getRuntime();
final Process ps_<%=cid %> = runtime_<%=cid%>.exec(command_<%=cid %>.toString());
Thread normal_<%=cid %> = new Thread() {
	public void run() {
		try {
			java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(ps_<%=cid %>.getInputStream()));
			String line = "";
			try {
				while((line = reader.readLine()) != null) {
<%
	if (outputAction.equals("OUTPUT_TO_CONSOLE")) {
%>
					System.out.println(line);
<%
	} else if (outputAction.equals("RETRIEVE_OUTPUT")) {
%>
					globalMap.put("<%=cid %>_OUTPUT",(String)globalMap.get("<%=cid %>_OUTPUT")+"\n"+line);
<%
	}
%>
				}
			} finally {
				reader.close();
			}
		} catch(java.io.IOException ioe) {
			ioe.printStackTrace();
		}
	}
};
normal_<%=cid%>.start();

Thread error_<%=cid%> = new Thread() {
	public void run() {
		try {
			java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(ps_<%=cid %>.getErrorStream()));
			String line = "";
			try {
				while((line = reader.readLine()) != null) {
<%
	if (outputAction.equals("OUTPUT_TO_CONSOLE")) {
%>
					System.err.println(line);
<%
	} else if (outputAction.equals("RETRIEVE_OUTPUT")) {
%>
					globalMap.put("<%=cid %>_OUTPUT",(String)globalMap.get("<%=cid %>_OUTPUT")+"\n"+line);
<%
	}
%>
				}
			} finally {
				reader.close();
			}
		} catch(java.io.IOException ioe) {
			ioe.printStackTrace();
		}
	}
};
error_<%=cid%>.start();

ps_<%=cid %>.waitFor();
normal_<%=cid%>.interrupt();
error_<%=cid%>.interrupt();
