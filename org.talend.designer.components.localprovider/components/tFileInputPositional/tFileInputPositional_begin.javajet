<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn 
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
		java.util.List
    	java.util.Map
	" 
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	
	List<IMetadataTable> metadatas = node.getMetadataList();
	if ((metadatas!=null)&&(metadatas.size()>0)) {
		IMetadataTable metadata = metadatas.get(0);
		if (metadata!=null) {
			String rowSeparator = ElementParameterParser.getValue(node, "__ROWSEPARATOR__");
			
			List<Map<String, String>> formats =
            (List<Map<String,String>>)ElementParameterParser.getObjectValue(
                node,
                "__FORMATS__"
            );
            
            List<Map<String, String>> trimSelects =
            (List<Map<String,String>>)ElementParameterParser.getObjectValue(
                node,
                "__TRIMSELECT__"
            );
            
            String pattern = ElementParameterParser.getValue(node, "__PATTERN__");
            
            boolean advanced = ElementParameterParser.getValue(node, "__ADVANCED_OPTION__").equals("true");
            
			String filename = ElementParameterParser.getValueWithUIFieldKey(node,"__FILENAME__", "FILENAME");
			
			String trimAll = ElementParameterParser.getValue(node,"__TRIMALL__");
			boolean isTrimAll = true;
			if(trimAll != null && trimAll.equals("false")){
				isTrimAll = false;
			}
			
   			String encoding = ElementParameterParser.getValue(node,"__ENCODING__");
   			
    		String header = ElementParameterParser.getValue(node, "__HEADER__");
    		
    		String footer = ElementParameterParser.getValue(node, "__FOOTER__");
    		
    		String limit = ElementParameterParser.getValue(node, "__LIMIT__");    		
    		
    		String removeEmptyRow = ElementParameterParser.getValue(node, "__REMOVE_EMPTY_ROW__");
    		
        	String dieOnErrorStr = ElementParameterParser.getValue(node, "__DIE_ON_ERROR__");
    		boolean dieOnError = (dieOnErrorStr!=null&&!dieOnErrorStr.equals(""))?dieOnErrorStr.equals("true"):false;  
    		
    		if(header.equals("")){
    			header = "0";
    		}
    		
    		if(limit.equals("")){
    			limit = "-1";
    		}
    		
    		if(footer.equals("")){
    			footer = "0";
    		}
    		
    		boolean useStar = false;
    		
    		pattern=pattern.substring(1, pattern.length()-1);
    		String[] positions=(pattern.trim()).split(",");
    		for(int i=0;i<positions.length;i++){
            	if(positions[i].equals("")){
               	 	positions[i]="0";
            	}
            	if(positions[i].equals("*")){
            		useStar = true;
            	}
            }
%>
int nb_line_<%=cid%> = 0;
int footer_<%=cid %>  = <%=footer%>;
int limit_<%=cid %> = <%=limit %>;
<%
		if(advanced){
%>
int[] sizes_<%=cid %> = new int[<%=formats.size() %>];
int[] begins_<%=cid %> = new int[<%=formats.size() %>];
int[] ends_<%=cid %> = new int[<%=formats.size() %>];
<%
			for(int i = 0; i < formats.size(); i++){ 
				if(i == formats.size() - 1 && !(rowSeparator.equals("") || rowSeparator.equals("\"\""))){
					if(formats.get(i).get("SIZE").equals("*")){ 
						useStar = true;
					}
%>
sizes_<%=cid %>[<%=i %>] = <%=useStar ? -1 :  formats.get(i).get("SIZE") %>;
<%
				}else{
%>
sizes_<%=cid %>[<%=i %>] = <%=formats.get(i).get("SIZE") %>;				
<%
				}
			}
			for(int i = 0; i < formats.size(); i++){ 
				if(i == 0){
%>
begins_<%=cid %>[<%=i %>] = 0;
ends_<%=cid %>[<%=i %>] = sizes_<%=cid %>[<%=i %>];
<%
				}else if(i == formats.size() - 1 && useStar){
%>
begins_<%=cid %>[<%=i %>] = begins_<%=cid %>[<%=i-1 %>] + sizes_<%=cid %>[<%=i-1 %>];
ends_<%=cid %>[<%=i %>] = -1;
<%
				}else{
%>
begins_<%=cid %>[<%=i %>] = begins_<%=cid %>[<%=i-1 %>] + sizes_<%=cid %>[<%=i-1 %>];
ends_<%=cid %>[<%=i %>] = ends_<%=cid %>[<%=i-1 %>] + sizes_<%=cid %>[<%=i %>];
<%
				}
			}
		}//end if(advanced)
%>
java.io.BufferedReader in_<%=cid %> = 
	new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(<%=filename %>), <%=encoding %>));
<%
			if(rowSeparator.equals("") || rowSeparator.equals("\"\"") ){
%>
int rowLength_<%=cid %> = 0;			
<%
				if(advanced){ 
					for(int i = 0; i < formats.size(); i++){ 
%>
rowLength_<%=cid %> += sizes_<%=cid %>[<%=i %>];
<%
					}
				}else{
    				for(int i=0;i<positions.length;i++){
%>
rowLength_<%=cid %> += <%=positions[i] %>;
<%
        		}
			}
%>
org.talend.fileprocess.delimited.RowParser reader_<%=cid %> = new org.talend.fileprocess.delimited.RowParser(in_<%=cid %>, rowLength_<%=cid %>);
<%
			}else{
%>
org.talend.fileprocess.delimited.RowParser reader_<%=cid %> = new org.talend.fileprocess.delimited.RowParser(in_<%=cid %>, <%=rowSeparator %>, <%=removeEmptyRow %>);
<%
			}
%>
reader_<%=cid %>.skipHeaders(<%=header %>);
if(footer_<%=cid %> > 0){
	int available_<%=cid %> = (int)reader_<%=cid %>.getAvailableRowCount(footer_<%=cid %>);
	reader_<%=cid %>.close();
	in_<%=cid %> = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(<%=filename %>), <%=encoding %>));
<%
			if(rowSeparator.equals("") || rowSeparator.equals("\"\"") ){
%>
	reader_<%=cid %> = new org.talend.fileprocess.delimited.RowParser(in_<%=cid %>, rowLength_<%=cid %>);
<%
			}else{
%>
	reader_<%=cid %> = new org.talend.fileprocess.delimited.RowParser(in_<%=cid %>, <%=rowSeparator %>, <%=removeEmptyRow %>);
<%
			}
%>	
	reader_<%=cid %>.skipHeaders(<%=header %>);	
	if(limit_<%=cid %> == -1){
		limit_<%=cid %> = available_<%=cid %>; 
	}else{
		limit_<%=cid %> = (limit_<%=cid %> > available_<%=cid %>) ? available_<%=cid %> : limit_<%=cid %>;
	}
}
String row_<%=cid %> = null;   
<%
	if(advanced){
%>
String column_<%=cid %> = null;
<%
	}else{
%>
String[] columnValue<%=cid %>=new String[<%=metadata.getListColumns().size()%>];
<%
	}
%>
while (reader_<%=cid %>.readRecord()) {
	row_<%=cid %> = reader_<%=cid %>.getRowRecord();
<%
	List< ? extends IConnection> conns = node.getOutgoingSortedConnections();
	List<? extends IConnection> connsFlow = node.getOutgoingConnections("FLOW");

    String rejectConnName = "";
    List<? extends IConnection> rejectConns = node.getOutgoingConnections("REJECT");
    if(rejectConns != null && rejectConns.size() > 0) {
        IConnection rejectConn = rejectConns.get(0);
        rejectConnName = rejectConn.getName();
    }
    List<IMetadataColumn> rejectColumnList = null;
    IMetadataTable metadataTable = node.getMetadataFromConnector("REJECT");
    if(metadataTable != null) {
        rejectColumnList = metadataTable.getListColumns();      
    }

    	if (conns!=null) {
    		if (conns.size()>0) {
    			for (int i=0;i<conns.size();i++) {
    				IConnection connTemp = conns.get(i);
    				if (connTemp.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
%>
    		<%=connTemp.getName() %> = null;			
<%
    				}
    			}
    		}
    	}
    	
	String firstConnName = "";
	if (conns!=null) {
		if (conns.size()>0) {
			IConnection conn = conns.get(0);
			firstConnName =  cid;
			if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {%>
			
			boolean whetherReject_<%=cid %> = false;
			<%=conn.getName() %>Struct <%=firstConnName %> = new <%=conn.getName() %>Struct();
			try {
			
			<%
    			if(advanced){
    				List<IMetadataColumn> listColumns = metadata.getListColumns();
    				int sizeListColumns = listColumns.size();
    				for (int valueN=0; valueN<sizeListColumns; valueN++) {
    					String paddingChar = formats.get(valueN).get("PADDING_CHAR");
    					String align = formats.get(valueN).get("ALIGN");
    					if(align.equals("'L'")){
    						align = "-1";
    					}else if(align.equals("'C'")){
    						align = "0";
    					}else{
    						align = "1";
    					}
    					if(valueN == sizeListColumns - 1 && useStar){ //last column
%>
    if(begins_<%=cid %>[<%=valueN %>] < row_<%=cid %>.length()){
    	column_<%=cid %> = TalendString.talendTrim(row_<%=cid %>.substring(begins_<%=cid %>[<%=valueN %>]), <%=paddingChar %>, <%=align %>);
    }else{
    	column_<%=cid %> = "";
    }
<%
						}else{//other column
%>
	if(begins_<%=cid %>[<%=valueN %>] < row_<%=cid %>.length()){
        if(ends_<%=cid %>[<%=valueN %>] <= row_<%=cid %>.length()){
        	column_<%=cid %> = TalendString.talendTrim(row_<%=cid %>.substring(begins_<%=cid %>[<%=valueN %>], ends_<%=cid %>[<%=valueN %>]), <%=paddingChar %>, <%=align %>);
        }else{
        	column_<%=cid %> = TalendString.talendTrim(row_<%=cid %>.substring(begins_<%=cid %>[<%=valueN %>]), <%=paddingChar %>, <%=align %>);
		}
    }else{
    	column_<%=cid %> = "";
    }
<%
						}
						if(isTrimAll || trimSelects.get(valueN).get("TRIM").equals("true")){
%>
	column_<%=cid %> = column_<%=cid %>.trim();
<%
						}
					IMetadataColumn column = listColumns.get(valueN);
					String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
					JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
					String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
					if(javaType == JavaTypesManager.STRING || javaType == JavaTypesManager.OBJECT) {
%>
	<%=firstConnName %>.<%=column.getLabel() %> = column_<%=cid %>;
<%
					} else {
%>
	if(column_<%=cid %>.length() > 0) {
<%
						if(javaType == JavaTypesManager.DATE) {
%>
		<%=firstConnName %>.<%=column.getLabel() %> = ParserUtils.parseTo_Date(column_<%=cid %>, <%= patternValue %>);
<%
						}else if(javaType == JavaTypesManager.BYTE_ARRAY) {
%>
		<%=firstConnName %>.<%=column.getLabel() %> = column_<%=cid %>.getBytes();
<%
							} else {
%>
		<%=firstConnName %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%= typeToGenerate %>(column_<%=cid %>);
<%
							}
%>
    }else{
    	<%=firstConnName %>.<%=column.getLabel() %> = <%=JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate)%>;
    }
<%					
					}
				}
			}else{// end if(advance)
%>
	int substringBegin<%=cid %>=0,substringEnd<%=cid %>=0;
<%
				for(int i=0;i <	metadata.getListColumns().size();i++){
					if(i >=positions.length){
%>
	columnValue<%=cid %>[<%=i%>]="";
<%
						continue;
					}
%>
    if(substringBegin<%=cid %> >= row_<%=cid %>.length()){
    	columnValue<%=cid %>[<%=i%>]= "";
    }else{
<%
					if(positions[i].equals("*")){
%>
        substringEnd<%=cid %>=row_<%=cid %>.length();
<%
					}else{
%>
        substringEnd<%=cid %> = substringEnd<%=cid %> + <%=positions[i]%>;
        if(substringEnd<%=cid %> > row_<%=cid %>.length()){
        	substringEnd<%=cid %> = row_<%=cid %>.length();
    	}
<%
					}
%>
        columnValue<%=cid %>[<%=i%>] = row_<%=cid %>.substring(substringBegin<%=cid %>, substringEnd<%=cid %>);
<% 
       				if(isTrimAll || trimSelects.get(i).get("TRIM").equals("true")){
%>
		columnValue<%=cid %>[<%=i%>] = columnValue<%=cid %>[<%=i%>].trim();
<%
					}
%>    	
        substringBegin<%=cid %> = substringEnd<%=cid %>;
	}
<%
				}//for(...)
				
				List<IMetadataColumn> listColumns = metadata.getListColumns();
				int sizeListColumns = listColumns.size();
				for (int valueN=0; valueN<sizeListColumns; valueN++) {
					IMetadataColumn column = listColumns.get(valueN);
					String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
					JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
					String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
					if(javaType == JavaTypesManager.STRING || javaType == JavaTypesManager.OBJECT) {
%>
	<%=firstConnName %>.<%=column.getLabel() %> = columnValue<%=cid %>[<%=valueN%>];
<%
					} else {
%>
	if(columnValue<%=cid %>[<%=valueN%>].length() > 0) {
<%
							if(javaType == JavaTypesManager.DATE) {
%>	
		<%=firstConnName %>.<%=column.getLabel() %> = ParserUtils.parseTo_Date(columnValue<%=cid %>[<%=valueN%>], <%= patternValue %>);
<%
							}else if(javaType == JavaTypesManager.BYTE_ARRAY) {
%>	
		<%=firstConnName %>.<%=column.getLabel() %> = columnValue<%=cid %>[<%=valueN%>].getBytes();
<%
							} else {
%>	
		<%=firstConnName %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%= typeToGenerate %>(columnValue<%=cid %>[<%=valueN%>].trim());
<%
							}
%>
        }else{
        	<%=firstConnName %>.<%=column.getLabel() %> = <%=JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate)%>;
        }
<%
        					}
        				}
        			}%>
        			
    } catch (Exception e) {
        whetherReject_<%=cid%> = true;
        <%
        if (dieOnError) {
            %>
            throw(e);
            <%
        } else {
            if(!rejectConnName.equals("")&& rejectColumnList != null && rejectColumnList.size() > 0) {

                %>
                    <%=rejectConnName %> = new <%=rejectConnName %>Struct();
                <%
                for(IMetadataColumn column : metadata.getListColumns()) {
                    %>
                    <%=rejectConnName%>.<%=column.getLabel()%> = <%=firstConnName%>.<%=column.getLabel()%>;
                    <%
                }
                %>
                <%=rejectConnName%>.errorMessage = e.getMessage();
                <%
            } else {
                %>
                System.err.print(e.getMessage());
                <%
            }
        } 
        %>
    }
        			
        			<%        			
        		}
		if (conns.size()>0) {
%>
        if(!whetherReject_<%=cid%>) {
<%		
			for (int i=0;i<conns.size();i++) {
				conn = conns.get(i);
				if ((conn.getName().compareTo(rejectConnName)!=0)&&(conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA))) {
%>
                     
             if(<%=conn.getName() %> == null){ 
            	 <%=conn.getName() %> = new <%=conn.getName() %>Struct();
             }				
<%
			    	 for (IMetadataColumn column: metadata.getListColumns()) {
%>
	    	 <%=conn.getName() %>.<%=column.getLabel() %> = <%=firstConnName %>.<%=column.getLabel() %>;    				
<%
				 	}
				}
			}
%>
		}	
<%
		}
        	}
		}
	}
}
%>