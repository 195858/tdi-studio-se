<%@ jet 
	package="org.talend.designer.codegen.translators" 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn 
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.EConnectionType
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
		java.util.List 
		org.talend.commons.utils.generation.CodeGenerationUtils
	" 
	class="FileInputPositionalBegin" 
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	boolean stats = codeGenArgument.isStatistics();
	
	List<IMetadataTable> metadatas = node.getMetadataList();
	if ((metadatas!=null)&&(metadatas.size()>0)) {
		IMetadataTable metadata = metadatas.get(0);
		if (metadata!=null) {
			String row_separator = ElementParameterParser.getValue(node, "__ROWSEPARATOR__");
			String pattern = ElementParameterParser.getValue(node, "__PATTERN__");
			String filename = ElementParameterParser.getValueWithUIFieldKey(node,"__FILENAME__", "FILENAME");
   			String encoding = ElementParameterParser.getValue(node,"__ENCODING__");
    		String myHeader = ElementParameterParser.getValue(node, "__HEADER__");
    		String myLimit = ElementParameterParser.getValue(node, "__LIMIT__");
    		String removeEmptyRow = ElementParameterParser.getValue(node, "__REMOVE_EMPTY_ROW__");
    		pattern=pattern.substring(1, pattern.length()-1);
    		String[] positions=(pattern.trim()).split(",");
    		boolean patternContainStar=false;
    		for(int i=0;i<positions.length;i++){
            	if(positions[i].equals("")){
               	 	positions[i]="0";
            	}
            	if(positions[i].equals("*")){
            		patternContainStar=true;
            	}
       		}
%>
			int footer_<%=cid %>  = <% String myFooter = ElementParameterParser.getValue(node, "__FOOTER__"); if (myFooter.equals("")) myFooter = "0"; %><%=myFooter%>;
			int limit<%=cid %>=<%if (myLimit.equals("")) {myLimit = "-1";}%><%=myLimit %>;
		java.io.BufferedReader in<%=cid %> = null;
        	in<%=cid %> = new java.io.BufferedReader(new java.io.InputStreamReader(
        		new java.io.FileInputStream(<%=filename %>),<%= encoding%>));
        String str<%=cid %>;
        
		int totalLine<%=cid %>=0,currentLine<%=cid %>=0,beginLine<%=cid %>=0,lastLine<%=cid %>=-1,outputLine<%=cid %>=0;
        <% 
         	if (myHeader.equals("")) myHeader = "0"; 
        	int header =Integer.parseInt(myHeader);
        	if (header > 0){
        		%>beginLine<%=cid %>=<%=header%>+1;
      		<%}
      		if (myLimit.equals("")) myLimit = "-1";
      		int limit =Integer.parseInt(myLimit);
      		if (limit > 0){
        %>lastLine<%=cid %>=<%=header+limit%>;
        <%}%>
        
        if(footer_<%=cid %> > 0){
        	while ((str<%=cid %> = in<%=cid %>.readLine()) != null) {
				totalLine<%=cid %>++;
			}
			int lastLineTemp<%=cid %> = totalLine<%=cid %> - footer_<%=cid %>   < 0? 0 : totalLine<%=cid %> - footer_<%=cid %> ;
			if(lastLine<%=cid %> > 0){
				lastLine<%=cid %> = lastLine<%=cid %> < lastLineTemp<%=cid %> ? lastLine<%=cid %> : lastLineTemp<%=cid %>; 
			}else {
				lastLine<%=cid %> = lastLineTemp<%=cid %>;
			}
			in<%=cid %> = null;
        	in<%=cid %> = new java.io.BufferedReader(new java.io.InputStreamReader(
        		new java.io.FileInputStream(<%=filename %>),<%= encoding%>));
        	
		  }
        
        while ((str<%=cid %> = in<%=cid %>.readLine()) != null) {
        	<%if(!row_separator.equals("\"\\n\"")){%>
        			java.util.StringTokenizer strRowToken<%=cid %>=new java.util.StringTokenizer(str<%=cid %>.trim(), <%=row_separator %>);
        	 		while(strRowToken<%=cid %>.hasMoreTokens()){
        	 		str<%=cid %>=strRowToken<%=cid %>.nextToken();
        	<%}%>
       		currentLine<%=cid %>++;
       		
       		if(currentLine<%=cid %> < beginLine<%=cid %>) {
        		continue;
        	}
        	if(lastLine<%=cid %> > -1 && currentLine<%=cid %> > lastLine<%=cid %>) {
        		break;
        	}
       		
        	if(<%=removeEmptyRow%> && str<%=cid %>.equals("")){
        		continue;
        	}
        	outputLine<%=cid %>++;
        	if(limit<%=cid %>!=-1&& outputLine<%=cid %> > limit<%=cid %>){
        		break;
        	}
			<%
	List< ? extends IConnection> conns = node.getOutgoingConnections();
	String firstConnName = "";
	if (conns!=null) {
		if (conns.size()>0) {
			IConnection conn = conns.get(0);
			firstConnName = conn.getName();
			
			if ((conn.getLineStyle().equals(EConnectionType.FLOW_MAIN))||(conn.getLineStyle().equals(EConnectionType.FLOW_REF))) {%>
			if(!str<%=cid %>.equals("")){
			String[] columnValue<%=cid %>=new String[<%=metadata.getListColumns().size()%>];
				int substringBegin<%=cid %>=0,substringEnd<%=cid %>=0;
			
			<%
				for(int i=0;i <	metadata.getListColumns().size();i++){%>
					columnValue<%=cid %>[<%=i%>]="";
					<%
			
					if(i >=positions.length){
						continue;
					}
					
					if(positions[i].equals("*")){%>
						substringEnd<%=cid %>=str<%=cid %>.length();
					<%}else{%>
						substringEnd<%=cid %>=substringEnd<%=cid %>+<%=positions[i]%>;
						if(substringEnd<%=cid %>>str<%=cid %>.length()){
							substringEnd<%=cid %>=str<%=cid %>.length();
						}
					<%}%>
					if(str<%=cid %>.length()>=substringEnd<%=cid %>){
						columnValue<%=cid %>[<%=i%>]=str<%=cid %>.substring(substringBegin<%=cid %>,substringEnd<%=cid %>);
						substringBegin<%=cid %> = substringEnd<%=cid %>;
						
					}
				<%
				}

				List<IMetadataColumn> listColumns = metadata.getListColumns();
				int sizeListColumns = listColumns.size();
				for (int valueN=0; valueN<sizeListColumns; valueN++) {
					IMetadataColumn column = listColumns.get(valueN);
					String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
					JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
					String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
					
					if(javaType == JavaTypesManager.STRING || javaType == JavaTypesManager.OBJECT) {
%>
							<%=conn.getName() %>.<%=column.getLabel() %> = columnValue<%=cid %>[<%=valueN%>];
<%
					} else {
%>
						if(columnValue<%=cid %>[<%=valueN%>].length() > 0) {
	<%
							if(javaType == JavaTypesManager.DATE) {
	%>
								<%=conn.getName() %>.<%=column.getLabel() %> = ParserUtils.parseTo_Date(columnValue<%=cid %>[<%=valueN%>], <%= patternValue %>);
	<%
							} else {
	%>
								<%=conn.getName() %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%= typeToGenerate %>(columnValue<%=cid %>[<%=valueN%>]);
	<%
							}
	%>					
						}else{
							<%=conn.getName() %>.<%=column.getLabel() %> = <%=JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate)%>;
						}
	<%					
					}
				}
			}
%>
			}else{
 				<%	for (IMetadataColumn column: metadata.getListColumns()) {%>
				<%=conn.getName() %>.<%=column.getLabel() %> = <%=JavaTypesManager.getDefaultValueFromJavaIdType(column.getTalendType(), column.isNullable())%>;
				<%}%>
			}

	<%
			}
		if (conns.size()>1) {
			for (int i=1;i<conns.size();i++) {
				IConnection conn = conns.get(i);
				if ((conn.getName().compareTo(firstConnName)!=0)&&((conn.getLineStyle().equals(EConnectionType.FLOW_MAIN))||(conn.getLineStyle().equals(EConnectionType.FLOW_REF)))) {
					for (IMetadataColumn column: metadata.getListColumns()) {
%>
	<%=conn.getName() %>.<%=column.getLabel() %> = <%=firstConnName %>.<%=column.getLabel() %>;
<%
					}
				}
			}
		}
	}
%>

 

 <%
		}
	}
%>