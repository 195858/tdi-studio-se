<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn 
		org.talend.designer.codegen.config.CodeGeneratorArgument
		java.util.List
	" 
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	boolean stats = codeGenArgument.isStatistics();
	
	List<IMetadataTable> metadatas = node.getMetadataList();
	if ((metadatas!=null)&&(metadatas.size()>0)) {
		IMetadataTable metadata = metadatas.get(0);
		if (metadata!=null) {
                    String cid = metadata.getTableName();
%>

use FileHandle;
use List::Util qw/min/;
use talend::filesOp;

my %desc_<%=metadata.getTableName() %> = (
    filename      => <%=ElementParameterParser.getValue(node, "__FILENAME__") %>,
    row_separator => <%=ElementParameterParser.getValue(node, "__ROWSEPARATOR__") %>,
    header        => <%=ElementParameterParser.getValue(node, "__HEADER__") %>,
    footer        => <% String myFooter = ElementParameterParser.getValue(node, "__FOOTER__"); if (myFooter.equals("")) myFooter = null; %><%=myFooter%>,
    limit         => <% String myLimit = ElementParameterParser.getValue(node, "__LIMIT__"); if (myLimit.equals("")) myLimit = null; %><%=myLimit%>,
    schema        => [
    <%
		for (IMetadataColumn column: metadata.getListColumns()) {
    %>
    	{
            name    => '<%=column.getLabel() %>',
            key     => <%=column.isKey() %>,
            type    => '<%=column.getType() %>',
            len     => <%=column.getLength() %>,
            null    => <%=column.isNullable() %>,
            default => '<%=column.getDefault() %>',
            comment => '<%=column.getComment() %>',
		},
	<%
		}
    %>
    ]
);

<%
String pattern = ElementParameterParser.getValue(node, "__PATTERN__");
%>

my $pattern_<%=metadata.getTableName() %> = join(
    ' ',
    map {'A'.$_} split(
        /,/,
        <%=pattern%>
    )
);

$/ = $desc_<%=metadata.getTableName() %>{row_separator};

<%
    if (stats) {
%>
    UpdateStat('<%=metadata.getTableName() %>', 0);
<%
    }
%>

my $input_FH_<%=metadata.getTableName() %> = new FileHandle;
open($input_FH_<%=metadata.getTableName() %>, '<', $desc_<%=metadata.getTableName() %>{filename})
    or die 'cannot open file "' . $desc_<%=metadata.getTableName() %>{filename} . '"';

<%
  if ((!ElementParameterParser.getValue(node, "__HEADER__").equals(""))
      && (!ElementParameterParser.getValue(node, "__HEADER__").equals("0")))
  {
%>

# move to the first useful line
if ($desc_<%=metadata.getTableName() %>{header} > 0) {
    for (1..$desc_<%=metadata.getTableName() %>{header}) {
        my $useless_line_<%=metadata.getTableName() %> = <$input_FH_<%=metadata.getTableName() %>>;
    }
}

<%
  }
%>

$nb_line_<%=metadata.getTableName() %> = 0;

<%
  if (((!ElementParameterParser.getValue(node, "__FOOTER__").equals(""))
        && (!ElementParameterParser.getValue(node, "__FOOTER__").equals("0")))
      || (!ElementParameterParser.getValue(node, "__LIMIT__").equals("")))
  {
%>

# as we have a limit and/or a footer, we need to know the number of rows in
# the input file
my $total_line_<%=metadata.getTableName() %> = tFileRowCount(
    filename => $desc_<%=metadata.getTableName() %>{filename},
    rowseparator => $desc_<%=metadata.getTableName() %>{row_separator},
    buffersize => 4096,
);

my ($first_row_<%=cid%>, $last_row_<%=cid%>) = getFirstAndLastRowNumber(
    header  => $desc_<%=cid%>{header},
    footer  => $desc_<%=cid%>{footer},
    limit   => $desc_<%=cid%>{limit},
    total   => $total_line_<%=cid%>,
);

for ($first_row_<%=metadata.getTableName() %> .. $last_row_<%=metadata.getTableName() %>) {
    my $_<%=metadata.getTableName() %> = <$input_FH_<%=metadata.getTableName() %>>;
<%
  }
  else
  {
%>

while (my $_<%=metadata.getTableName() %> = <$input_FH_<%=metadata.getTableName() %>>) {

<%
  }
%>

<%
    if (stats) {
%>
    UpdateStat('<%=metadata.getTableName() %>', 1);
<%
    }
%>

    chomp $_<%=metadata.getTableName() %>;

<%
    if (ElementParameterParser.getValue(node, "__REMOVE_EMPTY_ROW__").equals("true")) {
%>
    next if ($_<%=metadata.getTableName() %> eq '');
<%
    }
%>

    # increase number of line really splitted
    $nb_line_<%=metadata.getTableName() %>++;

    my @<%=metadata.getTableName() %> = unpack(
        $pattern_<%=metadata.getTableName() %>,
        $_<%=metadata.getTableName() %>
    );

<%
		}
	}
%>
