<%@ jet 
    imports="
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.core.model.metadata.IMetadataTable
    org.talend.core.model.metadata.types.JavaTypesManager
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.IConnectionCategory
    org.talend.core.model.process.INode
    org.talend.designer.codegen.config.CodeGeneratorArgument
    
    java.util.List
    " 
%>
<%
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();
    String cid = node.getUniqueName();
    boolean incldSubdir = ("true").equals(ElementParameterParser.getValue(node, "__INCLUDE_SUBDIR__"));
    boolean present = ("true").equals(ElementParameterParser.getValue(node, "__INCLUDE_PRESENT__"));
    String triggerAction = ElementParameterParser.getValue(node, "__ACTION_ON__");
    boolean waitRelease = ("true").equals(ElementParameterParser.getValue(node, "__WAIT_RELEASE__"));
%>
       
        class Util_<%=cid %> {

            private boolean flagt = false;

            private java.util.regex.Pattern fileNamePatternt = null;

            java.util.List<java.io.File> getFiles() {
                String directoryt = <%=ElementParameterParser.getValue(node, "__DIRECTORY__") %>;
                String filemaskt = <%=ElementParameterParser.getValue(node, "__FILEMASK__")%>+"$";

                if (filemaskt.indexOf("^") == -1) {
                    filemaskt = "^" + filemaskt;
                }
                if (!(filemaskt.lastIndexOf(".*$") == -1) && filemaskt.lastIndexOf("*.*$") == -1) {
                    filemaskt = filemaskt.substring(0, filemaskt.length() - 3) + "$";
                    flagt = true;
                } else {
                    filemaskt = java.util.regex.Pattern.compile("[*]").matcher(filemaskt).replaceAll(".*");
                }

                boolean case_sensitivet = <%=ElementParameterParser.getValue(node, "__CASE_SENSITIVE__") %>;
                fileNamePatternt = java.util.regex.Pattern.compile(filemaskt);
                if (!case_sensitivet) {
                    fileNamePatternt = java.util.regex.Pattern.compile(filemaskt, java.util.regex.Pattern.CASE_INSENSITIVE);
                }
                java.io.File filet = new java.io.File(directoryt);
                final java.util.List<java.io.File> list = new java.util.ArrayList<java.io.File>();
                filet.listFiles(new java.io.FilenameFilter() {

                    public boolean accept(java.io.File dir, String name) {
                        java.io.File file = new java.io.File(dir, name);
                        if (file.isFile()) {
                            String fileNamet = name;
                            if (flagt == true) {
                                if (!(fileNamet.indexOf(".") == -1)) {
                                    if (fileNamePatternt.matcher(fileNamet.substring(0, fileNamet.indexOf("."))).find()) {
                                        list.add(file);

                                    }
                                } else {
                                    if (fileNamePatternt.matcher(fileNamet).find()) {
                                        list.add(file);
                                    }
                                }
                            } else {
                                if (fileNamePatternt.matcher(fileNamet).find()) {
                                    list.add(file);
                                }
                            }

                            return true;
                        } 
                        <%
                        if(incldSubdir==true)  {
                            %>                          
                            else {

                                file.listFiles(this);
                            }
                      
                            <%
                        }   
                        %>                        
                        return false;
                    }

                });

                return list;
            }
            <%
            if(("fileupdated").equals(triggerAction) || ("fileall").equals(triggerAction)) {
                %>
                public String getFileChecksum(java.io.File file) {
                	String strMD5 = "";
                	java.security.MessageDigest complete = null;
                	java.io.InputStream fis = null;
                	try{
                        fis =  new java.io.FileInputStream(file);
                        byte[] buffer = new byte[1024];
                        complete = java.security.MessageDigest.getInstance("MD5");
                        int numRead;
                        while((numRead = fis.read(buffer))!= -1){
                          	if (numRead > 0) {
                            	complete.update(buffer, 0, numRead);
                            }
                        }
                    } catch(java.lang.Exception ex) {
    
                    } finally {
                    	if(fis != null) {
                    		try {
                    			fis.close();
                    		} catch(Exception ex) {
                    		}
                    	}
                    }
                   	
                   	if(complete != null){
            			byte[] b = complete.digest();
             			for (int i = 0; i < b.length; i++) {
              				strMD5 += Integer.toString( ( b[i] & 0xff ) + 0x100, 16).substring( 1 );
              			}
          			}
            		return strMD5;
                }
                <%
            }
            %>
        }
            
        Util_<%=cid %> util_<%=cid %> = new Util_<%=cid %>();
        java.util.List<java.io.File> originalFiles_<%=cid %> = util_<%=cid %>.getFiles();            
        <%
        if(("fileupdated").equals(triggerAction) || ("fileall").equals(triggerAction)) {
            %>
            java.util.Map<String, java.io.File> originalMap_<%=cid%> = new java.util.HashMap<String, java.io.File>();
            for(java.io.File file_<%=cid%>:originalFiles_<%=cid %>){
            	originalMap_<%=cid%>.put(util_<%=cid %>.getFileChecksum(file_<%=cid%>), file_<%=cid%>);
            }
            <%
        }
        %>
      
        int count_<%=cid %> = 0;
        while (true) {
            <%
            if(!("").equals(ElementParameterParser.getValue(node,"__MAX_ITERATIONS__"))){
                %>                
                if (count_<%=cid %> == <%=ElementParameterParser.getValue(node, "__MAX_ITERATIONS__") %> ) {
                    break;
                }
                <%
            } 
            %>                
            boolean found_<%=cid %> = false;
            <%
            if(present){
                %>              
    			if( count_<%=cid %> < originalFiles_<%=cid %>.size()) {
                    java.io.File file_<%=cid %> = originalFiles_<%=cid %>.get(count_<%=cid %>);
                    globalMap.put("<%=cid %>_FILENAME", file_<%=cid %>.getName());
                    globalMap.put("<%=cid %>_PRESENT_FILE", file_<%=cid %>.getAbsolutePath());
                    found_<%=cid %> = true;
    			} else {
			    <%
    			}
			%>
            java.util.List<java.io.File> fetchFilesOneTime_<%=cid %> = util_<%=cid %>.getFiles();
            <%
            if(("filecreated").equals(triggerAction)) {
                %>
                for(java.io.File file_<%=cid %> : fetchFilesOneTime_<%=cid %>) {
                    if(!originalFiles_<%=cid %>.contains(file_<%=cid %>)) {
           	<%	
           		if(waitRelease){
           	%>
                    	while(true){
                        	java.io.FileInputStream fis_<%=cid %> = null;
                        	try{
                            	fis_<%=cid %> = new java.io.FileInputStream(file_<%=cid %>.getAbsolutePath());
                        	}catch(java.io.FileNotFoundException e){
                            	Thread.sleep(3000);
                            	continue;
                        	}
                        	if(fis_<%=cid %> != null){
	                    		try {
	                    			fis_<%=cid %>.close();
	                    		} catch(Exception ex) {
	                    		}
                        	}
                        	break;
                    	}
            <%
            	}
            %>
                    	globalMap.put("<%=cid %>_FILENAME", file_<%=cid %>.getName());
                        globalMap.put("<%=cid %>_CREATED_FILE", file_<%=cid %>.getAbsolutePath());
                        found_<%=cid %> = true;                    
                        break;
                    }
                }
                originalFiles_<%=cid %> = util_<%=cid %>.getFiles();
                <%
            } else if(("filedeleted").equals(triggerAction)) {
                %>
                for(java.io.File file_<%=cid %> : originalFiles_<%=cid %>) {
                    if(!fetchFilesOneTime_<%=cid %>.contains(file_<%=cid %>)) {
                    	globalMap.put("<%=cid %>_FILENAME", file_<%=cid %>.getName());
                        globalMap.put("<%=cid %>_DELETED_FILE", file_<%=cid %>.getAbsolutePath());
                        found_<%=cid %> = true;                    
                        break;
                    }
                }
                originalFiles_<%=cid %> = util_<%=cid %>.getFiles();
                <%
            } else if(("fileupdated").equals(triggerAction)) {
                %>
                for(java.io.File file_<%=cid %> : fetchFilesOneTime_<%=cid %>) {
                    if(null == originalMap_<%=cid%>.get(util_<%=cid %>.getFileChecksum(file_<%=cid%>))) {
                    	globalMap.put("<%=cid %>_FILENAME", file_<%=cid %>.getName());
                        globalMap.put("<%=cid %>_UPDATED_FILE", file_<%=cid %>.getAbsolutePath());
                        found_<%=cid %> = true;
                        originalFiles_<%=cid %> = util_<%=cid %>.getFiles();
                        originalMap_<%=cid%>.clear();
                        for(java.io.File newFile_<%=cid%> : originalFiles_<%=cid %>) {
                            originalMap_<%=cid%>.put(util_<%=cid %>.getFileChecksum(newFile_<%=cid%>), newFile_<%=cid%>);
                        }                        
                        break;                        
                    }                   
                }                
                <%
            } else if(("fileall").equals(triggerAction)) {
                %>
                for(java.io.File file_<%=cid %> : originalFiles_<%=cid %>) {
                    if(!fetchFilesOneTime_<%=cid %>.contains(file_<%=cid %>)) {
                    	globalMap.put("<%=cid %>_FILENAME", file_<%=cid %>.getName());
                        globalMap.put("<%=cid %>_DELETED_FILE", file_<%=cid %>.getAbsolutePath());
                        found_<%=cid %> = true;
                        if(fetchFilesOneTime_<%=cid %>.size() != originalFiles_<%=cid %>.size()) {
                            originalFiles_<%=cid %> = util_<%=cid %>.getFiles();
                            originalMap_<%=cid%>.clear();
                            for(java.io.File newFile_<%=cid%> : originalFiles_<%=cid %>) {
                                originalMap_<%=cid%>.put(util_<%=cid %>.getFileChecksum(newFile_<%=cid%>), newFile_<%=cid%>);
                            }
                        }
                        fetchFilesOneTime_<%=cid %> = util_<%=cid %>.getFiles();                        
                        break;
                    }
                }
                for(java.io.File file_<%=cid %> : fetchFilesOneTime_<%=cid %>) {
                    if(!originalFiles_<%=cid %>.contains(file_<%=cid %>)) {
           	<%	
           		if(waitRelease){
           	%>
                    	while(true){
                        	java.io.FileInputStream fis_<%=cid %> = null;
                        	try{
                            	fis_<%=cid %> = new java.io.FileInputStream(file_<%=cid %>.getAbsolutePath());
                        	}catch(java.io.FileNotFoundException e){
                            	Thread.sleep(3000);
                            	continue;
                        	}
                        	if(fis_<%=cid %> != null){
	                    		try {
	                    			fis_<%=cid %>.close();
	                    		} catch(Exception ex) {
	                    		}
                        	}
                        	break;
                    	}
            <%
            	}
            %>
                    	globalMap.put("<%=cid %>_FILENAME", file_<%=cid %>.getName());
                        globalMap.put("<%=cid %>_CREATED_FILE", file_<%=cid %>.getAbsolutePath());
                        found_<%=cid %> = true;
                        originalFiles_<%=cid %> = util_<%=cid %>.getFiles();
                        originalMap_<%=cid%>.clear();
                        for(java.io.File newFile_<%=cid%> : originalFiles_<%=cid %>) {
                            originalMap_<%=cid%>.put(util_<%=cid %>.getFileChecksum(newFile_<%=cid%>), newFile_<%=cid%>);
                        }
                        fetchFilesOneTime_<%=cid %> = util_<%=cid %>.getFiles();                    
                        break;
                    }
                }
                for(java.io.File file_<%=cid %> : fetchFilesOneTime_<%=cid %>) {
                    if(null == originalMap_<%=cid%>.get(util_<%=cid %>.getFileChecksum(file_<%=cid%>))) {
                    	globalMap.put("<%=cid %>_FILENAME", file_<%=cid %>.getName());
                        globalMap.put("<%=cid %>_UPDATED_FILE", file_<%=cid %>.getAbsolutePath());
                        found_<%=cid %> = true;
                        originalFiles_<%=cid %> = util_<%=cid %>.getFiles();
                        originalMap_<%=cid%>.clear();
                        for(java.io.File newFile_<%=cid%> : originalFiles_<%=cid %>) {
                            originalMap_<%=cid%>.put(util_<%=cid %>.getFileChecksum(newFile_<%=cid%>), newFile_<%=cid%>);
                        }                    
                        break;
                    }
                }                
                <%
            }
            %>

            <%
            if(present) {
                %>   
                }
                <%
            }
            %>
            count_<%=cid %>++;
            
            globalMap.put("<%=cid %>_CURRENT_ITERATION", count_<%=cid %>);
            
            if (!found_<%=cid %>) {
            	Thread.currentThread().sleep(<%=ElementParameterParser.getValue(node, "__WAIT__")%> * 1000);
                continue;
            }            

<%	
	//*************************************************************//	
	//The following part will extract data from globalMap to schema in order to support the MAIN link simply.
	//step 1:
	
	IConnection firstDataConn = null;
	List<IMetadataColumn> firstColumnList = null;

	//1. get first DATA Link
	List< ? extends IConnection> conns = node.getOutgoingSortedConnections();	
	if(conns != null && conns.size() > 0){
		for(IConnection conn : conns){
			if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
				firstDataConn = conn;
				break;
			}
		}
	}

	//2. get first columnList (with real columns data) 	
	List<IMetadataTable> metadatas = node.getMetadataList();
	if ( metadatas != null && metadatas.size() > 0 ) {
		IMetadataTable metadata = metadatas.get(0);
		if(metadata != null){
			firstColumnList = metadata.getListColumns(); 
			if ( firstColumnList == null || firstColumnList.size() == 0 ) {
				firstColumnList = null;
			}
		}
	}
	
	//3. check the config Link and Schema
	if(firstDataConn != null && firstColumnList != null)
	{
    	//step 2:
    
        String firstDataConnName = firstDataConn.getName();
        for (IMetadataColumn column: firstColumnList) {
        	String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
%>	
		<%=firstDataConnName %>.<%=column.getLabel() %> = ((<%=typeToGenerate %>)globalMap.get("<%=cid %>_<%=column.getLabel() %>"));
<%
	    }
 	}
%>            
