<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.core.model.metadata.MetadataTalendType    
    org.talend.core.model.metadata.MappingTypeRetriever     
    java.util.List
    java.util.ArrayList
    java.util.Map
    java.util.HashMap    
" 
skeleton="../templates/db_output_bulk.skeleton"
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

String field_separator = ElementParameterParser.getValue(node, "__FIELDS_TERMINATED_BY__");
String null_string = ElementParameterParser.getValue(node, "__NULL_STRING__");
String file = ElementParameterParser.getValue(node, "__REMOTE_FILENAME__");
String host = ElementParameterParser.getValue(node, "__HOST__");
String port = ElementParameterParser.getValue(node, "__PORT__");
String db = ElementParameterParser.getValue(node, "__DBNAME__");
String user = ElementParameterParser.getValue(node, "__USER__");
String pas = ElementParameterParser.getValue(node, "__PASS__");
String tableName = ElementParameterParser.getValue(node, "__TABLE__");
boolean ros = ElementParameterParser.getValue(node, "__ROS__").equals("true");
List<IMetadataColumn> columnList = getColumnList(node);    
%>
String tableName_<%=cid%> = <%=tableName%>;
java.lang.Class.forName("com.vertica.Driver").newInstance();
String url_<%=cid %> = "jdbc:vertica://" + <%=host%> + ":" + <%=port%> + "/" + <%=db%>;
java.sql.Connection conn_<%=cid %> = java.sql.DriverManager.getConnection(url_<%=cid %>, <%=user%>, <%=pas%>);
<%
String tableAction = ElementParameterParser.getValue(node,"__TABLE_ACTION__");
String dbmsId = ElementParameterParser.getValue(node,"__MAPPING__");
List<Column> stmtStructure = null;
StringBuilder insertColName = null;
Manager manager = null;
if(columnList != null && columnList.size()>0) {
    stmtStructure = getManager(dbmsId, cid).createColumnList(columnList, null);
    StringBuilder columnListStr = new StringBuilder();
    boolean firstColumn = true;
    for(Column column : stmtStructure) {
        if(column.isReplaced()) {
            List<Column> replacedColumns = column.getReplacement();
            for(Column replacedColumn : replacedColumns) {
                if(firstColumn) {
                    firstColumn = false;
                } else {
                    columnListStr.append(", ");
                }
                columnListStr.append(replacedColumn.getName());                    
            }
        } else {
            if(firstColumn) {
                firstColumn = false;
            } else {
                columnListStr.append(", ");
            }
            columnListStr.append(column.getName());                
        }
    }
    manager = getManager(dbmsId, cid);
    if(!tableAction.equals("NONE")) {
        if(tableAction.equals("DROP_CREATE")) {
            %>
            java.sql.Statement stmtDrop_<%=cid%> = conn_<%=cid%>.createStatement();
            stmtDrop_<%=cid%>.execute("<%=manager.getDropTableSQL()%>" + " cascade");
            java.sql.Statement stmtCreate_<%=cid%> = conn_<%=cid%>.createStatement();
            stmtCreate_<%=cid%>.execute("<%=manager.getCreateTableSQL(stmtStructure)%>");
            stmtCreate_<%=cid%>.execute("CREATE PROJECTION " + <%=tableName%> + "_proj (<%=columnListStr.toString()%>) AS SELECT <%=columnListStr.toString()%> FROM " + <%=tableName%>);//
            <%
        } else if(tableAction.equals("CREATE")) {
            %>
            java.sql.Statement stmtCreate_<%=cid%> = conn_<%=cid%>.createStatement();
            stmtCreate_<%=cid%>.execute("<%=manager.getCreateTableSQL(stmtStructure)%>");
            stmtCreate_<%=cid%>.execute("CREATE PROJECTION " + <%=tableName%> + "_proj (<%=columnListStr.toString()%>) AS SELECT <%=columnListStr.toString()%> FROM " + <%=tableName%>);//
            <%
        } else if(tableAction.equals("CREATE_IF_NOT_EXISTS")) {
            %>
            java.sql.DatabaseMetaData dbMetaData_<%=cid%> = conn_<%=cid%>.getMetaData();
            java.sql.ResultSet rsTable_<%=cid%> = dbMetaData_<%=cid%>.getTables(null, null, null, new String[]{"TABLE"});
            boolean whetherExist_<%=cid%> = false;
            while(rsTable_<%=cid%>.next()) {
                String table_<%=cid%> = rsTable_<%=cid%>.getString("TABLE_NAME");
                if(table_<%=cid%>.equalsIgnoreCase(<%=tableName%>)) {
                    whetherExist_<%=cid%> = true;
                    break;
                }
            }
            if(!whetherExist_<%=cid%>) {
                java.sql.Statement stmtCreate_<%=cid%> = conn_<%=cid%>.createStatement();
                stmtCreate_<%=cid%>.execute("<%=manager.getCreateTableSQL(stmtStructure)%>");     
                stmtCreate_<%=cid%>.execute("CREATE PROJECTION " + <%=tableName%> + "_proj (<%=columnListStr.toString()%>) AS SELECT <%=columnListStr.toString()%> FROM " + <%=tableName%>);//
            }
            <%
        } else if(tableAction.equals("CLEAR")) {
            %>
            java.sql.Statement stmtClear_<%=cid%> = conn_<%=cid%>.createStatement();
            stmtClear_<%=cid%>.executeUpdate("<%=manager.getDeleteTableSQL()%>");
            <%
        }
    }    
}
String dataAction = ElementParameterParser.getValue(node,"__DATA_ACTION__");
if(dataAction.equals("UPDATE")) {
    if(columnList != null && columnList.size() > 0) {
        int keyCount = 0;
        for(IMetadataColumn column : columnList) {
            if(column.isKey()) {
                keyCount++;
            }
        }
        %>
        int keyCount_<%=cid%> = <%=keyCount%>;
        if(keyCount_<%=cid%> == 0) {
            throw new RuntimeException("For bulk update, Schema must have a key at least."); 
        }
        tableName_<%=cid%> = "tmp_<%=cid%>";
        java.sql.Statement stmtCreateTmp_<%=cid%> = conn_<%=cid%>.createStatement();
        stmtCreateTmp_<%=cid%>.execute("<%=manager.getCreateTableSQL(stmtStructure)%>");
        stmtCreateTmp_<%=cid%>.execute("CREATE PROJECTION " + tableName_<%=cid%> + "_proj (<%=insertColName.toString()%>) AS SELECT <%=insertColName.toString()%> FROM " + tableName_<%=cid%>);
        stmtCreateTmp_<%=cid%>.close();
        java.sql.Statement stmtTmpBulk_<%=cid%> = conn_<%=cid%>.createStatement();
        stmtTmpBulk_<%=cid%>.execute("COPY " + <%=db%> + "." + tableName_<%=cid%> + " FROM '" + <%=file%> + "' WITH DELIMITER '" + <%=field_separator%> + "' NULL '" + <%=null_string%> + "'"<%if(ros){%> + " DIRECT"<%}%>);
        stmtTmpBulk_<%=cid%>.close();
        tableName_<%=cid%> = <%=tableName%>;
        String tmpTableName_<%=cid%> = "tmp_<%=cid%>";
        java.sql.Statement stmtUpdateBulk_<%=cid%> = conn_<%=cid%>.createStatement();
        stmtUpdateBulk_<%=cid%>.executeUpdate("<%=manager.getUpdateBulkSQL(columnList)%>");
        stmtUpdateBulk_<%=cid%>.close();
        tableName_<%=cid%> = tmpTableName_<%=cid%>;
        java.sql.Statement stmtTmpDrop_<%=cid%> = conn_<%=cid%>.createStatement();
        stmtTmpDrop_<%=cid%>.execute("<%=manager.getDropTableSQL()%>");
        stmtTmpDrop_<%=cid%>.close();        
        <%
    }
} else if(dataAction.equals("INSERT")) {
    %>
	String sql_<%=cid %> = "COPY " + tableName_<%=cid%> + " FROM STDIN DELIMITER '" + <%=field_separator%> + "' NULL '" + <%=null_string%> + "'"<%if(ros){%> + " DIRECT"<%}%>;
    java.sql.Statement stmt_<%=cid %> = conn_<%=cid %>.createStatement();
    java.io.FileInputStream fis_<%=cid %> = new java.io.FileInputStream(new java.io.File(<%=file%>));
    ((com.vertica.PGStatement) stmt_<%=cid %>).startCopyIn(sql_<%=cid %>, fis_<%=cid %>);
    ((com.vertica.PGStatement) stmt_<%=cid %>).addStreamToCopyIn(fis_<%=cid %>);
    ((com.vertica.PGStatement) stmt_<%=cid %>).finishCopyIn();
    stmt_<%=cid %>.close();
    <%
}
%>
conn_<%=cid %>.close();







