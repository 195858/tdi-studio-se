<%@ jet 
imports="
    org.talend.core.model.process.INode
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.metadata.IMetadataTable
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.IConnectionCategory
    org.talend.core.model.metadata.builder.database.ExtractMetaDataUtils
    org.talend.core.model.metadata.types.JavaTypesManager
    org.talend.core.model.metadata.types.JavaType
    java.util.List
    java.util.ArrayList
    java.util.Map
    java.util.HashMap
"
skeleton="../templates/slowly_change_dimension.skeleton"
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode) codeGenArgument.getArgument();
String cid = node.getUniqueName();
List<IMetadataColumn> inputSchema = getInputSchema(node);
List<IMetadataColumn> outputSchema = getOutputSchema(node);
if(inputSchema != null && inputSchema.size() > 0 && outputSchema != null && outputSchema.size() > 0) {
    String dbhost = ElementParameterParser.getValue(node, "__SERVER__");
    String dbport = ElementParameterParser.getValue(node, "__PORT__");
    String dbname = ElementParameterParser.getValue(node, "__DBNAME__");
    String dbschema = ElementParameterParser.getValue(node, "__DB_SCHEMA__");
    String dbproperties = ElementParameterParser.getValue(node, "__PROPERTIES__");
    String dbuser = ElementParameterParser.getValue(node, "__USER__");
    String dbpwd = ElementParameterParser.getValue(node, "__PASS__");
    String dbtable = ElementParameterParser.getValue(node, "__TABLE__");
    boolean debug = ElementParameterParser.getValue(node, "__DEBUG__").equals("true");
    String dbType = MSSQL;
    SCDConfiger scdConfiger = getSCDConfiger(node);
    SCDManager scdManager = getSCDManager(cid, dbType);
    %>
    <%=genSourceKeyClass(scdConfiger, cid)%>
    <%=genDimensionAttributeClass(scdConfiger, cid)%>
    int nb_line_update_<%=cid%> = 0;
    int nb_line_inserted_<%=cid%> = 0;
    <%
    List<Column> searchColumns = getSearchColumnList(scdConfiger);
    List<Column> sourceKeys = scdConfiger.getSourceKeys();
    if(dbschema == null || dbschema.equals("\"\"") || dbschema.equals("")) {
        %>
        String tableName_<%=cid%> = <%=dbtable%>;
        <%
    } else {
        %>
        String tableName_<%=cid%> = <%=dbschema%> + "].[" + <%=dbtable%>;
        <%
    }
    %>
    java.lang.Class.forName("net.sourceforge.jtds.jdbc.Driver");
    String connectionString_<%=cid %> = "jdbc:jtds:sqlserver://" + <%=dbhost%> + ":" + <%=dbport%> + "//" + <%=dbname%> + ";appName=" + projectName + ";" + <%=dbproperties%>;
    java.sql.Connection connection_<%=cid%> = java.sql.DriverManager.getConnection(connectionString_<%=cid %>, <%=dbuser%>, <%=dbpwd%>);    
    String search_<%=cid%> = "<%=scdManager.createSelectionSQL(scdConfiger)%>";
    java.sql.Statement statement_<%=cid%> = connection_<%=cid%>.createStatement();
    java.sql.ResultSet resultSet_<%=cid%> = statement_<%=cid%>.executeQuery(search_<%=cid %>);
    java.util.Map<SCDSK_<%=cid%>, SCDStruct_<%=cid%>> cache_<%=cid%> = new java.util.HashMap<SCDSK_<%=cid%>, SCDStruct_<%=cid%>>();
    while(resultSet_<%=cid%>.next()) {
        SCDSK_<%=cid%> sk_<%=cid%> = new SCDSK_<%=cid%>();
        SCDStruct_<%=cid%> row_<%=cid%> = new SCDStruct_<%=cid%>();
        <%
        int index = 1;
        for(Column searchColumn : searchColumns) {
            boolean isSourceKey = false;
            for(Column sourceKey : sourceKeys) {
                if(searchColumn.getColumnName().equals(sourceKey.getColumnName())) {
                    isSourceKey = true;
                    break;
                }
            }
            String generatedType = searchColumn.getJavaType();
            String struct = (isSourceKey ? "sk_" : "row_") + cid;
            if(generatedType.equals("byte[]")) {
                generatedType = "Bytes";
            } else if(generatedType.equals("java.util.Date")) {
                generatedType = "Timestamp";
            } else if(generatedType.equals("Integer")) {
                generatedType = "Int";
            } else {
                generatedType = generatedType.substring(0, 1).toUpperCase() + generatedType.substring(1);
            }
            if(generatedType.equals("Char") || generatedType.equals("Character")) {
                %>
                String tmpValue_<%=cid%> = resultSet_<%=cid%>.getString(<%=index%>);
                if (tmpValue_<%=cid%> != null && tmpValue_<%=cid%>.length() > 0) {
                    <%=struct%>.<%=searchColumn.getColumnName()%> = tmpValue_<%=cid%>.charAt(0);
                } else {
                    <%
                    if(generatedType.equals("Character")) {
                        %>
                        if(tmpValue_<%=cid%> == null) {
                            <%=struct%>.<%=searchColumn.getColumnName()%> = null;
                        } else {
                            <%=struct%>.<%=searchColumn.getColumnName()%> = '\0';
                        }
                        <%
                    } else {
                        %>
                        if(tmpValue_<%=cid%>.equals("")) {
                            <%=struct%>.<%=searchColumn.getColumnName()%> = '\0';
                        } else {
                            throw new RuntimeException("Value is empty for column : '<%=searchColumn.getColumnName()%>', value is invalid or this column should be nullable or have a default value.");
                        }
                        <%
                    }
                    %>
                }
                <%
            } else if(generatedType.equals("Timestamp")) {
                %>
                java.sql.Timestamp timestamp_<%=cid%> = resultSet_<%=cid%>.getTimestamp(<%=index%>);
                if(timestamp_<%=cid%> != null) {
                    <%=struct%>.<%=searchColumn.getColumnName()%> = new java.util.Date(timestamp_<%=cid%>.getTime());
                } else {
                    <%=struct%>.<%=searchColumn.getColumnName()%> = null;
                }
                <%
            } else {
                %>
                if(resultSet_<%=cid %>.getObject(<%=index%>) != null) {
                    <%=struct%>.<%=searchColumn.getColumnName()%> = resultSet_<%=cid %>.get<%=generatedType%>(<%=index%>);
                }
                <%
            }
            index++;
        }
        %>
        cache_<%=cid%>.put(sk_<%=cid%>, row_<%=cid%>);
    }
    <%
    if(scdConfiger.getSurrogateKeyValueType().equals("TABLE_MAX")) {
        %>
        <%=scdConfiger.getSurrogateKeyFieldType()%> nextSurrogateKey_<%=cid%> = 1;
        if(cache_<%=cid%>.size() > 0) {
            String tmpQuery_<%=cid%> = "SELECT MAX([<%=scdConfiger.getSurrogateKeyField()%>]) FROM [" + tableName_<%=cid%> + "]";
            java.sql.Statement tmpStmt_<%=cid%> = connection_<%=cid%>.createStatement();
            java.sql.ResultSet tmpRS_<%=cid%> = tmpStmt_<%=cid%>.executeQuery(tmpQuery_<%=cid%>);
            <%
            String tmpType = null;        
            if(scdConfiger.getSurrogateKeyFieldType().equals("Integer")) {
                tmpType = "Int";
            } else {
                tmpType = scdConfiger.getSurrogateKeyFieldType().substring(0, 1).toUpperCase() + scdConfiger.getSurrogateKeyFieldType().substring(1);
            }
            %>
            if(tmpRS_<%=cid%>.next() && tmpRS_<%=cid%>.getObject(1) != null) {
                nextSurrogateKey_<%=cid%> = tmpRS_<%=cid%>.get<%=tmpType%>(1) + 1;
            }
        }        
        <%
    }
    if(debug) {
        %>
        System.out.println("[<%=cid%>] comparison cache loaded");
        <%
    }
    %>
    String insertionSQL_<%=cid%> = "<%=scdManager.createInsertionSQL(scdConfiger)%>";
    java.sql.PreparedStatement insertionStatement_<%=cid%> = connection_<%=cid%>.prepareStatement(insertionSQL_<%=cid%>);
    <%
    if(scdConfiger.isEnableType2() && scdConfiger.getDimensionType2Configer().getStartDateValueType().equals("JOB_START_TIME")) {
        int paramIndex = 0;
        List<Column> insertionColumnList = getInsertionColumnList(scdConfiger);
        if(scdConfiger.isEnableType3()) {
            paramIndex = insertionColumnList.size() - scdConfiger.getDimensionType3Configer().getDimensionAttributes().size();
        } else {
            paramIndex = insertionColumnList.size();
        }
        %>
        insertionStatement_<%=cid%>.setTimestamp(<%=paramIndex%>, new java.sql.Timestamp(start_Hash.get("<%=cid%>")));
        <%
    }
    if(scdConfiger.isEnableType1()) {
        %>
        String updateSQLForType1_<%=cid%> = "<%=scdManager.createUpdateSQLForType1(scdConfiger)%>";
        java.sql.PreparedStatement updateForType1_<%=cid%> = connection_<%=cid%>.prepareStatement(updateSQLForType1_<%=cid%>);        
        <%
    }
    if(scdConfiger.isEnableType2()) {
        %>
        String updateSQLForType2_<%=cid%> = "<%=scdManager.createUpdateSQLForType2(scdConfiger)%>";
        java.sql.PreparedStatement updateForType2_<%=cid%> = connection_<%=cid%>.prepareStatement(updateSQLForType2_<%=cid%>);
        <%
        if(scdConfiger.getDimensionType2Configer().getStartDateValueType().equals("JOB_START_TIME")) {
            %>
            updateForType2_<%=cid%>.setTimestamp(1, new java.sql.Timestamp(start_Hash.get("<%=cid%>")));
            <%
        }
    }
    if(scdConfiger.isEnableType3()) {
        %>
        String updateSQLForType3_<%=cid%> = "<%=scdManager.createUpdateSQLForType3(scdConfiger)%>";
        java.sql.PreparedStatement updateForType3_<%=cid%> = connection_<%=cid%>.prepareStatement(updateSQLForType3_<%=cid%>);
        <%
    }
    %>
    SCDSK_<%=cid%> lookUpKey_<%=cid%> = null;
    SCDStruct_<%=cid%> lookUpValue_<%=cid%> = null;
    <%
}
%>