<%@ jet
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.metadata.IMetadataTable
    java.util.List
    java.util.Map
    java.util.ArrayList
   	org.talend.core.model.process.IConnection    
	org.talend.core.model.process.IConnectionCategory
	org.talend.core.model.process.EConnectionType
"
%>
//tWriteXMLFieldOut_begin
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();


String virtualTargetCid = node.getDesignSubjobStartNode().getOutgoingConnections(EConnectionType.ON_SUBJOB_OK).get(0).getTarget().getUniqueName();

List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
    IMetadataTable metadata = metadatas.get(0);
    if (metadata!=null) {
    	List< ? extends IConnection> conns = node.getIncomingConnections();
		if(conns!=null && conns.size()>0){
    		IConnection conn = conns.get(0);
    		if(conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)){ 
    			String removeHeader = ElementParameterParser.getValue(node, "__REMOVE_HEADER__"); // add for feature7788
        		String encoding = ElementParameterParser.getValue(node, "__ENCODING__");
				boolean isAllowEmpty = ("true").equals(ElementParameterParser.getValue(node, "__CREATE_EMPTY_ELEMENT__"));
                boolean expandEmptyElm = ("true").equals(ElementParameterParser.getValue(node, "__EXPAND_EMPTY_ELM__"));
        		String mode = ElementParameterParser.getValue(node, "__GENERATION_MODE__");
        		List<Map<String, String>> rootTable = 
                	(List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__ROOT__");
                List<Map<String, String>> groupTable = 
                	(List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__GROUP__");
                List<Map<String, String>> loopTable = 
                	(List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__LOOP__");
                boolean storeFlow = ("true").equals(ElementParameterParser.getValue(node, "__STORE_FLOW__"));
%>
int nb_line_<%=cid%> = 0;
boolean needRoot_<%=cid%>  = true;

String  strCompCache_<%=cid %>= null;		

java.util.Queue<String> listGroupby_<%=cid%> = new java.util.concurrent.ConcurrentLinkedQueue<String>();
class Thread_XMLField extends Thread {
	java.util.Queue<String> queue;

	MonThread(java.util.Queue q) {
		this.queue = q;
		globalMap.put("queue_<%=virtualTargetCid%>", queue);
	}

	@Override
	public void run() {
		try {
			<%=virtualTargetCid%>Process(globalMap);
		} catch (TalendException e) {
			e.printStackTrace();
		}
	}
}
new Thread_XMLField(listGroupby_<%=cid%>).start();

java.util.List<java.util.List<String>> groupbyList_<%=cid%> = new java.util.ArrayList<java.util.List<String>>();
java.util.Map<String,String> valueMap_<%=cid%> = new java.util.HashMap<String,String>();
<%if(storeFlow){%>
java.util.List<java.util.Map<String,String>> flows_<%=cid%> = new java.util.ArrayList<java.util.Map<String,String>>();
java.util.Map<String,String> flowValues_<%=cid%> = null;
<%}%>
<%
				// *** generation mode init ***
				if(("Dom4j").equals(mode)){
%>

class NestXMLTool_<%=cid%>{
	public void parseAndAdd(org.dom4j.Element nestRoot, String value){
		try {
            org.dom4j.Document doc4Str = org.dom4j.DocumentHelper.parseText("<root>"+ value + "</root>");
    		nestRoot.setContent(doc4Str.getRootElement().content());
    	} catch (Exception e) {
    		e.printStackTrace();
    		nestRoot.setText(value);
        }
	}
	
	public void setText(org.dom4j.Element element, String value){
		if (value.startsWith("<![CDATA[") && value.endsWith("]]>")) {
			String text = value.substring(9, value.length()-3);
			element.addCDATA(text);
		}else{
			element.setText(value);
		}
	}
	
	public void replaceDefaultNameSpace(org.dom4j.Element nestRoot){
		if (nestRoot!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) nestRoot.elements()) {
        		if (("").equals(tmp.getQName().getNamespace().getURI()) && ("").equals(tmp.getQName().getNamespace().getPrefix())){
        			tmp.setQName(org.dom4j.DocumentHelper.createQName(tmp.getName(), nestRoot.getQName().getNamespace()));
	        	}
    	    	replaceDefaultNameSpace(tmp);
       		}
       	}
	}
	
	public void removeEmptyElement(org.dom4j.Element root){
		if (root!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) root.elements()) {
				removeEmptyElement(tmp);
			}
			if (root.content().size() == 0 
    			&& root.attributes().size() == 0 
    			&& root.declaredNamespaces().size() == 0) {
    			if(root.getParent()!=null){
                	root.getParent().remove(root);
                }
            }
		}
	}
}
NestXMLTool_<%=cid%> nestXMLTool_<%=cid%> = new NestXMLTool_<%=cid%>();

// sort group root element for judgement of group
java.util.List<org.dom4j.Element> groupElementList_<%=cid%> = new java.util.ArrayList<org.dom4j.Element>();
org.dom4j.Element root4Group_<%=cid%> = null;
org.dom4j.Document doc_<%=cid%>  = org.dom4j.DocumentHelper.createDocument();

org.dom4j.io.OutputFormat format_<%=cid%> = org.dom4j.io.OutputFormat.createPrettyPrint();
format_<%=cid%>.setTrimText(false);
format_<%=cid%>.setEncoding(<%=encoding%>);
<%if(isAllowEmpty && expandEmptyElm){%>format_<%=cid%>.setExpandEmptyElements(true);<%}%>
<%
					int groupSize = 0;
					if(groupTable!=null && groupTable.size()>0){
						for(java.util.Map<String, String> tmpMap : groupTable){
							if(tmpMap.get("ATTRIBUTE").equals("main")){
								groupSize++;
							}
						}
					}
%>
int[] orders_<%=cid %> = new int[<%=groupSize + 1%>];
<%
				}else if(("Null").equals(mode)){
%>
java.util.List<String> endTabStrs_<%=cid%> = new java.util.ArrayList<String>();
java.util.List<String> startTabStrs_<%=cid%> = new java.util.ArrayList<String>();
<%
            		if(loopTable.size()>0){
            			String emptyspace = "";
        				String endPath = loopTable.get(0).get("PATH");
        				String[] endTabs = endPath.split("/");
        				for(int len = 1; len<endTabs.length-1;len++){
%>
endTabStrs_<%=cid%>.add("<%=emptyspace%></<%=endTabs[len]%>>");
startTabStrs_<%=cid%>.add("\n<%=emptyspace%><<%=endTabs[len]%>>");
<%
	         				emptyspace += "  ";
            			}
        			}
%>
int preUnNullMaxIndex_<%=cid%> = -1;
int preNewTabIndex_<%=cid%> = -1;
String[] startTabs_<%=cid%> = new String[endTabStrs_<%=cid%>.size()];
String[] endTabs_<%=cid %> = new String[endTabStrs_<%=cid%>.size()];
java.io.StringWriter strWriter_<%=cid%> = new java.io.StringWriter();
java.io.BufferedWriter out_<%=cid%> = new java.io.BufferedWriter(strWriter_<%=cid%>);
<%
					if(!("true").equals(removeHeader)){
%>
out_<%=cid%>.write("<?xml version=\"1.0\" encoding=\""+<%=encoding%>+"\"?>");
out_<%=cid%>.newLine();
<%
					}
%>

<%
				}
			}
		}
	}
}
%>
