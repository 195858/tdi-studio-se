<%@ jet
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();
String dataAction = ElementParameterParser.getValue(node,"__DATA_ACTION__");
String batchSize=ElementParameterParser.getValue(node,"__BATCH_SIZE__");
String table = ElementParameterParser.getValue(node,"__TABLE__");
boolean isEnableDebug = ("true").equals(ElementParameterParser.getValue(node,"__ENABLE_DEBUG_MODE__"));
boolean useStatement = ("true").equals(ElementParameterParser.getValue(node,"__USE_STATEMENT__"));//tDBOutput
dbOutputBeginUtil.beforeComponentProcess(node);
String dbmsId = dbOutputBeginUtil.dbmsId;
String tableAction = dbOutputBeginUtil.tableAction;
log4jCodeGenerateUtil = dbOutputBeginUtil.log4jCodeGenerateUtil;
log4jCodeGenerateUtil.infoComponentStart(node);
log4jCodeGenerateUtil.initDbDebugRowBuffer();
boolean isDynamic = false;
List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
	IMetadataTable metadata = metadatas.get(0);
	isDynamic = metadata.isDynamicSchema();
}

List<IMetadataColumn> columnList = getColumnList(node);
List<Column> stmtStructure = null;
Manager manager = getManager(dbmsId, cid, node);
if(columnList != null && columnList.size() > 0) {
	stmtStructure = dbOutputBeginUtil.createColumnList(node,manager,columnList);
	isDynamic = isDynamic && !manager.isDynamicColumnReplaced();
	dbOutputBeginUtil.prepareColumn(stmtStructure);
}
//check key when dataAction is update or delete.
if(("UPDATE").equals(dataAction) || ("INSERT_OR_UPDATE").equals(dataAction) || ("UPDATE_OR_INSERT").equals(dataAction)) {
	int updateKeyCount = 0;
	if(stmtStructure != null) {
		for(Column column : stmtStructure) {
			if(column.isUpdateKey() && !column.isDynamic()) {
				updateKeyCount++;
			}
		}
		%>
		int updateKeyCount_<%=cid%> = <%=updateKeyCount%>;
		if(updateKeyCount_<%=cid%> < 1) {
			<%log4jCodeGenerateUtil.logInfo(node,"fatal",cid+" - For update, Schema must have a key");%>
			throw new RuntimeException("For update, Schema must have a key");
		}
		<%
	}
} else if(("DELETE").equals(dataAction)) {
	int deleteKeyCount = 0;
	if(stmtStructure != null) {
		for(Column column : stmtStructure) {
			if(column.isDeleteKey() && !column.isDynamic()) {
				deleteKeyCount++;
			}
		}
		%>
		int deleteKeyCount_<%=cid%> = <%=deleteKeyCount%>;
		if(deleteKeyCount_<%=cid%> < 1) {
			<%log4jCodeGenerateUtil.logInfo(node,"fatal",cid+" - For delete, Schema must have a key");%>
			throw new RuntimeException("For delete, Schema must have a key");
		}
		<%
	}
}else if (("INSERT_IF_NOT_EXIST").equals(dataAction)){
	int insertKeyCount = 0;
	if(stmtStructure != null) {
		for(Column column : stmtStructure) {
			if(column.isUpdateKey() && !column.isDynamic()) {
				insertKeyCount++;
			}
		}
		%>
		int insertKeyCount_<%=cid%> = <%=insertKeyCount%>;
		if(insertKeyCount_<%=cid%> < 1) {
			<%log4jCodeGenerateUtil.logInfo(node,"fatal",cid+" - For insert if not exist, Schema must have a key");%>
			throw new RuntimeException("For insert if not exist, Schema must have a key");
		}
		<%
	}
}
%>

int nb_line_<%=cid%> = 0;
int nb_line_update_<%=cid%> = 0;
int nb_line_inserted_<%=cid%> = 0;
int nb_line_deleted_<%=cid%> = 0;
int nb_line_rejected_<%=cid%> = 0;

int deletedCount_<%=cid%>=0;
int updatedCount_<%=cid%>=0;
int insertedCount_<%=cid%>=0;
int rejectedCount_<%=cid%>=0;

boolean whetherReject_<%=cid%> = false;
java.sql.Connection conn_<%=cid%> = null;
String tableName_<%=cid%> = <%=table%>;
<%
dbOutputBeginUtil.createConnection(node);
dbOutputBeginUtil.setCommit(node);
dbOutputBeginUtil.defineSchema(node,manager);
dbOutputBeginUtil.defineBatchSize(node);
dbOutputBeginUtil.defineOtherParameters(node);
if(columnList != null && columnList.size() > 0) {
	if(!isDynamic) {
		Map<String, String> hintsValues = dbOutputBeginUtil.hint(node);
		boolean useHintOptions = ("true").equals(ElementParameterParser.getValue(node,"__USE_HINT_OPTIONS__"));
		List<Map<String, String>> hintOptions = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__HINT_OPTIONS__");
		%>
		int count_<%=cid%>=0;
		<%@ include file="../../_hintTableName.javajet" %>
		<%@ include file="../../_tableActionForOutput.javajet"%>
		<%
		dbOutputBeginUtil.actionOnTable(node,stmtStructure);
		Map<String, StringBuilder> actionSQLMap = manager.createProcessSQL(stmtStructure);
		StringBuilder insertColName = actionSQLMap.get(INSERT_COLUMN_NAME);
		StringBuilder insertValueStmt = actionSQLMap.get(INSERT_VALUE_STMT);
		StringBuilder updateSetStmt = actionSQLMap.get(UPDATE_SET_STMT);
		StringBuilder updateWhereStmt = actionSQLMap.get(UPDATE_WHERE_STMT);
		StringBuilder deleteWhereStmt = actionSQLMap.get(DELETE_WHERE_STMT);
		if(("INSERT").equals(dataAction)) {
			dbOutputBeginUtil.insert(node,manager,insertColName,insertValueStmt);
		} else if (("UPDATE").equals(dataAction)) {
			%>
			String update_<%=cid%> = "UPDATE <%=manager.getLProtectedChar()%>" + tableName_<%=cid%> + "<%=manager.getRProtectedChar()%> SET <%=updateSetStmt.toString()%> WHERE <%=updateWhereStmt.toString()%>";
			<%if(useStatement){%>
			java.sql.Statement pstmt_<%=cid %> = conn_<%=cid%>.createStatement();
			<%}else{%>
			java.sql.PreparedStatement pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(update_<%=cid%>);
			<%
			}
		} else if (("INSERT_OR_UPDATE").equals(dataAction)) {
			dbOutputBeginUtil.checkExist(manager,updateWhereStmt.toString());
			%>
			String insert_<%=cid%> = "INSERT INTO <%=manager.getLProtectedChar()%>" + tableName_<%=cid%> + "<%=manager.getRProtectedChar()%> (<%=insertColName.toString()%>) VALUES (<%=insertValueStmt.toString()%>)";
			String update_<%=cid%> = "UPDATE <%=manager.getLProtectedChar()%>" + tableName_<%=cid%> + "<%=manager.getRProtectedChar()%> SET <%=updateSetStmt.toString()%> WHERE <%=updateWhereStmt.toString()%>";
			<%@ include file="../../_hintInsert.javajet" %>
			<%@ include file="../../_hintUpdate.javajet" %>
			<%if(useStatement){%>
			String[] checkExistSQLSplits_<%=cid%> = (checkExist_<%=cid%>+" ").split("\\?");
			java.sql.Statement pstmt_<%=cid %> = conn_<%=cid%>.createStatement();
			java.sql.Statement pstmtInsert_<%=cid %> = conn_<%=cid%>.createStatement();
			java.sql.Statement pstmtUpdate_<%=cid %> = conn_<%=cid%>.createStatement();
			<%}else{%>
			java.sql.PreparedStatement pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(checkExist_<%=cid%>);
			java.sql.PreparedStatement pstmtInsert_<%=cid %> = conn_<%=cid%>.prepareStatement(insert_<%=cid%>);
			java.sql.PreparedStatement pstmtUpdate_<%=cid %> = conn_<%=cid%>.prepareStatement(update_<%=cid%>);
			<%
			}
		} else if (("UPDATE_OR_INSERT").equals(dataAction)) {
			%>
			String update_<%=cid%> = "UPDATE <%=manager.getLProtectedChar()%>" + tableName_<%=cid%> + "<%=manager.getRProtectedChar()%> SET <%=updateSetStmt.toString()%> WHERE <%=updateWhereStmt.toString()%>";
			String insert_<%=cid%> = "INSERT INTO <%=manager.getLProtectedChar()%>" + tableName_<%=cid%> + "<%=manager.getRProtectedChar()%> (<%=insertColName.toString()%>) VALUES (<%=insertValueStmt.toString()%>)";
			<%@ include file="../../_hintUpdate.javajet" %>
			<%@ include file="../../_hintInsert.javajet" %>
			<%if(useStatement){%>
				java.sql.Statement pstmtUpdate_<%=cid %> = conn_<%=cid%>.createStatement();
				java.sql.Statement pstmtInsert_<%=cid %> = conn_<%=cid%>.createStatement();
			<%}else{%>
				java.sql.PreparedStatement pstmtUpdate_<%=cid %> = conn_<%=cid%>.prepareStatement(update_<%=cid%>);
				java.sql.PreparedStatement pstmtInsert_<%=cid %> = conn_<%=cid%>.prepareStatement(insert_<%=cid%>);
			<%
			}
		} else if (("DELETE").equals(dataAction)) {
			%>
			String delete_<%=cid%> = "DELETE FROM <%=manager.getLProtectedChar()%>" + tableName_<%=cid%> + "<%=manager.getRProtectedChar()%> WHERE <%=deleteWhereStmt.toString()%>";
			<%@ include file="../../_hintDelete.javajet" %>
			<%if(useStatement){%>
				java.sql.Statement pstmt_<%=cid %> = conn_<%=cid%>.createStatement();
			<%}else{%>
				java.sql.PreparedStatement pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(delete_<%=cid%>);
			<%}
		}
		dbOutputBeginUtil.prepareDataActionMore(node,manager,insertColName,insertValueStmt,updateSetStmt,updateWhereStmt);
		if(useStatement || isEnableDebug) {
			%>
			StringBuffer query_<%=cid%> = null;
			<%@ include file="../../DB/Output/splitSQLForAllDBInBegin.javajet" %>
			<%
		}
	}
	dbOutputBeginUtil.end(node);
}
if(isDynamic) {
%>
	java.sql.PreparedStatement pstmt_<%=cid %> =null;
	java.sql.PreparedStatement pstmtInsert_<%=cid %> =null;
	java.sql.PreparedStatement pstmtUpdate_<%=cid %> =null;
	<%if(isEnableDebug) {%>
		StringBuffer query_<%=cid%> = null;
		<%@ include file="../../DB/Output/splitSQLForAllDBInDynamicBegin.javajet" %>
<%
	}
}
%>

