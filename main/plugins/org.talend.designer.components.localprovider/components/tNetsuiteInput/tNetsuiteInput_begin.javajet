<%@jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn 
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
		java.util.List
    	java.util.Map
    	java.util.HashMap
    	java.lang.Character
    	java.util.Calendar
		java.util.Arrays
	"
%>

<% 
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();	
%>

globalMap.put("<%=cid%>_NETSUITE_ERROR", null);
int nb_line_<%=cid%> = 0;
boolean continue_<%=cid%> = true;

<%
Map<String, String> typeMap = new HashMap<String, String>();
typeMap.put("Account", "com.netsuite.webservices.lists.accounting_2014_2.Account");
typeMap.put("AccountingPeriod", "com.netsuite.webservices.lists.accounting_2014_2.AccountingPeriod");
typeMap.put("AssemblyBuild", "com.netsuite.webservices.transactions.inventory_2014_2.AssemblyBuild");
typeMap.put("AssemblyItem", "com.netsuite.webservices.lists.accounting_2014_2.AssemblyItem");
typeMap.put("AssemblyUnbuild", "com.netsuite.webservices.transactions.inventory_2014_2.AssemblyUnbuild");
typeMap.put("Bin", "com.netsuite.webservices.lists.accounting_2014_2.Bin");
typeMap.put("Budget", "com.netsuite.webservices.transactions.financial_2014_2.Budget");
typeMap.put("CalendarEvent", "com.netsuite.webservices.activities.scheduling_2014_2.CalendarEvent");
typeMap.put("Campaign", "com.netsuite.webservices.lists.marketing_2014_2.Campaign");
typeMap.put("CashRefund", "com.netsuite.webservices.transactions.customers_2014_2.CashRefund");
typeMap.put("CashSale", "com.netsuite.webservices.transactions.sales_2014_2.CashSale");
typeMap.put("Check", "com.netsuite.webservices.transactions.bank_2014_2.Check");
typeMap.put("Classification", "com.netsuite.webservices.lists.accounting_2014_2.Classification");
typeMap.put("ContactCategory", "com.netsuite.webservices.lists.accounting_2014_2.ContactCategory");
typeMap.put("Contact", "com.netsuite.webservices.lists.relationships_2014_2.Contact");
typeMap.put("ContactRole", "com.netsuite.webservices.lists.accounting_2014_2.ContactRole");
typeMap.put("CreditMemo", "com.netsuite.webservices.transactions.customers_2014_2.CreditMemo");
typeMap.put("Customer", "com.netsuite.webservices.lists.relationships_2014_2.Customer");
typeMap.put("CustomerCategory", "com.netsuite.webservices.lists.accounting_2014_2.CustomerCategory");
typeMap.put("CustomerDeposit", "com.netsuite.webservices.transactions.customers_2014_2.CustomerDeposit");
typeMap.put("CustomerPayment", "com.netsuite.webservices.transactions.customers_2014_2.CustomerPayment");
typeMap.put("CustomerRefund", "com.netsuite.webservices.transactions.customers_2014_2.CustomerRefund");
typeMap.put("CustomerStatus", "com.netsuite.webservices.lists.relationships_2014_2.CustomerStatus");
typeMap.put("CustomList", "com.netsuite.webservices.setup.customization_2014_2.CustomList");
typeMap.put("CustomRecord", "com.netsuite.webservices.setup.customization_2014_2.CustomRecord");
typeMap.put("Department", "com.netsuite.webservices.lists.accounting_2014_2.Department");
typeMap.put("DepositApplication", "com.netsuite.webservices.transactions.customers_2014_2.DepositApplication");
typeMap.put("DescriptionItem", "com.netsuite.webservices.lists.accounting_2014_2.DescriptionItem");
typeMap.put("DiscountItem", "com.netsuite.webservices.lists.accounting_2014_2.DiscountItem");
typeMap.put("DownloadItem", "com.netsuite.webservices.lists.accounting_2014_2.DownloadItem");
typeMap.put("Employee", "com.netsuite.webservices.lists.employees_2014_2.Employee");
typeMap.put("EntityGroup", "com.netsuite.webservices.lists.relationships_2014_2.EntityGroup");
typeMap.put("Estimate", "com.netsuite.webservices.transactions.sales_2014_2.Estimate");
typeMap.put("ExpenseCategory", "com.netsuite.webservices.lists.accounting_2014_2.ExpenseCategory");
typeMap.put("ExpenseReport", "com.netsuite.webservices.transactions.employees_2014_2.ExpenseReport");
typeMap.put("File", "com.netsuite.webservices.documents.filecabinet_2014_2.File");
typeMap.put("Folder", "com.netsuite.webservices.documents.filecabinet_2014_2.Folder");
typeMap.put("GiftCertificate", "com.netsuite.webservices.lists.accounting_2014_2.GiftCertificate");
typeMap.put("GiftCertificateItem", "com.netsuite.webservices.lists.accounting_2014_2.GiftCertificateItem");
typeMap.put("InventoryAdjustment", "com.netsuite.webservices.transactions.inventory_2014_2.InventoryAdjustment");
typeMap.put("InventoryItem", "com.netsuite.webservices.lists.accounting_2014_2.InventoryItem");
typeMap.put("Invoice", "com.netsuite.webservices.transactions.sales_2014_2.Invoice");
typeMap.put("Issue", "com.netsuite.webservices.lists.support_2014_2.Issue");
typeMap.put("ItemFulfillment", "com.netsuite.webservices.transactions.sales_2014_2.ItemFulfillment");
typeMap.put("ItemReceipt", "com.netsuite.webservices.transactions.purchases_2014_2.ItemReceipt");
typeMap.put("Job", "com.netsuite.webservices.lists.relationships_2014_2.Job");
typeMap.put("JobStatus", "com.netsuite.webservices.lists.relationships_2014_2.JobStatus");
typeMap.put("JobType", "com.netsuite.webservices.lists.relationships_2014_2.JobType");
typeMap.put("JournalEntry", "com.netsuite.webservices.transactions.general_2014_2.JournalEntry");
typeMap.put("KitItem", "com.netsuite.webservices.lists.accounting_2014_2.KitItem");
typeMap.put("Location", "com.netsuite.webservices.lists.accounting_2014_2.Location");
typeMap.put("MarkupItem", "com.netsuite.webservices.lists.accounting_2014_2.MarkupItem");
typeMap.put("Message", "com.netsuite.webservices.general.communication_2014_2.Message");
typeMap.put("Note", "com.netsuite.webservices.general.communication_2014_2.Note");
typeMap.put("NoteType", "com.netsuite.webservices.lists.accounting_2014_2.NoteType");
typeMap.put("Opportunity", "com.netsuite.webservices.transactions.sales_2014_2.Opportunity");
typeMap.put("Partner", "com.netsuite.webservices.lists.relationships_2014_2.Partner");
typeMap.put("PartnerCategory", "com.netsuite.webservices.lists.accounting_2014_2.PartnerCategory");
typeMap.put("PaymentItem", "com.netsuite.webservices.lists.accounting_2014_2.PaymentItem");
typeMap.put("PaymentMethod", "com.netsuite.webservices.lists.accounting_2014_2.PaymentMethod");
typeMap.put("PhoneCall", "com.netsuite.webservices.activities.scheduling_2014_2.PhoneCall");
typeMap.put("PriceLevel", "com.netsuite.webservices.lists.accounting_2014_2.PriceLevel");
typeMap.put("ProjectTask", "com.netsuite.webservices.activities.scheduling_2014_2.ProjectTask");
typeMap.put("PricingGroup", "com.netsuite.webservices.lists.accounting_2014_2.PricingGroup");
typeMap.put("PurchaseOrder", "com.netsuite.webservices.transactions.purchases_2014_2.PurchaseOrder");
typeMap.put("PromotionCode", "com.netsuite.webservices.lists.marketing_2014_2.PromotionCode");
typeMap.put("ReturnAuthorization", "com.netsuite.webservices.transactions.customers_2014_2.ReturnAuthorization");
typeMap.put("SalesRole", "com.netsuite.webservices.lists.accounting_2014_2.SalesRole");
typeMap.put("SalesOrder", "com.netsuite.webservices.transactions.sales_2014_2.SalesOrder");
typeMap.put("SiteCategory", "com.netsuite.webservices.lists.website_2014_2.SiteCategory");
typeMap.put("SubtotalItem", "com.netsuite.webservices.lists.accounting_2014_2.SubtotalItem");
typeMap.put("Subsidiary", "com.netsuite.webservices.lists.accounting_2014_2.Subsidiary");
typeMap.put("SupportCase", "com.netsuite.webservices.lists.support_2014_2.SupportCase");
typeMap.put("Solution", "com.netsuite.webservices.lists.support_2014_2.Solution");
typeMap.put("Task", "com.netsuite.webservices.activities.scheduling_2014_2.Task");
typeMap.put("Term", "com.netsuite.webservices.lists.accounting_2014_2.Term");
typeMap.put("TimeBill", "com.netsuite.webservices.transactions.employees_2014_2.TimeBill");
typeMap.put("TransferOrder", "com.netsuite.webservices.transactions.inventory_2014_2.TransferOrder");
typeMap.put("Topic", "com.netsuite.webservices.lists.support_2014_2.Topic");
typeMap.put("UnitsType", "com.netsuite.webservices.lists.accounting_2014_2.UnitsType");
typeMap.put("Vendor", "com.netsuite.webservices.lists.relationships_2014_2.Vendor");
typeMap.put("VendorPayment", "com.netsuite.webservices.transactions.purchases_2014_2.VendorPayment");
typeMap.put("VendorCategory", "com.netsuite.webservices.lists.accounting_2014_2.VendorCategory");
typeMap.put("VendorBill", "com.netsuite.webservices.transactions.purchases_2014_2.VendorBill");
typeMap.put("WinLossReason", "com.netsuite.webservices.lists.accounting_2014_2.WinLossReason");
        
List<IMetadataTable> metadatas = node.getMetadataList(); // This is the Schema
if ((metadatas != null) && (metadatas.size() > 0)) {
	IMetadataTable metadata = metadatas.get(0);
		
	if (metadata != null) {
		List<IMetadataColumn> columnList = metadata.getListColumns();
		
		// Get the component link with an other component (FLOW_MAIN, FLOW_MERGE ...)
		// See XML file to setup hoe the component should be linked to other component
		List<? extends IConnection> outgoingConns = node.getOutgoingSortedConnections();
		
		// Get the two search criteria tables
		List<Map<String, String>> bodyField = (List<Map<String, String>>) ElementParameterParser.getObjectValue(node, "__CONDITIONS__");
		List<Map<String, String>> customField = (List<Map<String, String>>) ElementParameterParser.getObjectValue(node, "__CUSTOM_SEARCH__");
		
		if (columnList.size() > 0 && outgoingConns != null && outgoingConns.size() > 0) {
			
			// Get the login credential for NetSuite
			String endpoint = ElementParameterParser.getValue(node, "__ENDPOINT__");
			String username = ElementParameterParser.getValue(node, "__USER__");
			String password = ElementParameterParser.getValue(node, "__PASS__");
			String role = ElementParameterParser.getValue(node, "__ROLE__");
			String account = ElementParameterParser.getValue(node, "__ACCOUNT__");
			
			// Search configurations
			String searchEntityKey = ElementParameterParser.getValue(node, "__MODULENAME__").trim();
			String searchEntity = typeMap.get(searchEntityKey);
			
			boolean bodySearch = Boolean.parseBoolean(ElementParameterParser.getValue(node, "__ITEMS_LIST_CHKB__"));
			boolean regularSearch = Boolean.parseBoolean(ElementParameterParser.getValue(node, "__SHOW_CONDITIONS__"));
%>
			
			org.talend.netsuite.NetsuiteManagement_CXF nsMgr_<%=cid%> = new org.talend.netsuite.NetsuiteManagement_CXF(<%=username%>, <%=password%>, <%=role%>, <%=account%>); 

<%
			IConnection outgoingConn = outgoingConns.get(0);
			if(outgoingConn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
%> 

			try {
			
<%
				//if (searchEntity.endsWith("CustomRecord")) {
					//searchEntity = ElementParameterParser.getValue(node, "__CUSTOMRECORDID__").trim();	
				//}
				
				boolean isSearchId = false;
				if (bodyField != null) {
				
					// To be modified to add saved search support
					// nsMgr_cid.initialize("searchEntity", "savedSearchID");
					// records_cid = nsMgr_cid.submitRequest(true);
%>

					java.util.List<com.netsuite.webservices.platform.core_2014_2.Record> records_<%=cid %> = null;
					nsMgr_<%=cid%>.initialize("<%=searchEntity%>", null); 

<%
					//if (customField != null) {
						
						// Construct a search for body fields
						if(regularSearch) {
							int index = 0;
							for (Map<String, String> keyColumn : bodyField) {
%> 

								String[] rValues_<%=cid %>_<%=index %> = new String[] { <%=keyColumn.get("RVALUE")%> };
								java.util.ArrayList<String> searchCriteria_<%=cid %>_<%=index %> = new java.util.ArrayList<String>();
								searchCriteria_<%=cid %>_<%=index %>.addAll(java.util.Arrays.asList(rValues_<%=cid %>_<%=index %>));
								nsMgr_<%=cid%>.search("<%=searchEntity%>", "<%=keyColumn.get("INPUT_COLUMN")%>", "<%=keyColumn.get("OPERATOR")%>", searchCriteria_<%=cid %>_<%=index %>, "null"); 

<%
								index++;
							}
						}
						
						// We execute the search.
%> 

						records_<%=cid%> = nsMgr_<%=cid%>.submitRequest(true);

						// Get the value of a custom field.
						Object customFieldValue_<%=cid%> = null;
						while (continue_<%=cid%>) { // Block closed in END file
						
							if(records_<%=cid%> != null){
    							for (int i_<%=cid%> = 0; i_<%=cid%> < records_<%=cid%>.size(); i_<%=cid%>++) { // Block closed in END file
    								nb_line_<%=cid%>++;
    								<%=searchEntity%> record_<%=cid%> = (<%=searchEntity%>) records_<%=cid%>.get(i_<%=cid%>);

<%
									// Block Start [1]
    								for (int i = 0; i < columnList.size(); i++) {
    									
    									IMetadataColumn column = columnList.get(i);
    									String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
    									JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
    									
    									// We detect if the first caracter is lowerCase in order to detect if we want a custom field or a body field
    									char first = column.getLabel().charAt(0);
    									
    									// If the first caracter is a UpperCase letter
    									if (!Character.isLowerCase(first)) {
%> 

<%
											if (javaType == JavaTypesManager.BOOLEAN) { 
%> 

												if (record_<%=cid%>.is<%=column.getLabel()%>() != null) { 
													
<%
											} else  {
%> 

												if (record_<%=cid%>.get<%=column.getLabel()%>() != null) { 

<%
											}
%> 

<%
											if (javaType == JavaTypesManager.DATE) { 
%> 

												<%=outgoingConn.getName()%>.<%=column.getLabel()%> = record_<%=cid%>.get<%=column.getLabel()%>().toGregorianCalendar().getTime(); 
													
<%
											} else if(javaType == JavaTypesManager.BOOLEAN) {
%> 

												<%=outgoingConn.getName()%>.<%=column.getLabel()%> = record_<%=cid%>.is<%=column.getLabel()%>(); 

<%
											} else {
%> 

												<%=outgoingConn.getName()%>.<%=column.getLabel()%> = record_<%=cid%>.get<%=column.getLabel()%>();

<%
											}
%>
    										} else {
    											<%=outgoingConn.getName()%>.<%=column.getLabel()%> = <%=JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate)%>;
    										}

<%
    									} else {
    										// We consider de following as a customfield
%> 

    										customFieldValue_<%=cid %> = nsMgr_<%=cid%>.getCustomFieldValue(record_<%=cid%>.getCustomFieldList(), "<%=column.getLabel()%>"); 
    										if (customFieldValue_<%=cid %> != null) { 
										
<%
												if (javaType == JavaTypesManager.DATE) {
%>

													<%=outgoingConn.getName()%>.<%=column.getLabel()%> = ((Calendar) customFieldValue_<%=cid %>).toGregorianCalendar().getTime(); 

<%
												} else if (javaType == JavaTypesManager.OBJECT) {
%> 

													<%=outgoingConn.getName()%>.<%=column.getLabel()%> = customFieldValue_<%=cid %>; 
												
<%
												} else {
%> 

													<%=outgoingConn.getName()%>.<%=column.getLabel()%> = (<%=javaType.getNullableClass().getSimpleName()%>)  customFieldValue_<%=cid %>; 

<%
												}
%> 

    										} else { 
    											<%=outgoingConn.getName()%>.<%=column.getLabel()%> = <%=JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate)%>; 
    										} 
<%
										}
									}
					//}
				}
			}
		}
	}
}
%>