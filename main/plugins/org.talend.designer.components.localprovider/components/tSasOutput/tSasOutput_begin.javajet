<%@ jet
imports="
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.INode
		org.talend.core.model.process.ElementParameterParser
		org.talend.core.model.metadata.IMetadataTable
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.MappingTypeRetriever
		org.talend.core.model.metadata.MetadataTalendType
		org.talend.core.model.process.IConnection
		java.util.List
		java.util.ArrayList
		java.util.Map
		java.util.HashMap
"
skeleton="../templates/db_output_bulk.skeleton"
%>
<%@ include file="../templates/DB/Output/HelpClass.javajet"%>
<%
	class DBOutputBeginUtil extends DefaultDBOutputUtil{
		public void beforeComponentProcess(INode node){
			super.beforeComponentProcess(node);
			cid = node.getUniqueName();
			dbmsId = "JDBC";
			String clearTable = ElementParameterParser.getValue(node, "__CLEAR_TABLE__");
			if(("true").equals(clearTable)) {
				tableAction = "CLEAR";
			}
		}
		public String getDirverClassName(INode node){
			String driverJar = ElementParameterParser.getValue(node, "__DRIVER_JAR__");
			String driverClass = ElementParameterParser.getValue(node, "__DRIVER_CLASS__");
			return driverClass;
		}
		public void classForName(INode node){
		%>
			String driverClass_<%=cid%> = <%=this.getDirverClassName(node) %>;
			java.lang.Class.forName(driverClass_<%=cid%>);
		<%
		}
		public void setURL(INode node) {
			String jdbcUrl = ElementParameterParser.getValue(node, "__URL__");
		%>
			String url_<%=cid %> = <%=jdbcUrl %>;
		<%
		}
		public void createConnection(INode node, boolean needUserAndPassword) {
			defineConnectionParameter(node);
	 		if(("true").equals(useExistingConn)) {
				String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
				String conn = "conn_" + connection;
				%>
				conn_<%=cid%> = (java.sql.Connection)globalMap.get("<%=conn%>");
				<%	
				this.afterUseExistConnection(node);
			} else {// "Not use exist connection"
				this.classForName(node);
				this.setURL(node);
				log4jCodeGenerateUtil.debugConnectionParams(node);
				%>
				String dbUser_<%=cid %> = <%=dbuser%>;
        
        		<%
        		String passwordFieldName = "__PASS__";
        		%>
        		
        		<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>
        	   	
                String dbPwd_<%=cid %> = decryptedPassword_<%=cid%>;
        
				<%
				log4jCodeGenerateUtil.connect_begin();
				boolean enableLibrefs = "true".equals(ElementParameterParser.getValue(node, "__ENABLE_LIBREFS__"));
				List<Map<String, String>> sasProps = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node,"__JDBC_PARAMETERS__");
				%>
				java.util.Properties property_<%=cid %> = new java.util.Properties();
				
				<%if(enableLibrefs){%>
					String librefs_<%=cid%> = <%=dbname%>;
					property_<%=cid%>.setProperty("librefs", librefs_<%=cid%>);
				<%}%>
				property_<%=cid%>.setProperty("username", dbUser_<%=cid %>);
				property_<%=cid%>.setProperty("password", dbPwd_<%=cid %>);
				<%
				if(sasProps!=null && sasProps.size()>0){
					for(int i = 0; i < sasProps.size(); i++){
						Map<String, String> sasProp = sasProps.get(i);
						%>
						property_<%=cid%>.setProperty(String.valueOf(<%=sasProp.get("KEY")%>), String.valueOf(<%=sasProp.get("VALUE")%>));
					<%
					}
				}
				%>
				conn_<%=cid%> = java.sql.DriverManager.getConnection(url_<%=cid %>, property_<%=cid %>);
				<%
				log4jCodeGenerateUtil.connect_end();
				%>
				resourceMap.put("conn_<%=cid%>", conn_<%=cid%>);
			<%
			}//end "Not use exist connection"
		}
	}
	dbOutputBeginUtil = new DBOutputBeginUtil();
%>
<%@ include file="../templates/DB/Output/AbstractDBOutputBegin.javajet"%>
