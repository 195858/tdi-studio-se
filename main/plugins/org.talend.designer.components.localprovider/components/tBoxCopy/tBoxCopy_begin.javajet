<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.IConnectionCategory 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.core.model.metadata.types.JavaTypesManager
    org.talend.core.model.metadata.types.JavaType
    java.util.List
" 
%>
	<%@ include file="../templates/Log4j/Log4jFileUtil.javajet"%>
<%
		CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
		INode node = (INode)codeGenArgument.getArgument();
		String cid = node.getUniqueName();
		
		String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");
		String accessToken = ElementParameterParser.getValue(node, "__ACCESS_TOKEN__");
		String refreshToken = ElementParameterParser.getValue(node, "__REFRESH_TOKEN__");
		
		String clientId = ElementParameterParser.getValue(node, "__CLIENT_ID__");
		String clientSecret = ElementParameterParser.getValue(node, "__CLIENT_SECRET__");
		
		String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
	    String connectionKey = "\"conn_" + connection+"\"";
		
		String fileName = ElementParameterParser.getValue(node, "__FILE_NAME__");
		boolean moveDirectory = "true".equals(ElementParameterParser.getValue(node, "__MOVE_DIRECTORY__"));
		String sourceDirectory = ElementParameterParser.getValue(node, "__SOURCE_DIRECTORY__");
		String destinationDirectory = ElementParameterParser.getValue(node, "__DESTINATION_DIRECTORY__");
		boolean rename = "true".equals(ElementParameterParser.getValue(node, "__RENAME__"));
		String destinationFileName = ElementParameterParser.getValue(node, "__DESTINATION_FILE_NAME__");
		boolean removeSource = "true".equals(ElementParameterParser.getValue(node, "__REMOVE_SOURCE_FILE__"));
		
		final boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
				log4jFileUtil.componentStartInfo(node);
				
		List< ? extends IConnection> outputConnections = node.getOutgoingSortedConnections();
		
        String dataOutputConnection = null;	
	    for(IConnection conn : outputConnections) {
	        if(conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
	        	dataOutputConnection = conn.getName();
	        	break;
	        } // if(conn) end
	    } // for(conns) end
%>
<%
if(!"true".equals(useExistingConn)){
	String useProxy = ElementParameterParser.getValue(node,"__USE_PROXY__");
	String proxyHost = ElementParameterParser.getValue(node,"__PROXY_HOST__");
	String proxyPort = ElementParameterParser.getValue(node,"__PROXY_PORT__");
%>
	com.box.boxjavalibv2.BoxRESTClient <%=cid%>_httpClient = new com.box.boxjavalibv2.BoxRESTClient();
<%
	if("true".equals(useProxy)){
%>   
		<%=cid%>_httpClient.setConnectionTimeOut(3000);
		org.apache.http.HttpHost <%=cid%>_proxy = new org.apache.http.HttpHost(<%=proxyHost%>, <%=proxyPort%>, "http");
		org.apache.http.client.HttpClient <%=cid%>_cl = <%=cid%>_httpClient.getRawHttpClient();
		<%=cid%>_cl.getParams().setParameter(org.apache.http.conn.params.ConnRoutePNames.DEFAULT_PROXY, <%=cid%>_proxy);
<%
	}else{
%>
<%
	}
%>
	com.box.boxjavalibv2.BoxClient <%=cid%>_client = null;
	if(globalMap.get("copy_<%=cid%>") == null)
	{
		<%=cid%>_client = new com.box.boxjavalibv2.BoxClient(<%=clientId%>, <%=clientSecret%>, null, null, <%=cid%>_httpClient, new com.box.boxjavalibv2.BoxConfigBuilder().build());
	
		if((<%=accessToken%> == null || "".equals(<%=accessToken%>.trim())) && (<%=refreshToken%> == null || "".equals(<%=refreshToken%>.trim()))) {
			throw new Exception("One of Access token or Refresh token should be provided");
		} else {
			java.util.Map<String, Object> <%=cid%>_map = new java.util.HashMap<String, Object>();
		<%if (accessToken != null && !accessToken.isEmpty()  && !accessToken.trim().matches("\"?\"?") && refreshToken != null && !refreshToken.isEmpty() && !refreshToken.trim().matches("\"?\"?")) { %>
			<%=cid%>_map.put(com.box.boxjavalibv2.dao.BoxOAuthToken.FIELD_ACCESS_TOKEN, <%=accessToken%>);
			<%=cid%>_map.put(com.box.boxjavalibv2.dao.BoxOAuthToken.FIELD_REFRESH_TOKEN, <%=refreshToken%>);
		    <%=cid%>_client.getOAuthDataController().setAutoRefreshOAuth(true);
		<% } else if (accessToken != null && !accessToken.isEmpty() && !accessToken.trim().matches("\"?\"?")) { %>
		    <%=cid%>_map.put(com.box.boxjavalibv2.dao.BoxOAuthToken.FIELD_ACCESS_TOKEN, <%=accessToken%>);
		<% } else if (refreshToken != null && !"".equals(refreshToken.trim()) && !refreshToken.trim().matches("\"?\"?")) { %>
		    <%=cid%>_map.put(com.box.boxjavalibv2.dao.BoxOAuthToken.FIELD_REFRESH_TOKEN, <%=refreshToken%>);
		    <%=cid%>_client.getOAuthDataController().setAutoRefreshOAuth(true);
		<% } %> 
		    <%=cid%>_client.authenticate(new com.box.boxjavalibv2.dao.BoxOAuthToken(<%=cid%>_map));
		    globalMap.put("copy_<%=cid%>", <%=cid%>_client);
		}
	} else {
		<%=cid%>_client = (com.box.boxjavalibv2.BoxClient)globalMap.get("copy_<%=cid%>");
	}
<%
	} else {
%>
	com.box.boxjavalibv2.BoxClient <%=cid%>_client = (com.box.boxjavalibv2.BoxClient)globalMap.get(<%=connectionKey%>);
<%
}
%>