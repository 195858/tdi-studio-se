<%@ jet 
	imports="
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.INode
		org.talend.core.model.process.ElementParameterParser  
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
        org.talend.core.model.metadata.MappingTypeRetriever		
        org.talend.core.model.metadata.MetadataTalendType		
		java.util.List
		java.util.ArrayList
		java.util.Map
		java.util.HashMap
		java.util.LinkedList
	"
	skeleton="../templates/db_output_bulk.skeleton"
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();	
	String cid = node.getUniqueName();	
    String dbmsId = "MSODBC";
    
    List<Map<String, String>> addCols =
            (List<Map<String,String>>)ElementParameterParser.getObjectValue(
                node,"__ADD_COLS__" );

    boolean useFieldOptions = ("true").equals(ElementParameterParser.getValue(node, "__USE_FIELD_OPTIONS__"));
    
    List<Map<String, String>> fieldOptions = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__FIELD_OPTIONS__");    
    
    String dbname= ElementParameterParser.getValue(node, "__DBNAME__");
    
    String tableName = ElementParameterParser.getValue(node,"__TABLE__");
	
	String dataAction = ElementParameterParser.getValue(node,"__DATA_ACTION__");
	
	String tableAction = ElementParameterParser.getValue(node,"__CLEAR_TABLE__");
	
	String commitEvery = ElementParameterParser.getValue(node, "__COMMIT_EVERY__");
	
	boolean isEnableDebug = ("true").equals(ElementParameterParser.getValue(node,"__ENABLE_DEBUG_MODE__"));
	String assemblyName = ElementParameterParser.getValue(node,"__ASSEMBLY_NAME__");
    String className = ElementParameterParser.getValue(node,"__CLASS_NAME__");
%>

int nb_line_<%=cid%> = 0;
int nb_line_update_<%=cid%> = 0;
int nb_line_inserted_<%=cid%> = 0;
int nb_line_deleted_<%=cid%> = 0;
int nb_line_rejected_<%=cid%> = 0;

int deletedCount_<%=cid%> = 0;
int updatedCount_<%=cid%> = 0;
int insertedCount_<%=cid%> = 0;
int rejectedCount_<%=cid%> = 0;

boolean whetherReject_<%=cid%> = false;
<%
List<IMetadataColumn> columnList = getColumnList(node);
List<Column> stmtStructure = null;
if(columnList != null && columnList.size() > 0) {
    stmtStructure = getManager(dbmsId, cid).createColumnList(columnList, useFieldOptions, fieldOptions, addCols);
}
%>

<%
if(("UPDATE").equals(dataAction) || ("INSERT_OR_UPDATE").equals(dataAction) || ("UPDATE_OR_INSERT").equals(dataAction)) {
    int updateKeyCount = 0;
    if(stmtStructure != null) {
        for(Column column : stmtStructure) {
            if(column.isUpdateKey()) {
                updateKeyCount++;
            }
        }
        %>
        int updateKeyCount_<%=cid%> = <%=updateKeyCount%>;
        if(updateKeyCount_<%=cid%> < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
        <%
    }
} else if(("DELETE").equals(dataAction)) {
    int deleteKeyCount = 0;
    if(stmtStructure != null) {
        for(Column column : stmtStructure) {
            if(column.isDeleteKey()) {
                deleteKeyCount++;
            }
        }
        %>
        int deleteKeyCount_<%=cid%> = <%=deleteKeyCount%>;
        if(deleteKeyCount_<%=cid%> < 1) {
            throw new RuntimeException("For delete, Schema must have a key");
        }
        <%
    }
}
%> 

org.talend.net.Object conn_<%=cid%> = org.talend.net.Object.createInstance(<%=assemblyName%>,<%=className%>,new java.lang.Object[]{<%=dbname%>});
conn_<%=cid%>.invokeGeneric("Open");



<%
if(("true").equals(tableAction)) {
    %>
    org.talend.net.Object delCmd_<%=cid%> = org.talend.net.Object.createInstance(<%=assemblyName%>,
    	"System.Data.OleDb.OleDbCommand",new java.lang.Object[] {
    	"DELETE FROM "+<%=tableName%>,
    	conn_<%=cid%>
    	});
   	deletedCount_<%=cid%> = deletedCount_<%=cid%> + (Integer)delCmd_<%=cid%>.invokeGeneric("ExecuteNonQuery");
    
    <%	
}
%>
<%
if(columnList != null && columnList.size() > 0) {
    Map<String, StringBuilder> actionSQLMap = getManager(dbmsId, cid).createProcessSQL(stmtStructure);
    StringBuilder insertColName = actionSQLMap.get(INSERT_COLUMN_NAME);   
    StringBuilder insertValueStmt = actionSQLMap.get(INSERT_VALUE_STMT);    
    StringBuilder updateSetStmt = actionSQLMap.get(UPDATE_SET_STMT);    
    StringBuilder updateWhereStmt = actionSQLMap.get(UPDATE_WHERE_STMT);
    StringBuilder deleteWhereStmt = actionSQLMap.get(DELETE_WHERE_STMT);

	if(("INSERT").equals(dataAction)) {
	    %>
	    String insert_<%=cid%> = "INSERT INTO " + <%=tableName%> + " (<%=insertColName.toString()%>) VALUES (<%=insertValueStmt.toString()%>)";
	    org.talend.net.Object cmd_<%=cid%> = org.talend.net.Object.createInstance(<%=assemblyName%>,
    		"System.Data.OleDb.OleDbCommand",new java.lang.Object[] {
    		insert_<%=cid%>,
    		conn_<%=cid%>
    	});
	    <%
	} else if (("UPDATE").equals(dataAction)) {
	    %>
	    String update_<%=cid%> = "UPDATE " + <%=tableName%> + " SET <%=updateSetStmt.toString()%> WHERE <%=updateWhereStmt.toString()%>";
	    org.talend.net.Object cmd_<%=cid%> = org.talend.net.Object.createInstance(<%=assemblyName%>,
    		"System.Data.OleDb.OleDbCommand",new java.lang.Object[] {
    		update_<%=cid%>,
    		conn_<%=cid%>
    	});
	    <%		
	} else if (("INSERT_OR_UPDATE").equals(dataAction)) {
	    %>
	    
	    org.talend.net.Object cmd_<%=cid%> = org.talend.net.Object.createInstance(<%=assemblyName%>,
    		"System.Data.OleDb.OleDbCommand",new java.lang.Object[] {
    		"SELECT COUNT(1) FROM " + <%=tableName%> + " WHERE <%=updateWhereStmt.toString()%>",
    		conn_<%=cid%>
    	});
	    String insert_<%=cid%> = "INSERT INTO " + <%=tableName%> + " (<%=insertColName.toString()%>) VALUES (<%=insertValueStmt.toString()%>)";
	    org.talend.net.Object cmdInsert_<%=cid%> = org.talend.net.Object.createInstance(<%=assemblyName%>,
    		"System.Data.OleDb.OleDbCommand",new java.lang.Object[] {
    		insert_<%=cid%>,
    		conn_<%=cid%>
    	});
	    String update_<%=cid%> = "UPDATE " + <%=tableName%> + " SET <%=updateSetStmt.toString()%> WHERE <%=updateWhereStmt.toString()%>";
	    org.talend.net.Object cmdUpdate_<%=cid%> = org.talend.net.Object.createInstance(<%=assemblyName%>,
    		"System.Data.OleDb.OleDbCommand",new java.lang.Object[] {
    		update_<%=cid%>,
    		conn_<%=cid%>
    	});
	    <%
	} else if (("UPDATE_OR_INSERT").equals(dataAction)) {
	    %>
	    String update_<%=cid%> = "UPDATE " + <%=tableName%> + " SET <%=updateSetStmt.toString()%> WHERE <%=updateWhereStmt.toString()%>";
	    org.talend.net.Object cmdUpdate_<%=cid%> = org.talend.net.Object.createInstance(<%=assemblyName%>,
    		"System.Data.OleDb.OleDbCommand",new java.lang.Object[] {
    		update_<%=cid%>,
    		conn_<%=cid%>
    	});
	    String insert_<%=cid%> = "INSERT INTO " + <%=tableName%> + " (<%=insertColName.toString()%>) VALUES (<%=insertValueStmt.toString()%>)";
	    org.talend.net.Object cmdInsert_<%=cid%> = org.talend.net.Object.createInstance(<%=assemblyName%>,
    		"System.Data.OleDb.OleDbCommand",new java.lang.Object[] {
    		insert_<%=cid%>,
    		conn_<%=cid%>
    	});		
	    <%			
	} else if (("DELETE").equals(dataAction)) {
	    %>
	    String delete_<%=cid%> = "DELETE  FROM " + <%=tableName%> + " WHERE <%=deleteWhereStmt.toString()%>";
	    org.talend.net.Object cmd_<%=cid%> = org.talend.net.Object.createInstance(<%=assemblyName%>,
    		"System.Data.OleDb.OleDbCommand",new java.lang.Object[] {
    		delete_<%=cid%>,
    		conn_<%=cid%>
    	});
	    <%		
	}
    if(isEnableDebug) {
        %>
        StringBuffer query_<%=cid%> = null;
       	<%@ include file="../templates/DB/Output/splitSQLForAllDBInBegin.javajet" %>
        <%
    }
	if(!("").equals(commitEvery) && !("0").equals(commitEvery)) {
	    %>
	    int commitEvery_<%=cid%> = <%=commitEvery%>;
	    int commitCounter_<%=cid%> = 0;
	    <%
	}	
}
%>