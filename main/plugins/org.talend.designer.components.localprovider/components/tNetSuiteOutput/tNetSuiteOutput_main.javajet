<%@ jet 
	imports="
    	org.talend.core.model.process.INode 
    	org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
		java.util.Map
    	java.util.HashMap
		java.util.List
		java.util.ArrayList
	"
%>

<%
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();
    
    boolean dieonerror = ElementParameterParser.getValue(node,"__CEASE_FOR_ERROR__").equals("true");
    String action = ElementParameterParser.getValue(node, "__ACTION__");
    String modulenameKey = ElementParameterParser.getValue(node, "__MODULENAME__");
    
    Map<String, String> typeMap = new HashMap<String, String>();
    typeMap.put("Account", "com.netsuite.webservices.lists.accounting_2014_2.Account");
    typeMap.put("AccountingPeriod", "com.netsuite.webservices.lists.accounting_2014_2.AccountingPeriod");
    typeMap.put("AssemblyBuild", "com.netsuite.webservices.transactions.inventory_2014_2.AssemblyBuild");
    typeMap.put("AssemblyItem", "com.netsuite.webservices.lists.accounting_2014_2.AssemblyItem");
    typeMap.put("AssemblyUnbuild", "com.netsuite.webservices.transactions.inventory_2014_2.AssemblyUnbuild");
    typeMap.put("Bin", "com.netsuite.webservices.lists.accounting_2014_2.Bin");
    typeMap.put("Budget", "com.netsuite.webservices.transactions.financial_2014_2.Budget");
    typeMap.put("CalendarEvent", "com.netsuite.webservices.activities.scheduling_2014_2.CalendarEvent");
    typeMap.put("Campaign", "com.netsuite.webservices.lists.marketing_2014_2.Campaign");
    typeMap.put("CashRefund", "com.netsuite.webservices.transactions.customers_2014_2.CashRefund");
    typeMap.put("CashSale", "com.netsuite.webservices.transactions.sales_2014_2.CashSale");
    typeMap.put("Check", "com.netsuite.webservices.transactions.bank_2014_2.Check");
    typeMap.put("Classification", "com.netsuite.webservices.lists.accounting_2014_2.Classification");
    typeMap.put("ContactCategory", "com.netsuite.webservices.lists.accounting_2014_2.ContactCategory");
    typeMap.put("Contact", "com.netsuite.webservices.lists.relationships_2014_2.Contact");
    typeMap.put("ContactRole", "com.netsuite.webservices.lists.accounting_2014_2.ContactRole");
    typeMap.put("CreditMemo", "com.netsuite.webservices.transactions.customers_2014_2.CreditMemo");
    typeMap.put("Customer", "com.netsuite.webservices.lists.relationships_2014_2.Customer");
    typeMap.put("CustomerCategory", "com.netsuite.webservices.lists.accounting_2014_2.CustomerCategory");
    typeMap.put("CustomerDeposit", "com.netsuite.webservices.transactions.customers_2014_2.CustomerDeposit");
    typeMap.put("CustomerPayment", "com.netsuite.webservices.transactions.customers_2014_2.CustomerPayment");
    typeMap.put("CustomerRefund", "com.netsuite.webservices.transactions.customers_2014_2.CustomerRefund");
    typeMap.put("CustomerStatus", "com.netsuite.webservices.lists.relationships_2014_2.CustomerStatus");
    typeMap.put("CustomList", "com.netsuite.webservices.setup.customization_2014_2.CustomList");
    typeMap.put("CustomRecord", "com.netsuite.webservices.setup.customization_2014_2.CustomRecord");
    typeMap.put("Department", "com.netsuite.webservices.lists.accounting_2014_2.Department");
    typeMap.put("DepositApplication", "com.netsuite.webservices.transactions.customers_2014_2.DepositApplication");
    typeMap.put("DescriptionItem", "com.netsuite.webservices.lists.accounting_2014_2.DescriptionItem");
    typeMap.put("DiscountItem", "com.netsuite.webservices.lists.accounting_2014_2.DiscountItem");
    typeMap.put("DownloadItem", "com.netsuite.webservices.lists.accounting_2014_2.DownloadItem");
    typeMap.put("Employee", "com.netsuite.webservices.lists.employees_2014_2.Employee");
    typeMap.put("EntityGroup", "com.netsuite.webservices.lists.relationships_2014_2.EntityGroup");
    typeMap.put("Estimate", "com.netsuite.webservices.transactions.sales_2014_2.Estimate");
    typeMap.put("ExpenseCategory", "com.netsuite.webservices.lists.accounting_2014_2.ExpenseCategory");
    typeMap.put("ExpenseReport", "com.netsuite.webservices.transactions.employees_2014_2.ExpenseReport");
    typeMap.put("File", "com.netsuite.webservices.documents.filecabinet_2014_2.File");
    typeMap.put("Folder", "com.netsuite.webservices.documents.filecabinet_2014_2.Folder");
    typeMap.put("GiftCertificate", "com.netsuite.webservices.lists.accounting_2014_2.GiftCertificate");
    typeMap.put("GiftCertificateItem", "com.netsuite.webservices.lists.accounting_2014_2.GiftCertificateItem");
    typeMap.put("InventoryAdjustment", "com.netsuite.webservices.transactions.inventory_2014_2.InventoryAdjustment");
    typeMap.put("InventoryItem", "com.netsuite.webservices.lists.accounting_2014_2.InventoryItem");
    typeMap.put("Invoice", "com.netsuite.webservices.transactions.sales_2014_2.Invoice");
    typeMap.put("Issue", "com.netsuite.webservices.lists.support_2014_2.Issue");
    typeMap.put("ItemFulfillment", "com.netsuite.webservices.transactions.sales_2014_2.ItemFulfillment");
    typeMap.put("ItemReceipt", "com.netsuite.webservices.transactions.purchases_2014_2.ItemReceipt");
    typeMap.put("Job", "com.netsuite.webservices.lists.relationships_2014_2.Job");
    typeMap.put("JobStatus", "com.netsuite.webservices.lists.relationships_2014_2.JobStatus");
    typeMap.put("JobType", "com.netsuite.webservices.lists.relationships_2014_2.JobType");
    typeMap.put("JournalEntry", "com.netsuite.webservices.transactions.general_2014_2.JournalEntry");
    typeMap.put("KitItem", "com.netsuite.webservices.lists.accounting_2014_2.KitItem");
    typeMap.put("Location", "com.netsuite.webservices.lists.accounting_2014_2.Location");
    typeMap.put("MarkupItem", "com.netsuite.webservices.lists.accounting_2014_2.MarkupItem");
    typeMap.put("Message", "com.netsuite.webservices.general.communication_2014_2.Message");
    typeMap.put("Note", "com.netsuite.webservices.general.communication_2014_2.Note");
    typeMap.put("NoteType", "com.netsuite.webservices.lists.accounting_2014_2.NoteType");
    typeMap.put("Opportunity", "com.netsuite.webservices.transactions.sales_2014_2.Opportunity");
    typeMap.put("Partner", "com.netsuite.webservices.lists.relationships_2014_2.Partner");
    typeMap.put("PartnerCategory", "com.netsuite.webservices.lists.accounting_2014_2.PartnerCategory");
    typeMap.put("PaymentItem", "com.netsuite.webservices.lists.accounting_2014_2.PaymentItem");
    typeMap.put("PaymentMethod", "com.netsuite.webservices.lists.accounting_2014_2.PaymentMethod");
    typeMap.put("PhoneCall", "com.netsuite.webservices.activities.scheduling_2014_2.PhoneCall");
    typeMap.put("PriceLevel", "com.netsuite.webservices.lists.accounting_2014_2.PriceLevel");
    typeMap.put("ProjectTask", "com.netsuite.webservices.activities.scheduling_2014_2.ProjectTask");
    typeMap.put("PricingGroup", "com.netsuite.webservices.lists.accounting_2014_2.PricingGroup");
    typeMap.put("PurchaseOrder", "com.netsuite.webservices.transactions.purchases_2014_2.PurchaseOrder");
    typeMap.put("PromotionCode", "com.netsuite.webservices.lists.marketing_2014_2.PromotionCode");
    typeMap.put("ReturnAuthorization", "com.netsuite.webservices.transactions.customers_2014_2.ReturnAuthorization");
    typeMap.put("SalesRole", "com.netsuite.webservices.lists.accounting_2014_2.SalesRole");
    typeMap.put("SalesOrder", "com.netsuite.webservices.transactions.sales_2014_2.SalesOrder");
    typeMap.put("SiteCategory", "com.netsuite.webservices.lists.website_2014_2.SiteCategory");
    typeMap.put("SubtotalItem", "com.netsuite.webservices.lists.accounting_2014_2.SubtotalItem");
    typeMap.put("Subsidiary", "com.netsuite.webservices.lists.accounting_2014_2.Subsidiary");
    typeMap.put("SupportCase", "com.netsuite.webservices.lists.support_2014_2.SupportCase");
    typeMap.put("Solution", "com.netsuite.webservices.lists.support_2014_2.Solution");
    typeMap.put("Task", "com.netsuite.webservices.activities.scheduling_2014_2.Task");
    typeMap.put("Term", "com.netsuite.webservices.lists.accounting_2014_2.Term");
    typeMap.put("TimeBill", "com.netsuite.webservices.transactions.employees_2014_2.TimeBill");
    typeMap.put("TransferOrder", "com.netsuite.webservices.transactions.inventory_2014_2.TransferOrder");
    typeMap.put("Topic", "com.netsuite.webservices.lists.support_2014_2.Topic");
    typeMap.put("UnitsType", "com.netsuite.webservices.lists.accounting_2014_2.UnitsType");
    typeMap.put("Vendor", "com.netsuite.webservices.lists.relationships_2014_2.Vendor");
    typeMap.put("VendorPayment", "com.netsuite.webservices.transactions.purchases_2014_2.VendorPayment");
    typeMap.put("VendorCategory", "com.netsuite.webservices.lists.accounting_2014_2.VendorCategory");
    typeMap.put("VendorBill", "com.netsuite.webservices.transactions.purchases_2014_2.VendorBill");
    typeMap.put("WinLossReason", "com.netsuite.webservices.lists.accounting_2014_2.WinLossReason");
    
    String modulename = typeMap.get(modulenameKey);
%>


<%
    String entitytype=modulename;
    boolean isCustom = false;
    if (modulename.endsWith("CustomRecord")){
    	isCustom=true;
    	entitytype = ElementParameterParser.getValue(node, "__CUSTOMRECORDID__").trim();
    }
    
    boolean ceaseForError = ElementParameterParser.getValue(node, "__CEASE_FOR_ERROR__").equals("true");
    
    List<IMetadataTable> metadatas = node.getMetadataList();
    if ((metadatas!=null)&&(metadatas.size()>0)) {//1
        IMetadataTable metadata = metadatas.get(0);
        if (metadata!=null) {//2
            String cid = node.getUniqueName();
        	List< ? extends IConnection> conns = node.getIncomingConnections();
        	IConnection conn = conns.get(0);
    		if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {//4
%>
                
                //TODO expand from only InternalId to selecting ExternalId and more??
                //TODO handle upsert when record not found
                //TODO detect Custom Recs and fields with a startsWith("cust")
                <%=modulename%> record_<%=cid%> = new <%=modulename%>();
                boolean useExternal_<%=cid%> = false;
                
<%
                if ("insert".equals(action) || "update".equals(action) || "upsert".equals(action)) { //************
                	List<IMetadataColumn> columns = metadata.getListColumns();
                    int sizeColumns = columns.size();
                    for (int i = 0; i < sizeColumns; i++) { //5  			
                    	IMetadataColumn column = columns.get(i);
                  		
                		JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
%>

        	    		if (<%=conn.getName() %>.<%=column.getLabel() %> == null) {
        					com.netsuite.webservices.platform.core_2014_2.NullField fl = record_<%=cid%>.getNullFieldList();
        					
        					if (fl==null) {
        						record_<%=cid%>.setNullFieldList(new com.netsuite.webservices.platform.core_2014_2.NullField());
        					}
        					
        					String label = "<%=column.getLabel()%>";
        					String field = label.substring(0, 1).toLowerCase() + label.substring(1);
        					nsMgr_<%=cid%>.setNullFieldValue(record_<%=cid%>.getNullFieldList(), field);
        	    		} else {

<%
            				String pattern = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
            				
        					// TODO For now we will assume initial lower case is a custom field and upper case has getter
        					char first=column.getLabel().charAt(0);
        					if(first<'a' || first>'z'){  // filter custom field
            					if (javaType == JavaTypesManager.DATE && pattern != null && pattern.trim().length() != 0) {//Date
%>

            						java.util.Calendar cal_<%=cid%> = java.util.Calendar.getInstance();
            						cal_<%=cid%>.setTime(<%=conn.getName() %>.<%=column.getLabel()%>);
            						record_<%=cid%>.set<%=column.getLabel()%>(cal_<%=cid%>);

<%
								} else if (javaType == JavaTypesManager.BYTE_ARRAY) {//byte[]
%>

									record_<%=cid%>.set<%=column.getLabel()%>(java.nio.charset.Charset.defaultCharset().decode(java.nio.ByteBuffer.wrap(<%=conn.getName() %>.<%=column.getLabel() %>)).toString());

<%
								} else if (javaType == JavaTypesManager.OBJECT) {//byte[]
%>

									nsMgr_<%=cid%>.invokeSetter(record_<%=cid%>,"<%=column.getLabel()%>",<%=conn.getName() %>.<%=column.getLabel()%>);

<%
								} else { //others
%>

									record_<%=cid%>.set<%=column.getLabel()%>(<%=conn.getName() %>.<%=column.getLabel() %>);

<%
								}
							} else {  // custom field set to null
%>
        						com.netsuite.webservices.platform.core_2014_2.CustomFieldList fl = record_<%=cid%>.getCustomFieldList();
        						
        						if (fl==null) {
        							record_<%=cid%>.setCustomFieldList(new com.netsuite.webservices.platform.core_2014_2.CustomFieldList());
        						}
        						
        						nsMgr_<%=cid%>.setCustomFieldValue(record_<%=cid%>.getCustomFieldList(), "<%=javaType.getNullableClass().getSimpleName()%>", "<%=column.getLabel()%>", <%=conn.getName() %>.<%=column.getLabel() %>);

<%
							}
%>
			
        	    			}//if !=null
				
<%
                    	}//5
					}//upsert, insert, update	
%> 

        	try {
 				
<%
                if ("insert".equals(action)) {
%>

            		String internalId_<%=cid%> = nsMgr_<%=cid%>.insert("<%=entitytype %>", record_<%=cid%>);
                    globalMap.put("<%=cid%>_CURRENT_INTERNALID", Integer.parseInt(internalId_<%=cid%>));

<%
				// InternalId no need
				} else if ("update".equals(action)) {
%>

					nsMgr_<%=cid%>.update("<%=entitytype %>", record_<%=cid%>);
					globalMap.put("<%=cid%>_CURRENT_INTERNALID", Integer.parseInt(<%=conn.getName() %>.InternalId));	

<%
				} else if ("upsert".equals(action)) {
%> 

                    String internalId_<%=cid%> = nsMgr_<%=cid%>.upsert("<%=entitytype %>", record_<%=cid%>);
                    globalMap.put("<%=cid%>_CURRENT_INTERNALID", Integer.parseInt(internalId_<%=cid%>));
		
<%
				// InternalId no need
				} else if ("delete".equals(action)) {
%>

					nsMgr_<%=cid%>.delete("<%=entitytype %>", useExternal_<%=cid%>, <%=conn.getName() %>.InternalId);
					globalMap.put("<%=cid%>_CURRENT_INTERNALID", Integer.parseInt(<%=conn.getName() %>.InternalId));	

<%
				}
%>  

        	} catch (Exception e) {

<%
				if(dieonerror){
%>

					throw (e);

<%
				} else {
%>

					System.err.print(e.getMessage());

<%
				}
%>
			}
			
			nb_line_<%=cid %>++; 

<%
    		}//4
    	}//2
	}//1
%>