<%@ jet
imports="
	org.talend.designer.codegen.config.CodeGeneratorArgument
	org.talend.core.model.process.INode
	org.talend.core.model.process.ElementParameterParser
	org.talend.core.model.process.IConnection
	org.talend.core.model.metadata.IMetadataTable
	org.talend.core.model.metadata.types.JavaTypesManager
	org.talend.core.model.process.IConnectionCategory
	org.talend.core.model.metadata.MappingTypeRetriever
	org.talend.core.model.metadata.MetadataTalendType
	org.talend.core.model.process.IProcess
	java.util.List
	java.util.ArrayList
	java.util.Map
	java.util.HashMap
"
skeleton="../templates/db_output_bulk.skeleton"
%>
<%@ include file="../templates/DB/Output/HelpClass.javajet"%>
<%
	class DBOutputBeginUtil extends DefaultDBOutputUtil{
		private boolean extendedInsert;
		private String numPerInsert;
		private List<Column> stmtStructure;
		public void beforeComponentProcess(INode node){
			super.beforeComponentProcess(node);
			cid = node.getUniqueName();
			if("CLEAR".equals(tableAction)){
				tableAction = "TRUNCATE";
			}
			defineExtendInsert(node);
			numPerInsert = ElementParameterParser.getValue(node, "__NB_ROWS_PER_INSERT__");
		%>
			java.util.Calendar calendar_<%=cid %> = java.util.Calendar.getInstance();
			calendar_<%=cid %>.set(1, 0, 1, 0, 0, 0);
			long year1_<%=cid %> = calendar_<%=cid %>.getTime().getTime();
			calendar_<%=cid %>.set(10000, 0, 1, 0, 0, 0);
			long year10000_<%=cid %> = calendar_<%=cid %>.getTime().getTime();
			long date_<%=cid %>;
		<%
		}
		public void defineExtendInsert(INode node){
			if ("INSERT".equalsIgnoreCase(dataAction)) {
				extendedInsert = ("true").equals(ElementParameterParser.getValue(node, "__EXTENDINSERT__"));
			}else {
				extendedInsert = false;
			}
		}
		public void setURL(INode node) {
		%>
			String url_<%=cid %> = "jdbc:postgresql://"+<%=dbhost%>+":"+<%=dbport%>+"/"+<%=dbname%>;
		<%
		}
		public String getDirverClassName(INode node){
			return "org.postgresql.Driver";
		}
		public void defineSchema(INode node,Manager manager){
			defineSchemaTable(node,manager,"schema_");
		}
		public void prepareColumn(List<Column> stmtStructure){
			this.stmtStructure = stmtStructure;
		}
		public void insert(INode node,Manager manager,StringBuilder insertColName,StringBuilder insertValueStmt){
			Map<String, String> hintsValues = hint(node);
			boolean useHintOptions = ("true").equals(ElementParameterParser.getValue(node,"__USE_HINT_OPTIONS__"));
			if(!extendedInsert) {
			%>
				java.sql.PreparedStatement pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement("INSERT INTO \"" + tableName_<%=cid%> + "\" (<%=insertColName.toString()%>) VALUES (<%=insertValueStmt.toString()%>)");
			<%
			} else { //entended insert
			%>
				int rowCount<%=cid%> = 0;
				class BufferLine_<%=cid%> {
					<%
					for(Column column : stmtStructure) {
						if(!column.isReplaced() && !column.isAddCol() && column.isInsertable()) {
							String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
							%>
								<%=typeToGenerate%> <%=column.getName()%>;
						<%
						}
					}
					%>
					public BufferLine_<%=cid%>(
						<%
						int count = 0;
						for(Column column : stmtStructure) {
							if(!column.isReplaced() && !column.isAddCol() && column.isInsertable()) {
								if(count != 0) {
								%>
									,
								<%
								}
								String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
						%>
								<%=typeToGenerate%> <%=column.getName()%>
						<%
								count++;
							}
						}
						%>
					){
						<%
						for(Column column : stmtStructure) {
							if(!column.isReplaced() && !column.isAddCol() && column.isInsertable()) {
							%>
								this.<%=column.getName()%> = <%=column.getName()%>;
							<%
							}
						}
						%>
					}
				}
				java.util.List<BufferLine_<%=cid%>> exInsertColValueList<%=cid%> = new java.util.ArrayList();
				BufferLine_<%=cid%> exInsertColValue<%=cid%> = null;
				StringBuilder extendInsertValueStmt_<%=cid%> = new StringBuilder();
				for(int i=0;i < <%=numPerInsert%>;i++){
					 extendInsertValueStmt_<%=cid%>.append("(<%=insertValueStmt.toString()%>)");
					 if (i!=<%=numPerInsert%>-1) extendInsertValueStmt_<%=cid%>.append(",");
				}
				String insert_<%=cid%> = "INSERT INTO "+tableName_<%=cid%>+" (<%=insertColName.toString()%>) VALUES " + extendInsertValueStmt_<%=cid%>.toString();
				java.sql.PreparedStatement pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(insert_<%=cid%>);
			<%
			}
		}
	}
	dbOutputBeginUtil = new DBOutputBeginUtil();
%>
<%@ include file="../templates/DB/Output/AbstractDBOutputBegin.javajet"%>
