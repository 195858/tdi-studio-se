<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.IConnectionCategory 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.core.model.metadata.types.JavaTypesManager
    org.talend.core.model.metadata.types.JavaType
    java.util.List
" 
%>
	<%@ include file="../templates/Log4j/Log4jFileUtil.javajet"%>
<%
		CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
		INode node = (INode)codeGenArgument.getArgument();
		String cid = node.getUniqueName();
		
		String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");
		String accessToken = ElementParameterParser.getValue(node, "__ACCESS_TOKEN__");
		String refreshToken = ElementParameterParser.getValue(node, "__REFRESH_TOKEN__");
		
		String clientId = ElementParameterParser.getValue(node, "__CLIENT_ID__");
		String clientSecret = ElementParameterParser.getValue(node, "__CLIENT_SECRET__");
		
		String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
	    String connectionKey = "\"conn_" + connection+"\"";
		
		String filePath = ElementParameterParser.getValue(node, "__FILE__");
		String folderPath = ElementParameterParser.getValue(node, "__FOLDER__");
		boolean deleteFolder = "true".equals(ElementParameterParser.getValue(node, "__DELETE_FOLDER__"));
		boolean dieOnError = "true".equals(ElementParameterParser.getValue(node, "__DIE_ON_ERROR__"));
		
		final boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
				log4jFileUtil.componentStartInfo(node);
		String dataInputConnection = null;
        
        List< ? extends IConnection> inputConnections = node.getIncomingConnections();
	    for(IConnection conn : inputConnections) {
	        if(conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
	        	dataInputConnection = conn.getName();
	        	break;
	        } // if(conn) end
	    } // for(conns) end

%>

<%if(dataInputConnection != null)
{%>
	try
	{
		String <%=cid%>_filePath = <%=dataInputConnection%>.filePath;
		String <%=cid%>_type = <%=dataInputConnection%>.type;
		if (<%=cid%>_filePath == null || "".equals(<%=cid%>_filePath.trim()))
		{
			throw new Exception("File path can not be null");
		}
		if (<%=cid%>_type == null || "".equals(<%=cid%>_type.trim()))
		{
			throw new Exception("Type can not be null");
		}
		if(!<%=cid%>_type.equalsIgnoreCase("file") || !<%=cid%>_type.equalsIgnoreCase("folder"))
		{
			throw new Exception("Type should be one of "\"" + "file" + "\"" + " or " + "\"" + "folder "\"");
		}
		if(<%=cid%>_type.equalsIgnoreCase("file"))
		{
			String <%=cid%>_remoteFilePath = normalizePath(<%=cid%>_filePath);
			String <%=cid%>_remoteFileName = getFolderFromPath(<%=cid%>_remoteFilePath);
			com.box.boxjavalibv2.dao.BoxFile <%=cid%>_boxFile = null;
			<%=cid%>_boxFile = searchFile(<%=cid%>_client, <%=cid%>_remoteFilePath, <%=cid%>_remoteFileName);
			if (<%=cid%>_boxFile == null)
			{
				throw new Exception("No file found under " + <%=cid%>_remoteFilePath);
			}
			<%=cid%>_client.getFilesManager().deleteFile(<%=cid%>_boxFile.getId(), null);
			globalMap.put("<%=cid %>_REMOVED_PATH", getBoxItemPath(<%=cid%>_boxFile));
		}
		else if (<%=cid%>_type.equalsIgnoreCase("folder"))
		{
			String <%=cid%>_remoteFolderPath = normalizePath(<%=cid%>_filePath);
			if (<%=cid%>_remoteFolderPath.equals("All Files"))
			{
				throw new Exception("Can not delete root folder");
			}
			String <%=cid%>_remoteFolderName = getFolderFromPath(<%=cid%>_remoteFolderPath);
			com.box.boxjavalibv2.dao.BoxFolder <%=cid%>_boxFolder = null;
			<%=cid%>_boxFolder = searchFolder(<%=cid%>_client, <%=cid%>_remoteFolderPath, <%=cid%>_remoteFolderName);
			if (<%=cid%>_boxFolder == null)
			{
				throw new Exception("No folder found under " + <%=cid%>_remoteFolderPath);
			}
			com.box.boxjavalibv2.requests.requestobjects.BoxFolderDeleteRequestObject <%=cid%>_delObject = com.box.boxjavalibv2.requests.requestobjects.BoxFolderDeleteRequestObject.deleteFolderRequestObject(true);
	        <%=cid%>_client.getFoldersManager().deleteFolder(<%=cid%>_boxFolder.getId(), <%=cid%>_delObject);
	        globalMap.put("<%=cid %>_REMOVED_PATH", getBoxItemPath(<%=cid%>_boxFolder));
		}
	}
	catch (java.lang.Exception e)
	{
<%
		if(dieOnError) {
%>
			throw e;
<%
		} else {
%>
<%
			if(isLog4jEnabled){
%>
				log.error("<%=cid%> - " +e.getMessage());
<%
			}
%>
			System.err.println(e);
<%
		}
%>
	}
<%}%>
<% else if(!deleteFolder)
{
%>
	try
	{
		if(<%=filePath%> == null || "".equals(<%=filePath%>.trim()))
		{
			throw new Exception("File path can not be null");
		}
		String <%=cid%>_remoteFilePath = normalizePath(<%=filePath%>);
		String <%=cid%>_remoteFileName = getFolderFromPath(<%=cid%>_remoteFilePath);
		com.box.boxjavalibv2.dao.BoxFile <%=cid%>_boxFile = null;
		<%=cid%>_boxFile = searchFile(<%=cid%>_client, <%=cid%>_remoteFilePath, <%=cid%>_remoteFileName);
		if (<%=cid%>_boxFile == null)
		{
			throw new Exception("No file found under " + <%=cid%>_remoteFilePath);
		}
		<%=cid%>_client.getFilesManager().deleteFile(<%=cid%>_boxFile.getId(), null);
		globalMap.put("<%=cid %>_REMOVED_PATH", getBoxItemPath(<%=cid%>_boxFile));
	}
	catch (java.lang.Exception e)
	{
<%
		if(dieOnError) {
%>
			throw e;
<%
		} else {
%>
<%
			if(isLog4jEnabled){
%>
				log.error("<%=cid%> - " +e.getMessage());
<%
			}
%>
			System.err.println(e);
<%
		}
%>
	}
<%
} else {
%>
	try
	{
		if(<%=folderPath%> == null || "".equals(<%=folderPath%>.trim()))
		{
			throw new Exception("Folder path can not be null");
		}
		String <%=cid%>_remoteFolderPath = normalizePath(<%=folderPath%>);
		if (<%=cid%>_remoteFolderPath.equals("All Files"))
		{
			throw new Exception("Can not delete root folder");
		}
		String <%=cid%>_remoteFolderName = getFolderFromPath(<%=cid%>_remoteFolderPath);
		com.box.boxjavalibv2.dao.BoxFolder <%=cid%>_boxFolder = null;
		<%=cid%>_boxFolder = searchFolder(<%=cid%>_client, <%=cid%>_remoteFolderPath, <%=cid%>_remoteFolderName);
		if (<%=cid%>_boxFolder == null)
		{
			throw new Exception("No folder found under " + <%=cid%>_remoteFolderPath);
		}
		com.box.boxjavalibv2.requests.requestobjects.BoxFolderDeleteRequestObject <%=cid%>_delObject = com.box.boxjavalibv2.requests.requestobjects.BoxFolderDeleteRequestObject.deleteFolderRequestObject(true);
        <%=cid%>_client.getFoldersManager().deleteFolder(<%=cid%>_boxFolder.getId(), <%=cid%>_delObject);
        globalMap.put("<%=cid %>_REMOVED_PATH", getBoxItemPath(<%=cid%>_boxFolder));
	}
	catch (java.lang.Exception e)
	{
<%
		if(dieOnError) {
%>
			throw e;
<%
		} else {
%>
<%
			if(isLog4jEnabled){
%>
				log.error("<%=cid%> - " +e.getMessage());
<%
			}
%>
			System.err.println(e);
<%
		}
%>
	}
<%
}
%>
	//System.out.println(<%=cid%>_client.getAuthData().getRefreshToken());
    //System.out.println(<%=cid%>_client.getAuthData().getAccessToken());
			