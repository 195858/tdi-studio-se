<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.ElementParameterParser
		
		java.util.List
	" 
%>

	<%

	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
    boolean isUseExistConnection = ("true").equals(ElementParameterParser.getValue(node, "__USE_CONNECTION__"));
	String cid = node.getUniqueName();
	cid = cid.replaceAll("_Loop", "");
	String serverType=ElementParameterParser.getValue(node, "__SERVER__");
	String useMsgId=ElementParameterParser.getValue(node, "__IS_USE_MESSAGE_ID__");
	String kListen=ElementParameterParser.getValue(node, "__KEEPLISTENING__");
	String timeOut=ElementParameterParser.getValue(node, "__TIMEOUT__");
	String acknowledgmentMode = ElementParameterParser.getValue(node, "__ACKNOWLEDGMENT_MODE__");
	String msgBobyType =  ElementParameterParser.getValue(node, "__MESSAGE_BODY_TYPE__");
	boolean transacted = "true".equals(ElementParameterParser.getValue(node, "__IS_TRANSACTED__"));	
    String connectionComponentName = ElementParameterParser.getValue(node, "__CONNECTION__");
    
    List<? extends INode> commitNodes=node.getProcess().getNodesOfType("tMomCommit");
    List<? extends INode> rollBackNodes=node.getProcess().getNodesOfType("tMomRollback");

    boolean isCommitRollback = false;
    for(INode cNode:commitNodes){
    	String cNodeName = ElementParameterParser.getValue(cNode,"__CONNECTION__");
    	if(cid.equals(cNodeName)){
    		isCommitRollback = true;
    		break;
    	}
    }
    if(!isCommitRollback){
    	for(INode rNode:rollBackNodes){
    		String rNodeName = ElementParameterParser.getValue(rNode,"__CONNECTION__");
    		if(cid.equals(rNodeName)){
    			isCommitRollback = true;
    			break;
    		}
    	}
    }
	 

    if (isUseExistConnection) {
		for (INode pNode : node.getProcess().getNodesOfType("tMomConnection")) {
			if (pNode.getUniqueName().equals(connectionComponentName)) {
				transacted = "true".equals(ElementParameterParser.getValue(pNode, "__IS_TRANSACTED__")); 
				serverType=ElementParameterParser.getValue(pNode, "__SERVER__");
			}	
		}
	}
	
	if (("JBoss").equals(serverType) || ("ActiveMQ").equals(serverType)) {
		if ("CLIENT_ACKNOWLEDGE".equals(acknowledgmentMode)) {
		%>
			message_<%=cid%>.acknowledge();
		
		<%	
		}
		if(("true").equals(useMsgId) && !"Map".equals(msgBobyType)){
		%>
				}
			}
		<%
		}
		if(("JBoss").equals(serverType)){
			if("true".equals(kListen)){
			%>
				Thread.sleep(<%=timeOut%>*1000);
			<%		
			}else{
			%>
				break;
			<%			
			}
		}else if(("ActiveMQ").equals(serverType)) {
			if (("true").equals(ElementParameterParser.getValue(node,"__USEMAX__"))) {
			%>
				}
			<%
			}
		}
               if(("ActiveMQ").equals(serverType) && !isCommitRollback && transacted){%>
			if (session_<%=cid%> != null && connection_<%=cid %> != null) {
				session_<%=cid%>.commit();
			}
		}catch(java.lang.Exception ex){
			System.out.println("A Active MQ error occurred :" + ex);
	      	ex.printStackTrace();
			if (session_<%=cid%> != null  && connection_<%=cid %> != null) {
				session_<%=cid%>.rollback();
			}
		}
                <%}%>
		}
		<%if( ("ActiveMQ").equals(serverType) && !isCommitRollback && !isUseExistConnection){%>
 		 	if (session_<%=cid%> != null  && connection_<%=cid %> != null) {
 		 		session_<%=cid %>.close();
 		 	}
            if (connection_<%=cid %> != null) {
            	connection_<%=cid %>.close();
            }
		<%}%>

		<%if( ("JBoss").equals(serverType) ){%>
 			System.out.println("Closing connection");
            consumer_<%=cid %>.close();
            session_<%=cid %>.close();
            connection_<%=cid %>.close();
		<%}%>

	<%		
	}else{
		boolean isCommit = ("true").equals(ElementParameterParser.getValue(node, "__COMMIT__"));
		boolean isBrowse = ("true").equals(ElementParameterParser.getValue(node,"__BROWSE__"));
		boolean isRollback = ("true").equals(ElementParameterParser.getValue(node, "__ROLLBACK__"));
		isRollback = isRollback && ("false".equals(kListen)) && !isCommit && !isBrowse;
		%>
		
			}	
			System.out.println("Disconnecting queue...");
			<%
			if(isRollback){
			%>
				qMgr_<%=cid%>.backout();
			<%
			}
			%>
			remoteQ_<%=cid%>.close();
			<%
			if(!isUseExistConnection && !isCommitRollback){
			%>
				System.out.println("Disconnecting queue manager...");
				qMgr_<%=cid%>.disconnect();
			<%
			}
            %>
		}catch(com.ibm.mq.MQException ex){
			System.out.println("A WebSphere MQ error occurred : Completion code " + ex.completionCode + " Reason code " + ex.reasonCode);
			<%
			if(!isUseExistConnection){
			%>
				System.out.println("Disconnecting queue...");
				remoteQ_<%=cid%>.close();
			<%
			}
			%>
		}
	<%
	}
	%>

} finally {
//        System.out.println("close connection after loop!");
	<%if( ("ActiveMQ").equals(serverType) && !isUseExistConnection){%>
         if (connection_<%=cid %> != null) {
         	connection_<%=cid %>.close();
         }
	<%}%>
}

	globalMap.put("<%=cid %>_NB_LINE",nb_line_<%=cid %>);
