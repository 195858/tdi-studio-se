<%@ jet 
imports="
    	org.talend.core.model.process.INode 
    	org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.IConnection
		java.util.List
        org.talend.core.model.process.IProcess		
		"
%>
<%@ include file="../templates/Log4j/Log4jFileUtil.javajet"%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();

	IProcess process = node.getProcess();
	boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(process, "__LOG4J_ACTIVATE__"));
	
	boolean useProxy = ("true").equals(ElementParameterParser.getValue(node,"__USE_PROXY__"));
	String proxyHost = ElementParameterParser.getValue(node,"__PROXY_HOST__");
   	String proxyPort = ElementParameterParser.getValue(node,"__PROXY_PORT__");
   	String proxyUsername = ElementParameterParser.getValue(node,"__PROXY_USERNAME__");
   	String proxyPassword = ElementParameterParser.getValue(node,"__PROXY_PASSWORD__");
   	boolean needCompression = ("true").equals(ElementParameterParser.getValue(node,"__NEED_COMPRESSION__"));

	String cid = node.getUniqueName();
	
   	log4jFileUtil.componentStartInfo(node);
   	log4jFileUtil.logParameters(node);
   	
   	String passwordFieldName = "";
%>

int nb_line_<%=cid%> = 0;

<%
List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas != null) && (metadatas.size() > 0)) {
	IMetadataTable metadata = metadatas.get(0);
	
	if (metadata != null) {
		List<? extends IConnection> outgoingConns = node.getOutgoingSortedConnections();

		if (outgoingConns != null && outgoingConns.size() > 0){
			String endpoint = ElementParameterParser.getValue(node, "__ENDPOINT__");
			String username = ElementParameterParser.getValue(node, "__USER__");

			String timeout = ElementParameterParser.getValue(node,"__TIMEOUT__");
			boolean useExistingConn = ("true").equals(ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__"));
			String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
			String clientID = ElementParameterParser.getValue(node,"__CLIENT_ID__");
			
			boolean bulkConnection = false; //for tSalesforceOAuth.javajet
			
			String apiVersion = ElementParameterParser.getValue(node,"__API_VERSION__");
			String loginType = ElementParameterParser.getValue(node,"__LOGIN_TYPE__");
			boolean useOAuth = "OAUTH".equals(loginType);
			if(!useExistingConn){
				if(useOAuth){
				%>
					<%@ include file="../tSalesforceConnection/tSalesforceOAuth.javajet"%>
				<%	
				}
			}		
			%>
        	System.setProperty("org.apache.commons.logging.Log", "org.apache.commons.logging.impl.NoOpLog");
			org.talend.salesforce.SforceManagement sfMgr_<%=cid%> = new org.talend.salesforce.SforceManagementImpl();
			<%if(useExistingConn){%>
				if(globalMap.get("stub_<%=connection %>")==null || globalMap.get("sessionHeader_<%=connection%>")==null){
					throw new RuntimeException("Get null connection from <%=connection %>");
				}
				if(globalMap.get("callOptions_<%=connection %>")!=null ){
					sfMgr_<%=cid%>.setCallOptions((com.salesforce.soap.partner.CallOptions)globalMap.get("callOptions_<%=connection %>"));
				}
				sfMgr_<%=cid%>.login((com.salesforce.soap.partner.SforceServiceStub)globalMap.get("stub_<%=connection %>"),(com.salesforce.soap.partner.SessionHeader)globalMap.get("sessionHeader_<%=connection%>"));
				<%if(isLog4jEnabled){%>
					log.info("<%=cid%> - Login successful with exsit connection : <%=connection%>");
				<%}%>
			<%}else{%>
				<%if(clientID!=null && !"".equals(clientID) && !"\"\"".equals(clientID)){%>
					sfMgr_<%=cid%>.setClientID(<%=clientID%>);
				<%
				}
				if(useOAuth){
				%>
					boolean result_<%=cid%> = sfMgr_<%=cid%>.login(accessToken_<%=cid%>, endpointURL_<%=cid%>,<%=timeout%>,<%=needCompression%>);
					if(!result_<%=cid%>){
						throw new RuntimeException("Login failed!");
					}
				<%
				}else{
					if(useProxy){
						passwordFieldName = "__PROXY_PASSWORD__";
        				if (ElementParameterParser.canEncrypt(node, passwordFieldName)) {
                		%>
                		String decryptedPwd_<%=cid%> = routines.system.PasswordEncryptUtil.decryptPassword(<%=ElementParameterParser.getEncryptedValue(node, passwordFieldName)%>);
                		<%
                		} else {
                		%>
                		String decryptedPwd_<%=cid%> = <%= ElementParameterParser.getValue(node, passwordFieldName)%>;
                		<%
                		}
					%>
					    java.util.Properties props_<%=cid%> = System.getProperties();
					    props_<%=cid%>.put("socksProxyHost",<%=proxyHost %>);  
					    props_<%=cid%>.put("socksProxyPort",<%=proxyPort %>);
					    props_<%=cid%>.put("java.net.socks.username", <%=proxyUsername %>);
					    props_<%=cid%>.put("java.net.socks.password", decryptedPwd_<%=cid%>); 
					<%
					}
					%>
					
					<%
        			passwordFieldName = "__PASS__";
        			%>
        
        			<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>
			
					boolean result_<%=cid%> = sfMgr_<%=cid%>.login(<%=endpoint%>,<%=username%>, decryptedPassword_<%=cid%>,<%=timeout%>,<%=needCompression%>);
					if(!result_<%=cid%>){
						throw new RuntimeException("Login failed! Please check the username,password and endpoint");
					}
				<%
				}
				%>
				<%if(isLog4jEnabled){%>
					log.info("<%=cid%> - Login successful");
				<%}%>
			<%}%>
		<%
		}
	}
}
%>
