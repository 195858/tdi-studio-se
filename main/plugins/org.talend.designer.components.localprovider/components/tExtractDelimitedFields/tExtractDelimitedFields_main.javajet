<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.process.IConnectionCategory
    org.talend.core.model.metadata.IMetadataTable
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.metadata.types.JavaTypesManager
    org.talend.core.model.metadata.types.JavaType
    java.util.List
    java.util.ArrayList
    java.util.Map
"
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

String field = ElementParameterParser.getValue(node, "__FIELD__");
String separator = ElementParameterParser.getValue(node, "__FIELDSEPARATOR__");

String advancedSeparatorStr = ElementParameterParser.getValue(node, "__ADVANCED_SEPARATOR__");
boolean advancedSeparator = (advancedSeparatorStr!=null&&!("").equals(advancedSeparatorStr))?("true").equals(advancedSeparatorStr):false;
String thousandsSeparator = ElementParameterParser.getValueWithJavaType(node, "__THOUSANDS_SEPARATOR__", JavaTypesManager.CHARACTER);
String decimalSeparator = ElementParameterParser.getValueWithJavaType(node, "__DECIMAL_SEPARATOR__", JavaTypesManager.CHARACTER);

boolean trim = ("true").equals(ElementParameterParser.getValue(node, "__TRIM__"));

String checkDateStr = ElementParameterParser.getValue(node,"__CHECK_DATE__");
boolean checkDate = (checkDateStr!=null&&!("").equals(checkDateStr))?("true").equals(checkDateStr):false;

String checkNumStr = ElementParameterParser.getValue(node, "__CHECK_FIELDS_NUM__");
boolean checkNum = (checkNumStr!=null&&!("").equals(checkNumStr))?("true").equals(checkNumStr):false; 

String dieOnErrorStr = ElementParameterParser.getValue(node, "__DIE_ON_ERROR__");
boolean dieOnError = (dieOnErrorStr!=null&&!("").equals(dieOnErrorStr))?("true").equals(dieOnErrorStr):false;

IConnection inConn = null;
List< ? extends IConnection> inConns = node.getIncomingConnections();
if(inConns!=null){
    for (IConnection conn : inConns) {
    	if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
    		inConn = conn;
    		break;
    	}
    }
}

String rejectConnName = "";
List<IMetadataColumn> rejectColumnList = null;
List<? extends IConnection> rejectConns = node.getOutgoingConnections("REJECT");
if(rejectConns != null && rejectConns.size() > 0) {
    IConnection rejectConn = rejectConns.get(0);
    rejectColumnList = rejectConn.getMetadataTable().getListColumns();
    rejectConnName = rejectConn.getName();
}

String firstConnName = "";
IConnection outConn = null;
List< ? extends IConnection> outConns = node.getOutgoingConnections();
if(outConns!=null){
    for (IConnection conn : outConns) {
    	if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
    		outConn = conn;
    		firstConnName = outConn.getName();
    		break;
    	}
    }
}

if(outConns!=null){
    for (IConnection conn : outConns) {
    	if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
%>
<%=conn.getName() %> = null;
<%
    	}
    }
}

//get field column
if(outConn!=null && inConn!=null){
%>
try{

	<%=outConn.getName() %> = new <%=outConn.getName() %>Struct();
<%
	IMetadataTable inputMetadataTable = inConn.getMetadataTable();
	for (IMetadataColumn inputCol : inputMetadataTable.getListColumns()) {
		if(inputCol.getLabel().equals(field)){
%>
	String field_<%=cid%> = <%=inConn.getName()%>.<%=field%>;
	String[] newFields_<%=cid%> = field_<%=cid%>.split(<%=separator%>,-1);
	int length_<%=cid%> = newFields_<%=cid%>.length;
<%
			if(trim){
%>
		for(int i_<%=cid%> = 0;i_<%=cid%> < length_<%=cid%>;i_<%=cid%>++){
			newFields_<%=cid%>[i_<%=cid%>] = newFields_<%=cid%>[i_<%=cid%>].trim();
		}
<%
			}
			break;
		}
	}


//set original columns
List<IMetadataColumn> newColumnList = new ArrayList<IMetadataColumn>();
IMetadataTable outputMetadataTable = outConn.getMetadataTable();

	for (IMetadataColumn outputCol : outputMetadataTable.getListColumns()) {
		boolean isOirginalColumn = false;
		for (IMetadataColumn inputCol : inputMetadataTable.getListColumns()) {
			if( outputCol.getLabel().equals( inputCol.getLabel()) ){
				isOirginalColumn = true;
%>
	<%=outConn.getName()%>.<%=outputCol.getLabel()%> = <%=inConn.getName()%>.<%=inputCol.getLabel()%> ;
<%
				break;
			}
		}
		if(!isOirginalColumn){
			if(!("").equals(rejectConnName)&&rejectConnName.equals(firstConnName)
				&& (outputCol.getLabel().equals("errorMessage") || outputCol.getLabel().equals("errorCode"))){
			}else{
				newColumnList.add(outputCol);
			}
		}
	}
%>
	String temp_<%=cid%> = null;
<%
	for(int i=0; i<newColumnList.size();i++){
		IMetadataColumn column = newColumnList.get(i);
		String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
		JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
		String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();%><%
		if(javaType == JavaTypesManager.STRING || javaType == JavaTypesManager.OBJECT){
%>
	<%=outConn.getName()%>.<%=column.getLabel() %> = <%=i%>>=length_<%=cid%>?"":newFields_<%=cid%>[<%=i%>];
<%
		}else{ 
%>
	temp_<%=cid %> = <%=i%>>=length_<%=cid%>?"":newFields_<%=cid%>[<%=i%>];
	if(temp_<%=cid %>.length() > 0) {
<%
			if(javaType == JavaTypesManager.BYTE_ARRAY){ 
%>
		<%=outConn.getName() %>.<%=column.getLabel() %> = temp_<%=cid %>.getBytes();
<%
			}else if(javaType == JavaTypesManager.DATE) {
				if(checkNum || checkDate){
%>
		<%=outConn.getName() %>.<%=column.getLabel() %> = ParserUtils.parseTo_Date(temp_<%=cid %>, <%= patternValue %>, false);
<%
				}else{
%>
		<%=outConn.getName() %>.<%=column.getLabel() %> = ParserUtils.parseTo_Date(temp_<%=cid %>, <%= patternValue %>);
<%
				}
			}else if(advancedSeparator && JavaTypesManager.isNumberType(javaType)) { 
%>
		<%=outConn.getName() %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%= typeToGenerate %>(ParserUtils.parseTo_Number(temp_<%=cid %>, <%= thousandsSeparator %>, <%= decimalSeparator %>));
<%
			} else {
%>
		<%=outConn.getName() %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%= typeToGenerate %>(temp_<%=cid %>);
<%
			}
%>
	} else {						
<%
			String defaultValue = JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate, column.getDefault());
			if(defaultValue == null) {
%>
		throw new RuntimeException("Value is empty for column : '<%= column.getLabel() %>' in '<%=outConn.getName() %>' connection, value is invalid or this column should be nullable or have a default value.");
<%
			} else {
%>
		<%=outConn.getName() %>.<%=column.getLabel() %> = <%=defaultValue %>;
<%
			}
%>
	}
<%
		}
	}
	
	if(checkNum) {
%>
	 int filedsum_<%=cid %> = newFields_<%=cid%>.length;
	 if(filedsum_<%=cid %> < <%=newColumnList.size() %>){
	 	throw new RuntimeException("Column(s) missing");
	 } else if(filedsum_<%=cid %> > <%=newColumnList.size() %>) {
	 	throw new RuntimeException("Too many columns");
	 }     
<%
	}
	
	if(!("").equals(rejectConnName) && rejectConnName.equals(firstConnName)){
%>
	<%=outConn.getName() %> = null;
<%
	}
%>
	nb_line_<%=cid%>++;
}catch(java.lang.Exception ex_<%=cid %>){
<%
	if(dieOnError){
%>
	throw(ex_<%=cid %>);
<%
	}else{
		if(!("").equals(rejectConnName)&&!rejectConnName.equals(firstConnName)&&rejectColumnList != null && rejectColumnList.size() > 0) {
%>
	<%=rejectConnName %> = new <%=rejectConnName %>Struct();
<%
            for(IMetadataColumn column : outConn.getMetadataTable().getListColumns()) {
%>
    <%=rejectConnName%>.<%=column.getLabel()%> = <%=firstConnName %>.<%=column.getLabel() %>;
<%
			}
%>    
    <%=rejectConnName%>.errorMessage = ex_<%=cid %>.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
    <%=firstConnName %> = null;
<%
		} else if(("").equals(rejectConnName)){
%>
    System.err.println(ex_<%=cid %>.getMessage());
    <%=firstConnName %> = null;
<%
		} else if(rejectConnName.equals(firstConnName)){
%>
	<%=rejectConnName%>.errorMessage = ex_<%=cid %>.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
<%
		}
	}
%>
}
<%
}
%>


