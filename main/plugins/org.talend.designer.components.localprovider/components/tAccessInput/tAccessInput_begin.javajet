<%@ jet 
imports="
    	org.talend.core.model.process.INode 
    	org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.core.model.metadata.types.JavaTypesManager
		java.util.List
        java.util.Map
		"
%>
	<%@ include file="../templates/DB/Input/HelpClass.javajet"%>
<%

	class DBInputBeginUtil extends DefaultDBInputUtil{
	    
		public void setURL(INode node) {
			
			String dbversion = ElementParameterParser.getValue(node, "__DB_VERSION__");
%>
<%			
			if ("Access_2003".equalsIgnoreCase(dbversion)){
%>
	            String url_<%=cid %> = "jdbc:odbc:Driver={Microsoft Access Driver (*.mdb)};DBQ=" + <%=dbname%>;
<%
            }else if ("Access_2007".equalsIgnoreCase(dbversion)){
%>
	            String url_<%=cid %> = "jdbc:odbc:Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=" + <%=dbname%>;            
<%
            }
%>
<%
		}
		
		public String getDirverClassName(INode node){
			return "sun.jdbc.odbc.JdbcOdbcDriver";
		}
		
		public void createConnection(INode node) {
			cid = node.getUniqueName();
			dbproperties = ElementParameterParser.getValue(node, "__PROPERTIES__");
			dbhost = ElementParameterParser.getValue(node, "__HOST__");
	    	dbport = ElementParameterParser.getValue(node, "__PORT__");
	    	dbname = ElementParameterParser.getValue(node, "__DBNAME__");
	    	dbuser = ElementParameterParser.getValue(node, "__USER__");
	 		dbpwd = ElementParameterParser.getValue(node, "__PASS__");
%>
			java.lang.Class.forName("<%=this.getDirverClassName(node) %>");
			<%this.setURL(node);%>
	        String dbUser_<%=cid %> = <%=dbuser%>;
	        String dbPwd_<%=cid %> = <%=dbpwd%>;
<%
			if(dbproperties == null || ("\"\"").equals(dbproperties) || ("").equals(dbproperties)) {
%>
			conn_<%=cid%> = java.sql.DriverManager.getConnection(url_<%=cid %>,dbUser_<%=cid%>,dbPwd_<%=cid%>);
<%
			} else {
%>
			String atnParams_<%=cid%> = <%=dbproperties%>;
			atnParams_<%=cid%> = atnParams_<%=cid%>.replaceAll("&", "\n");
			java.util.Properties atnParamsPrope_<%=cid%> = new java.util.Properties();
			atnParamsPrope_<%=cid%>.put("user",dbUser_<%=cid%>);
			atnParamsPrope_<%=cid%>.put("password",dbPwd_<%=cid%>);
			atnParamsPrope_<%=cid%>.load(new java.io.ByteArrayInputStream(atnParams_<%=cid%>.getBytes()));
			conn_<%=cid%> = java.sql.DriverManager.getConnection(url_<%=cid%>, atnParamsPrope_<%=cid%>);
<%
			}
		}
		
		//-----------according schema type to generate ResultSet
		
		public void generateTimestampResultSet(String firstConnName, IMetadataColumn column, int currentColNo) {
%>
            java.sql.Timestamp timestamp_<%=cid%> = rs_<%=cid %>.getTimestamp(<%=currentColNo%>);
            if(timestamp_<%=cid%> != null) {
                <%=firstConnName%>.<%=column.getLabel()%> = new java.util.Date(timestamp_<%=cid%>.getTime());
            } else {
                <%=firstConnName%>.<%=column.getLabel()%> =  null;
            }
<%
	    }  
	    
	   	public void generateOthersResultSet(String firstConnName, IMetadataColumn column, int currentColNo, String typeToGenerate) {
%>
	        Object value = rs_<%=cid %>.getObject(<%=currentColNo%>);
	        if(value != null) {
<%
	            String javaType = JavaTypesManager.getTypeToGenerate(column.getTalendType(), true);
	   		 			if(("Integer").equals(javaType)) {
%>
	   		 				value = new <%=javaType%>(<%=javaType%>.parse<%=javaType.substring(0,3)%>(value.toString()));
<%
	   		 			} else if(("Byte").equals(javaType) || ("Short").equals(javaType) || ("Long").equals(javaType) || 
	   		 			        ("Float").equals(javaType) || ("Double").equals(javaType)) {
%>
	   		 				value = new <%=javaType%>(<%=javaType%>.parse<%=javaType%>(value.toString()));
<%
	   		 			}
%>
	 	   		 		<%=firstConnName%>.<%=column.getLabel()%> = (<%=javaType%>)value;
	                } else {
<%
	            if(column.isNullable()) {
%>
	                <%=firstConnName%>.<%=column.getLabel()%> = null;
<%
	            } else {
%>    
	                throw new RuntimeException("Null value in non-Nullable column");
<%    
	            }
%>
	        }
<%
	    }
	    //---------end according schema type to generate ResultSet
	}//end class
	
	dbInputBeginUtil = new DBInputBeginUtil();
%>
    
	<%@ include file="../templates/DB/Input/AbstractDBInputBegin.javajet"%>

