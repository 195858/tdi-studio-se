<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.designer.codegen.config.CodeGeneratorArgument
	java.util.List
	java.util.Map
" 
%>
	<%
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();
	
    String cid = node.getUniqueName();
    String bucket = ElementParameterParser.getValue(node,"__BUCKET__");
    String key = ElementParameterParser.getValue(node,"__KEY__");
    String file = ElementParameterParser.getValue(node,"__FILE__");
	String dieOnError = ElementParameterParser.getValue(node, "__DIE_ON_ERROR__");
	String partSizeMb = ElementParameterParser.getValue(node, "__PART_SIZE__");
    String kmsid = ElementParameterParser.getValue(node, "__KMSID__");
	
	boolean enableKMS = "true".equals(ElementParameterParser.getValue(node, "__ENABLE-KMS__"));
	
	if(partSizeMb == null) {
		partSizeMb = "5";
	}
	
	boolean enableServerSideEncryption = "true".equals(ElementParameterParser.getValue(node, "__ENABLE-SERVER-SIDE-ENCRYPTION__"));
	
	%>
	<%@ include file="../tS3Connection/S3Client.javajet" %>
	String key_<%=cid%> = <%=key%>;
	boolean useStream_<%=cid%> = false;
	
	int partSizeInBytes_<%=cid%> = <%=partSizeMb%> * 1024 * 1024;
	long multipart_upload_threshold_<%=cid%> = 5 * 1024 * 1024;
	
	java.io.File inputFile_<%=cid%> = null;
	java.io.InputStream sourceStream_<%=cid%> = null;
	Object fileOrStream_<%=cid%> = <%=file%>;
	
	try{
		<%
		if(isLog4jEnabled){
		%>	
			log.info("<%=cid%> - Uploading an object with key:" + key_<%=cid%>);
		<%
		}
		%>

		if(fileOrStream_<%=cid%> instanceof String){
		    inputFile_<%=cid%> = new java.io.File((String)fileOrStream_<%=cid%>);
		    useStream_<%=cid%> = false;
		}else if(fileOrStream_<%=cid%> instanceof java.io.InputStream){
		    sourceStream_<%=cid%> = ((java.io.InputStream)fileOrStream_<%=cid%>);
		    useStream_<%=cid%> = true;
		}
		
    com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_<%=cid%> = new com.amazonaws.services.s3.model.ObjectMetadata();
		
		<%
		if(!enableKMS && enableServerSideEncryption){
		%>
				<%
				if(isLog4jEnabled){
				%>	
					log.info("<%=cid%> - No KMS - Normal SSE");
				<%
				}
				%>
			objectMetadata_<%=cid%>.setSSEAlgorithm(com.amazonaws.services.s3.model.ObjectMetadata.AES_256_SERVER_SIDE_ENCRYPTION);
		<%
		}
		%>
		
		com.amazonaws.services.s3.transfer.TransferManager tm_<%=cid%> = com.amazonaws.services.s3.transfer.TransferManagerBuilder
			.standard()
			.withMinimumUploadPartSize(partSizeInBytes_<%=cid%>)
			.withMultipartUploadThreshold(multipart_upload_threshold_<%=cid%>)
			.withS3Client(conn_<%=cid%>)
			.build();
			
		com.amazonaws.services.s3.model.PutObjectRequest putRequest_<%=cid%> = null;
		if(useStream_<%=cid%>) {
			putRequest_<%=cid%> = new com.amazonaws.services.s3.model.PutObjectRequest(<%=bucket%>, key_<%=cid%>, sourceStream_<%=cid%>, objectMetadata_<%=cid%>);
		} else {
			putRequest_<%=cid%> = new com.amazonaws.services.s3.model.PutObjectRequest(<%=bucket%>, key_<%=cid%>, inputFile_<%=cid%>).withMetadata(objectMetadata_<%=cid%>);
		}
		
		<%@ include file="./set_kms.javajet"%>
		
		com.amazonaws.services.s3.transfer.Upload upload_<%=cid%> = tm_<%=cid%>.upload(putRequest_<%=cid%>);
		
		upload_<%=cid%>.waitForCompletion();
		
		<%
		if(isLog4jEnabled){
		%>	
			log.info("<%=cid%> - Upload the object successfully.");
		<%
		}
		%>
	}catch(java.lang.Exception e_<%=cid%>){
		<%
		if (("true").equals(dieOnError)) {
		%>
			throw(e_<%=cid%>);
		<%
		} else {
			if(isLog4jEnabled){
			%>
				log.error("<%=cid%> - " + e_<%=cid%>.getMessage());
			<%
			}
			%>
			System.err.println(e_<%=cid%>.getMessage());
		<%
		}
		if(!("true").equals(useExistingConn)) {
		%>
	}finally{
		if(conn_<%=cid%> !=null){
			conn_<%=cid%>.shutdown();
		}
		<%
		}
		%>
	}
	        