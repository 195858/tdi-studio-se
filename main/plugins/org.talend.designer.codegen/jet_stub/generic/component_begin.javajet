<%@ jet
imports="
        java.util.List
        java.util.ArrayList
        java.util.Stack
        org.talend.components.api.component.ComponentDefinition
        org.talend.components.api.properties.ComponentProperties
        org.talend.components.api.runtime.ComponentRuntimeContainer
        org.talend.components.api.runtime.ComponentRuntime
        org.talend.components.api.schema.SchemaElement
		org.talend.component.core.model.Component
        org.talend.core.model.metadata.IMetadataColumn
        org.talend.core.model.metadata.IMetadataTable
        org.talend.core.model.metadata.types.JavaType
        org.talend.core.model.metadata.types.JavaTypesManager
        org.talend.core.model.process.ElementParameterParser
        org.talend.core.model.process.IConnection
        org.talend.core.model.process.IConnectionCategory
        org.talend.core.model.process.INode
        org.talend.core.model.utils.TalendTextUtils
        org.talend.designer.codegen.config.CodeGeneratorArgument
		"
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();
Component component = (Component)node.getComponent();
ComponentProperties componentProps = node.getComponentProperties();
ComponentDefinition def = component.getComponentDefinition();

List<IMetadataTable> metadatas = node.getMetadataList();
IMetadataTable metadata = metadatas.get(0);
if ((metadatas != null) && (metadatas.size() > 0) && (metadata = metadatas.get(0)) != null) { // metadata

List<IMetadataColumn> columnList = metadata.getListColumns();
int nbSchemaColumns = columnList.size();

boolean hasDynamic = false;
for (IMetadataColumn column : columnList) {
	if (column.getTalendType().equals("id_Dynamic")) {
		hasDynamic = true;
		break;
	}
}

%>

org.talend.components.api.component.ComponentDefinition def_<%=cid %> =
   new <%= def.getClass().getName()%>();


<%
List<Component.CodegenPropInfo> propsToProcess = component.getCodegenPropInfos(componentProps);
%>

<%= componentProps.getClass().getName()%> props_<%=cid %> = (<%= componentProps.getClass().getName()%>) def_<%=cid %>.createProperties();
props_<%=cid %>.init();
<%

for (Component.CodegenPropInfo propInfo : propsToProcess) { // propInfo
	List<SchemaElement> properties = propInfo.props.getProperties();
	for (SchemaElement property : properties) { // property
		if (propInfo.props.getValue(property) != null) { // if
%>
			props_<%=cid %><%=propInfo.fieldName%>.setValue("<%=property.getName()%>", 
				<%=component.getCodegenValue(property, propInfo.props.getStringValue(property))%>);
<%
		} // if
	} // property
} // propInfo
%>

org.talend.components.api.runtime.ComponentRuntimeContainer container_<%=cid %> = 
<%
	if (hasDynamic) {
%>
    	new routines.system.ComponentRuntimeContainerDynamic() {
<%
	} else {
%>
    	new routines.system.ComponentRuntimeContainerBase() {
<%
	}
%>
    public java.util.Map<String, Object> getGlobalMap() {
		return globalMap;
    }
};

org.talend.components.api.runtime.ComponentRuntime runtime_<%=cid %> = def_<%=cid %>.createRuntime();
runtime_<%=cid %>.setContainer(container_<%=cid %>);

<%
if (component.canStart()) { // canStart
// Input
%>
	runtime_<%=cid %>.inputBegin(props_<%=cid %>);
<%
	List<? extends IConnection> outgoingConns = node.getOutgoingSortedConnections();
	if (outgoingConns.size() > 0) { // outgoing size
		// FIXME - multiple outgoing connections?
		IConnection outgoingConn = outgoingConns.get(0);
		if (outgoingConn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) { // outgoingConn 
%>
	
			java.util.Map<String, Object> row_<%=cid %>;
			Object value_<%=cid %>;
			while ((row_<%=cid %> = runtime_<%=cid %>.inputRow()) != null) { // while (ends in component_end)
<%
				for (IMetadataColumn column : columnList) { // column
					String columnName = column.getLabel();
%>
					value_<%=cid %> = row_<%=cid %>.get("<%=columnName %>");
					if (value_<%=cid %> != null)
						<%=outgoingConn.getName() %>.<%=columnName %> = value_<%=cid %>;
<%
				} // column
		} // outgoingConn
	} // outgoing size
} else { // canStart
// Output
%>
	runtime_<%=cid %>.outputBegin(props_<%=cid %>);
<%
} // canStart
} // metadata
%>



