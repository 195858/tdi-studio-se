<%@ jet
imports="
        java.util.List
        java.util.ArrayList
        java.util.Stack
        org.talend.components.api.component.ComponentDefinition
        org.talend.components.api.component.InputComponentDefinition
        org.talend.components.api.component.OutputComponentDefinition
        org.talend.components.api.properties.ComponentProperties
        org.talend.components.api.container.RuntimeContainer
        org.talend.daikon.properties.Property
        org.talend.daikon.NamedThing
		org.talend.designer.core.generic.model.Component
        org.talend.core.model.metadata.IMetadataColumn
        org.talend.core.model.metadata.IMetadataTable
        org.talend.core.model.metadata.types.JavaType
        org.talend.core.model.metadata.types.JavaTypesManager
        org.talend.core.model.process.ElementParameterParser
        org.talend.core.model.process.IConnection
        org.talend.core.model.process.IConnectionCategory
        org.talend.core.model.process.INode
        org.talend.core.model.utils.TalendTextUtils
        org.talend.designer.codegen.config.CodeGeneratorArgument
		"
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();
Component component = (Component)node.getComponent();
ComponentProperties componentProps = node.getComponentProperties();
ComponentDefinition def = component.getComponentDefinition();

List<IMetadataTable> metadatas = node.getMetadataList();
IMetadataTable metadata = null;
List<IMetadataColumn> columnList = null;
boolean hasDynamic = false;
String dynamicColName = null;
if ((metadatas != null) && (metadatas.size() > 0)) { // metadata

	metadata = metadatas.get(0);
	if(metadata != null){
		columnList = metadata.getListColumns();
		int nbSchemaColumns = columnList.size();
		
		hasDynamic = false;
		for (IMetadataColumn column : columnList) {
			if (column.getTalendType().equals("id_Dynamic")) {
				hasDynamic = true;
				dynamicColName = column.getLabel();
				break;
			}
		}
	}
}	
%>

org.talend.components.api.component.ComponentDefinition def_<%=cid %> =
   new <%= def.getClass().getName()%>();
 
<%
List<Component.CodegenPropInfo> propsToProcess = component.getCodegenPropInfos(componentProps);
%>

<%= componentProps.getClass().getName()%> props_<%=cid %> = (<%= componentProps.getClass().getName()%>) def_<%=cid %>.createRuntimeProperties();
<%

for (Component.CodegenPropInfo propInfo : propsToProcess) { // propInfo
	List<NamedThing> properties = propInfo.props.getProperties();
	for (NamedThing prop : properties) { // property
        if (prop instanceof Property) { // if, only deal with valued Properties
        Property property = (Property)prop;
		  Object value = property.getValue();
		  if (value != null && (!(value instanceof String) || !((String)value).equals(""))) { // if
%>
	       		props_<%=cid %><%=propInfo.fieldName%>.setValue("<%=property.getName()%>", 
			     	<%=component.getCodegenValue(property, property.getStringValue())%>);
<%
    		} // if
        }//else may be a ComponentProperties so ignor
	} // property
} // propInfo
%>
//org.talend.components.api.container.RuntimeContainer container_<%=cid %> = 
<%
	if (hasDynamic) {
%>
  //  	new routines.system.ComponentRuntimeContainerDynamic() {
<%
	} else {
%>
    //	new routines.system.ComponentRuntimeContainerBase() {
<%
	}
%>
   // public java.util.Map<String, Object> getGlobalMap() {
	//	return globalMap;
    //}
    
   // public String getCurrentComponentName(){
   // 	return "<%=cid %>";
    //}
//};

<%
if(metadata != null){
	if(def instanceof InputComponentDefinition){
		//TODO how about UnboundedSource(tJMSInput?)
		%>
		org.talend.components.api.component.runtime.BoundedSource boundedSource_<%=cid%> = (org.talend.components.api.component.runtime.BoundedSource)((org.talend.components.api.component.InputComponentDefinition)def_<%=cid%>).getRuntime();
		boundedSource_<%=cid%>.initialize(null, props_<%=cid%>);<%//FIXME for the null adaptor%>
		org.talend.components.api.component.runtime.BoundedReader boundedReader_<%=cid%> = boundedSource_<%=cid%>.createReader(null);
		<%//add calculate dynamic code in here%>
		java.util.List<org.talend.daikon.schema.SchemaElement> fields_<%=cid%> = ((org.talend.daikon.schema.Schema) props_<%=cid%>.module.schema.schema.getValue()).getRoot().getChildren();
		java.util.Map<String, org.talend.daikon.schema.SchemaElement> fieldsMap_<%=cid%> = new java.util.HashMap<String, org.talend.daikon.schema.SchemaElement>();
		for(org.talend.daikon.schema.SchemaElement field_<%=cid%> : fields_<%=cid%>){
			fieldsMap_<%=cid%>.put(field_<%=cid%>.getName(), field_<%=cid%>);
		}
		<%
		if(hasDynamic){
		%>
			routines.system.Dynamic dynamic_<%=cid%> = new routines.system.Dynamic();
			org.talend.daikon.schema.SchemaElement dynamicSchemaElement_<%=cid%> = fieldsMap_<%=cid%>.get("<%=dynamicColName%>");
			for(org.talend.daikon.schema.SchemaElement childDynamic_<%=cid%> : dynamicSchemaElement_<%=cid%>.getChildren()){
				routines.system.DynamicMetadata dynamicMetadata_<%=cid%> = new routines.system.DynamicMetadata();
		    	dynamicMetadata_<%=cid%>.setName(childDynamic_<%=cid%>.getName());
		    	dynamicMetadata_<%=cid%>.setDbName(childDynamic_<%=cid%>.getName());
		    	String talendType_<%=cid%> = null;
		    	//TODO finish the mapping
		    	if(childDynamic_<%=cid%>.getType() == org.talend.daikon.schema.SchemaElement.Type.STRING){
		    		talendType_<%=cid%> = "String";
		    	}
		    	dynamicMetadata_<%=cid%>.setType("id_" + talendType_<%=cid%>);
		    	dynamic_<%=cid%>.metadatas.add(dynamicMetadata_<%=cid%>);
			} 
		<%
		}
		List<? extends IConnection> outgoingConns = node.getOutgoingSortedConnections();
		if(outgoingConns.size() > 0){ // outgoing size
			// FIXME - multiple outgoing connections?
			IConnection outgoingConn = outgoingConns.get(0);
			if(outgoingConn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)){ // outgoingConn 
			%>
				for(boolean available = boundedReader_<%=cid%>.start(); available; available = boundedReader_<%=cid%>.advance()){
					<%
					if(hasDynamic){
					%>
						dynamic_<%=cid%>.clearColumnValues();
						for(org.talend.daikon.schema.SchemaElement childDynamic_<%=cid%> : dynamicSchemaElement_<%=cid%>.getChildren()){
							dynamic_<%=cid%>.addColumnValue(
								<%//TODO change to use type mapping later%>
								dynamic_<%=cid%>.addColumnValue(((java.util.Map<String, Object>)boundedReader_<%=cid%>.getCurrent()).get(childDynamic_<%=cid%>.getName()));
							);
						}
						<%=outgoingConn.getName()%>.<%=dynamicColName%> = dynamic_<%=cid%>;
					<%
					}
					%>
					Object value_<%=cid%>;
					<%
					for(IMetadataColumn column : columnList){ // column
						String columnName = column.getLabel();
		              	JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
						String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
						String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
						if(columnName.equals(dynamicColName)){
							continue;
						}
						//TODO consider null and default and reject in here
						//TODO change to use type mapping later
						%>
						value_<%=cid%> = ((java.util.Map<String, Object>)boundedReader_<%=cid%>.getCurrent()).get("<%=columnName%>");
						if (value_<%=cid %> != null) {
							<%
							if (javaType == JavaTypesManager.STRING) { 
							%>
								<%=outgoingConn.getName()%>.<%=columnName%> = (String) value_<%=cid%>;
							<%
							} else if (javaType == JavaTypesManager.OBJECT) {
							%>
								<%=outgoingConn.getName()%>.<%=columnName%> = value_<%=cid%>;
							<%
							} else if(javaType == JavaTypesManager.DATE) { 
							%>
								<%=outgoingConn.getName()%>.<%=columnName%> = ParserUtils.parseTo_Date((String)value_<%=cid%>, <%= patternValue %>);
							<%
							} else if(javaType == JavaTypesManager.BYTE_ARRAY) {
							%>
								<%=outgoingConn.getName()%>.<%=columnName%> = value_<%=cid%>.getBytes();
							<%
							} else  { // other
							%>
								<%=outgoingConn.getName()%>.<%=columnName%> = ParserUtils.parseTo_<%= typeToGenerate %>((String)value_<%=cid%>);
							<%
							}
							%>
						}else{
							<%=outgoingConn.getName()%>.<%=columnName%> = <%=JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate)%>;
						}
					<%
					}
			}			
		}
	}else if(def instanceof OutputComponentDefinition){
	%>
		org.talend.components.api.component.runtime.Sink sink_<%=cid%> = ((org.talend.components.api.component.OutputComponentDefinition)def_<%=cid%>).getRuntime();
		sink_<%=cid%>.initialize(null, props_<%=cid%>);
		org.talend.components.api.component.runtime.WriteOperation writeOperation_<%=cid%> = sink_<%=cid%>.createWriteOperation();
		writeOperation_<%=cid%>.initialize(null);<%//create folder for file; create database/table for db%>
		org.talend.components.api.component.runtime.Writer writer_<%=cid%> = writeOperation_<%=cid%>.createWriter(null);
		java.util.List<org.talend.daikon.schema.SchemaElement> fields_<%=cid%> = ((Schema) props_<%=cid%>.module.schema.schema.getValue()).getRoot().getChildren()
	<%	
	}
}
%>
