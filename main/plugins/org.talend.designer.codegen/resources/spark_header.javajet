<%@ jet
    imports="
        org.talend.core.model.process.IProcess
        org.talend.core.model.process.INode
        org.talend.core.model.process.IConnection
        org.talend.core.model.process.EConnectionType
        org.talend.core.model.process.ElementParameterParser
        org.talend.designer.codegen.config.CodeGeneratorArgument
        org.talend.designer.runprocess.CodeGeneratorRoutine
        org.talend.designer.codegen.i18n.Messages
        org.talend.core.ui.branding.IBrandingService
        org.talend.core.ui.branding.AbstractBrandingService
        org.talend.core.GlobalServiceRegister
        org.talend.designer.codegen.ITalendSynchronizer
        java.util.List
        java.util.ArrayList
        java.util.Vector
        org.talend.core.model.process.IContextParameter
        org.talend.core.model.metadata.types.JavaTypesManager
        org.talend.core.model.utils.NodeUtil
        org.talend.core.model.utils.JavaResourcesHelper
    "
%>
<%
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    Vector v = (Vector) codeGenArgument.getArgument();
    IProcess process = (IProcess)v.get(0);
    String version = (String)v.get(1);

    List< ? extends INode> processNodes = (List< ? extends INode>)process.getGeneratingNodes();
    List<IContextParameter> params = new ArrayList<IContextParameter>();
    params=process.getContextManager().getDefaultContext().getContextParameterList();
%>
<%
//?
IBrandingService service=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
if(service instanceof AbstractBrandingService){
%>
<%=((AbstractBrandingService) service).getJobLicenseHeader(version)%>
<%
}
    String jobFolderName = JavaResourcesHelper.getJobFolderName(process.getName(), process.getVersion());
    String packageName = codeGenArgument.getCurrentProjectName().toLowerCase() + "." + jobFolderName;
%>
package <%= packageName %>;

import routines.system.*;
import routines.system.api.*;
<%for (String routine : CodeGeneratorRoutine.getRequiredRoutineName(process)) {
    if(!routine.equals(ITalendSynchronizer.TEMPLATE)){%>
import routines.<%=routine%>;
<%  }
}%>


import java.io.IOException;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.math.BigDecimal;

<%=ElementParameterParser.getValue(process, "__HEADER_IMPORT__") %>
<%=ElementParameterParser.getValue(process, "__FOOTER_IMPORT__") %>


<%
    List<INode> nodesWithImport = process.getNodesWithImport();
    if(nodesWithImport != null) {
        for(INode node:nodesWithImport){
%>
    //the import part of <%=node.getUniqueName() %>
    <%=ElementParameterParser.getValue(node, "__IMPORT__") %>

<%      }
    }
%>

@SuppressWarnings("unused")

/**
 * Job: <%=process.getName() %> Purpose: <%=ElementParameterParser.getValue(process, "__PURPOSE__") %><br>
 * Description: <%=ElementParameterParser.getValue(process, "__DESCRIPTION__") %> <br>
 * @author <%=ElementParameterParser.getValue(process, "__AUTHOR__") %>
 * @version <%=version %>
 * @status <%=ElementParameterParser.getValue(process, "__STATUS__") %>
 */
public class <%=process.getName()%> {

}

