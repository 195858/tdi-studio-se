<%@ jet
    imports="
        org.talend.core.model.process.IProcess
        org.talend.core.model.process.INode
        org.talend.core.model.process.IConnection
        org.talend.core.model.process.EConnectionType
        org.talend.core.model.process.ElementParameterParser
        org.talend.designer.codegen.config.CodeGeneratorArgument
        org.talend.designer.runprocess.CodeGeneratorRoutine
        org.talend.designer.codegen.i18n.Messages
        org.talend.core.ui.branding.IBrandingService
        org.talend.core.ui.branding.AbstractBrandingService
        org.talend.core.GlobalServiceRegister
        org.talend.designer.codegen.ITalendSynchronizer
        java.util.List
        java.util.ArrayList
        java.util.Vector
        org.talend.core.model.process.IContextParameter
        org.talend.core.model.metadata.types.JavaTypesManager
        org.talend.core.model.utils.NodeUtil
        org.talend.core.model.utils.JavaResourcesHelper
    "
%>
<%
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    Vector v = (Vector) codeGenArgument.getArgument();
    IProcess process = (IProcess)v.get(0);
    String version = (String)v.get(1);

    List< ? extends INode> processNodes = (List< ? extends INode>)process.getGeneratingNodes();
    List<IContextParameter> params = new ArrayList<IContextParameter>();
    params=process.getContextManager().getDefaultContext().getContextParameterList();
%>
<%
//?
IBrandingService service=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
if(service instanceof AbstractBrandingService){
%>
<%=((AbstractBrandingService) service).getJobLicenseHeader(version)%>
<%
}
    String jobFolderName = JavaResourcesHelper.getJobFolderName(process.getName(), process.getVersion());
    String packageName = codeGenArgument.getCurrentProjectName().toLowerCase() + "." + jobFolderName;
%>
package <%= packageName %>;

import routines.system.*;
import routines.system.api.*;
<%for (String routine : CodeGeneratorRoutine.getRequiredRoutineName(process)) {
    if(!routine.equals(ITalendSynchronizer.TEMPLATE)){%>
import routines.<%=routine%>;
<%  }
}%>


import java.io.IOException;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.math.BigDecimal;
import java.io.ObjectInputStream;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.FSDataInputStream;
import org.apache.hadoop.fs.FSDataOutputStream;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.compress.CompressionCodec;
import org.apache.hadoop.io.compress.CompressionCodecFactory;
import org.apache.hadoop.io.compress.GzipCodec;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.NullWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.io.Writable;
import org.apache.hadoop.io.WritableComparable;
import org.apache.hadoop.io.WritableComparator;
import org.apache.hadoop.io.WritableUtils;
import org.apache.hadoop.io.SequenceFile;
import org.apache.hadoop.mapred.FileAlreadyExistsException;
import org.apache.hadoop.mapred.FileInputFormat;
import org.apache.hadoop.mapred.SequenceFileInputFormat;
import org.apache.hadoop.mapred.FileOutputFormat;
import org.apache.hadoop.mapred.FileSplit;
import org.apache.hadoop.mapred.InputSplit;
import org.apache.hadoop.mapred.InvalidJobConfException;
import org.apache.hadoop.mapred.JobClient;
import org.apache.hadoop.mapred.JobConf;
import org.apache.hadoop.mapred.JobConfigurable;
import org.apache.hadoop.mapred.Mapper;
import org.apache.hadoop.mapred.MapReduceBase;
import org.apache.hadoop.mapred.OutputCollector;
import org.apache.hadoop.mapred.RecordReader;
import org.apache.hadoop.mapred.RecordWriter;
import org.apache.hadoop.mapred.Reducer;
import org.apache.hadoop.mapred.Reporter;
import org.apache.hadoop.mapred.InputFormat;
import org.apache.hadoop.mapred.OutputFormat;
import org.apache.hadoop.security.UserGroupInformation;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;
import org.apache.hadoop.util.Progressable;
import org.apache.hadoop.util.ReflectionUtils;
import org.apache.commons.lang.SerializationUtils;
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.binary.StringUtils;
import java.io.DataInput;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.util.Date;

<%=ElementParameterParser.getValue(process, "__HEADER_IMPORT__") %>
<%=ElementParameterParser.getValue(process, "__FOOTER_IMPORT__") %>


<%
    List<INode> nodesWithImport = process.getNodesWithImport();
    if(nodesWithImport != null) {
        for(INode node:nodesWithImport){
%>
    //the import part of <%=node.getUniqueName() %>
    <%=ElementParameterParser.getValue(node, "__IMPORT__") %>

<%      }
    }
%>

@SuppressWarnings("unused")

/**
 * Job: <%=process.getName() %> Purpose: <%=ElementParameterParser.getValue(process, "__PURPOSE__") %><br>
 * Description: <%=ElementParameterParser.getValue(process, "__DESCRIPTION__") %> <br>
 * @author <%=ElementParameterParser.getValue(process, "__AUTHOR__") %>
 * @version <%=version %>
 * @status <%=ElementParameterParser.getValue(process, "__STATUS__") %>
 */
public class <%=process.getName()%> implements TalendJob {
    private final static String utf8Charset = "UTF-8";
    private GlobalVar globalMap = null;
    private org.apache.log4j.Logger LOG = org.apache.log4j.Logger
            .getLogger(<%=process.getName()%>.class);

    private static class GlobalVar {
        public static final String GLOBALVAR_PARAMS_PREFIX = "talend.globalvar.params.";
        private Configuration job;
        private java.util.Map<String, Object> map;

        public GlobalVar(Configuration job) {
            this.job = job;
            this.map = new java.util.HashMap<String, Object>();
        }

        public Object get(String key) {
            String tempValue = job.get(GLOBALVAR_PARAMS_PREFIX + key);
            if (tempValue != null) {
                return SerializationUtils.deserialize(Base64
                        .decodeBase64(StringUtils.getBytesUtf8(tempValue)));
            } else {
                return null;
            }
        }

        public void put(String key, Object value) {
            if (value == null)
                return;
            job.set(GLOBALVAR_PARAMS_PREFIX + key, StringUtils
                    .newStringUtf8(Base64.encodeBase64(SerializationUtils
                            .serialize((Serializable) value))));
        }

        public void putLocal(String key, Object value) {
            map.put(key, value);
        }

        public Object getLocal(String key) {
            return map.get(key);
        }
    }

    // create and load default properties
    private java.util.Properties defaultProps = new java.util.Properties();
    
    public static class ContextProperties extends java.util.Properties {

        private static final long serialVersionUID = 1L;

        public static final String CONTEXT_FILE_NAME = "talend.context.fileName";
        public static final String CONTEXT_KEYS = "talend.context.keys";
        public static final String CONTEXT_PARAMS_PREFIX = "talend.context.params.";
        public static final String CONTEXT_PARENT_KEYS = "talend.context.parent.keys";
        public static final String CONTEXT_PARENT_PARAMS_PREFIX = "talend.context.parent.params.";

        public ContextProperties(java.util.Properties properties){
            super(properties);
        }

        public ContextProperties(){
            super();
        }

        public ContextProperties(Configuration job){
            super();
            String contextFileName = (String) job.get(CONTEXT_FILE_NAME);
            try {
                if(contextFileName != null && !"".equals(contextFileName)){
                    java.io.File contextFile = new java.io.File(contextFileName);
                    if (contextFile.exists()) {
                        java.io.InputStream contextIn = contextFile.toURI().toURL().openStream();
                        this.load(contextIn);
                        contextIn.close();
                    } else {
                        java.io.InputStream contextIn = <%=process.getName()%>.class.getClassLoader().getResourceAsStream("<%=codeGenArgument.getCurrentProjectName().toLowerCase()%>/<%=jobFolderName%>/contexts/"+contextFileName);
                        if(contextIn != null){
                            this.load(contextIn);
                            contextIn.close();
                        }
                    }
                }
                Object contextKeys = job.get(CONTEXT_KEYS);
                if (contextKeys != null) {
                    java.util.StringTokenizer st = new java.util.StringTokenizer(contextKeys.toString(), " ");
                    while (st.hasMoreTokens()) {
                        String contextKey = st.nextToken();
                        if((String) job.get(CONTEXT_PARAMS_PREFIX + contextKey) != null){
                            this.put(contextKey, job.get(CONTEXT_PARAMS_PREFIX + contextKey));
                        }
                    }
                }
                Object contextParentKeys = job.get(CONTEXT_PARENT_KEYS);
                if (contextParentKeys != null) {
                    java.util.StringTokenizer st = new java.util.StringTokenizer(contextParentKeys.toString(), " ");
                    while (st.hasMoreTokens()) {
                        String contextKey = st.nextToken();
                        if((String)job.get(CONTEXT_PARENT_PARAMS_PREFIX + contextKey) != null){
                            this.put(contextKey, job.get(CONTEXT_PARENT_PARAMS_PREFIX + contextKey));
                        }
                    }
                }

                this.loadValue(null,job);
            } catch (java.io.IOException ie) {
                System.err.println("Could not load context " + contextFileName);
                ie.printStackTrace();
            }
        }

        public void synchronizeContext(){
            <%
            for(IContextParameter ctxParam : params){
                String cParaName = ctxParam.getName();
                %>
                if(<%=cParaName %> != null){
                    <%if(ctxParam.getType().equals("id_Date")){%>
                        String pattern_<%=cParaName %> = "yyyy-MM-dd HH:mm:ss";
                        String value_<%=cParaName %> = "<%=ctxParam.getValue() %>";
                        String[] parts_<%=cParaName %> = value_<%=cParaName %>.split(";");
                        if(parts_<%=cParaName %>.length > 1){
                            pattern_<%=cParaName %> = parts_<%=cParaName %>[0];
                            this.setProperty("<%=cParaName %>", pattern_<%=cParaName %> + ";" + FormatterUtils.format_Date(<%=cParaName %>, pattern_<%=cParaName %>));
                        }else{
                            this.setProperty("<%=cParaName %>", FormatterUtils.format_Date(<%=cParaName %>, pattern_<%=cParaName %>));
                        }
                    <%}else{%>
                        this.setProperty("<%=cParaName %>", <%=cParaName %>.toString());
                    <%}%>
                }
            <%
            }
            %>
        }

        <%
        for(IContextParameter ctxParam : params){
            if(ctxParam.getType().equals("id_List Of Value") || ctxParam.getType().equals("id_File") || ctxParam.getType().equals("id_Directory")){
            %>
                public String <%=ctxParam.getName()%>;
                public String get<%=Character.toUpperCase(ctxParam.getName().charAt(0)) + ctxParam.getName().substring(1)%>(){
                    return this.<%=ctxParam.getName()%>;
                }
            <%
            }else{
            %>
                public <%=JavaTypesManager.getTypeToGenerate(ctxParam.getType(),true)%> <%=ctxParam.getName()%>;
                public <%=JavaTypesManager.getTypeToGenerate(ctxParam.getType(),true)%> get<%=Character.toUpperCase(ctxParam.getName().charAt(0)) + ctxParam.getName().substring(1)%>(){
                    return this.<%=ctxParam.getName()%>;
                }
            <%
            }
        }
        %>
        public void loadValue(java.util.Properties context_param, Configuration job){
            <%
            for(IContextParameter ctxParam : params){
                if (ctxParam.getType().equals("id_Password")) {
                %>
                    String pwd_<%=ctxParam.getName()%>_value = this.getProperty("<%=ctxParam.getName()%>");
                    this.<%=ctxParam.getName()%> = null;
                    if(pwd_<%=ctxParam.getName()%>_value!=null) {
                        //no need to decrypt if it come from program argument or parent job runtime
                        if((context_param!=null && context_param.containsKey("<%=ctxParam.getName()%>"))
                         || (job!=null && job.get(CONTEXT_PARAMS_PREFIX + "<%=ctxParam.getName()%>") != null)
                         || (job!=null && job.get(CONTEXT_PARENT_PARAMS_PREFIX + "<%=ctxParam.getName()%>") != null)){
                            this.<%=ctxParam.getName()%> = pwd_<%=ctxParam.getName()%>_value;
                        } else if (!pwd_<%=ctxParam.getName()%>_value.isEmpty()) {
                            try {
                                this.<%=ctxParam.getName()%> = routines.system.PasswordEncryptUtil.decryptPassword(pwd_<%=ctxParam.getName()%>_value);
                            } catch (java.lang.RuntimeException e) {
                                //do nothing
                            }
                        }
                    }
                <%
                    continue;
                }
                String typeToGenerate ="String";
                if( !(ctxParam.getType().equals("id_File") || ctxParam.getType().equals("id_Directory") ||ctxParam.getType().equals("id_List Of Value"))){
                   typeToGenerate=JavaTypesManager.getTypeToGenerate(ctxParam.getType(),true);
                }
                if(typeToGenerate.equals("java.util.Date")){
                %>
                    try{
                        String context_<%=ctxParam.getName()%>_value = this.getProperty("<%=ctxParam.getName()%>");
                        if (context_<%=ctxParam.getName()%>_value == null){
                            context_<%=ctxParam.getName()%>_value = "";
                        }
                        int context_<%=ctxParam.getName()%>_pos = context_<%=ctxParam.getName()%>_value.indexOf(";");
                        String context_<%=ctxParam.getName()%>_pattern =  "yyyy-MM-dd HH:mm:ss";
                        if(context_<%=ctxParam.getName()%>_pos > -1){
                            context_<%=ctxParam.getName()%>_pattern = context_<%=ctxParam.getName()%>_value.substring(0, context_<%=ctxParam.getName()%>_pos);
                            context_<%=ctxParam.getName()%>_value = context_<%=ctxParam.getName()%>_value.substring(context_<%=ctxParam.getName()%>_pos + 1);
                        }

                        this.<%=ctxParam.getName()%>=(java.util.Date)(new java.text.SimpleDateFormat(context_<%=ctxParam.getName()%>_pattern).parse(context_<%=ctxParam.getName()%>_value));

                    }catch(java.text.ParseException e){
                        this.<%=ctxParam.getName()%>=null;
                    }
                  <%
                }else if(typeToGenerate.equals("Object")||typeToGenerate.equals("String")||typeToGenerate.equals("java.lang.String")){
                %>
                    this.<%=ctxParam.getName()%>=(<%=typeToGenerate%>) this.getProperty("<%=ctxParam.getName()%>");
                <%
                }else if(typeToGenerate.equals("Character")&&ctxParam.getName()!=null){
                 %>
                     this.<%=ctxParam.getName()%>= new java.text.StringCharacterIterator(this.getProperty("<%=ctxParam.getName()%>")).first();
                 <%
                }else{
                 %>
                     try{
                         this.<%=ctxParam.getName()%>=routines.system.ParserUtils.parseTo_<%=typeToGenerate%>(this.getProperty("<%=ctxParam.getName()%>"));
                     }catch(NumberFormatException e){
                         this.<%=ctxParam.getName()%>=null;
                      }
                 <%
                }
            }
            %>
        }
    }
    private ContextProperties context = new ContextProperties();
    public ContextProperties getContext() {
        return this.context;
    }

    private final static String jobVersion = "<%=process.getVersion() %>";
    private final static String jobName = "<%=codeGenArgument.getJobName() %>";
    private final static String projectName = "<%=codeGenArgument.getCurrentProjectName() %>";
    public Integer errorCode = null;

    private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
    private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
            new java.io.BufferedOutputStream(baos));

    public String getExceptionStackTrace() {
        if ("failure".equals(this.getStatus())) {
            errorMessagePS.flush();
            return baos.toString();
        }
        return null;
    }

    //should be remove later
    public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {

    }

