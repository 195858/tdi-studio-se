<%@ jet
imports="
        java.util.List
        java.util.ArrayList
        java.util.Stack
        org.talend.components.api.component.ComponentDefinition
        org.talend.components.api.properties.ComponentProperties
        org.talend.components.api.runtime.ComponentRuntimeContainer
        org.talend.components.api.runtime.ComponentRuntime
        org.talend.components.api.schema.SchemaElement
		org.talend.component.core.model.Component
        org.talend.core.model.metadata.IMetadataColumn
        org.talend.core.model.metadata.IMetadataTable
        org.talend.core.model.metadata.types.JavaType
        org.talend.core.model.metadata.types.JavaTypesManager
        org.talend.core.model.process.ElementParameterParser
        org.talend.core.model.process.IConnection
        org.talend.core.model.process.IConnectionCategory
        org.talend.core.model.process.INode
        org.talend.core.model.utils.TalendTextUtils
        org.talend.designer.codegen.config.CodeGeneratorArgument
		"
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();
Component component = (Component)node.getComponent();
ComponentProperties componentProps = node.getComponentProperties();
ComponentDefinition def = component.getComponentDefinition();
%>

org.talend.components.api.component.ComponentDefinition def_<%=cid %> =
   new <%= def.getClass().getName()%>();


<%
List<Component.CodegenPropInfo> propsToProcess = component.getCodegenPropInfos(componentProps);
%>

org.talend.components.api.properties.ComponentProperties props_<%=cid %> = def_<%=cid %>.createProperties();
props_<%=cid %>.init();
<%

for (Component.CodegenPropInfo propInfo : propsToProcess) {
	List<SchemaElement> properties = propInfo.props.getProperties();
	for (SchemaElement property : properties) {
		if (propInfo.props.getValue(property) != null) {
%>

	props_<%=cid %><%=propInfo.fieldName%>.setValue("<%=property.getName()%>", 
		<%=component.getCodegenValue(property, propInfo.props.getStringValue(property))%>);

<%
		} // if
	} // for property
} // for propToProcess
%>



org.talend.components.api.runtime.ComponentRuntimeContainer container_<%=cid %> = 
    new org.talend.components.api.runtime.ComponentRuntimeContainer() {

    public java.util.Map<String, Object> getGlobalMap() {
		return globalMap;
    }

    public String formatDate(java.util.Date date, String pattern) {
		throw new RuntimeException("implement me");
    }
	
    public org.talend.components.api.schema.SchemaElement[] getDynamicElements(Object dynamic) {
		throw new RuntimeException("implement me");
    }

    public void setDynamicElements(org.talend.components.api.schema.SchemaElement[] elements) {
		throw new RuntimeException("implement me");
    }

    public Object getDynamicValue(Object dynamic, String fieldName) {
		throw new RuntimeException("implement me");
    }
};

org.talend.components.api.runtime.ComponentRuntime runtime_<%=cid %> = def_<%=cid %>.createRuntime();

<%
if (component.canStart()) {
// Input
%>
	runtime_<%=cid %>.inputBegin(props_<%=cid %>, container_<%=cid %>, null);

<%
} else { 
// Output
%>
	runtime_<%=cid %>.outputBegin(props_<%=cid %>, container_<%=cid %>);
<%
}
%>



