<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0">

	<!-- Talend Route OSGi blueprint descriptor -->
#if ($hasCXFComponent && ($hasCXFSamlConsumer || $hasCXFSamlProvider))
#[[
	<cm:property-placeholder persistent-id="org.talend.esb.job" placeholder-prefix="$job{"
		xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.2.0" />
]]#
#end
#if ($hasCXFSamlProvider)
#[[
	<cm:property-placeholder persistent-id="org.talend.esb.job.service" placeholder-prefix="$saml{"
		xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.2.0" />
]]#
#end
#if ($hasCXFRSSamlProviderAuthz)
#[[
	<cm:property-placeholder persistent-id="org.talend.esb.authorization.pep" placeholder-prefix="$pep{"
		xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.2.0" />
]]#
#end
#if ($hasCXFSamlConsumer)
#[[
	<cm:property-placeholder persistent-id="org.talend.esb.job.client" placeholder-prefix="$client{"
		xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.2.0" />
	<cm:property-placeholder persistent-id="org.talend.esb.job.client.sts" placeholder-prefix="$sts{"
		xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.2.0" />
]]#
#end

	<bean id="route" class="${className}">
		<property name="bundleContext" ref="blueprintBundleContext" />
		<!-- ESB Features For CXF -->
#if ($useSAM)
		<property name="eventFeature">
			<reference interface="org.talend.esb.sam.agent.feature.EventFeature" />
		</property>
#end
#if ($hasCXFComponent && ($hasCXFSamlConsumer || $hasCXFSamlProvider))
#[[
        <property name="policies">
            <map>
                <entry key="policy.username" value="$job{policy.username}" />
                <entry key="policy.saml" value="$job{policy.saml}" />
                <entry key="policy.saml.authz" value="$job{policy.saml.authz}" />
            </map>
        </property>
]]#
#end
#if ($hasCXFSamlProvider)
#[[
        <property name="securityProps" >
            <map>
                <entry key="security.signature.properties" value="$saml{security.signature.properties}" />
                <entry key="security.signature.username" value="$saml{security.signature.username}" />
                <entry key="security.signature.password" value="$saml{security.signature.password}" />
            </map>
        </property>
]]#
#end
#if ($hasCXFSamlConsumer)
#[[
        <property name="clientProperties">
            <map>
                <entry key="security.signature.properties" value="$client{security.signature.properties}" />
                <entry key="security.signature.username" value="$client{security.signature.username}" />
                <entry key="security.signature.password" value="$client{security.signature.password}" />
            </map>
        </property>
        <property name="stsProperties">
            <map>
                <entry key="sts.namespace" value="$sts{sts.namespace}" />
                <entry key="sts.service.name" value="$sts{sts.service.name}" />
                <entry key="sts.endpoint.name" value="$sts{sts.endpoint.name}" />
                <entry key="sts.wsdl.location" value="$sts{sts.wsdl.location}" />

                <entry key="ws-security.sts.token.username" value="$sts{ws-security.sts.token.username}" />
                <entry key="ws-security.sts.token.usecert" value="$sts{ws-security.sts.token.usecert}" />
                <entry key="ws-security.is-bsp-compliant" value="$sts{ws-security.is-bsp-compliant}" />

                <entry key="ws-security.sts.token.properties" value="$sts{ws-security.sts.token.properties}" />
                <entry key="security.encryption.properties" value="$sts{security.encryption.properties}" />
                <entry key="security.encryption.username" value="$sts{security.encryption.username}" />

                <entry key="sts.x509.wsdl.location" value="$sts{sts.x509.wsdl.location}" />
                <entry key="sts.x509.endpoint.name" value="$sts{sts.x509.endpoint.name}" />
            </map>
        </property>
]]#
#end
#if ($hasCXFRSSamlProviderAuthz)
#[[
		<property name="authorizationInterceptor">
			<bean class="org.talend.esb.authorization.xacml.rt.pep.CXFXACMLAuthorizingInterceptor">
				<property name="pdpAddress" value="$pep{tesb.pdp.address}"/>
			</bean>
		</property>
]]#
#end

#if (!$dataSources.isEmpty())
		<property name="dataSources">
			<map>
#foreach ($alias in $dataSources)
				<entry key="${alias}">
					<reference interface="javax.sql.DataSource" filter="(osgi.jndi.service.name=${alias})" />
				</entry>
#end ## end data sources aliases loop
			</map>
		</property>
#end
	</bean>

	<service ref="route">
		<interfaces>
			<value>routines.system.api.TalendJob</value>
			<value>routines.system.api.TalendESBRoute</value>
		</interfaces>
		<service-properties>
			<entry key="name" value="${name}" />
			<entry key="type" value="route" />
		</service-properties>
	</service>

</blueprint>
