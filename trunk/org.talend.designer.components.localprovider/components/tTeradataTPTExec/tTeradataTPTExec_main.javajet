<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.metadata.MappingTypeRetriever
    org.talend.core.model.metadata.MetadataTalendType
    java.util.List
    java.lang.StringBuilder
    java.util.Map
" 
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

String tdpid= ElementParameterParser.getValue(node, "__TDPID__");
String jobName= ElementParameterParser.getValue(node, "__JOB_NAME__");
String operatorLoad= ElementParameterParser.getValue(node, "__OPERATOR_LOAD__");
String operatorDataConnector= ElementParameterParser.getValue(node, "__OPERATOR_DATA_CONNECTOR__");
String layoutName= ElementParameterParser.getValue(node, "__LAYOUT_NAME__");
String dbname= ElementParameterParser.getValue(node, "__DBNAME__");
String dbuser= ElementParameterParser.getValue(node, "__USER__");
String dbpwd= ElementParameterParser.getValue(node, "__PASS__");
String table= ElementParameterParser.getValue(node, "__TABLE__");

String scriptPath= ElementParameterParser.getValue(node, "__SCRIPT_PATH__");
String execution= ElementParameterParser.getValue(node, "__EXECUTION__");
String action= ElementParameterParser.getValue(node, "__ACTION__");
String where= ElementParameterParser.getValue(node, "__WHERE__");
String loadFile= ElementParameterParser.getValue(node, "__LOAD_FILE__");
String separator= ElementParameterParser.getValue(node, "__FIELD_SEPARATOR__");
String errorFile= ElementParameterParser.getValue(node, "__ERROR_FILE__");
String beginLoad= ElementParameterParser.getValue(node, "__BEGINLOAD_ADVANCEDPARAM__");
boolean returnCodeDie= ElementParameterParser.getValue(node, "__RETURN_CODE_DIE__").equals("true");
String returnCode= ElementParameterParser.getValue(node, "__RETURN_CODE__");
boolean specifyLogTable= ElementParameterParser.getValue(node, "__SPECIFY_LOG_TABLE__").equals("true");
String logTable= ElementParameterParser.getValue(node, "__LOG_TABLE_TABLE__");

String defineCharset = ElementParameterParser.getValue(node, "__DEFINE_CHARSET__");
String charset = ElementParameterParser.getValue(node, "__CHARSET__");

if(!scriptPath.endsWith("/\"")){
	scriptPath = scriptPath+	"+\"/\"";
}
if(loadFile.indexOf("/") !=0 && ("Windows").equals(execution)){
	loadFile = loadFile.replaceAll("/", "\\\\\\\\");
}

String dbmsId = "teradata_id";

List<IMetadataColumn> columnList = null;
List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
	IMetadataTable metadata = metadatas.get(0);
	if (metadata!=null) {
		columnList = metadata.getListColumns();
	}
}
%>
String tableFullName_<%=cid%> = <%=dbname%> + "." + <%=table%>;
java.io.FileWriter fw_<%=cid %> = new java.io.FileWriter(<%=scriptPath%>+<%=table%>+".script");

<%//build script---------------------------------------------------------%>


fw_<%=cid %>.write("/* 1 */  \r\n");
fw_<%=cid %>.write("/* 2 */  \r\n");
fw_<%=cid %>.write("/* 3 */  DEFINE JOB " + <%=jobName%> + "\r\n");
fw_<%=cid %>.write("/* 4 */  (\r\n");
fw_<%=cid %>.write("/* 5 */  	DEFINE OPERATOR " + <%=operatorLoad%> + "\r\n");
fw_<%=cid %>.write("/* 6 */  	TYPE LOAD\r\n");
fw_<%=cid %>.write("/* 7 */  	SCHEMA *\r\n");
fw_<%=cid %>.write("/* 8 */  	ATTRIBUTES\r\n");
fw_<%=cid %>.write("/* 9 */  	(\r\n");
fw_<%=cid %>.write("/* 10 */  		VARCHAR UserName, \r\n");
fw_<%=cid %>.write("/* 11 */  		VARCHAR UserPassword, \r\n");
fw_<%=cid %>.write("/* 12 */  		VARCHAR LogTable, \r\n");
fw_<%=cid %>.write("/* 13 */  		VARCHAR TargetTable, \r\n");
fw_<%=cid %>.write("/* 14 */  		INTEGER BufferSize, \r\n");
fw_<%=cid %>.write("/* 15 */  		INTEGER ErrorLimit, \r\n");
fw_<%=cid %>.write("/* 16 */  		INTEGER MaxSessions, \r\n");
fw_<%=cid %>.write("/* 17 */  		INTEGER MinSessions, \r\n");
fw_<%=cid %>.write("/* 18 */  		INTEGER TenacityHours, \r\n");
fw_<%=cid %>.write("/* 19 */  		INTEGER TenacitySleep, \r\n");
fw_<%=cid %>.write("/* 20 */  		VARCHAR AccountID, \r\n");
fw_<%=cid %>.write("/* 21 */  		VARCHAR DateForm, \r\n");
fw_<%=cid %>.write("/* 22 */  		VARCHAR ErrorTable1, \r\n");
fw_<%=cid %>.write("/* 23 */  		VARCHAR ErrorTable2, \r\n");
fw_<%=cid %>.write("/* 24 */  		VARCHAR NotifyExit, \r\n");
fw_<%=cid %>.write("/* 25 */  		VARCHAR NotifyExitIsDLL, \r\n");
fw_<%=cid %>.write("/* 26 */  		VARCHAR NotifyLevel, \r\n");
fw_<%=cid %>.write("/* 27 */  		VARCHAR NotifyMethod, \r\n");
fw_<%=cid %>.write("/* 28 */  		VARCHAR NotifyString, \r\n");
fw_<%=cid %>.write("/* 29 */  		VARCHAR PauseAcq, \r\n");
fw_<%=cid %>.write("/* 30 */  		VARCHAR PrivateLogName,\r\n"); 
fw_<%=cid %>.write("/* 31 */  		VARCHAR TdpId, \r\n");
fw_<%=cid %>.write("/* 32 */  		VARCHAR TraceLevel, \r\n");
fw_<%=cid %>.write("/* 33 */  		VARCHAR WorkingDatabase\r\n");
fw_<%=cid %>.write("/* 34 */  	);\r\n");
fw_<%=cid %>.write("/* 35 */  \r\n");
fw_<%=cid %>.write("/* 36 */  	DEFINE SCHEMA " + <%=layoutName%> + "\r\n");
fw_<%=cid %>.write("/* 37 */  	(\r\n");

<%
if(columnList!=null){
	int counter = 1;
	for(IMetadataColumn column:columnList){	
		if( columnList.size() != counter){	%>
		fw_<%=cid %>.write("               <%=column.getOriginalDbColumnName()%>"+" VARCHAR(<%=column.getLength() == null ? 0 : column.getLength()%>),\r\n");
	<%
		} else {
	%>
			fw_<%=cid %>.write("               <%=column.getOriginalDbColumnName()%>"+" VARCHAR(<%=column.getLength() == null ? 0 : column.getLength()%>)\r\n");
	<% 	}
		counter++;
	}
}
%>

fw_<%=cid %>.write("/* 45 */  	);\r\n");
fw_<%=cid %>.write("/* 46 */  \r\n");
fw_<%=cid %>.write("/* 47 */  	DEFINE OPERATOR " + <%=operatorDataConnector%> + "\r\n");
fw_<%=cid %>.write("/* 48 */  	TYPE DATACONNECTOR PRODUCER\r\n");
fw_<%=cid %>.write("/* 49 */  	SCHEMA " + <%=layoutName%> + "\r\n");
fw_<%=cid %>.write("/* 50 */  	ATTRIBUTES\r\n");
fw_<%=cid %>.write("/* 51 */  	(\r\n");
fw_<%=cid %>.write("/* 52 */  		VARCHAR FileName, \r\n");
fw_<%=cid %>.write("/* 53 */  		VARCHAR Format, \r\n");
fw_<%=cid %>.write("/* 54 */  		VARCHAR OpenMode, \r\n");
fw_<%=cid %>.write("/* 55 */  		INTEGER BlockSize, \r\n");
fw_<%=cid %>.write("/* 56 */  		INTEGER BufferSize, \r\n");
fw_<%=cid %>.write("/* 57 */  		INTEGER RetentionPeriod, \r\n");
fw_<%=cid %>.write("/* 58 */  		INTEGER RowsPerInstance, \r\n");
fw_<%=cid %>.write("/* 59 */  		INTEGER SecondarySpace, \r\n");
fw_<%=cid %>.write("/* 60 */  		INTEGER UnitCount, \r\n");
fw_<%=cid %>.write("/* 61 */  		INTEGER VigilElapsedTime, \r\n");
fw_<%=cid %>.write("/* 62 */  		INTEGER VigilWaitTime, \r\n");
fw_<%=cid %>.write("/* 63 */  		INTEGER VolumeCount, \r\n");
fw_<%=cid %>.write("/* 64 */  		VARCHAR AccessModuleName, \r\n");
fw_<%=cid %>.write("/* 65 */  		VARCHAR AccessModuleInitStr, \r\n");
fw_<%=cid %>.write("/* 66 */  		VARCHAR DirectoryPath, \r\n");
fw_<%=cid %>.write("/* 67 */  		VARCHAR ExpirationDate, \r\n");
fw_<%=cid %>.write("/* 68 */  		VARCHAR IndicatorMode, \r\n");
fw_<%=cid %>.write("/* 69 */  		VARCHAR PrimarySpace, \r\n");
fw_<%=cid %>.write("/* 70 */  		VARCHAR PrivateLogName, \r\n");
fw_<%=cid %>.write("/* 71 */  		VARCHAR RecordFormat, \r\n");
fw_<%=cid %>.write("/* 72 */  		VARCHAR RecordLength, \r\n");
fw_<%=cid %>.write("/* 73 */  		VARCHAR SpaceUnit, \r\n");
fw_<%=cid %>.write("/* 74 */  		VARCHAR TextDelimiter, \r\n");
fw_<%=cid %>.write("/* 75 */  		VARCHAR VigilNoticeFileName, \r\n");
fw_<%=cid %>.write("/* 76 */  		VARCHAR VigilStartTime, \r\n");
fw_<%=cid %>.write("/* 77 */  		VARCHAR VigilStopTime, \r\n");
fw_<%=cid %>.write("/* 78 */  		VARCHAR VolSerNumber, \r\n");
fw_<%=cid %>.write("/* 79 */  		VARCHAR UnitType\r\n");
fw_<%=cid %>.write("/* 80 */  	);\r\n");
fw_<%=cid %>.write("/* 81 */  \r\n");
fw_<%=cid %>.write("/* 82 */  	APPLY\r\n");
fw_<%=cid %>.write("/* 83 */  		(\r\n");

<%
StringBuilder insertColSQL = new StringBuilder();
StringBuilder insertValueSQL = new StringBuilder();
if(columnList!=null){
	String columnName = "";
 	for(IMetadataColumn column:columnList){	
 		columnName= column.getOriginalDbColumnName();
 		if(insertColSQL.length()>0){
 			insertColSQL.append(",");
 		}
 		insertColSQL.append(columnName);
 		
 		if(insertValueSQL.length()>0){
 			insertValueSQL.append(",");
 		}
 		insertValueSQL.append(":").append(columnName);
	}
}
%>
fw_<%=cid %>.write("'INSERT INTO "+ <%=dbname%> + "." + <%=table%>+" (<%=insertColSQL.toString()%>) VALUES (<%=insertValueSQL.toString()%>);'\r\n");




fw_<%=cid %>.write("/* 85 */  		)\r\n");
fw_<%=cid %>.write("/* 86 */  	TO OPERATOR\r\n");
fw_<%=cid %>.write("/* 87 */  	(\r\n");
fw_<%=cid %>.write("/* 88 */  		" + <%=operatorLoad%> + "[1]\r\n");
fw_<%=cid %>.write("/* 89 */  \r\n");
fw_<%=cid %>.write("/* 90 */  		ATTRIBUTES\r\n");
fw_<%=cid %>.write("/* 91 */  		(\r\n");
fw_<%=cid %>.write("/* 92 */  			UserName = '" + <%=dbuser%> + "', \r\n");
fw_<%=cid %>.write("/* 93 */  			UserPassword = '" + <%=dbpwd%> + "', \r\n");
fw_<%=cid %>.write("/* 94 */  			LogTable = '" + <%=table%> + "_log',\r\n"); 
fw_<%=cid %>.write("/* 95 */  			TargetTable = '" + <%=table%> + "', \r\n");
fw_<%=cid %>.write("/* 96 */  			TdpId = '" + <%=tdpid%> + "'\r\n");
fw_<%=cid %>.write("/* 97 */  		)\r\n");
fw_<%=cid %>.write("/* 98 */  	)\r\n");
fw_<%=cid %>.write("/* 99 */  	SELECT * FROM OPERATOR\r\n");
fw_<%=cid %>.write("/* 100 */  	(\r\n");
fw_<%=cid %>.write("/* 101 */  		" + <%=operatorDataConnector%> + "[1]\r\n");
fw_<%=cid %>.write("/* 102 */  \r\n");
fw_<%=cid %>.write("/* 103 */  		ATTRIBUTES\r\n");
fw_<%=cid %>.write("/* 104 */  		(\r\n");
fw_<%=cid %>.write("/* 105 */  			FileName = '" + <%=loadFile%> + "', \r\n");
fw_<%=cid %>.write("/* 106 */  			Format = 'DELIMITED', \r\n");
fw_<%=cid %>.write("/* 107 */  			OpenMode = 'Read', \r\n");
fw_<%=cid %>.write("/* 108 */  			DirectoryPath = '', \r\n");
fw_<%=cid %>.write("/* 109 */  			IndicatorMode = 'N', \r\n");
fw_<%=cid %>.write("/* 110 */  			TextDelimiter = '" + <%=separator%> + "'\r\n");
fw_<%=cid %>.write("/* 111 */  		)\r\n");
fw_<%=cid %>.write("/* 112 */  	);\r\n");
fw_<%=cid %>.write("/* 113 */  );\r\n");

<%//write script to file-------------------------------------------------%>
fw_<%=cid %>.close();

<%//run tbuild (TPT) command----------------------------------------------------%>
<%if("true".equals(defineCharset)) {
	if(!("".equals(charset))) {%>
String sb_<%=cid%>= new String("<%=(("Windows").equals(execution))?"cmd /c ":""%>tbuild -f "+<%=charset%>+" \""+<%=scriptPath%>+<%=table%>+".script\" > \""+<%=errorFile%>+"\" 2>&1");
<%}} else {%>	
String sb_<%=cid%>= new String("<%=(("Windows").equals(execution))?"cmd /c ":""%>tbuild -f \""+<%=scriptPath%>+<%=table%>+".script\" > \""+<%=errorFile%>+"\" 2>&1");
<%}%>
final Process process_<%=cid %> = Runtime.getRuntime().exec(sb_<%=cid%>); 
Thread normal_<%=cid %> = new Thread() {
    public void run() {
    	try {
    		java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(process_<%=cid %>.getInputStream()));
    		String line = "";
    		try {
    			while((line = reader.readLine()) != null) {
    			   System.out.println(line);
    	        }
    	    } finally {
    	         reader.close();
    	    }
        }catch(java.io.IOException ioe) {
    		ioe.printStackTrace();
    	}
    }
};
normal_<%=cid %>.start();

Thread error_<%=cid %> = new Thread() {
	public void run() {
		try {
			java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(process_<%=cid %>.getErrorStream()));
			String line = "";
			try {
				while((line = reader.readLine()) != null) {
					System.err.println(line);
				}
			} finally {
				reader.close();
			}
		} catch(java.io.IOException ioe) {
		   ioe.printStackTrace();
		}
	}
};
error_<%=cid %>.start();

process_<%=cid %>.waitFor();

normal_<%=cid %>.interrupt();

error_<%=cid %>.interrupt();

globalMap.put("<%=cid %>_EXIT_VALUE", process_<%=cid %>.exitValue());

<%
if(returnCodeDie) {
%>
	if(process_<%=cid %>.exitValue()>=<%=returnCode%>) {
		throw new RuntimeException("TPT returned exit code "+process_<%=cid %>.exitValue());
	}
<%	
}
%>
