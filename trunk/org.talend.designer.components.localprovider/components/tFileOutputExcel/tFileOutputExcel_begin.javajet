<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.metadata.IMetadataTable
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.metadata.types.JavaTypesManager
	org.talend.core.model.metadata.types.JavaType
    java.util.List
    java.util.Map
" 
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();
boolean version07 = ("true").equals(ElementParameterParser.getValue(node,"__VERSION_2007__"));
	
boolean useStream = ("true").equals(ElementParameterParser.getValue(node,"__USESTREAM__"));
String outStream = ElementParameterParser.getValue(node,"__STREAMNAME__");

String filename = ElementParameterParser.getValue(node, "__FILENAME__");
String sheetname = ElementParameterParser.getValue(node, "__SHEETNAME__");
boolean firstCellYAbsolute = ("true").equals(ElementParameterParser.getValue(node, "__FIRST_CELL_Y_ABSOLUTE__"));
String firstCellXStr = ElementParameterParser.getValue(node, "__FIRST_CELL_X__");
String firstCellYStr = ElementParameterParser.getValue(node, "__FIRST_CELL_Y__");
boolean keepCellFormating = ("true").equals(ElementParameterParser.getValue(node, "__KEEP_CELL_FORMATING__"));
String font = ElementParameterParser.getValue(node, "__FONT__");
boolean isDeleteEmptyFile = ElementParameterParser.getValue(node, "__DELETE_EMPTYFILE__").equals("true");
boolean isIncludeHeader = ("true").equals(ElementParameterParser.getValue(node, "__INCLUDEHEADER__"));
boolean isAppendFile = ("true").equals(ElementParameterParser.getValue(node, "__APPEND_FILE__" ));
boolean isAppendSheet = ("true").equals(ElementParameterParser.getValue(node, "__APPEND_SHEET__" ));

List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
    IMetadataTable metadata = metadatas.get(0);
    if (metadata!=null) {
    	List<IMetadataColumn> columns = metadata.getListColumns();
    	if(!version07){//version judgement
%>
		int nb_line_<%=cid%> = 0;

<%
		if(!useStream){ // the part of the file path
%>		
		java.io.File file_<%=cid %> = new java.io.File(<%=filename %>);
		
<%
			if(("true").equals(ElementParameterParser.getValue(node,"__CREATE__"))){
%>
//create directory only if not exists		  
          java.io.File parentFile_<%=cid %> = file_<%=cid %>.getParentFile();
          if (parentFile_<%=cid %> != null && !parentFile_<%=cid %>.exists()) {
             parentFile_<%=cid %>.mkdirs();
          }
<%
			}
		}
%>		
		
		jxl.write.WritableWorkbook writeableWorkbook_<%=cid %> = null;
		jxl.write.WritableSheet writableSheet_<%=cid %> = null;
		
		jxl.WorkbookSettings workbookSettings_<%= cid %> = new jxl.WorkbookSettings();
        workbookSettings_<%= cid %>.setEncoding(<%=ElementParameterParser.getValue(node,"__ENCODING__") %>);
<%
		if(useStream){ // the part of the output stream support
%>
		writeableWorkbook_<%=cid %> = new jxl.write.biff.WritableWorkbookImpl(
            		new java.io.BufferedOutputStream(<%=outStream %>), 
            		false, workbookSettings_<%=cid %>);
<%
		}else{
			if(isAppendFile){
%>  
        if (file_<%=cid %>.exists()) {
        jxl.Workbook workbook_<%=cid %> = jxl.Workbook.getWorkbook(file_<%=cid %>,workbookSettings_<%= cid %>);
        writeableWorkbook_<%=cid %> = new jxl.write.biff.WritableWorkbookImpl(
                	new java.io.BufferedOutputStream(new java.io.FileOutputStream(file_<%=cid %>, false)), 
                	workbook_<%=cid %>, 
                	true,
                    workbookSettings_<%=cid %>);
        }else{        
		writeableWorkbook_<%=cid %> = new jxl.write.biff.WritableWorkbookImpl(
            		new java.io.BufferedOutputStream(new java.io.FileOutputStream(<%=filename%>)), 
            		true, 
            		workbookSettings_<%= cid %>);        
        }     
<%
			} else {
%>
		writeableWorkbook_<%=cid %> = new jxl.write.biff.WritableWorkbookImpl(
            		new java.io.BufferedOutputStream(new java.io.FileOutputStream(<%=filename%>)), 
            		true, 
            		workbookSettings_<%= cid %>);
<%
			}
		}
%>       

        writableSheet_<%=cid %> = writeableWorkbook_<%=cid %>.getSheet(<%=sheetname %>);
        if(writableSheet_<%=cid %> == null){
        	writableSheet_<%=cid %> = writeableWorkbook_<%=cid %>.createSheet(<%=sheetname %>, writeableWorkbook_<%=cid %>.getNumberOfSheets());
		}
		
<%if(!useStream && isAppendFile && !isAppendSheet){%>
        else {

            String[] sheetNames_<%=cid %> = writeableWorkbook_<%=cid %>.getSheetNames();
            for (int i = 0; i < sheetNames_<%=cid %>.length; i++) {
                if (sheetNames_<%=cid %>[i].equals(<%=sheetname %>)) {
                    writeableWorkbook_<%=cid %>.removeSheet(i);
                    break;
                }
            }

			writableSheet_<%=cid %> = writeableWorkbook_<%=cid %>.createSheet(<%=sheetname %>, writeableWorkbook_<%=cid %>.getNumberOfSheets());
        }
<%}%>

        //modif start
<%if(firstCellYAbsolute){%>
		int startRowNum_<%=cid %> = <%=firstCellYStr%>;
<%}else{%>
        int startRowNum_<%=cid %> = writableSheet_<%=cid %>.getRows();
<%}%>
		//modif end
		
		int[] fitWidth_<%=cid %> = new int[<%=columns.size()%>];
		java.util.Arrays.fill(fitWidth_<%=cid %>,2);
		
<%if(font !=null && font.length()!=0){%>
		
		jxl.write.WritableFont wf_<%=cid%> = new jxl.write.WritableFont(jxl.write.WritableFont.<%=font%>, 10, jxl.write.WritableFont.NO_BOLD, false);
        jxl.write.WritableCellFormat format_<%=cid%>  = new jxl.write.WritableCellFormat(wf_<%=cid%>); 
<%}%>

<%
    	for (int i = 0; i < columns.size(); i++) {
    		IMetadataColumn column = columns.get(i);
    		JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
    		if (javaType == JavaTypesManager.DATE){
    			String pattern = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
    			if(pattern != null && pattern.trim().length() != 0){
    				if(font !=null && font.length()!=0){
%>
    					final jxl.write.WritableCellFormat cell_format_<%=column.getLabel() %>_<%= cid%>=new jxl.write.WritableCellFormat(wf_<%=cid%> ,new jxl.write.DateFormat(<%=pattern %>));
<%
					}else{
%>					
						final jxl.write.WritableCellFormat cell_format_<%=column.getLabel() %>_<%= cid%>=new jxl.write.WritableCellFormat(new jxl.write.DateFormat(<%=pattern %>));
<%	
					}
				}else{
%>
		if(true){
			throw new RuntimeException("Date pattern must be set for column <%=column.getLabel() %> in the schema of component <%=cid %>!");
		}
<%				}
			}
		
	    }
%>		


<%
if(isIncludeHeader){
	if(isDeleteEmptyFile){
%>
	boolean needDel_<%=cid %> = false;
<%
	}
	if(firstCellYAbsolute){
%>
		if (startRowNum_<%=cid %> == <%=firstCellYStr%>){
<%
	}else{
%>
		if (startRowNum_<%=cid %> == 0){
<%
	}
%>
	//modif end
<%
	for (int i = 0; i < columns.size(); i++) {
		IMetadataColumn column = columns.get(i);
%>
		//modif start
<%
		if(firstCellYAbsolute){
%>
			writableSheet_<%=cid %>.addCell(new jxl.write.Label(<%=i%> + <%=firstCellXStr%>, startRowNum_<%=cid %>, "<%=column.getLabel() %>"
<%
				if (font !=null && font.length()!=0) {
%>
					,format_<%=cid %>
<%
				}
%>
			));		
<%
		}else{
%>
			writableSheet_<%=cid %>.addCell(new jxl.write.Label(<%=i%>, nb_line_<%=cid%>, "<%=column.getLabel() %>"
<%
				if (font !=null && font.length()!=0) {
%>
					,format_<%=cid %>
<%
				}
%>
			));
<%
		}
%>
		//modif end
		fitWidth_<%=cid%>[<%=i%>]=fitWidth_<%=cid%>[<%=i%>]><%=column.getLabel().length()%>?fitWidth_<%=cid%>[<%=i%>]:<%=column.getLabel().length()%>;
<%
	}
		if(isDeleteEmptyFile){
%>
		needDel_<%=cid %> = true;
<%		}%>
		nb_line_<%=cid %>++;
	}
<%
}
%>
		
<%	
		}else{ //version judgement /***excel 2007 xlsx*****/
%>	
		int nb_line_<%=cid%> = 0;
		org.talend.ExcelTool xlsxTool_<%=cid%> = new org.talend.ExcelTool();
		xlsxTool_<%=cid%>.setSheet(<%=sheetname%>);
		xlsxTool_<%=cid%>.setAppend(<%=isAppendFile%>,<%=isAppendSheet%>);
		xlsxTool_<%=cid%>.setXY(<%=firstCellYAbsolute%>,<%=firstCellXStr%>,<%=firstCellYStr%>,<%=keepCellFormating%>);
		<%if(!useStream){%>
		xlsxTool_<%=cid%>.prepareXlsxFile(<%=filename%>);
		<%}else{%>
		xlsxTool_<%=cid%>.prepareStream();
		<%}%>
		xlsxTool_<%=cid%>.setFont("<%=font%>");
		<%
		if(isIncludeHeader){
			if(isDeleteEmptyFile){
		%>
		boolean needDel_<%=cid %> = false;
		<%
			}
		%>
		xlsxTool_<%=cid%>.addRow();
		<%
			for (int i = 0; i < columns.size(); i++) {
				IMetadataColumn column = columns.get(i);
		%>
		xlsxTool_<%=cid%>.addCellValue("<%=column.getLabel()%>");
		<%
			}
			if(isDeleteEmptyFile){
		%>
		needDel_<%=cid %> = true;
		<%		
			}
		%>
		nb_line_<%=cid %>++;
		<%	
		}	
		%>
<%
		}
    }
}
%>
