<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:osgi="http://www.springframework.org/schema/osgi"
		xmlns:jaxrs="http://cxf.apache.org/jaxrs"
		xsi:schemaLocation="
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
			http://www.springframework.org/schema/osgi http://www.springframework.org/schema/osgi/spring-osgi.xsd
			http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd">

	<!--import resource="classpath:META-INF/cxf/cxf.xml"/-->
#if ($endpoint.useSAM)
	<import resource="classpath:META-INF/tesb/agent-osgi.xml" />
#end

	<jaxrs:server id="service"
#if ($endpoint.useSL)
			xmlns:tns="${endpoint.serviceNamespace}"
			serviceName="tns:${endpoint.serviceName}"
#end
			address="${endpoint.address}">
		<jaxrs:serviceBeans>
			<ref bean="serviceBean" />
		</jaxrs:serviceBeans>
		<jaxrs:providers>
			<ref bean="wrongCallHandler" />
			<ref bean="jsonProvider" />
			<ref bean="dom4jProvider" />
#if ($endpoint.useHttpBasicAuth)
			<ref bean="authenticationFilter" />
#end
		</jaxrs:providers>
		<jaxrs:features>
#if ($endpoint.useSAM)
			<ref bean="eventFeature"/>
#end

#if ($endpoint.useSL)
			<bean class="org.talend.esb.servicelocator.cxf.LocatorFeature">
#if (!$endpoint.slCustomProps.isEmpty())
				<property name="availableEndpointProperties">
					<map>
#foreach ($entry in $endpoint.slCustomProps.entrySet())
						<entry>
							<key><value>${entry.key}</value></key>
							<value>${entry.value}</value>
						</entry>
#end ## end SL custom properties loop
					</map>
				</property>
#end ## end not empty SL custom properties
			</bean>
#end
#if ($endpoint.logMessages)
			<bean class="org.apache.cxf.feature.LoggingFeature" />
#end
		</jaxrs:features>
	</jaxrs:server>

#if ($endpoint.useHttpBasicAuth)
	<bean id="authenticationFilter" class="org.apache.cxf.jaxrs.security.JAASAuthenticationFilter">
		<property name="contextName" value="karaf" />
	</bean>
#end

	<bean id="serviceBean" class="${endpoint.jobClassName}.RestServiceProviderImpl4TalendJob">
		<constructor-arg ref="job" />
	</bean>

	<bean id="wrongCallHandler" class="${endpoint.jobClassName}.ExceptionMapper4TalendJobRestService">
		<constructor-arg ref="serviceBean" />
	</bean>

	<bean id="dom4jProvider" class="org.apache.cxf.jaxrs.provider.dom4j.DOM4JProvider" />

	<bean id="jsonProvider" class="org.apache.cxf.jaxrs.provider.json.JSONProvider">
		<property name="ignoreNamespaces" value="true" />
		<property name="supportUnwrapped" value="${endpoint.wrapJsonRequest}" />
		<property name="wrapperName" value="root" />
		<property name="dropRootElement" value="${endpoint.unwrapJsonResponse}" />
	</bean>

	<bean id="job" class="${endpoint.jobClassName}" destroy-method="destroy">
		<property name="runInTalendEsbRuntimeContainer" value="true" />
#if (!$endpoint.jobDataSources.isEmpty())
		<property name="dataSources">
			<map>
#foreach ($alias in $endpoint.jobDataSources)
				<entry key="${alias}">
					<osgi:reference interface="javax.sql.DataSource" filter="(osgi.jndi.service.name=${alias})" />
				</entry>
#end ## end data sources aliases loop
			</map>
		</property>
#end
	</bean>

	<osgi:service ref="job">
		<osgi:interfaces>
			<value>routines.system.api.TalendJob</value>
		</osgi:interfaces>
		<osgi:service-properties>
			<entry key="name" value="${endpoint.jobName}" />
			<entry key="type" value="job" />
		</osgi:service-properties>
	</osgi:service>

	<!-- Wiring the counter repository -->
	<bean class="org.apache.cxf.management.counters.CounterRepository">
		<property name="bus" ref="cxf" />
	</bean>

</beans>
